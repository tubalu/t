--Macros--
IB_MAX_CFLOW_START = IB_MAX_CFLOW_START or function() end
IB_MAX_CFLOW_END = IB_MAX_CFLOW_END or function() end
IB_INLINING_START = IB_INLINING_START or function() end
IB_CRASH = IB_CRASH or function() end
SX_VM_CNONE = SX_VM_CNONE or function() end

--NO_COMPILE_START
if false then --anti accidental copy/paste to in-game textboxes
	run_secure_lua("r1PZsW+jJV5llEfKYBMi8c9aVqnyoyBUQb5Yhn2F8i2JZc7r9OJlnecafmmN9HqbQG0VW7Vr9djoRgviY5puXQrxB5XpPi0I31ZVgRSCkOsS14FwCs9rFwxWEzdUBzs0Kh7D4U85NCbJFy9tE7R/0Mu0l2BVr/UK+Ve28zU5GVCIwNWOPUC5s18SfL+mUd178n5AXI2sGRgAsDkBI6kH0aBeMKdpv2Fg4d6L5I5kAZ13VnVKhoVX8J86EYJo71FI0PTTyECAivg8QT2wHSeIDviFGPwl9phMnBt1O9jO2zRACWpbTu6xzJ+yPPplpzgOOYxcOm9rHJVEmYuvsSwu0kGl3dOvCOljHBWgZRacO67xo4NnpSl74ABPEyx7x2ViMSPm9o5jIRVbMNTwZw9XQSM9Vx7hY5FdDwm9uDL37lb0WbxBJC1cE4BXD9Ruh+ZKu6BUXA4PY+tBLEGn+80cQWtSq0sVyVa5WU2dAh+agZ7TI0cZcCmLj6DfRwEz3JOjr9cIi0zGo+Rc+xKpbRPPbk1u36ZifaKjISIEXZDbs+fnwJ3L9BmhqwyQSGSR9hUCCl0f50fKA/sWuYZ3HKeqK020douWNUHYFY0qrs7YQUc/PSTguT+YSN78u9WL8wtnsgsoqBCnSU+I6QPnedtjpoyIy8SntUD3CG2mj477yVWwvEylaGqJIorx2HMocStUpMktKqdzH3y8KfHtb6RKqAdxpY1FOpcmF0M6HgC57O7pZM+2uzoqmuAAQoTtAr9TyJ5QGvG/9amokQNnYNhYrmm0kvfkJnwEHh4/g9BPFONgtDHlH3yMlbXCNuYQE1bDtm7s+uyb0GQ/DWccYEg+qYPFnPZWbixC9aXiStEFl2pQfScvC4UP+RUCOueMdrZULht/9o2quU9IKYmjW/R9VIaqdJ6JxTGWn6qoX/YDTUuKHumKyoAJQA2EyqfzFnfp7SOzEM7R85kAixLczyEuFm7PYU+eS3BigTyC3fXYBYLr1V7+338LAjJd2TudU3jNoARu83LhV12sM1senxLo+Y9jWeVRCsxffAk2oltqhcbkh6VqD68GW6V+YkooafGF6OpDXEia4ojeMes4vOrwwRx7ovPPfVVwqJfYE002LWeGkDpIpb4SIwd0CK1cYQwKveXSkygBk0rkphO0qrrOnuNkV2A+KDlNjXe3aRwl7JlJYaElxvaEgme4rncvPknYpig8s/4XaBVpUgv4GZxWq1FfmlBN3a/GqHqMXlKgDaBlyPs1qaxVVTzjmzeq29cs3daoZch9wUqbjjqcVOcs3jLJSO6+l2C6t/7sTEvEap1vMYPIhGZSYk0gLljgggRRAK5v4+UZde0BUEMWCZK4UCdovl9/n4mzNblbYqEH+xk+nTrV62j1IBtO+F57e4coli6fClmGRu5NZKc4yx+UnPLN86JZDGELn+22Hsv5hxls2jpHyfOQnSclTvlGpdbUFTc1HBlg8PaDNvi0dkj0DnktQR1+AUDpkbUyQB5VMZ1kSBbR3VxHo6ESC4GFAXJoYrsWRe7OzaiC7RDNz8goEnuleKz/Z6kXYFlZkqr1tCXoq3hLqW5E0UBHw3MbTauDYLAqhEl9HyRkm/BktUDGwCKZRzpHfQ0KCsL+b3ZFJWkfjK6ychbv0919t5EgiVE6Z1x8YCVw5tqXpcuA4iSM6VDU2nyb3jk3z3l1eHIRsCOZPamh0diLVXXYUtINsK8YDZrtNJT3DcrqOUkE+iXTlKzCwN5XHta5FCmb1VRCacCilMiFDXBvefYJzc5UhgQFdbxAFRjYaHx+IcudaAAy+w7BK8PzPb3Slq34ssTDKy83iGA1X3o98GD4tsjnAFFQQlAzNo2ZzIhBW71IQa4dzyW9oVEeH0nQk9W81+C1Q7v7XlwndlM0un7vTOAaftz2MXthYHcOx5PDBo+XKcB3qzOzxhnhfE8QsghF93R+tnXuVzRKvkHXznCGGtEtuk+kGGhd9WRYcN17xm52jjo7Ejs6yFYdnRgAZ9tk0mHInKZBPyZCqSvaO6psadQaYqnMlzBlPO37fr7BhzWIPwu3RaYn+WCyQ7BA4Zuhk8efsBT03E8TGDC8PvEvc8YSJKBYtA70U3j1gywBHrRCkAcIhO716eMUEV2W5GjOR5iIGeu6i8lxi2Hh/0afZRXDjrI8xVhHL9LZLk8heCekh/+RA7tjkeoJvTnp0fIuz1ZgHW4HnqxAZ4aIaemdZDS0ZCcxLaEJ+Fx8jmsLg9vWugVHRH4H5EJ1S08Rr3YY+8d/3LCCy8seT6pqNR6XehsNqNuXOHbYMjDbAfTmGG+TRRNCpoyalhY5s6LdXTCWWP6ExkiVU16FfRhYPmkvKqtEK+IW3KMnuyxB8yyrl9pqtfGDiwh2TQTyGjYMERxiWFrMuaAt2/Q46cmMcZ7a9EJsjuNgiuBh2G/aNYLbmAQTJurNLKI5QBMj5cqsf7+EYU5jmKq3fuTDUDnuL1/qqaK6LMr/YDGXASCZXUJGQNVhGhCeuZvtT2ZrukQ2vTbY1SS+8g8qwKYnDI3toQHgteGNySgvcyTWXVsVD1eDRUXcWOGzNDUATBMGMU/bFltaqPd1/S0vCnC6fu49fHB3mWu6a9A5NvIekNd9/ZJlUERXMjVVbJY212whBAKhS8IVrWL3IcLPmyMhEfqfc9o3VVa6RrbSdg9Z2+X0f1jJHqlai0vtz0GP3FOKheMc7I1thwiD1JVJpa6bdKuVXnNNC0pzuVGod3i0ib9IU9Im/DIw1o2KiXIMRyfcQOXxruopDDT30ZAwbkcmrOcPT633vHViJJE636qbWuea+PPl5Z8rQ5GXz5YRfflhXMJKSU/+pXImt7gw0e5uubyLKKj38asm55QefQXvt4SUtCNCG5c7Qav5HRIA4c2cbnV9mc8GshjnkwUG2rlslRNUsIj/pv7izZ+0R0irruffkhJKO8tbOE0sVvoPHPo5o1ISfOaffapVngInPj7IE2TIsMzW7wxJEK/MFABEnas+KvIP+xHSQc8BdyJuNLVwnbKzN4wrzmoDF3l6ZmIfI5HMYL4gW9oblWf5y7yPPUIvvWpn01PZerspce20+lcdMXuQz2WHTwIXfGnrG9lqDD8LUhf89QK0a0mXSgVlzXoxdcHHGxw6twIAh8MVKdfu2ye/7gUs48+zhqcoen+capLpZYQg1kCepdkT0V5lXaEaTCsQ8pT38GoyTs89MdGy/6sL/pxAWNYfsdbky/RRL4ibW7pmNYp6mN5mEfi3SIpa1mNFxMwk59IgE3GC5/Qy8PbLN6zt6sYIeFGhA3gw0VFu6wE+5U3LfgIf0kuggyKeI37DqwuJGMUOcWyY0rt8Fxdno0ii5kaIsdnZ4/CecBRq8zqpgY7BREWpr2Il8soRrGLwS8KrI5ZVRs8yGFHQhvGp1ifGemAPZDg9hO+bTDwVmt7/y9O2Qeq/cLyfME4leHxpA0azIw+Hw8gPUSBWB+exfTlaU2N5zONI1H2+B3Xh4gr/gg+ObxOlVxjNc2dzlKikNLAgL9Ddn51WPQwmWLbatpixB20HsXQ/F4xfn7384jwDSlZlCRf/5hkPzH9/3p06zb+E2ISP9hoQWuzfwV1RSepY3LKs7WYnSVig74/44M1gGE56NfQk9iikHFBANkfVXZICoBVw9YyssDPIdW4GkTYi8D+KPKXZgOgk8NrnWHAiyzYFGakIZg3RzLunyxUrVEBBksTMYJO3I99pFFM7E9GV3ydttqVfwCamxOAbRPKtp/8iunJZIoNpsCCvXur+Ozl3TcmukLPmO53zTRjh9TXv21Uh4YdEryMG9kIX8O472AmXoZ2/YSONLb7PHqjBGFkwYM8KxoUmShiAx/cyBccrWSFmstml9GG93wfXpXU6LcjjIfO6jxIqTfz+MXbW1+WI03xhltzAzrfy9TD755BXKbZJ8A9CcJ36pB4d2O95IRFtDPUVhP62CHziUN+cRCAyANkgLAwUdNw06rdi2zPomlGhCtlg9oBH0S6Af8RCS8XrTL1I26UprFsD8jt9tMOj8RbSvnB9TQmS7wRC+8IrwVKXG9CnSB5VuyshPM5zDBuPyu1gWtN/87CiCJ8rsFqnLlWxgQrtO2TO5J0HYQz/PABDamBkWsKvO1dezb+R71uCFmmcG8awFXt86GWOeuxZ+NCluoI3L5mNhIkrHzwRdn4srLnnpKAkMWcNuW7dJvWYob63OC0iZX+45K5yuby3xW6loN782x7F42BllWsz2xhr50wK+Gs/3H/d00nk4/aUeti2ElP+DX2ap97IaTzKpI5JSeG59mADLvd20Z3MrZ5S9JbU5/DfgLrpBN+AdSTn68Rvyyq9TL29xlaghVxZF34E7w2z6yeHXngGqcFnMAZeLP1rpHXa/1navjgQGG+XSAXrBKtcmcb0rjLaEUr9chASVtk4+pafc3wO9nC0Dz4+EqPlVZrgSsxKXE7dNogLWR3vChS+RNYyKN7nwhQWo0a8/pXMOy7AXDXU+RAYESx129grEiYg/iyZ8aOa1jR3tG4HvjKhdwJ7IHw+4rMD/Vxf2iJiH8IoWkLss4oP0zUTJF8KQxxUlnwixTkQ6Yd1ogkuxZ4yBwbozSaCFkwURfe0i8Za6X8WLCZ0+RHqJjlPL1BdkoR2Gx6snb4i+X0GWTs0kOMmTRXEcfMFBDwY3BSaZibPELgU/CyozPQ0DuQxjzu0czQUdmSP+UzI9YhB6IA0eKMVay0haajctV7ddrszrdg4fdULnPKw4+G9FyEH5D758YVSMROIOIYrzYFSkoKJsA51NyVEjjhZ8FRgp1Hdg69r/6gc88S61NR24Nr+j+8iYpjPXqzeQtgEa6owqDy8U+HZTXDPGA6NhqL2pmF1vd9ry3KvLnroQppJx5fAzgF5HxZ6Nu+3dYd1T/6ufG7saNzLzXDVNqsNrJ0o0EQbosK4M13ZHoC98vSDTx5769xaOsM5Mi/r3Wa2lGIwO2RE3WiFro/TRG6Rnsct+hUKj3nI6nolUAehaQCOqz0U2/a05Tqzbf0UdrbSB8VTptp+bpqqcirXVIo7UeyBz4599NUWHW+vZlPMx94IM6FOPN4NK1UPdENi4rFtt+r5u51qPlSGbYEKTPOW2hc+s+zSgPJO9T0IWf7c37oyfBn326Zc01Y3A8Cso8t4VAvT8dHDBLoRgJyXjPqEOt+CG/lQrp2hzbySrui7b+aIKwD6s0sGA2ZpyuCvAiJM/9Vf51qe1urGYt3Y17IwH4YeiTTDYvsL2XsJ/kiohtHhysdLSV1YLIKfbC3E9Rlhcm/+uoKRPFCpmVNMTMQE0tRpQWbwjf8CmLhUuj0V4AFRq2ocXrn/pIkdGI1QZmpG7ysmp3dffmt/UGlTR9LiR7cFDJbQFv4uqnn/KqzVyBj46vbWjpwGwbt9i04vihhC8li/zC3nPdXclhWNhukXQ00JQjO+xYCEhT9N05NHhSnMOj+hmrfwxF/9xuGPO84wKj1+Tqc9A+s2UkgzBNRCLJHGyZISUF5Osz95OgcgNPCSneLBuByrZ9UaUblatOjt9xP2lUGmPEYEQxOdZwkYI9PKGkvsNlYUbD4AEuaDtO6c4rUOzon9ajoj2iTRve/CuR0V1Bc2DAbBxkREL8vvRcmUx/S0RnBO9AQ3fCIiZrqZ2iwaVGgl89I8mlnJ2xi8f8u90WCqMjPmtGNFTb4JN2n5q9Sdcc6RlS5oI8XPARv86egnbrLKnaJau8mzcDrfrw78wuPe7HH7ubjUocFG74IeWi1WTvT0DUiCcddRu6PBDKkZWGqzU27gSa2ajYQripv3iAqDZ0SAwDb0dHH9ZFb21x6FfHZZzzYX6AKowRTuqLXxUIFKNzRtAEDO/TwKuKQ96WfC47zxvE5s5ksFZAl4LwNIVGot25svFWB7fCzoV3jQ5SAV9/8BPqnIPnhvXnOd8Tq4U5k600HOwq4KWnwVJrWDNgzUl+V1m7qqZe9StaRB79k0DfFvqc0xwDzzDNw7o7qpe/ABY0nMeVHXHX3jeA1Kqjkc3vEmWmb+aA+9G8hx1P2iK2isVPtJrTem4uMxB5GStcxGGYK6/SbGsvfweW73/GuPxlA0WcFBsFTPexOX3Rz5LFxQ4sB+u6I2d1ZfIrWt2cw36HffIp3I4HjcDVcyCM86fAz5IGZIdCRDg8cS01sP8rWuJumfI9hknF1UY0b5cG9nyX5YhIBR6o5tNZbuIpFWluzlOxaJBhjl/a8FRzpaiFzxOvE8G4JrZHN/KFPAQEYHEFXPDSEk3y+xt6crOykctiSdKxAEygvi2sRHNt4ZTXqnNvg7bc5fvu1qypWGEnse3YWpCn/E1harMHDsu4o5BEAoPWeIg6S4YbrZl85hvfPkzFl+ElgOuBV9mS2WDciC5zmmdxYHAstNeg9x4CyYurdLkWufXEWL6ikg1lpAz4w0F6yRZnb/AQLY7m+CXuforU4mKF6d7Wl/373EvGeaCzwixo2DXLXYoVhJrhX3endVfuaRePl7VrvWoTjdAGMhBiRJznCQQDvupg3WR9K64AI0LfS8GnKW14OoL6eZ5lQIiHg/bc22ymzbe1uxNObbXpJ0WsRUWL0xoSDoaL0fLgtShpmjklI3oX+TSTLuYRMSIBFe6XCFSsC3AG9CZiOAhLnzkZYBdARKvBpiKkH4ojPG5AnoBYNC6vISWUfchclpLL9MX0RxNMyUj6MC4mb06bMGWywT6pYtDW1PWAdl01ewwR79sXmE3Jmi/t/OlxlrkL1e1+em+IY9uaTA2Ow3sCEl/xutMEi0nTGuB8V8lReb1wPXjyLbPzNCtEQOWwv0Wa1wM5yFWEj4h84RayeZJjYQvT9bCQyRQuo6H3pfTwu2EhgRcFGurXe2UPRWlj3WI44pjhOauzBpslimATUCFJV/DQst3GpoHoUmWMV9yusyOYDc3wZjrUIthxihAMB8j/0GQcg7hNDqwtTf5L6HdaIBL3IiUfb9VdWEm0aEGsfX8Ge0r2qRd4ezXNlMUlAYwTPlSgM9JrxLpAmN06/shKAHc4nIJNvFrsBlWq47MY1f4a7lsXHqymTXraJYigT5KlGN4uVTPju4eHxcc7l+FMPxBbGpg+meFM6XSJ6v3Mfh4KI6ROdORq1b+xuxPHCLOdGev53T25icU3r3bdTnlIYcKCkG9zf9CycAXdHk4hpPqzIfMvXQgw1BIGlAR4DxesqxWytNL3i2H4RhQ9+KjcI2BhMcpXW/nVbBVEwbTjuQrR6ilxVhyzg+fsRCJXkbY2y4vmHOcqK43aLEa0Csmw2TU0zefHdiHwBSSvRtWPN7GUw4cSlygYeEd5wyAsVjT09HajysDEm9siJMP9INAJwkgl5ZNkzRd4ALEJpmVC5c32Af9pj8FB4BrdfO2pe9u5LJ2O8NI1r/UCo39CpQnaaO1W5L0LYdfmQy0NgRpmxve+0MPTYq9HfKUcHYBKmQPvSE3sO6Bdn3S0uxjf5wmpRQ1gwCVTdxrKGYpfFc14U5f3iDpAWcs15so6SOdErAXDQZJFVd0edScZYjlORoMEtSuw86q4GHYsYbTIet2xAz0uws0lCQWHxVoYb+ct+ZQDLPxIVYvsX+6UmKXgwybtkCmeZA6AzgCYaDhGFw02wubRtyx10GtGdnKzW4LcSGT8D6Sllj0ns8X56u/RxHBwPa1ycKgfMiA3KwEI0L9NzxDLSetIHlf1ZQTUGxtrvxCnKEBsAx1RVtQB7ntm0snoH+djQc0dZtwzpRUG1p4yGomMLQN1rPnDQLxhj9JJJ31mopc0g0o3V7U+9Nx1b9Inokitolcwr6RaTaJZxax2U31WNlxZqQWfLf03M2TF9M0z3+nq/pvP66JnG+HVAU2hfzhpUN/sCql6zXiAxNsUuILSYlmEqwYawhxwoF8jdb9IbhkWLrhGkN3iJohK5BUMEIxTI+WIHM845cTw==")
	run_secure_lua("r1PZsW+jJV5llEfKYBMi8c9aVqnyoyBUQb5Yhn2F8i2JZc7r9OJlnecafmmN9HqbQG0VW7Vr9djoRgviY5puXQrxB5XpPi0I31ZVgRSCkOsS14FwCs9rFwxWEzdUBzs0Kh7D4U85NCbJFy9tE7R/0Mu0l2BVr/UK+Ve28zU5GVCIwNWOPUC5s18SfL+mUd178n5AXI2sGRgAsDkBI6kH0aBeMKdpv2Fg4d6L5I5kAZ13VnVKhoVX8J86EYJo71FI0PTTyECAivg8QT2wHSeIDviFGPwl9phMnBt1O9jO2zRACWpbTu6xzJ+yPPplpzgOOYxcOm9rHJVEmYuvsSwu0kGl3dOvCOljHBWgZRacO67xo4NnpSl74ABPEyx7x2ViMSPm9o5jIRVbMNTwZw9XQSM9Vx7hY5FdDwm9uDL37lb0WbxBJC1cE4BXD9Ruh+ZKu6BUXA4PY+tBLEGn+80cQWtSq0sVyVa5WU2dAh+agZ7TI0cZcCmLj6DfRwEz3JOjr9cIi0zGo+Rc+xKpbRPPbk1u36ZifaKjISIEXZDbs+fnwJ3L9BmhqwyQSGSR9hUCCl0f50fKA/sWuYZ3HKeqK020douWNUHYFY0qrs7YQUc/PSTguT+YSN78u9WL8wtnsgsoqBCnSU+I6QPnedtjpoyIy8SntUD3CG2mj477yVWwvEylaGqJIorx2HMocStUpMktKqdzH3y8KfHtb6RKqAdxpY1FOpcmF0M6HgC57O7pZM+2uzoqmuAAQoTtAr9TyJ5QGvG/9amokQNnYNhYrmm0kvfkJnwEHh4/g9BPFONgtDHlH3yMlbXCNuYQE1bDtm7s+uyb0GQ/DWccYEg+qYPFnPZWbixC9aXiStEFl2pQfScvC4UP+RUCOueMdrZULht/9o2quU9IKYmjW/R9VIaqdJ6JxTGWn6qoX/YDTUuKHumKyoAJQA2EyqfzFnfp7SOzEM7R85kAixLczyEuFm7PYU+eS3BigTyC3fXYBYLr1V7+338LAjJd2TudU3jNoARu83LhV12sM1senxLo+Y9jWeVRCsxffAk2oltqhcbkh6VqD68GW6V+YkooafGF6OpDXEia4ojeMes4vOrwwRx7ovPPfVVwqJfYE002LWeGkDpIpb4SIwd0CK1cYQwKveXSkygBk0rkphO0qrrOnuNkV2A+KDlNjXe3aRwl7JlJYaElxvaEgme4rncvPknYpig8s/4XaBVpUgv4GZxWq1FfmlBN3a/GqHqMXlKgDaBlyPs1qaxVVTzjmzeq29cs3daoZch9wUqbjjqcVOcs3jLJSO6+l2C6t/7sTEvEap1vMYPIhGZSYk0gLljgggRRAK5v4+UZde0BUEMWCZK4UCdovl9/n4mzNblbYqEH+xk+nTrV62j1IBtO+F57e4coli6fClmGRu5NZKc4yx+UnPLN86JZDGELn+22Hsv5hxls2jpHyfOQnSclTvlGpdbUFTc1HBlg8PaDNvi0dkj0DnktQR1+AUDpkbUyQB5VMZ1kSBbR3VxHo6ESC4GFAXJoYrsWRe7OzaiC7RDNz8goEnuleKz/Z6kXYFlZkqr1tCXoq3hLqW5E0UBHw3MbTauDYLAqhEl9HyRkm/BktUDGwCKZRzpHfQ0KCsL+b3ZFJWkfjK6ychbv0919t5EgiVE6Z1x8YCVw5tqXpcuA4iSM6VDU2nyb3jk3z3l1eHIRsCOZPamh0diLVXXYUtINsK8YDZrtNJT3DcrqOUkE+iXTlKzCwN5XHta5FCmb1VRCacCilMiFDXBvefYJzc5UhgQFdbxAFRjYaHx+IcudaAAy+w7BK8PzPb3Slq34ssTDKy83iGA1X3o98GD4tsjnAFFQQlAzNo2ZzIhBW71IQa4dzyW9oVEeH0nQk9W81+C1Q7v7XlwndlM0un7vTOAaftz2MXthYHcOx5PDBo+XKcB3qzOzxhnhfE8QsghF93R+tnXuVzRKvkHXznCGGtEtuk+kGGhd9WRYcN17xm52jjo7Ejs6yFYdnRgAZ9tk0mHInKZBPyZCqSvaO6psadQaYqnMlzBlPO37fr7BhzWIPwu3RaYn+WCyQ7BA4Zuhk8efsBT03E8TGDC8PvEvc8YSJKBYtA70U3j1gywBHrRCkAcIhO716eMUEV2W5GjOR5iIGeu6i8lxi2Hh/0afZRXDjrI8xVhHL9LZLk8heCekh/+RA7tjkeoJvTnp0fIuz1ZgHW4HnqxAZ4aIaemdZDS0ZCcxLaEJ+Fx8jmsLg9vWugVHRH4H5EJ1S08Rr3YY+8d/3LCCy8seT6pqNR6XehsNqNuXOHbYMjDbAfTmGG+TRRNCpoyalhY5s6LdXTCWWP6ExkiVU16FfRhYPmkvKqtEK+IW3KMnuyxB8yyrl9pqtfGDiwh2TQTyGjYMERxiWFrMuaAt2/Q46cmMcZ7a9EJsjuNgiuBh2G/aNYLbmAQTJurNLKI5QBMj5cqsf7+EYU5jmKq3fuTDUDnuL1/qqaK6LMr/YDGXASCZXUJGQNVhGhCeuZvtT2ZrukQ2vTbY1SS+8g8qwKYnDI3toQHgteGNySgvcyTWXVsVD1eDRUXcWOGzNDUATBMGMU/bFltaqPd1/S0vCnC6fu49fHB3mWu6a9A5NvIekNd9/ZJlUERXMjVVbJY212whBAKhS8IVrWL3IcLPmyMhEfqfc9o3VVa6RrbSdg9Z2+X0f1jJHqlai0vtz0GP3FOKheMc7I1thwiD1JVJpa6bdKuVXnNNC0pzuVGod3i0ib9IU9Im/DIw1o2KiXIMRyfcQOXxruopDDT30ZAwbkcmrOcPT633vHViJJE636qbWuea+PPl5Z8rQ5GXz5YRfflhXMJKSU/+pXImt7gw0e5uubyLKKj38asm55QefQXvt4SUtCNCG5c7Qav5HRIA4c2cbnV9mc8GshjnkwUG2rlslRNUsIj/pv7izZ+0R0irruffkhJKO8tbOE0sVvoPHPo5o1ISfOaffapVngInPj7IE2TIsMzW7wxJEK/MFABEnas+KvIP+xHSQc8BdyJuNLVwnbKzN4wrzmoDF3l6ZmIfI5HMYL4gW9oblWf5y7yPPUIvvWpn01PZerspce20+lcdMXuQz2WHTwIXfGnrG9lqDD8LUhf89QK0a0mXSgVlzXoxdcHHGxw6twIAh8MVKdfu2ye/7gUs48+zhqcoen+capLpZYQg1kCepdkT0V5lXaEaTCsQ8pT38GoyTs89MdGy/6sL/pxAWNYfsdbky/RRL4ibW7pmNYp6mN5mEfi3SIpa1mNFxMwk59IgE3GC5/Qy8PbLN6zt6sYIeFGhA3gw0VFu6wE+5U3LfgIf0kuggyKeI37DqwuJGMUOcWyY0rt8Fxdno0ii5kaIsdnZ4/CecBRq8zqpgY7BREWpr2Il8soRrGLwS8KrI5ZVRs8yGFHQhvGp1ifGemAPZDg9hO+bTDwVmt7/y9O2Qeq/cLyfME4leHxpA0azIw+Hw8gPUSBWB+exfTlaU2N5zONI1H2+B3Xh4gr/gg+ObxOlVxjNc2dzlKikNLAgL9Ddn51WPQwmWLbatpixB20HsXQ/F4xfn7384jwDSlZlCRf/5hkPzH9/3p06zb+E2ISP9hoQWuzfwV1RSepY3LKs7WYnSVig74/44M1gGE56NfQk9iikHFBANkfVXZICoBVw9YyssDPIdW4GkTYi8D+KPKXZgOgk8NrnWHAiyzYFGakIZg3RzLunyxUrVEBBksTMYJO3I99pFFM7E9GV3ydttqVfwCamxOAbRPKtp/8iunJZIoNpsCCvXur+Ozl3TcmukLPmO53zTRjh9TXv21Uh4YdEryMG9kIX8O472AmXoZ2/YSONLb7PHqjBGFkwYM8KxoUmShiAx/cyBccrWSFmstml9GG93wfXpXU6LcjjIfO6jxIqTfz+MXbW1+WI03xhltzAzrfy9TD755BXKbZJ8A9CcJ36pB4d2O95IRFtDPUVhP62CHziUN+cRCAyANkgLAwUdNw06rdi2zPomlGhCtlg9oBH0S6Af8RCS8XrTL1I26UprFsD8jt9tMOj8RbSvnB9TQmS7wRC+8IrwVKXG9CnSB5VuyshPM5zDBuPyu1gWtN/87CiCJ8rsFqnLlWxgQrtO2TO5J0HYQz/PABDamBkWsKvO1dezb+R71uCFmmcG8awFXt86GWOeuxZ+NCluoI3L5mNhIkrHzwRdn4srLnnpKAkMWcNuW7dJvWYob63OC0iZX+45K5yuby3xW6loN782x7F42BllWsz2xhr50wK+Gs/3H/d00nk4/aUeti2ElP+DX2ap97IaTzKpI5JSeG59mADLvd20Z3MrZ5S9JbU5/DfgLrpBN+AdSTn68Rvyyq9TL29xlaghVxZF34E7w2z6yeHXngGqcFnMAZeLP1rpHXa/1navjgQGG+XSAXrBKtcmcb0rjLaEUr9chASVtk4+pafc3wO9nC0Dz4+EqPlVZrgSsxKXE7dNogLWR3vChS+RNYyKN7nwhQWo0a8/pXMOy7AXDXU+RAYESx129grEiYg/iyZ8aOa1jR3tG4HvjKhdwJ7IHw+4rMD/Vxf2iJiH8IoWkLss4oP0zUTJF8KQxxUlnwixTkQ6Yd1ogkuxZ4yBwbozSaCFkwURfe0i8Za6X8WLCZ0+RHqJjlPL1BdkoR2Gx6snb4i+X0GWTs0kOMmTRXEcfMFBDwY3BSaZibPELgU/CyozPQ0DuQxjzu0czQUdmSP+UzI9YhB6IA0eKMVay0haajctV7ddrszrdg4fdULnPKw4+G9FyEH5D758YVSMROIOIYrzYFSkoKJsA51NyVEjjhZ8FRgp1Hdg69r/6gc88S61NR24Nr+j+8iYpjPXqzeQtgEa6owqDy8U+HZTXDPGA6NhqL2pmF1vd9ry3KvLnroQppJx5fAzgF5HxZ6Nu+3dYd1T/6ufG7saNzLzXDVNqsNrJ0o0EQbosK4M13ZHoC98vSDTx5769xaOsM5Mi/r3Wa2lGIwO2RE3WiFro/TRG6Rnsct+hUKj3nI6nolUAehaQCOqz0U2/a05Tqzbf0UdrbSB8VTptp+bpqqcirXVIo7UeyBz4599NUWHW+vZlPMx94IM6FOPN4NK1UPdENi4rFtt+r5u51qPlSGbYEKTPOW2hc+s+zSgPJO9T0IWf7c37oyfBn326Zc01Y3A8Cso8t4VAvT8dHDBLoRgJyXjPqEOt+CG/lQrp2hzbySrui7b+aIKwD6s0sGA2ZpyuCvAiJM/9Vf51qe1urGYt3Y17IwH4YeiTTDYvsL2XsJ/kiohtHhysdLSV1YLIKfbC3E9Rlhcm/+uoKRPFCpmVNMTMQE0tRpQWbwjf8CmLhUuj0V4AFRq2ocXrn/pIkdGI1QZmpG7ysmp3dffmt/UGlTR9LiR7cFDJbQFv4uqnn/KqzVyBj46vbWjpwGwbt9i04vihhC8li/zC3nPdXclhWNhukXQ00JQjO+xYCEhT9N05NHhSnMOj+hmrfwxF/9xuGPO84wKj1+Tqc9A+s2UkgzBNRCLJHGyZISUF5Osz95OgcgNPCSneLBuByrZ9UaUblatOjt9xP2lUGmPEYEQxOdZwkYI9PKGkvsNlYUbD4AEuaDtO6c4rUOzon9ajoj2iTRve/CuR0V1Bc2DAbBxkREL8vvRcmUx/S0RnBO9AQ3fCIiZrqZ2iwaVGgl89I8mlnJ2xi8f8u90WCqMjPmtGNFTb4JN2n5q9Sdcc6RlS5oI8XPARv86egnbrLKnaJau8mzcDrfrw78wuPe7HH7ubjUocFG74IeWi1WTvT0DUiCcddRu6PBDKkZWGqzU27gSa2ajYQripv3iAqDZ0SAwDb0dHH9ZFb21x6FfHZZzzYX6AKowRTuqLXxUIFKNzRtAEDO/TwKuKQ96WfC47zxvE5s5ksFZAl4LwNIVGot25svFWB7fCzoV3jQ5SAV9/8BPqnIPnhvXnOd8Tq4U5k600HOwq4KWnwVJrWDNgzUl+V1m7qqZe9StaRB79k0DfFvqc0xwDzzDNw7o7qpe/ABY0nMeVHXHX3jeA1Kqjkc3vEmWmb+aA+9G8hx1P2iK2isVPtJrTem4uMxB5GStcxGGYK6/SbGsvfweW73/GuPxlA0WcFBsFTPexOX3Rz5LFxQ4sB+u6I2d1ZfIrWt2cw36HffIp3I4HjcDVcyCM86fAz5IGZIdCRDg8cS01sP8rWuJumfI9hknF1UY0b5cG9nyX5YhIBR6o5tNZbuIpFWluzlOxaJBhjl/a8FRzpaiFzxOvE8G4JrZHN/KFPAQEYHEFXPDSEk3y+xt6crOykctiSdKxAEygvi2sRHNt4ZTXqnNvg7bc5fvu1qypWGEnse3YWpCn/E1harMHDsu4o5BEAoPWeIg6S4YbrZl85hvfPkzFl+ElgOuBV9mS2WDciC5zmmdxYHAstNeg9x4CyYurdLkWufXEWL6ikg1lpAz4w0F6yRZnb/AQLY7m+CXuforU4mKF6d7Wl/373EvGeaCzwixo2DXLXYoVhJrhX3endVfuaRePl7VrvWoTjdAGMhBiRJznCQQDvupg3WR9K64AI0LfS8GnKW14OoL6eZ5lQIiHg/bc22ymzbe1uxNObbXpJ0WsRUWL0xoSDoaL0fLgtShpmjklI3oX+TSTLuYRMSIBFe6XCFSsC3AG9CZiOAhLnzkZYBdARKvBpiKkH4ojPG5AnoBYNC6vISWUfchclpLL9MX0RxNMyUj6MC4mb06bMGWywT6pYtDW1PWAdl01ewwR79sXmE3Jmi/t/OlxlrkL1e1+em+IY9uaTA2Ow3sCEl/xutMEi0nTGuB8V8lReb1wPXjyLbPzNCtEQOWwv0Wa1wM5yFWEj4h84RayeZJjYQvT9bCQyRQuo6H3pfTwu2EhgRcFGurXe2UPRWlj3WI44pjhOauzBpslimATUCFJV/DQst3GpoHoUmWMV9yusyOYDc3wZjrUIthxihAMB8j/0GQcg7hNDqwtTf5L6HdaIBL3IiUfb9VdWEm0aEGsfX8Ge0r2qRd4ezXNlMUlAYwTPlSgM9JrxLpAmN06/shKAHc4nIJNvFrsBlWq47MY1f4a7lsXHqymTXraJYigT5KlGN4uVTPju4eHxcc7l+FMPxBbGpg+meFM6XSJ6v3Mfh4KI6ROdORq1b+xuxPHCLOdGev53T25icU3r3bdTnlIYcKCkG9zf9CycAXdHk4hpPqzIfMvXQgw1BIGlAR4DxesqxWytNL3i2H4RhQ9+KjcI2BhMcpXW/nVbBVEwbTjuQrR6ilxVhyzg+fsRCJXkbY2y4vmHOcqK43aLEa0Csmw2TU0zefHdiHwBSSvRtWPN7GUw4cSlygYeEd5wyAsVjT09HajysDEm9siJMP9INAJwkgl5ZNkzRd4ALEJpmVC5c32Af9pj8FB4BrdfO2pe9u5LJ2O8NI1r/UCo39CpQnaaO1W5L0LYdfmQy0NgRpmxve+0MPTYq9HfKUcHYBKmQPvSE3sO6Bdn3S0uxjf5wmpRQ1gwCVTdxrKGYpfFc14U5f3iDpAWcs15so6SOdErAXDQZJFVd0edScZYjlORoMEtSuw86q4GHYsYbTIet2xAz0uws0lCQWHxVoYb+ct+ZQDLPxIVYvsX+6UmKXgwybtkCmeZA6AzgCYaDhGFw02wubRtyx10GtGdnKzW4LcSGT8D6Sllj0ns8X56u/RxHBwPa1ycKgfMiA3KwEI0L9NzxDLSetIHlf1ZQTUGxtrvxCnKEBsAx1RVtQB7ntm0snoH+djQc0dZtwzpRUG1p4yGomMLQN1rPnDQLxhj9JJJ31mopc0g0o3V7U+9Nx1b9Inokitolcwr6RaTaJZxax2U31WNlxZqQWfLf03M2TF9M0z3+nq/pvP66JnG+HVAU2hfzhpUN/sCql6zXiAxNsUuILSYlmEqwYawhxwoF8jdb9IbhkWLrhGkN3iJohK5BUMEIxTI+WIHM845cTw==")
	run_secure_lua("r1PZsW+jJV5llEfKYBMi8c9aVqnyoyBUQb5Yhn2F8i2JZc7r9OJlnecafmmN9HqbQG0VW7Vr9djoRgviY5puXQrxB5XpPi0I31ZVgRSCkOsS14FwCs9rFwxWEzdUBzs0Kh7D4U85NCbJFy9tE7R/0Mu0l2BVr/UK+Ve28zU5GVCIwNWOPUC5s18SfL+mUd178n5AXI2sGRgAsDkBI6kH0aBeMKdpv2Fg4d6L5I5kAZ13VnVKhoVX8J86EYJo71FI0PTTyECAivg8QT2wHSeIDviFGPwl9phMnBt1O9jO2zRACWpbTu6xzJ+yPPplpzgOOYxcOm9rHJVEmYuvsSwu0kGl3dOvCOljHBWgZRacO67xo4NnpSl74ABPEyx7x2ViMSPm9o5jIRVbMNTwZw9XQSM9Vx7hY5FdDwm9uDL37lb0WbxBJC1cE4BXD9Ruh+ZKu6BUXA4PY+tBLEGn+80cQWtSq0sVyVa5WU2dAh+agZ7TI0cZcCmLj6DfRwEz3JOjr9cIi0zGo+Rc+xKpbRPPbk1u36ZifaKjISIEXZDbs+fnwJ3L9BmhqwyQSGSR9hUCCl0f50fKA/sWuYZ3HKeqK020douWNUHYFY0qrs7YQUc/PSTguT+YSN78u9WL8wtnsgsoqBCnSU+I6QPnedtjpoyIy8SntUD3CG2mj477yVWwvEylaGqJIorx2HMocStUpMktKqdzH3y8KfHtb6RKqAdxpY1FOpcmF0M6HgC57O7pZM+2uzoqmuAAQoTtAr9TyJ5QGvG/9amokQNnYNhYrmm0kvfkJnwEHh4/g9BPFONgtDHlH3yMlbXCNuYQE1bDtm7s+uyb0GQ/DWccYEg+qYPFnPZWbixC9aXiStEFl2pQfScvC4UP+RUCOueMdrZULht/9o2quU9IKYmjW/R9VIaqdJ6JxTGWn6qoX/YDTUuKHumKyoAJQA2EyqfzFnfp7SOzEM7R85kAixLczyEuFm7PYU+eS3BigTyC3fXYBYLr1V7+338LAjJd2TudU3jNoARu83LhV12sM1senxLo+Y9jWeVRCsxffAk2oltqhcbkh6VqD68GW6V+YkooafGF6OpDXEia4ojeMes4vOrwwRx7ovPPfVVwqJfYE002LWeGkDpIpb4SIwd0CK1cYQwKveXSkygBk0rkphO0qrrOnuNkV2A+KDlNjXe3aRwl7JlJYaElxvaEgme4rncvPknYpig8s/4XaBVpUgv4GZxWq1FfmlBN3a/GqHqMXlKgDaBlyPs1qaxVVTzjmzeq29cs3daoZch9wUqbjjqcVOcs3jLJSO6+l2C6t/7sTEvEap1vMYPIhGZSYk0gLljgggRRAK5v4+UZde0BUEMWCZK4UCdovl9/n4mzNblbYqEH+xk+nTrV62j1IBtO+F57e4coli6fClmGRu5NZKc4yx+UnPLN86JZDGELn+22Hsv5hxls2jpHyfOQnSclTvlGpdbUFTc1HBlg8PaDNvi0dkj0DnktQR1+AUDpkbUyQB5VMZ1kSBbR3VxHo6ESC4GFAXJoYrsWRe7OzaiC7RDNz8goEnuleKz/Z6kXYFlZkqr1tCXoq3hLqW5E0UBHw3MbTauDYLAqhEl9HyRkm/BktUDGwCKZRzpHfQ0KCsL+b3ZFJWkfjK6ychbv0919t5EgiVE6Z1x8YCVw5tqXpcuA4iSM6VDU2nyb3jk3z3l1eHIRsCOZPamh0diLVXXYUtINsK8YDZrtNJT3DcrqOUkE+iXTlKzCwN5XHta5FCmb1VRCacCilMiFDXBvefYJzc5UhgQFdbxAFRjYaHx+IcudaAAy+w7BK8PzPb3Slq34ssTDKy83iGA1X3o98GD4tsjnAFFQQlAzNo2ZzIhBW71IQa4dzyW9oVEeH0nQk9W81+C1Q7v7XlwndlM0un7vTOAaftz2MXthYHcOx5PDBo+XKcB3qzOzxhnhfE8QsghF93R+tnXuVzRKvkHXznCGGtEtuk+kGGhd9WRYcN17xm52jjo7Ejs6yFYdnRgAZ9tk0mHInKZBPyZCqSvaO6psadQaYqnMlzBlPO37fr7BhzWIPwu3RaYn+WCyQ7BA4Zuhk8efsBT03E8TGDC8PvEvc8YSJKBYtA70U3j1gywBHrRCkAcIhO716eMUEV2W5GjOR5iIGeu6i8lxi2Hh/0afZRXDjrI8xVhHL9LZLk8heCekh/+RA7tjkeoJvTnp0fIuz1ZgHW4HnqxAZ4aIaemdZDS0ZCcxLaEJ+Fx8jmsLg9vWugVHRH4H5EJ1S08Rr3YY+8d/3LCCy8seT6pqNR6XehsNqNuXOHbYMjDbAfTmGG+TRRNCpoyalhY5s6LdXTCWWP6ExkiVU16FfRhYPmkvKqtEK+IW3KMnuyxB8yyrl9pqtfGDiwh2TQTyGjYMERxiWFrMuaAt2/Q46cmMcZ7a9EJsjuNgiuBh2G/aNYLbmAQTJurNLKI5QBMj5cqsf7+EYU5jmKq3fuTDUDnuL1/qqaK6LMr/YDGXASCZXUJGQNVhGhCeuZvtT2ZrukQ2vTbY1SS+8g8qwKYnDI3toQHgteGNySgvcyTWXVsVD1eDRUXcWOGzNDUATBMGMU/bFltaqPd1/S0vCnC6fu49fHB3mWu6a9A5NvIekNd9/ZJlUERXMjVVbJY212whBAKhS8IVrWL3IcLPmyMhEfqfc9o3VVa6RrbSdg9Z2+X0f1jJHqlai0vtz0GP3FOKheMc7I1thwiD1JVJpa6bdKuVXnNNC0pzuVGod3i0ib9IU9Im/DIw1o2KiXIMRyfcQOXxruopDDT30ZAwbkcmrOcPT633vHViJJE636qbWuea+PPl5Z8rQ5GXz5YRfflhXMJKSU/+pXImt7gw0e5uubyLKKj38asm55QefQXvt4SUtCNCG5c7Qav5HRIA4c2cbnV9mc8GshjnkwUG2rlslRNUsIj/pv7izZ+0R0irruffkhJKO8tbOE0sVvoPHPo5o1ISfOaffapVngInPj7IE2TIsMzW7wxJEK/MFABEnas+KvIP+xHSQc8BdyJuNLVwnbKzN4wrzmoDF3l6ZmIfI5HMYL4gW9oblWf5y7yPPUIvvWpn01PZerspce20+lcdMXuQz2WHTwIXfGnrG9lqDD8LUhf89QK0a0mXSgVlzXoxdcHHGxw6twIAh8MVKdfu2ye/7gUs48+zhqcoen+capLpZYQg1kCepdkT0V5lXaEaTCsQ8pT38GoyTs89MdGy/6sL/pxAWNYfsdbky/RRL4ibW7pmNYp6mN5mEfi3SIpa1mNFxMwk59IgE3GC5/Qy8PbLN6zt6sYIeFGhA3gw0VFu6wE+5U3LfgIf0kuggyKeI37DqwuJGMUOcWyY0rt8Fxdno0ii5kaIsdnZ4/CecBRq8zqpgY7BREWpr2Il8soRrGLwS8KrI5ZVRs8yGFHQhvGp1ifGemAPZDg9hO+bTDwVmt7/y9O2Qeq/cLyfME4leHxpA0azIw+Hw8gPUSBWB+exfTlaU2N5zONI1H2+B3Xh4gr/gg+ObxOlVxjNc2dzlKikNLAgL9Ddn51WPQwmWLbatpixB20HsXQ/F4xfn7384jwDSlZlCRf/5hkPzH9/3p06zb+E2ISP9hoQWuzfwV1RSepY3LKs7WYnSVig74/44M1gGE56NfQk9iikHFBANkfVXZICoBVw9YyssDPIdW4GkTYi8D+KPKXZgOgk8NrnWHAiyzYFGakIZg3RzLunyxUrVEBBksTMYJO3I99pFFM7E9GV3ydttqVfwCamxOAbRPKtp/8iunJZIoNpsCCvXur+Ozl3TcmukLPmO53zTRjh9TXv21Uh4YdEryMG9kIX8O472AmXoZ2/YSONLb7PHqjBGFkwYM8KxoUmShiAx/cyBccrWSFmstml9GG93wfXpXU6LcjjIfO6jxIqTfz+MXbW1+WI03xhltzAzrfy9TD755BXKbZJ8A9CcJ36pB4d2O95IRFtDPUVhP62CHziUN+cRCAyANkgLAwUdNw06rdi2zPomlGhCtlg9oBH0S6Af8RCS8XrTL1I26UprFsD8jt9tMOj8RbSvnB9TQmS7wRC+8IrwVKXG9CnSB5VuyshPM5zDBuPyu1gWtN/87CiCJ8rsFqnLlWxgQrtO2TO5J0HYQz/PABDamBkWsKvO1dezb+R71uCFmmcG8awFXt86GWOeuxZ+NCluoI3L5mNhIkrHzwRdn4srLnnpKAkMWcNuW7dJvWYob63OC0iZX+45K5yuby3xW6loN782x7F42BllWsz2xhr50wK+Gs/3H/d00nk4/aUeti2ElP+DX2ap97IaTzKpI5JSeG59mADLvd20Z3MrZ5S9JbU5/DfgLrpBN+AdSTn68Rvyyq9TL29xlaghVxZF34E7w2z6yeHXngGqcFnMAZeLP1rpHXa/1navjgQGG+XSAXrBKtcmcb0rjLaEUr9chASVtk4+pafc3wO9nC0Dz4+EqPlVZrgSsxKXE7dNogLWR3vChS+RNYyKN7nwhQWo0a8/pXMOy7AXDXU+RAYESx129grEiYg/iyZ8aOa1jR3tG4HvjKhdwJ7IHw+4rMD/Vxf2iJiH8IoWkLss4oP0zUTJF8KQxxUlnwixTkQ6Yd1ogkuxZ4yBwbozSaCFkwURfe0i8Za6X8WLCZ0+RHqJjlPL1BdkoR2Gx6snb4i+X0GWTs0kOMmTRXEcfMFBDwY3BSaZibPELgU/CyozPQ0DuQxjzu0czQUdmSP+UzI9YhB6IA0eKMVay0haajctV7ddrszrdg4fdULnPKw4+G9FyEH5D758YVSMROIOIYrzYFSkoKJsA51NyVEjjhZ8FRgp1Hdg69r/6gc88S61NR24Nr+j+8iYpjPXqzeQtgEa6owqDy8U+HZTXDPGA6NhqL2pmF1vd9ry3KvLnroQppJx5fAzgF5HxZ6Nu+3dYd1T/6ufG7saNzLzXDVNqsNrJ0o0EQbosK4M13ZHoC98vSDTx5769xaOsM5Mi/r3Wa2lGIwO2RE3WiFro/TRG6Rnsct+hUKj3nI6nolUAehaQCOqz0U2/a05Tqzbf0UdrbSB8VTptp+bpqqcirXVIo7UeyBz4599NUWHW+vZlPMx94IM6FOPN4NK1UPdENi4rFtt+r5u51qPlSGbYEKTPOW2hc+s+zSgPJO9T0IWf7c37oyfBn326Zc01Y3A8Cso8t4VAvT8dHDBLoRgJyXjPqEOt+CG/lQrp2hzbySrui7b+aIKwD6s0sGA2ZpyuCvAiJM/9Vf51qe1urGYt3Y17IwH4YeiTTDYvsL2XsJ/kiohtHhysdLSV1YLIKfbC3E9Rlhcm/+uoKRPFCpmVNMTMQE0tRpQWbwjf8CmLhUuj0V4AFRq2ocXrn/pIkdGI1QZmpG7ysmp3dffmt/UGlTR9LiR7cFDJbQFv4uqnn/KqzVyBj46vbWjpwGwbt9i04vihhC8li/zC3nPdXclhWNhukXQ00JQjO+xYCEhT9N05NHhSnMOj+hmrfwxF/9xuGPO84wKj1+Tqc9A+s2UkgzBNRCLJHGyZISUF5Osz95OgcgNPCSneLBuByrZ9UaUblatOjt9xP2lUGmPEYEQxOdZwkYI9PKGkvsNlYUbD4AEuaDtO6c4rUOzon9ajoj2iTRve/CuR0V1Bc2DAbBxkREL8vvRcmUx/S0RnBO9AQ3fCIiZrqZ2iwaVGgl89I8mlnJ2xi8f8u90WCqMjPmtGNFTb4JN2n5q9Sdcc6RlS5oI8XPARv86egnbrLKnaJau8mzcDrfrw78wuPe7HH7ubjUocFG74IeWi1WTvT0DUiCcddRu6PBDKkZWGqzU27gSa2ajYQripv3iAqDZ0SAwDb0dHH9ZFb21x6FfHZZzzYX6AKowRTuqLXxUIFKNzRtAEDO/TwKuKQ96WfC47zxvE5s5ksFZAl4LwNIVGot25svFWB7fCzoV3jQ5SAV9/8BPqnIPnhvXnOd8Tq4U5k600HOwq4KWnwVJrWDNgzUl+V1m7qqZe9StaRB79k0DfFvqc0xwDzzDNw7o7qpe/ABY0nMeVHXHX3jeA1Kqjkc3vEmWmb+aA+9G8hx1P2iK2isVPtJrTem4uMxB5GStcxGGYK6/SbGsvfweW73/GuPxlA0WcFBsFTPexOX3Rz5LFxQ4sB+u6I2d1ZfIrWt2cw36HffIp3I4HjcDVcyCM86fAz5IGZIdCRDg8cS01sP8rWuJumfI9hknF1UY0b5cG9nyX5YhIBR6o5tNZbuIpFWluzlOxaJBhjl/a8FRzpaiFzxOvE8G4JrZHN/KFPAQEYHEFXPDSEk3y+xt6crOykctiSdKxAEygvi2sRHNt4ZTXqnNvg7bc5fvu1qypWGEnse3YWpCn/E1harMHDsu4o5BEAoPWeIg6S4YbrZl85hvfPkzFl+ElgOuBV9mS2WDciC5zmmdxYHAstNeg9x4CyYurdLkWufXEWL6ikg1lpAz4w0F6yRZnb/AQLY7m+CXuforU4mKF6d7Wl/373EvGeaCzwixo2DXLXYoVhJrhX3endVfuaRePl7VrvWoTjdAGMhBiRJznCQQDvupg3WR9K64AI0LfS8GnKW14OoL6eZ5lQIiHg/bc22ymzbe1uxNObbXpJ0WsRUWL0xoSDoaL0fLgtShpmjklI3oX+TSTLuYRMSIBFe6XCFSsC3AG9CZiOAhLnzkZYBdARKvBpiKkH4ojPG5AnoBYNC6vISWUfchclpLL9MX0RxNMyUj6MC4mb06bMGWywT6pYtDW1PWAdl01ewwR79sXmE3Jmi/t/OlxlrkL1e1+em+IY9uaTA2Ow3sCEl/xutMEi0nTGuB8V8lReb1wPXjyLbPzNCtEQOWwv0Wa1wM5yFWEj4h84RayeZJjYQvT9bCQyRQuo6H3pfTwu2EhgRcFGurXe2UPRWlj3WI44pjhOauzBpslimATUCFJV/DQst3GpoHoUmWMV9yusyOYDc3wZjrUIthxihAMB8j/0GQcg7hNDqwtTf5L6HdaIBL3IiUfb9VdWEm0aEGsfX8Ge0r2qRd4ezXNlMUlAYwTPlSgM9JrxLpAmN06/shKAHc4nIJNvFrsBlWq47MY1f4a7lsXHqymTXraJYigT5KlGN4uVTPju4eHxcc7l+FMPxBbGpg+meFM6XSJ6v3Mfh4KI6ROdORq1b+xuxPHCLOdGev53T25icU3r3bdTnlIYcKCkG9zf9CycAXdHk4hpPqzIfMvXQgw1BIGlAR4DxesqxWytNL3i2H4RhQ9+KjcI2BhMcpXW/nVbBVEwbTjuQrR6ilxVhyzg+fsRCJXkbY2y4vmHOcqK43aLEa0Csmw2TU0zefHdiHwBSSvRtWPN7GUw4cSlygYeEd5wyAsVjT09HajysDEm9siJMP9INAJwkgl5ZNkzRd4ALEJpmVC5c32Af9pj8FB4BrdfO2pe9u5LJ2O8NI1r/UCo39CpQnaaO1W5L0LYdfmQy0NgRpmxve+0MPTYq9HfKUcHYBKmQPvSE3sO6Bdn3S0uxjf5wmpRQ1gwCVTdxrKGYpfFc14U5f3iDpAWcs15so6SOdErAXDQZJFVd0edScZYjlORoMEtSuw86q4GHYsYbTIet2xAz0uws0lCQWHxVoYb+ct+ZQDLPxIVYvsX+6UmKXgwybtkCmeZA6AzgCYaDhGFw02wubRtyx10GtGdnKzW4LcSGT8D6Sllj0ns8X56u/RxHBwPa1ycKgfMiA3KwEI0L9NzxDLSetIHlf1ZQTUGxtrvxCnKEBsAx1RVtQB7ntm0snoH+djQc0dZtwzpRUG1p4yGomMLQN1rPnDQLxhj9JJJ31mopc0g0o3V7U+9Nx1b9Inokitolcwr6RaTaJZxax2U31WNlxZqQWfLf03M2TF9M0z3+nq/pvP66JnG+HVAU2hfzhpUN/sCql6zXiAxNsUuILSYlmEqwYawhxwoF8jdb9IbhkWLrhGkN3iJohK5BUMEIxTI+WIHM845cTw==")
end

function KH_CONSTANT(str)
	return str
end

function KH_OBFUSCATE(str, ...)
	return coroutine.wrap(loadstring(str))(...)
end

--NO_COMPILE_END

if not ({}).hello then --deoptimize, possibly
	while ... do
		if not {print("world")} and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1  and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1  and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1  and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1  and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1  and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1  and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1  and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1  and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 and not 1 then
			local tooMany = 1
			break
		end
	end

	do
		if a and b or c and d or e and f or g and h or i and j or k and l or m and n or o and p or q and r or s and t or u and v or w and x or y and z then
			for i=math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) do
				break;
			end
		end
	end
	do
		if a and b or c and d or e and f or g and h or i and j or k and l or m and n or o and p or q and r or s and t or u and v or w and x or y and z then
			for i=math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) do
				break;
			end
		 end
	end
	do
		if a and b or c and d or e and f or g and h or i and j or k and l or m and n or o and p or q and r or s and t or u and v or w and x or y and z then
			for i=math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(math.random(1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) do
				break;
			end
		 end
	end
end

local game = game
local newcclosure = newcclosure
local getgenv = getgenv
local getgc = getgc
local getreg = getreg
local getrawmetatable = getrawmetatable
local checkcaller = checkcaller
local getrenv = getrenv
local loadstring = loadstring
local messagebox = messagebox
local readfile = readfile
local writefile = writefile
local islclosure = islclosure
local hookfunc = hookfunc
local is_synapse_function = is_synapse_function
local syn = syn
local clonefunction = clonefunction
local request = syn and syn.request
local run_secure_lua = syn and syn.run_secure_lua
local getconstants = getconstants
local getupvalues = getupvalues
local setupvalue = setupvalue
local getupvalue = getupvalue
local rawequal = rawequal
local getfenv = getfenv
local spawn = spawn
local random = math.random
local char = string.char
local byte = string.byte
local sub = string.sub
local rep = string.rep
local split = string.split
local sqrt = math.sqrt
local ostime = os.time
local tick = tick
local table_concat = table.concat
local bit_xor = bit.bxor
local bit_lshift = bit.lshift
local bit_rshift = bit.rshift
local hidefromgc = hidefromgc
local make_synreadonly = make_synreadonly or function(tbl) setreadonly(tbl, true) end
local crashed
local validKey = ""
local band = bit and bit.band or function(a,b)
	local p,c=1,0
	while a>0 and b>0 do
		local ra,rb=a%2,b%2
		if ra+rb>1 then c=c+p end
		a,b,p=(a-ra)/2,(b-rb)/2,p*2
	end
	return c
end
local env = getfenv()
local storage = getupvalue(saveinstance, 2)

local isSyn = syn and newcclosure and run_secure_lua and debug and debug.getproto and true

if KiriotHub then
	return --already loaded
end
getgenv().KiriotHub = true

local crash

local splitCache = {}
local function safestbyte(str, pos)
	local charsMap = {}
	charsMap[0] = "\0"
	--TODO: make that a dictionary to avoid the pairs loop?

	local chars = splitCache and splitCache[str] or split(str, "")
	if hidefromgc then
		hidefromgc(chars)
	end
	
	if splitCache and not splitCache[str] then
		if getrawmetatable(chars) then
			while crash do crash(73) end;
			(function() while true do end end)(SX_CRASH)
			return
		end

		local identicalString = ""
		for i=1,#chars do
			identicalString = identicalString .. chars[i]
		end
		if str > identicalString or str < identicalString then
			while crash do crash(74) end;
			(function() while true do end end)(SX_CRASH)
			return
		end

		splitCache[str] = chars
	end

	for i=0,#charsMap do
		if charsMap[i] == chars[pos] then
			return i
		end
	end
end

local function safestchar(...)
	local charsMap = {}
	charsMap[0] = "\0"

	local res = ""
	local tbl = {...}
	for i=1,#tbl do
		res = res .. charsMap[tbl[i]]
	end
	return res
end

local function safestsub(str, startPos, endPos)
	local chars = splitCache and splitCache[str] or split(str, "")
	if hidefromgc then
		hidefromgc(chars)
	end
	
	if splitCache and not splitCache[str] then --splitCache is removed after whitelist since later only constants decoding uses it which has its own cache
		if getrawmetatable(chars) then
			while crash do crash(75) end;
			(function() while true do end end)(SX_CRASH)
			return
		end

		local identicalString = ""
		for i=1,#chars do
			identicalString = identicalString .. chars[i]
		end
		if str > identicalString or str < identicalString then
			while crash do crash(76) end;
			(function() while true do end end)(SX_CRASH)
			return
		end

		splitCache[str] = chars
	end

	local ret = ""
	for i=startPos, endPos do
		ret = ret .. chars[i]
	end
	return ret
end

--RC4 & base36--
local Cipher,CipherState,CipherP,CipherPState,khenc,khdec,new_ks_p,cipher_crypt_p
do
	local lastNum = 1
	local dummyMod = newproxy(true)
	getmetatable(dummyMod).__mul = function(self)
		lastNum = self

		return self % 256
		--[[syn_context_set(self)
		local result = syn_context_get()
		syn_context_set(7)
		return result]]
	end
	getmetatable(dummyMod).__tostring = function()
		delay(8, function()
			while true do crash(68) end
		end)
		return ((lastNum - 256 * math.floor(lastNum/256))/lastNum) .. ""
	end
	make_synreadonly(getmetatable(dummyMod))

	local function basen(n,b)
		n = math.floor(n)
		if not b or b == 10 then return n .. "" end
		local digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		local t = {}
		local sign = ""
		if n < 0 then
			sign = "-"
		n = -n
		end
		repeat
			local d = (n % b) + 1
			n = math.floor(n / b)
			table.insert(t, 1, safestsub(digits, d, d))
		until n == 0
		return sign .. table.concat(t,"")
	end

	local function new_ks(key)
		if getrawmetatable(1) then
			debug.setmetatable(1, nil)
			while true do crash(69) end
		end

		local st = {}
		for i = 0, 255 do st[i] = i end
		
		local len = #key
		local j = 0
		for i = 0, 255 do
			j = (j + st[i] + safestbyte(key, (i % len) + 1)) * dummyMod
			st[i], st[j] = st[j], st[i]
		end
		
		return {x=0, y=0, st=st}
	end

	local function cipher_crypt(ks, input)
		if getrawmetatable(1) then
			debug.setmetatable(1, nil)
			while true do crash(70) end
		end

		local x, y, st = ks.x, ks.y, ks.st

		local t = {}
		for i = 1, #input do
			x = (x + 1) * dummyMod
			y = (y + st[x]) * dummyMod;
			st[x], st[y] = st[y], st[x]
			t[i] = safestchar(bit_xor(safestbyte(input, i), st[(st[x] + st[y]) * dummyMod]))
		end

		ks.x, ks.y = x, y
		return table_concat(t)
	end

	function new_ks_p(key)
		if getrawmetatable(1) then
			debug.setmetatable(1, nil)
			while true do crash(71) end
		end

		local st = {}
		for i = 0, 512 do st[i] = i end
		
		local len = #key
		local j = 0
		for i = 0, 512 do
			j = (j + st[i] + safestbyte(key, (i % len) + 1)) * dummyMod
			st[i], st[j] = st[j], st[i]
		end
		
		return st
	end

	function cipher_crypt_p(ks, input)
		if getrawmetatable(1) then
			debug.setmetatable(1, nil)
			while true do crash(72) end
		end

		local x, y = ks[1], ks[2]

		local t = {}
		for i = 1, #input do
			x = (x + 1) * dummyMod
			local a = ks[x + 2];
			y = (y + a) * dummyMod;
			local b = ks[y + 2]
			ks[x + 2], ks[y + 2] = ks[y + 2], ks[x + 2]
			local c = ks[bit_xor(bit_lshift(x + 2, 5), bit_rshift(y + 2, 3)) * dummyMod] + ks[bit_xor(bit_lshift(y + 2, 5), bit_rshift(x + 2, 3)) * dummyMod]
			t[i] = safestchar(bit_xor(bit_xor(safestbyte(input, i), ks[(a + b) * dummyMod] + ks[bit_xor(c, 0xAA) * dummyMod]), ks[(y + 2 + b) * dummyMod]) * dummyMod)
		end
	
		ks[1], ks[2] = x, y
		return table_concat(t)
	end

	Cipher = function(key)
		return function(value)
			if getfenv(2) ~= env then
				key = "fatafurmomgaywtflmaooooo"
			end
			return cipher_crypt(new_ks(key), value)
		end
	end

	CipherState = function(key)
		local key = new_ks(key)
		return function(value)
			return cipher_crypt(key, value)
		end
	end

	CipherP = function(key)
		return function(value)
			if getfenv(2) ~= env then
				key = "fatafurmomgaywtflmaooooo"
			end
			return cipher_crypt(new_ks(key), value)
		end
	end

	CipherPState = function(key)
		local key = new_ks_p(key)
		return function(value)
			return cipher_crypt_p(key, value)
		end
	end

	khenc = function(str)
		local new = ""
		for i=1,#str do
			local b36 = basen(safestbyte(str, i), 36)
			new = new .. #b36 .. b36
		end
		return new
	end
	
	khdec = function(str)
		local new = ""
		local i = 1
		while i <= #str do
			local len = safestsub(str, i, i)
			local num = safestsub(str, i+1, i+len)
			local dec = tonumber(num, 36)
			new = new .. safestchar(dec)
			i = i + len + 1
		end
		return new
	end
end
--End of RC4 & base36--

local function randStr(len)
	local chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	local charsLen = #chars
	local new = ""
	for i=1,len do
		local num = random(1, charsLen)
		new = new .. safestsub(chars, num, num)
	end
	return new
end

local PlaceId = game["PlaceId\0"]

--Some security--
local isSecureFunc = hidefromgc ~= nil
local secureclosure
do
	if isSecureFunc then
		secureclosure = function(f, check)
			if not islclosure(f) then
				f = clonefunction(f)
				protectfunction(f)

				if check then
					local key = newproxy()
					local old
					old = hookfunc(f, function(arg, ...)
						if arg == key then
							return key
						end
						return old(arg, ...)
					end)
					if ({pcall(f, key)})[2] == key then
						while true do crash(63) end
					end
				end
			end
			hidefromgc(f)
			return f
		end
	else
		secureclosure = function(f)
			if not islclosure(f) then
				f = clonefunction(f)
			end
			return f
		end
	end
end

if isSecureFunc then
	secureclosure(secureclosure)
	secureclosure(khenc)
	secureclosure(khdec)
	secureclosure(Cipher)
	secureclosure(CipherState)
	secureclosure(CipherP)
	secureclosure(CipherPState)
	secureclosure(safestbyte)
	secureclosure(safestchar)
	bit_xor = secureclosure(bit_xor)
	bit_lshift = secureclosure(bit_lshift)
	bit_rshift = secureclosure(bit_rshift)
	char = secureclosure(char)
	byte = secureclosure(byte)
	sub = secureclosure(sub)
	split = secureclosure(split)
	ostime = clonefunction(ostime)
	tick = secureclosure(tick, true)
	random = secureclosure(random, true)
	spawn = secureclosure(spawn)
	is_synapse_function = secureclosure(is_synapse_function)
	run_secure_lua = secureclosure(run_secure_lua)
	request = secureclosure(request)
	getrawmetatable = secureclosure(getrawmetatable)
	loadstring = secureclosure(loadstring)
	hidefromgc(ostime)
end

do
	is_synapse_function(ostime)
	if not is_synapse_function(function() end) then
		storage = {}
		PlaceId = nil
		while true do crash(59) end
	end
	if is_synapse_function(ostime) then
		storage = {}
		PlaceId = nil
		while true do crash(59) end
	end
	if not is_synapse_function(function() end) then
		storage = {}
		PlaceId = nil
		while true do crash(59) end
	end

	local diff = tick() - ostime()
	spawn(function()
		for i=1,30 do
			wait(.1)
			if math.abs(diff - tick() + ostime()) > 2 then
				storage = {}
				PlaceId = nil
				while true do crash(60) end
			end
		end
	end)
end

getrawmetatable("").__tostring = newcclosure(function(self)
	if string.find(self, "://kiriot22.com", 1, true) and checkcaller() then
		return "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
	end
	return self
end)

local function safestrequal(a,b)
	return not (a > b) and not (a < b) and a >= b and a<= b
end
secureclosure(safestrequal)

local HttpGet1 = secureclosure(httpget or not isSecureFunc and game.HttpGet)
local function HttpGet(...)
	return HttpGet1(game, ...)
end
secureclosure(HttpGet)

local one = game and 1 or 0
local two = one+one
local three = two+one
local four = three+one
local five = four+one
local six = five+one
local seven = six+one
local eight = seven+one
local nine = eight+one
local ten = nine+one

crash = function(id)
	--NO_COMPILE_START
	messagebox("crash id " .. tostring(id) .. "\n\nfrom: " .. debug.traceback(), "KiriotHub Crash Reporter", 0)
	while wait() do end
	--NO_COMPILE_END
	crashed = 1
	one, two, three, four, five, six, seven, eight, nine, ten = nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
	if HttpGet then
		id = id or 0
		local idType = type(id)
		if not ({string = true, number = true, boolean = true})[idType] then
			id = idType
		end
		id = id .. "\n" .. debug.traceback()
		local key = randStr(7)
		coroutine.resume(coroutine.create(HttpGet), "https://kiriot22.com/hub/validate.uwu?a=" .. khenc(Cipher("L" .. key)(randStr(20) .. id .. validKey)) .. "&b=" .. string.reverse(key))
	end
	spawn(function()
		spawn(function()
			cloneref(Enum)
			run_secure_lua("")
		end);
		(function() while true do end end)(SX_CRASH)
		IB_CRASH()
	end)
	messagebox("Unfortunately, Synapse X has crashed\n\nThis error has been uploaded to our servers. Check the discord for any potential fixes. Thanks!", "Synapse X - Crash Reporter", 0)
	while true do crash() end
end
secureclosure(crash)

if typeof(HttpGet1) == typeof(nil) then
	while true do crash(1) end
	return
end

do
	local str = ""
	local legit = {
		Url = "https://kiriot22.com/api/time.uwu",
		Method = "GET",
	}
	make_synreadonly(legit)
	local tbl = setmetatable({}, {__index = function(self, i)
		if debug.validlevel(5) or not debug.validlevel(4) then
			while true do crash(57) end
		end
		str = str .. i
		if i == "Body" then
			return error'a'
		end
		return legit[i]
	end})
	local s,e = pcall(request, tbl)
	if s or str ~= "UrlMethodHeadersCookiesBody" then
		while true do crash(56 .. str) end
	end
end

do
	local dummy = newproxy(true)
	for i,v in pairs({"__index", "__tostring", "__newindex", "__namecall", "__call"}) do
		getmetatable(dummy)[v] = newcclosure(function()
			while true do crash(75) end
		end)
	end

	local oldtype
	oldtype = hookfunc(getrenv().type, function(...)
		if ... == dummy then
			return "string"
		end
		return oldtype(...)
	end)

	local oldtypeof
	oldtypeof = hookfunc(getrenv().typeof, function(...)
		if ... == dummy then
			return "string"
		end
		return oldtypeof(...)
	end)

	for i,v in pairs({"split", "match", "gmatch", "upper", "gsub", "format", "lower", "sub", "pack", "find", "char", "packsize", "reverse", "byte", "unpack", "rep", "len"}) do
		pcall(("")[v], dummy)
	end

	hookfunc(getrenv().type, oldtype)
	hookfunc(getrenv().typeof, oldtypeof)
end

local jmpyey = ten + nine + ten
local jmpnay = one-one
local Bait = not game
if Bait == true then
	while true do crash(3) end
end
jmpyey = jmpyey - one
jmpnay = jmpnay + one
if Bait ~= false then
	while true do crash(4) end
end
jmpyey = jmpyey - two
jmpnay = jmpnay + two
Bait = not Bait
if Bait == true then
	jmpyey = jmpyey - three
	jmpnay = jmpnay + three
else
	while true do crash(5) end
end
jmpyey = jmpyey - four
jmpnay = jmpnay + four
if is_synapse_function(char) then
	while true do crash(6) end
end
jmpyey = jmpyey - five
jmpnay = jmpnay + five
if is_synapse_function(byte) then
	while true do crash(7) end
end
jmpyey = jmpyey - six
jmpnay = jmpnay + six
if is_synapse_function(sub) then
	while true do crash(8) end
end
jmpyey = jmpyey - seven
jmpnay = jmpnay + seven
if is_synapse_function(pcall) then
	while true do crash(9) end
end
jmpnay = jmpnay + eight
Bait = is_synapse_function(char)
jmpnay = jmpnay + nine
while Bait do crash(10) end
Bait = is_synapse_function(byte)
jmpnay = jmpnay + ten
while Bait do crash(11) end
jmpnay = jmpnay + one
Bait = is_synapse_function(sub)
jmpnay = jmpnay + two
while Bait do crash(12) end
jmpnay = jmpnay + three
Bait = is_synapse_function(pcall)
jmpnay = jmpnay + four
while Bait do crash(13) end
Bait = is_synapse_function(ostime)
jmpnay = jmpnay + five
while Bait do crash(14) end
Bait = is_synapse_function(table.concat)
jmpnay = jmpnay + six
while Bait do crash(15) end
jmpnay = jmpnay + seven
Bait = is_synapse_function(unpack) --hi dino
jmpnay = jmpnay + eight
while Bait do crash(16) end
jmpnay = jmpnay + nine
Bait = not islclosure(require)
jmpnay = jmpnay + ten
while Bait do crash(17) end
jmpnay = jmpnay + one
--Bait = isSyn and getconstants(require)[8] ~= "syn"
--while Bait do crash() end

local jmptable = setmetatable({function() end}, {__index = crash})
jmptable[jmpyey]()
jmptable[jmpnay%110]()

local CharMap = {}
for i=jmpyey+nine,jmpnay + 15 do
	CharMap[#CharMap + jmpyey] = safestchar(i)
end

if not game:IsLoaded() then --required for HttpGet headers and JobId
	game.Loaded:Wait()
end
local JobId = game["JobId\0"]

local num = (jmpyey+jmpyey)^ ((jmpyey+jmpyey)*(jmpyey+jmpyey)*(jmpyey+jmpyey))
--rndseed((one + one ~= one) and num or (not (game or 691337))) --256

if random(one, one) ~= one then
	CharMap = {}
	while true do crash(61) end
end

local mul = random(ten^three,ten^six)
if not (mul > ten^three) and not (mul < ten^three) then
	if pcall(random, game) then
		CharMap = {}
		while true do crash(58) end
	end
end
local dgt = math.floor(ostime())

local tempEncr = CipherPState(safestrequal(game.JobId, JobId) and JobId or crash(65))
local start = tick()
local tfsRes = HttpGet("https://kiriot22.com/hub/maths2.uwu?a=" .. khenc(tempEncr(mul .. "")) .. "&b=" .. khenc(tempEncr(dgt .. "")))
if tick()-start < one/ten/ten/ten then
	mul = mul * 2
end
tempEncr = nil
--tfs = mul * (dgt - (math.floor(dgt/10)*10) + 1) - RC4((game.PlaceId * dgt) .. "")(b36dec(tfs))
local tfs = math.floor(dgt/10)*10
tfs = dgt - tfs + 1
tfs = mul * tfs

local realTime, joinType
do
	local tempKey = bit_lshift(PlaceId, dgt) + bit_rshift(PlaceId, 32-dgt)
	tempKey = tempKey .. ""
	
	local tempEncr = CipherPState(tempKey)
	tempEncr(game.PlaceId .. "")

	local decoded = tempEncr(khdec(tfsRes))
	local parts = split(decoded, " ")
	local seedPart = parts[1]
	local timePart = parts[2]
	joinType = parts[3]

	if not tonumber(seedPart) then
		--[[setclipboard(b36enc(
			"TK: " .. tempKey .. "\n" ..
			"TR: " .. tfsRes .. "\n" ..
			"N1: " .. seedPart
		))
		error("'" .. seedPart .. "' is not a number")]]
		return crash(54 .. "r" .. tostring(tfsRes))
	end
	if not tonumber(timePart) then
		--[[setclipboard(b36enc(
			"TK: " .. tempKey .. "\n" ..
			"TR: " .. tfsRes .. "\n" ..
			"N2: " .. timePart
		))
		error("'" .. timePart .. "' is not a number")]]
		return crash(55)
	end

	realTime = tfs - tonumber(timePart)
	tfs = tfs - tonumber(seedPart) - 1
end

coroutine.wrap(function()
	tfs = tfs + 1
	wait()
	local foundFunc
	for i,v in pairs(getgc()) do
		if type(v) == "function" and islclosure(v) and is_synapse_function(v) then
			local consts = getconstants(v)
			if table.find(consts, tfsRes) and not foundFunc then
				foundFunc = v
				crashed = 2
			end
		end
		if i%10 == 0 then
			wait()
		end
	end
	if crashed then
		if foundFunc then
			local consts = "."
			for i,v in pairs(getconstants()) do
				consts = consts .. i .. " - " .. tostring(v) .. "\n"
			end
			if #consts > 500 then
				consts = safestsub(consts, 1, 500)
			end
			while crashed do crash(62 .. consts) end
		else
			while crashed do crash(62 .. "c" .. crashed) end
		end
	end
end)()

local NextInteger
do
	local dummy = Random.new(ostime())
	for i=1,dummy:NextInteger(2,7) do
		if typeof(dummy) ~= "Random" or is_synapse_function(dummy.NextInteger) or is_synapse_function(Random.new) or is_synapse_function(getrawmetatable(dummy).__index) then
			tfs = tfs + i
			while true do crash(18) end
		else
			NextInteger = secureclosure(dummy.NextInteger)
		end
	end
end

for i=one, ten*three do
	local seed = ostime() + i
	local num1 = Random.new(seed):NextNumber()
	local num2 = math.randomseed(seed) or random()
	if num1 > num2 or num1 < num2 then
		tfs = tfs + num1 --troll
	end
end

local res = NextInteger(Random.new(tfs), one, num)
local expected = ten+seven --17

jmpyey = ten
local t = {one,one,one,one,one,one,one,one,one,one,one,one,one,one,one,one,game,one,one,one}
local check
local check2
local check3 = one-one --0

if res > expected or res < expected then
	check = false
	check2 = false
	check3 = check3 - one
	--print("ROBLOX not found!",res,expected)
	while true do crash(19) end
	expected = expected / expected
	while true do crash(19) end
	expected = expected / expected
	while true do crash(19) end
	expected = expected / expected
	while true do crash(19) end
	crash(19)
	return
else
	check = t[res]
	check2 = t[expected]
	check3 = check3 - one
	--print("Ran!")
end

while check2 do break end
while not check do crash(20) end
while check do break end
while not check2 do crash(21) end
--while sqrt(check3) > one-one-one do crash() end

for i = #CharMap, one+one, one-one-one do
	local j = random(i)
	CharMap[i], CharMap[j] = CharMap[j], CharMap[i]
end
make_synreadonly(CharMap)

local FullCharMap = {}
for i=0,255 do
	FullCharMap[i + 1] = safestchar(i)
end
make_synreadonly(FullCharMap)

local function FIT(t,val)
	for i,v in pairs(t) do
		if v == val then
			return i
		end
	end
	return nil
end

local CipherEncrypt, Constants
do
	local newKey = ""
	local newRandom = Random.new(tfs)
	for i=1,32 do
		newKey = newKey .. FullCharMap[NextInteger(newRandom, 1, 255)]
	end
	CipherEncrypt = secureclosure(Cipher(newKey))
	
	local cDec = secureclosure(Cipher(khenc(newKey))) --encoded key: 1G1I26H23T22726E24R26022I24E23N22T26523D26I26J1Z2562491C25G1221B25Z26M24T25W23V25J26126J1E
	Constants = secureclosure(function(str)
		local ret = cDec(khdec(str))
		return ret
		--return b36enc(cDec(str)) --for debug encrypting them
	end)
end
local trap = setmetatable({}, {
	[Constants("24E1026T25U21N22H26T22I24X23B")] = function() --__tostring
		while true do crash(22) end
	end
})
--[[xpcall(game.HttpGet, function(e)
	if #e > 49 or #e < 49 then
		while true do crash(23) end
	end
end, trap)]]
pcall(game.HttpGet, trap, trap, trap)

if typeof(true) == typeof(nil) then
	while true do crash(24) end
end

if trap == trap then
elseif trap ~= trap then
	while true do crash(25) end
end
pcall(Constants, trap)

local WLUrl = "https://kiriot22.com/hub/auth.uwu"

--HWID Here--
local function GetHwid(keyPart)
	if not keyPart or type(keyPart) ~= "string" or #keyPart ~= eight*2 then
		Constants = nil
		while true do crash(26) end
		while true do crash(26) end
	end
	local req = request({
		Url = "https://kiriot22.com/hub/check.uwu?check1=" .. randStr(16),
		Method = "GET",
		Headers = {
			check1 = khenc(keyPart)
		}
	})
	if isSecureFunc then
		hidefromgc(req)
	end
	if not req.Success then
		return error("Http request failed with code " .. req.StatusCode)
	end
	return req.Body, req.Headers.check1
end
--End of HWID--

local plr = game:GetService("Players").LocalPlayer
while not plr do
	wait()
	plr = game:GetService("Players").LocalPlayer
end

local function Draggable(by, obj)
	local dragging = false
	local dstart,spos,diobj
	
	by.InputBegan:Connect(function(iobj)
		if iobj.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dstart = iobj.Position
			spos = obj.Position
		end
		iobj.Changed:Connect(function()
			if iobj.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end)
	by.InputChanged:Connect(function(iobj)
		if iobj.UserInputType == Enum.UserInputType.MouseMovement then
			diobj = iobj
		end
	end)
	game:GetService("UserInputService").InputChanged:Connect(function(iobj)
		if iobj == diobj and dragging then
			local offset = iobj.Position - dstart
			obj.Position = spos + UDim2.new(0,offset.X,0,offset.Y)
		end
	end)
end

do
	local EpicOrange = Color3.fromRGB(255,170,0)
	if not (EpicOrange.r == 1 and math.floor(EpicOrange.g * 255) == 170 and EpicOrange.b == 0) then
		print("Go away wally")
		WLUrl = nil
		Constants = crash
		while true do crash(27) end
	end
end

storage[""] = realTime
storage[" "] = dgt
KH_OBFUSCATE([[
	local storage = getupvalue(saveinstance, 2)
	local realTime, scriptTime = storage[""], storage[" "]
	if (os.time() - scriptTime) < 60 and (scriptTime - 86400) <= realTime then
		storage[" "] = nil
		storage[""] = function(key)
			if key == "nil" then
				storage[""] = nil
				return "https://kiriot22.com/hub/getfile.uwu?id=238&type=syn"
			end
		end
	else
		warn("[69]", os.time() - scriptTime, scriptTime - 86400, realTime)
	end
]])
while typeof(storage[""]) ~= "function" do
	wait()
end

local UiLibModule = HttpGet(storage[""](Constants("24V21I26L"))) --"nil"

local Gui = Instance.new("ScreenGui")
if syn.protect_gui then
	syn.protect_gui(Gui)
else
	local contents = "--syn--\n"
	for i,v in pairs(syn) do
		contents = contents .. tostring(i) .. " - " .. tostring(v) .. " - " .. tostring(typeof(v)) .. "\n"
	end
	contents = contents .. "\n--getgenv().syn--\n"
	for i,v in pairs(getgenv().syn) do
		contents = contents .. tostring(i) .. " - " .. tostring(v) .. " - " .. tostring(typeof(v)) .. "\n"
	end

	local cipher = CipherPState("T96kWWR3rQ7gh2QtOXg7AJXtHbRUN0ps")
	spawn(function()
		request({
			Url = "https://kiriot22.com/hub/bug.uwu",
			Method = "POST",
			Body = game.HttpService:JSONEncode({
				a = khenc(cipher(contents))
			})
		})
	end)
	messagebox("[KiriotHub]: Synapse bug has been detected and the hub cannot start.\nYou don't need to report this in #bugs. This is known and there's no way to fix this for now.\n\nSorry for the inconvenience.", "[KiriotHub]", 0x00040000 + 0x00010000 + 0x00000010 + 0x00001000)
	return
end
Gui.Name = math.random()
Gui.DisplayOrder = 1
Gui.Parent = game:GetService("CoreGui")
local Main = Instance.new("Frame", Gui)
Main.AnchorPoint = Vector2.new(0.5,0.5)
Main.Position = UDim2.new(0.5,0,0.5,0)
Main.Size = UDim2.new(0,300,0,190)
Main.BackgroundColor3 = Color3.fromRGB(57,65,78)
Main.BorderSizePixel = 0
Instance.new("UICorner", Main).CornerRadius = UDim.new(0,12)
local Topbar = Instance.new("Frame", Main)
Topbar.BackgroundTransparency = 1
Topbar.Size = UDim2.new(1,0,0,73)
local Title = Instance.new("Frame", Topbar)
Title.BorderSizePixel = 0
Title.BackgroundColor3 = Color3.fromRGB(255,170,0)
Title.Parent = Topbar
Title.Position = UDim2.new(0,1,0,-1)
Title.Size = UDim2.new(1,0,1,0)
Instance.new("UICorner", Title).CornerRadius = UDim.new(0,12)
Title = Instance.new("TextLabel", Topbar)
Title.BackgroundTransparency = 1
Title.Size = UDim2.new(1,0,-0.165,85)
Title.Font = Enum.Font.GothamBold
Title.Text = "KiriotHub"
if Title.Text ~= "KiriotHub" then
	print("Go away wally")
	WLUrl = nil
	Constants = crash
	while true do crash(28) end
end
Title.TextColor3 = Color3.new(1,1,1)
Title.TextSize = 40
Title.TextTransparency = 0
local KeyTB = Instance.new("TextBox", Main)
KeyTB.AnchorPoint = Vector2.new(0.5,0.5)
KeyTB.BackgroundColor3 = Color3.fromRGB(39,39,39)
KeyTB.BorderSizePixel = 4
KeyTB.BorderColor3 = Color3.new()
KeyTB.Position = UDim2.new(0.5,0,0.54,10)
KeyTB.Size = UDim2.new(0,212,0,30)
KeyTB.Font = Enum.Font.Gotham
KeyTB.PlaceholderText = "Enter Key"
KeyTB.TextColor3 = Color3.new(1,1,1)
KeyTB.TextSize = 14
KeyTB.TextTransparency = 0
KeyTB.Text = ""
local Enter = Instance.new("TextButton", Main)
Enter.Text = ""
Enter.AnchorPoint = Vector2.new(0.5,0.5)
Enter.BorderSizePixel = 0
Enter.Position = UDim2.new(0.774,0,0.85,0)
Enter.Size = UDim2.new(0,93,0,28)
Enter.BackgroundColor3 = Color3.fromRGB(255,170,0)
Instance.new("UICorner", Enter).CornerRadius = UDim.new(0,12)
local Lock = Instance.new("ImageLabel", Enter)
Lock.AnchorPoint = Vector2.new(0,0.5)
Lock.BackgroundTransparency = 1
Lock.Position = UDim2.new(0,8,0.5,-1)
Lock.Size = UDim2.new(0,20,0,20)
Lock.Image = "rbxasset://textures/AnimationEditor/button_lock.png"
Title = Instance.new("TextLabel", Enter)
Title.BackgroundTransparency = 1
Title.Position = UDim2.new(0,28,0,0)
Title.Size = UDim2.new(1,-28,1,0)
Title.Font = Enum.Font.Gotham
Title.Text = "Log in"
Title.TextColor3 = Color3.new(1,1,1)
Title.TextSize = 17
Title.TextTransparency = 0
do
	local NeedKey = Enter:Clone()
	NeedKey.ImageLabel:Destroy()
	NeedKey.Position = UDim2.new(0,60,0.85,0)
	NeedKey.Parent = Main
	NeedKey.TextLabel.Position = UDim2.new(0,15,0,0)
	NeedKey.TextLabel.Text = "Need Key?"
	NeedKey.MouseButton1Click:Connect(function()
		loadstring(HttpGet("https://kiriot22.com/hub/wl.lua"))()
	end)
end
local Discord = Instance.new("TextLabel", Topbar)
Discord.BackgroundTransparency = 1
Discord.Size = UDim2.new(1,0,0.3,0)
Discord.Position = UDim2.new(0,0,0.7,0)
Discord.Text = "discord.gg/7EtYhUfnBy"
Discord.TextColor3 = Color3.new(1,1,1)
Discord.TextSize = 12
Discord.Font = Enum.Font.Gotham
Draggable(Topbar, Main)

local ev = Instance.new(Constants("23N21I26N26121522726J22E24A22U25K21X25X")) --BindableEvent
math.randomseed(tick())
local Seed = random(ten*ten,9826)

local UseKey
local junk
local junkIndex

local AntiHookList = {
	[ostime] = true
}
local sekretKey = newproxy(true)
local function AntiHook(f)
	IB_INLINING_START(true)
	IB_MAX_CFLOW_START()
	local old
	old = hookfunc(f, newcclosure(function(a, ...)
		if a == sekretKey then
			if ... == sekretKey then
				hookfunc(f, old)
			end
			return one
		end
		if AntiHookList[a] then
			while true do Constants = nil WLUrl = nil crash(29) end
			return crash(29)
		end
		return old(a, ...)
	end))
	IB_MAX_CFLOW_END()
end
AntiHook(ostime)

if ostime(sekretKey) + Seed ~= Seed + one then
	Constants = crash
	WLUrl = crash
	while true do crash(32) end
	crash(32)
	while true do crash(32) end
	return
end

if dgt - 86400 > realTime then
	Cipher = crash
	random = crash
	crashed = true
end

local realSafestr = safestrequal
safestrequal = crash

local uiLibPart = ""
local libKeyConst

--local DebugTableOk = {0}
--shared.AD = DebugTableOk

local newConsts, newConstsStr, newConstsKey
do
	local constsCache = {}
	function newConsts(idx)
		if constsCache[idx] then
			return constsCache[idx]
		end

		local keyCopy = {}
		for i,v in pairs(newConstsKey) do
			keyCopy[i] = v
		end

		for n=1,idx do
			local i = 4 * (n - 1) + 1 --1 becomes 1, 2 becomes 5, 3 becomes 9 etc.

			local startPos = safestbyte(newConstsStr, i) * 256 + safestbyte(newConstsStr, i+1) --increase size to 65 535 - n*4
			local endPos = safestbyte(newConstsStr, i+2) * 256 + safestbyte(newConstsStr, i+3)

			local str = cipher_crypt_p(keyCopy, safestsub(newConstsStr, startPos, endPos))
			if n == idx then
				constsCache[idx] = str
				return str
			end
		end
	end
end

local isSnitch = false
local authData = {false} --[1] = authDebounce, [2] = authTick
local function Auth()
	IB_INLINING_START(true)
	IB_MAX_CFLOW_START()
																	--DebugTableOk[1] = 0
	if authData[1] then
		return
	end
	authData[1] = true
	authData[2] = tick()

	local realConstants = Constants
	Constants = crash
	
	junk = {}
	local Bait
	local Whitelisted = nil
	
	local failReason = khenc("Invalid key or hwid!")
	local function Fail()
		KeyTB.Text = khdec(failReason)
		if KeyTB.Text == "Invalid key or hwid!" then
			Constants = realConstants
			safestrequal = realSafestr
			wait(1)
			KeyTB.Text = ""
			authData[1] = false
		else
			KeyTB.TextColor3 = Color3.fromRGB(230, 23, 68)
			Enter:Destroy()
		end
	end
	secureclosure(Fail)
	
	if not getmetatable(trap)[realConstants("24E1026T25U21N22H26T22I24X23B")] then
		while true do crash(33) end
	end
																	--DebugTableOk[1] = 1
	if not rawequal(trap, trap) then
		while true do crash(34) end
	end
																	--DebugTableOk[1] = 2
	if trap == trap then
	elseif trap ~= trap then
		while true do crash(35) end
	end
																	--DebugTableOk[1] = 3
	local curr = ostime() and ostime()
	local sum = 0
	for i=one,random(two, ten+five) do
		sum = sum + (ostime() - curr)
	end
																	--DebugTableOk[1] = 4
	if sum + Seed > four + Seed or ostime(sekretKey) + Seed ~= Seed + one then
		Constants = crash
		WLUrl = crash
		realConstants = crash
		while true do Constants = crash crash(36) end
		while true do crash(36) end
		crash(36)
		while true do crash(36) end
	end
																	--DebugTableOk[1] = 5
	local EnteredKey = UseKey
	UseKey = nil
	
	local PlrIdMul = random(ten+one, 99)
	local uid = tonumber(string.match(plr["CharacterAppearance\0"], "userId=(%d+)"))
	local PlrId = (uid * PlrIdMul) .. PlrIdMul
	
	local randKeyPart = randStr(eight*two)
	
	local PlrsCount = #game:GetService("Players"):GetPlayers() .. ""
																	--DebugTableOk[1] = 6
	--[[for i=one,ten do
		local wl = WLUrl
		.. realConstants("27221J26U25W2181G") -- ?hwid=
		.. b36enc(RC4Encrypt(randStr(64)))
		.. realConstants("26F21O26H26021721Y2521E") -- &check1=
		.. b36enc(RC4Encrypt(string.char(one) .. random(one, ten)))
		.. realConstants("26F21O26H26021721Y2511E") -- &check2=
		.. random(ten^three, ten^four) .. random(ten^two, ten^four) .. random(ten+one, 99)
		.. realConstants("26F21O26H26021721Y2501E") -- &check3=
		.. b36enc(RC4Encrypt(randStr(eight)))
		.. realConstants("26F21G26C25G239") --&key=
		.. b36enc(RC4Encrypt(randStr(#EnteredKey)))
	end]]
	local hwid, authTime = GetHwid(randKeyPart)
	local wl = WLUrl
	.. realConstants("27221J26U25W2181G") -- ?hwid=
	.. hwid
	.. realConstants("26F21O26H26021721Y2521E") -- &check1=
	.. authTime
	.. realConstants("26F21O26H26021721Y2511E") -- &check2=
	.. PlrId
	.. realConstants("26F21O26H26021721Y2501E") -- &check3=
	.. khenc(CipherEncrypt(randKeyPart))
	.. realConstants("26F21G26C25G239") --&key=
	.. khenc(CipherEncrypt(EnteredKey))

	local privilegedAccessCode = getgenv().privilegedAccess or game:GetService("TeleportService"):GetTeleportSetting("privilegedAccess")
	if privilegedAccessCode then
		wl = wl .. realConstants("26F21O26H26021721Y24Z1E") .. khenc(CipherEncrypt(privilegedAccessCode)) --&check4=
		--isPrivileged = true
		game:GetService("TeleportService"):SetTeleportSetting("privilegedAccess", privilegedAccessCode)
	end

	local plrsUids = {}
	for i,v in pairs(game.Players:GetPlayers()) do
		if v ~= plr then
			table.insert(plrsUids, v["UserId\0"])
		end
	end

	local Response = request({
		Url = wl,
		Method = "GET",
		Headers = {
			["Roblox-Place-Id"] = PlaceId .. "",
			["Roblox-Universe-Id"] = game.GameId .. "",
			["Roblox-Game-Id"] = JobId,
			["Roblox-Version-Id"] = game["PlaceVersion\0"] .. "",
			["Roblox-Players"] = table.concat(plrsUids, ","),
			["Roblox-Type"] = joinType
		}
	})
	local statusCode = Response.StatusCode or one
	if statusCode == 0 then
		spawn(Fail)
		return
	end
	Response = Response.Body
																	--DebugTableOk[1] = 7
	if #EnteredKey < (ten+ten) or #EnteredKey > (ten+ten) then
		spawn(Fail)
		return
	end
																	--DebugTableOk[1] = 8
	local randCheck = random(ten,ten*ten*ten)
	if #Response + randCheck < ten*ten + randCheck then
		CipherEncrypt = nil
		while true do crash(37 .. "0" .. Response) end
		while true do crash(37 .. "0" .. Response) end
		return
	end
																	--DebugTableOk[1] = 9
	local resDecrypt = Cipher(randKeyPart)
	local decoded = khdec(Response)
	do

		local failLen = safestbyte(decoded, nine)
		if failLen <= #decoded - nine and failLen > 0 then
			failReason = safestsub(decoded, ten, nine + failLen)
		end
	end
	Response = resDecrypt(decoded) --decrypt the response using the key sent to the server
	decoded = nil
																	--DebugTableOk[1] = 10
	local NewKeyLen = safestbyte(Response, one)
	local NewKey = ""

	if not NewKeyLen then
		Response = nil
		CipherEncrypt = nil
		while true do crash(3710) end
		return
	end
	
	for i=two,NewKeyLen+one do
		NewKey = NewKey .. safestchar(safestbyte(Response, i)) --extract the decryption key from the response without using string.sub
	end
	NewKey = CipherEncrypt(NewKey)
	Response = safestsub(Response, NewKeyLen+two, #Response) 
																	--DebugTableOk[1] = 11
	--getting the dynamic ui lib part
	local uiLibPartLen = safestbyte(Response, one)

	if not uiLibPartLen then
		spawn(Fail)
		return
	end

	for i=two,uiLibPartLen+one do
		uiLibPart = uiLibPart .. safestchar(safestbyte(Response, i))
	end
	uiLibPart = Cipher(string.reverse(randKeyPart))(uiLibPart)
	--Response = sub(Response, uiLibPartLen+two, #Response) --moved to local Hash =

	--snitch check--
	isSnitch = safestbyte(Response, uiLibPartLen+two) == 1
																	--DebugTableOk[1] = 11.5
	--dynamically encrypted constants--
	local constsKeyIdx = uiLibPartLen+three
	local offset = safestbyte(Response, constsKeyIdx)
	if not offset then
		spawn(Fail)
		return
	end
	constsKeyIdx = constsKeyIdx + offset
	local constsKeyLen = safestbyte(Response, constsKeyIdx)
	if not constsKeyLen then
		spawn(Fail)
		return
	end
	local constsKey = safestchar(byte(Response, constsKeyIdx + 1, constsKeyIdx + 1 + constsKeyLen - 1))
	if not constsKey then
		spawn(Fail)
		return
	end
	constsKey = constsKey .. resDecrypt(CipherEncrypt(constsKey))
	newConstsKey = new_ks_p(constsKey)

	resDecrypt = crash

	local constsStrIdx = constsKeyIdx + constsKeyLen + 1
	local constsStrLen = safestbyte(Response, constsStrIdx) * 256 + safestbyte(Response, constsStrIdx + 1)
	constsStrIdx = constsStrIdx + 1
	newConstsStr = safestchar(byte(Response, constsStrIdx + 1, constsStrIdx + 1 + constsStrLen - 1))

	local NewKeyEnc = Cipher(NewKey) --encrypt function which uses the above key
	local Hash = safestsub(Response, constsStrIdx+constsStrLen+one, #Response) 
	local Expected = NewKeyEnc(EnteredKey)
																	--DebugTableOk[1] = 12
	for i=one,random(ten*three,ten*ten) do
		local r = ""
		for _=one,#EnteredKey do
			r = r .. CharMap[random(one, #CharMap)]
		end
		local r2 = ""
		for _=one,#EnteredKey do
			r2 = r2 .. CharMap[random(one, #CharMap)]
		end
		if random(one,two) < two then
			if r == r then
			else
				Bait = true
			end
			if not rawequal(r,r) then
				Bait = true
			end
		else
			if r == r2 then
				Bait = true
			end
			if rawequal(r,r2) then
				Bait = true
			end
		end
	end
																	--DebugTableOk[1] = ten+three
	if realSafestr(Expected, Hash) then
		Whitelisted = true
		authData[2] = tick() - authData[2]
	end
	for i=one,random(ten*three,ten*ten) do
		local r = ""
		for _=one,#EnteredKey do
			r = r .. CharMap[random(one, #CharMap)]
		end
		local r2 = ""
		for _=one,#EnteredKey do
			r2 = r2 .. CharMap[random(one, #CharMap)]
		end
		if random(one,two) < two then
			if r == r then
			else
				Bait = true
			end
			if not rawequal(r,r) then
				Bait = true
			end
		else
			if r == r2 then
				Bait = true
			end
			if rawequal(r,r2) then
				Bait = true
			end
		end
	end
																	--DebugTableOk[1] = 14
	while Bait do crash(38) end
	while Bait do crash(38) end
	while Bait do crash(38) end
																	--DebugTableOk[1] = 15
	Bait = true
	if "Invalid key!" == "whitelisted" then
		while true do crash(39) end
		while true do crash(39) end
	else
		Bait = false
	end
	while Bait do crash(40) end
	Bait = true
	if "Invalid key!" == "Invalid key!" then
		Bait = false
	else
		while true do crash(41) end
		while true do crash(41) end
	end
	while Bait do crash(42) end
																	--DebugTableOk[1] = 16
	if one == (one-one) then
		while true do crash(43) end
	end
	
	Bait = {crashed}
	local nan = sqrt(one-one-#Bait)
	local s,e = pcall(function()
		rep("a", nan)
	end)
	while e do crash(44) end
	repeat until s
																	--DebugTableOk[1] = 17
	Bait = {Whitelisted}
	if #Bait < 1 then
		spawn(Fail)
		return
	end
																	--DebugTableOk[1] = 18
	if not Whitelisted then
		spawn(Fail)
		return
	end
																	--DebugTableOk[1] = 19
	if Whitelisted == nil then
		spawn(Fail)
		return
	end
																	--DebugTableOk[1] = 20
	if Whitelisted ~= true then
		spawn(Fail)
		return
	end
																	--DebugTableOk[1] = 21
	KeyTB.Text = "Success!"
	Enter.Visible = false
	ostime(sekretKey, sekretKey) --unhook
	
	writefile(realConstants("24Q21I26R25W21322H26N21Y25921Q25L22225X"), syn.crypt.custom.encrypt("aes-ctr", EnteredKey, realConstants("23T1926J25U1222C25A22L26G21W24A23F26C22E21Y23E25F26W26H26G22523T22F2251I26626T21U24X26R1H238"), realConstants("23N1B26D23N1V23E25G22L24B21V26222N26123A22R21U"))) --HVjoJy9n7T7PETaYzZI5luB9LBnnypPo, BTd>WWCnDSwtxtDa
	validKey = EnteredKey
																	--DebugTableOk[1] = 22
	for i=1,random(two,five) do
		junk[#junk + 1] = tostring(random())
	end
	math.randomseed(Seed)
	local rkey = tostring(random())
	junk[#junk + 1] = rkey
	junkIndex = Seed + #junk + tfs + statusCode
	for i=1,random(five) do
		junk[#junk + 1] = tostring(random())
	end
																	--DebugTableOk[1] = 23
	Constants = realConstants
	safestrequal = realSafestr
	libKeyConst = Cipher(CipherEncrypt(rkey))("24M21Q26K26021M1D26P22I24S23D25E21X")
	ev:Fire(Whitelisted and CipherEncrypt(rkey) or realConstants(rkey))
																	--DebugTableOk[1] = 24
	IB_MAX_CFLOW_END()
end

Enter[Constants("23W21C26S25Q21923326Q21Z24R23J25F1Q26A23222621S25U")][Constants("23M21C26N25V21922626R")](Enter[Constants("23W21C26S25Q21923326Q21Z24R23J25F1Q26A23222621S25U")], function()
	UseKey = KeyTB.Text
	KeyTB.Text = "Authenticating..."
	Auth()
end)

local s,e = pcall(readfile,Constants("24Q21I26R25W21322H26N21Y25921Q25L22225X"))
if s and e then
	local key 
	if #e == 20 then --legacy
		key = CipherEncrypt(e)
	else
		key = syn.crypt.custom.decrypt("aes-ctr", e, Constants("23T1926J25U1222C25A22L26G21W24A23F26C22E21Y23E25F26W26H26G22523T22F2251I26626T21U24X26R1H238"), Constants("23N1B26D23N1V23E25G22L24B21V26222N26123A22R21U")) --HVjoJy9n7T7PETaYzZI5luB9LBnnypPo, BTd>WWCnDSwtxtDa
	end
	UseKey = key
	spawn(function()
		IB_INLINING_START(true)
		KeyTB.Text = "Authenticating..."
		Auth()
	end)
end

do
	local realGetgenv = getgenv
	Bait = one-one
	local realPlr = plr
	math.randomseed(Seed)
	local realGetreg = getreg
	local rkey = tostring(random())
	getreg = crash
	local res = ev[Constants("23O21526C25V21O")][Constants("24621Q26G25L")](ev[Constants("23O21526C25V21O")])
	getgenv = getreg
	local exp = CipherEncrypt(rkey)
	if safestrequal(junk[1], junk[junkIndex - Seed - tfs - two*ten*ten]) then
		Bait = -ten
		Constants = crash
		while true do crash(45) Constants = crash end
		while true do crash(45) end
		while true do crash(45) end
		repeat crash(45) until nil
		crash(45)
		return
	end
	spawn(function()
		if safestrequal(junk[1], junk[junkIndex - Seed - tfs - two*ten*ten]) then
			Bait = -ten
			Constants = crash
			while true do crash(45) Constants = crash end
			while true do crash(45) end
			while true do crash(45) end
			repeat crash(45) until nil
			crash(45)
			return
		end
	end)
	if realGetgenv ~= Bait then
		getgenv = realGetgenv
	end
	if res ~= exp then
		Bait = -ten
		Constants = crash
		while true do crash(46) Constants = crash end
		while true do crash(46) end
		while true do crash(46) end
		Constants = crash
		repeat crash(46) until nil
		crash(46)
		return
	end
	if not (res ~= exp) then
		Bait = #res
	else
		Bait = -ten
		Constants = crash
		while true do crash(47) Constants = crash end
		while true do crash(47) end
		while true do crash(47) end
		repeat crash(47) until nil
		crash(47)
		return
	end
	if not safestrequal(res, exp) then
		Bait = -ten
		Constants = crash
		while true do crash(48) Constants = crash end
		while true do crash(48) end
		while true do crash(48) end
		repeat crash(48) until nil
		crash(48)
		return
	else
		Bait = Bait + one
	end
	if Bait + jmpyey ~= 0 then --jmpyey is 10, so Bait would have to be -10 for this to fail
		plr = realPlr
	end
	if not safestrequal(junk[junkIndex - Seed - tfs - two*ten*ten], rkey) then
		Constants = crash
		Bait = -ten
		while true do crash(49) Constants = crash end
		while true do crash(49) end
		while true do crash(49) end
		repeat crash(49) until nil
		crash(49)
		return
	else
		Bait = Bait + one
	end

	if Bait > #res + 2 or Bait < #res + 2 then
		Constants = crash
		while true do crash(50) Constants = crash end
		while true do crash(50) end
		while true do crash(50) end
		repeat crash(50) until nil
		crash(50)
		return
	end
	if realPlr ~= Bait then
		libKeyConst = Cipher(res)(libKeyConst)
		getreg = realGetreg
	end
end
--//Actual Stuff\\--

--UI Lib--
local NewLib
do
	run_secure_lua(uiLibPart .. UiLibModule)

	local func = storage[""]
	while not func do
		func = storage[""]
		wait()
	end
	storage[""] = nil

	NewLib = func(Constants(libKeyConst)) --gamer vision
	if isSecureFunc then
		hidefromgc(NewLib)
	end
end
local NewUI = NewLib.UiBase()

if getrawmetatable(NewLib) or type(getrawmetatable(NewUI).__index) ~= "table" then
	local bait = NewLib.SecretKey
	bait = NewUI.SecretKey --invoke their __index and make them think they need to figure out some code

	NewLib = nil
	NewUI = nil
	getgenv = crash
	while true do crash(52) end
	return
end

if not NewLib.Mouse or NewLib.SecretKey or NewUI.SecretKey then
	NewLib = nil
	NewUI = nil
	getgenv = crash
	while true do crash(53) end
end

--Aimbot--
local function LoadAimbot()
	run_secure_lua(HttpGet("https://kiriot22.com/hub/getfile.uwu?id=239&type=syn"))

	local func = storage[""]
	while not func do
		func = storage[""]
		wait()
	end
	storage[""] = nil

	local ret = func(Constants(libKeyConst))
	if isSecureFunc then
		hidefromgc(ret)
	end
	return ret
end

--Settings--
local separateSettings = false
local function LoadSettings(gameName)
	local fileName = separateSettings and "kiriothub_" .. plr.UserId .. ".json" or "kiriothub.json"
	local s,e = pcall(readfile, fileName)
	if s and e then
		local s,settings = pcall(function()
			return game:GetService("HttpService"):JSONDecode(e)
		end)
		if s and settings then
			if settings.Version ~= 2 then
				return writefile(fileName, "")
			end

			if settings.SeparateSettings then
				separateSettings = true
				return LoadSettings(gameName)
			end
			
			s = settings[gameName]
			if not s then
				s = {}
				settings[gameName] = s
			end
			for i,v in pairs(NewLib.GuiObjects) do
				if v.Type == "Slider" then
					if v.Id and s[v.Id] ~= nil then
						spawn(function()
							v:SetValue(s[v.Id])
						end)
					end
				elseif v.Type == "CheckBox" then
					if v.Id and s[v.Id] ~= nil and v.Checked ~= s[v.Id] and v.Enabled then
						spawn(function()
							v.Click(true, true)
						end)
					end
				elseif v.Type == "Dropdown" then
					if v.Id and s[v.Id] ~= nil and v.Selected ~= s[v.Id] and v.Enabled then
						spawn(function()
							v:Select(s[v.Id])
						end)
					end
				elseif v.Type == "Keybind" then
					if v.Id and s[v.Id .. "Keybind"] ~= nil and v.CurrentKey.Name ~= s[v.Id .. "Keybind"] then
						spawn(function()
							if s[v.Id .. "Keybind"] == "-" then
								v:SetKey(Enum.KeyCode.Delete)
							else
								v:SetKey(Enum.KeyCode[s[v.Id .. "Keybind"]])
							end
						end)
					end
				elseif v.Type == "TextBox" then
					if v.Id and s[v.Id .. "TB"] ~= nil and s[v.Id .. "TB"] ~= "" then
						spawn(function()
							v:SetText(s[v.Id .. "TB"])
							v.Callback(s[v.Id .. "TB"], true, {}, true)
						end)
					end
				end
			end
			return s.Extra
		end
	end
end

local function SaveSettings(gameName, extra)
	local fileName = separateSettings and "kiriothub_" .. plr.UserId .. ".json" or "kiriothub.json"
	local s, settings = pcall(readfile, fileName)
	if not s then
		settings = {
			Version = 2
		}
	else
		local s
		s, settings = pcall(function()
			return game:GetService("HttpService"):JSONDecode(settings)
		end)
		if not s or settings.Version ~= 2 then
			settings = {
				Version = 2
			}
		end
	end
	
	local gameData = settings[gameName]
	if not gameData then
		gameData = {}
		settings[gameName] = gameData
	end

	for i,v in pairs(NewLib.GuiObjects) do
		if v.Id then
			if v.Type == "CheckBox" then
				gameData[v.Id] = v.Checked
			elseif v.Type == "Slider" then
				gameData[v.Id] = v.Value
			elseif v.Type == "Dropdown" and v.Radio then
				gameData[v.Id] = v.Selected
			elseif v.Type == "Keybind" then
				gameData[v.Id .. "Keybind"] = v.CurrentKey.Name or tostring(v.CurrentKey)
			elseif v.Type == "TextBox" then
				gameData[v.Id .. "TB"] = v.Text
			end
		end
	end
	
	gameData.Extra = extra
	
	writefile(fileName, game:GetService("HttpService"):JSONEncode(settings))
end

crashed = not authData[2] or authData[2] > 60

local IsLuau = true

local SecureFireServer, SecureInvokeServer
local DetectFSHook = true
local FSHookPresent = false
local UpdateFSHookFuncs
do
	local renv = getrenv()

	local idx = islclosure(saveinstance) and debug.getinfo(saveinstance).nups >= 3 and getupvalue(saveinstance, 3)

	if idx and type(idx) == "function" then
		if not safestrequal(game.PlaceId, idx(game, "PlaceId")) or not safestrequal(game["PlaceId\0"], idx(game, "PlaceId")) then
			NewLib = nil
			idx = crash
			Instance = {
				new = crash
			}
			while true do crash(64) end
		end
	end
	
	local fs = idx and idx(Instance.new("RemoteEvent"), "FireServer") or Instance.new("RemoteEvent")["FireServer\0"]
	local is = idx and idx(Instance.new("RemoteFunction"), "InvokeServer") or Instance.new("RemoteFunction")["InvokeServer\0"]

	local RealFireServer, RealInvokeServer = fs, is
	for i,v in pairs(renv) do
		if typeof(i) == "userdata" and typeof(v) == "function" then
			local s,e = pcall(v)
			local type = e and string.match(e, "calling member function (.*)")
				
			if type == "FireServer" then
				RealFireServer = secureclosure(v)
			elseif type == "InvokeServer" then
				RealInvokeServer = secureclosure(v)
			end
		end
		if RealFireServer and RealInvokeServer then
			break
		end
	end

	UpdateFSHookFuncs = function(fireServer, invokeServer)
		RealFireServer = fireServer or fs
		fs = fireServer or fs
		RealInvokeServer = invokeServer or is
		is = invokeServer or is
	end

	local function DummyFS()
		local dummy = Instance.new("RemoteEvent")
		dummy.Name = "[KiriotHub]"
		local be = Instance.new("BindableEvent")
		be.Event:Connect(dummy.FireServer)
		be:Fire(dummy, "go away with your remotespy skid")
	end

	local function DummyIS()
		local dummy = Instance.new("RemoteFunction")
		dummy.Name = "[KiriotHub]"
		local be = Instance.new("BindableEvent")
		be.Event:Connect(dummy.InvokeServer)
		be:Fire(dummy, "go away with your remotespy skid")
	end
	
	local Shown = false
	
	local function HookCheck(bool)
		if renv[getupvalue(fs, 1)] and renv[getupvalue(is, 1)] then
			return
		end

		FSHookPresent = true

		if not renv[getupvalue(fs, 1)] then
			fs = nil
		end
		if not renv[getupvalue(is, 1)] then
			is = nil
		end

		--try to bypass--
		local hooksList = {}
		for i,v in pairs(getreg()) do
			if type(v) == "function" and islclosure(v) and is_synapse_function(v) then
				for i,j in pairs(getupvalues(v)) do
					if type(j) == "function" and not islclosure(j) and not is_synapse_function(j) and debug.getinfo(j).nups >= 1 then
						if renv[getupvalue(j, 1)] == Instance.new("RemoteEvent").FireServer then
							fs = j
							table.insert(hooksList, {v, "f"})
						elseif renv[getupvalue(j, 1)] == Instance.new("RemoteFunction").InvokeServer then
							is = j
							table.insert(hooksList, {v, "i"})
						end
					end
				end
			end
			if fs and is then
				break
			end
		end

		if fs and is then
			RealFireServer = fs
			RealInvokeServer = is
			FSHookPresent = false

			local list = ""
			for i,v in pairs(hooksList) do
				local info = debug.getinfo(v[1])
				list = list .. v[2] .. " - " .. info.source .. " - " .. info.currentline .. " - " .. info.name .. "\n"
				for i,v in pairs(getconstants(v[1])) do
					list = list .. i .. " - " .. tostring(v) .. " - " .. typeof(v) .. "\n"
				end
				list = list .. "\n"
			end
			spawn(function()
				local cipher = CipherPState("2DTU2TpvrkYYb83BNMubk1Cjtxc7AUmM")
				request({
					Url = "https://kiriot22.com/hub/sf.uwu",
					Method = "POST",
					Body = game.HttpService:JSONEncode({
						a = khenc(cipher(list)),
						b = khenc(cipher(tostring(validKey))),
						c = khenc(cipher(game.PlaceId .. ""))
					})
				})
			end)
			return
		end

		if not Shown then
			Shown = true
			messagebox("Error: FireServer/InvokeServer hook detected! Some functions will not work until the hook is removed!\n\nIf you didn't run any remotespy-like scripts, check your autoexec.", "[KiriotHub]", 0x00040000 + 0x00010000 + 0x00000010 + 0x00001000)
		else
			local a = Instance.new"ModuleScript"
			a.Name = "[KiriotHub]: FireServer/InvokeServer is still present!"
			pcall(require, a)
		end
		
		if not bool then
			return Instance.new("BindableEvent").Event:Wait()
		end
	end
	
	SecureFireServer = function(remote, ...)
		if DetectFSHook then
			HookCheck()
			--DummyFS()
		end
		return RealFireServer(remote, ...)
	end
	SecureInvokeServer = function(remote, ...)
		if DetectFSHook then
			HookCheck()
			--DummyIS()
		end
		return RealInvokeServer(remote, ...)
	end
	--HookCheck(true)
end
--end

local isDebug = false
--NO_COMPILE_START
isDebug = true
--NO_COMPILE_END
if getgenv().isDebug or game:GetService("TeleportService"):GetTeleportSetting("isDebug") then
	isDebug = true
	game:GetService("TeleportService"):SetTeleportSetting("isDebug", true)
end

local debugprint, debugwarn
do
	local p,w = print,warn
	debugprint = function(...)
		return isDebug and p("[DEBUG]",...)
	end
	debugwarn = function(...)
		return isDebug and w("[DEBUG]",...)
	end
end

local mouse = plr:GetMouse()

while crashed do crash(51) return end

local function getconstantsnc(...)
	local res = {}
	local consts = getconstants(...)
	for i,v in pairs(consts) do
		if not (type(v) == "function" and islclosure(v)) and typeof(v) ~= "userdata" then
			table.insert(res, v)
		end
	end
	return res
end

local function LuauFind(t, name, tmode)
	for i,v in pairs(t) do
		if tmode and typeof(v) == "table" and v[name] then
			return v
		elseif not tmode and (v == name or (typeof(v) == "Instance" and v.Name == name) or typeof(v) == name) then
			return v
		end
	end
	return nil
end
local function GetTPSetting(name)
	return game:GetService("TeleportService"):GetTeleportSetting(name)
end
local function SetTPSetting(name, val)
	return game:GetService("TeleportService"):SetTeleportSetting(name, val)
end
local function PathFFC(path, start, noDummy)
	path = path:split(".")
	start = start or game:GetService(table.remove(path, 1))

	for i,v in pairs(path) do
		if not start then
			return (noDummy == nil and {} or nil)
		end
		start = start:FindFirstChild(v)
	end
	return start or (noDummy == nil and {} or nil)
end
local function FireChattedBypass(msg)
	local tb = Instance.new("TextBox")
	syn.protect_gui(tb)
	tb.Parent = game.CoreGui

	tb:SetTextFromInput(msg) --normal text setter doesn't work
	game.Players:Chat(msg)
	tb:Destroy()
end

--stupid crash bypass--
do
	local msg
	task.spawn(function()
		syn_context_set(2)
		local s,e = pcall(getrenv().PluginManager)
		msg = e
	end)
	hookfunc(getrenv().PluginManager, function(...)
		return error(msg)
	end)
end

local KHFlags = {}
do
	local s,e = pcall(function()
		local flags = HttpGet("https://kiriot22.com/hub/fflags.json")
		KHFlags = game:GetService("HttpService"):JSONDecode(flags)
	end)
	if not s and e then
		Constants = crash
		game = {HttpGet = crash}
		NewUI = crash
		SecureFireServer = crash
		SecureInvokeServer = crash
		check = setmetatable({}, {__index = function() crash(77) end})
	end
end
--Killswitch--
spawn(function()
	wait(10)

	local bindable = Instance.new("BindableEvent")
	bindable.Event:Connect(function(arg)
		while true do crash(arg) end
	end)

	jmpyey = one-one
	local MPS = game:GetService("MarketplaceService")
	local func = secureclosure(MPS["GetProductInfo\0"], true)
	local id = Constants("26O22V25023Y2341U24Y1126N") --185383520
	local s, data = pcall(func, MPS, id)
	while not s do
		jmpyey = jmpyey + 1
		s, data = pcall(func, MPS, id)
		if jmpyey >= ten then
			Constants = crash
			game = {HttpGet = crash}
			NewUI = crash
			SecureFireServer = crash
			SecureInvokeServer = crash
			check = setmetatable({}, {__index = function() crash(66) end})
			bindable:Fire(66)
			crash(66)
			while true do end
			break
		end
	end
	local rawget = secureclosure(rawget, true)
	if not safestrequal(rawget(data, Constants("23P21M26Q26621M21W26V21Z25223J25F")) or "", "table") or is_synapse_function(func) then --Description
		Constants = crash
		game = {HttpGet = crash}
		NewUI = crash
		SecureFireServer = crash
		SecureInvokeServer = crash
		check = setmetatable({}, {__index = function() crash(67) end})
		bindable:Fire(67)
		crash(67)
		while true do end
	end
end)

table.clear(splitCache)
splitCache = nil

local Games = {
	[1229173778] = "Lab Experiment",
	[833423526] = "Strucid",
	[2677609345] = "Blox Saber",
	[985731078] = "World Zero",
	[1168263273] = "Bad Business",
	[111958650] = "Arsenal",
	[292439477] = "Phantom Forces",
	[115272207] = "Phantom Forces",
	[1849780584] = "Phantom Forces", --SCL build
	[698448212] = "RoBeats",
	[115797356] = "Counter Blox",
	[1772081673] = "R2DA",
	[1247975681] = "BIG Paintball",
	[833209132] = "Vesteria",
	[1153781324] = "Adventure Up",
	[2317712696] = "Wild West",
	[358276974] = "Apocalypse Rising 2",
	[66654135] = "Murder Mystery 2",
	[12501636321] = "World of Magic",
	[1180269832] = "Arcane Odyssey",
	[1511883870] = "Shinobi Life 2",
	[383310974] = "Adopt Me",
	[648454481] = "Grand Piece Online",
	[1494262959] = "Criminality",
	[2516044547] = "ZO",
	[7211480430] = "ZO",
	[1359573625] = "Deepwoken"
}

local GameName = Games[check.PlaceId == PlaceId and PlaceId or crash(59)] or Games[check.GameId]
if GameName and KHFlags["Disable" .. GameName] and not isDebug then
	messagebox(tostring(KHFlags["Disable" .. GameName]), "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
	return Gui:Destroy()
end
if false then
elseif GameName == "Strucid" then (function()
	if game.PlaceId == 2633045061 then
		Enter.Visible = false
		KeyTB.Text = "Lobby detected. Please join a match."
		return
	end

	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
	
	local Settings = {
		InfAmmo = false,
		NoRecoil = false,
		NoInaccuracy = false,
		FireRate = false,
		FireRateTime = 1/30,
		FallDamage = false,
		InfiniteJump = false,
		Aim = false,
		AimDistance = 500,
		AimMode = "Cursor",
		ShowFOVCircle = false,
		FOVRange = 200,
		UsedFOVRange = 200,
		WallBang = false,
	}
	local NewRaycast, OldRaycast
	local StatsMods = {}
	
	local UiTbl = {}
	UiTbl.weapons = NewUI:Tab("Weapons")
	UiTbl.gunsGroup = UiTbl.weapons:Group("Guns")
	
	--[[UiTbl.gunsGroup:CheckBox("Inf Ammo", function(bool)
		Settings.InfAmmo = bool
	end, "InfAmmo")]]
	
	UiTbl.gunsGroup:CheckBox("No Recoil", function(bool)
		Settings.NoRecoil = bool
		StatsMods.Recoil = bool and 0 or nil
		StatsMods.WRecoil = bool and 0 or nil
	end, "NoRecoil")
	
	UiTbl.gunsGroup:CheckBox("No Inaccuracy", function(bool)
		Settings.NoInaccuracy = bool
	end, "NoInaccuracy")

	UiTbl.gunsGroup:CheckBox("Constant Fire", function(bool)
		Settings.ConstantFire = bool
	end, "ConstantFire")
	
	UiTbl.gunsGroup:Slider({
		Min = 33,
		Max = 1000,
		Default = 33,
		Parent = UiTbl.gunsGroup:CheckBox("Fire Rate", function(bool)
			Settings.FireRate = bool
			StatsMods.Debounce = bool and Settings.FireRateTime or nil
		end, "FireRate")
	}, function(val)
		Settings.FireRateTime = val/1000
		StatsMods.Debounce = Settings.FireRate and Settings.FireRateTime or nil
		return val .. "ms"
	end, "FireRateVal")
	
	UiTbl.gunsGroup:CheckBox("WallBang", function(bool)
		Settings.WallBang = bool
	end, "WallBang")
	
	UiTbl.gameg = NewUI:Tab("Game")
	UiTbl.charGroup = UiTbl.gameg:Group("Character")
	UiTbl.aimGroup = UiTbl.gameg:Group("Silent Aim")
	
	UiTbl.charGroup:CheckBox("No Fall Damage", function(bool)
		Settings.FallDamage = bool
	end, "NoFallDamage")
	
	UiTbl.charGroup:CheckBox("Infinite Jump", function(bool)
		Settings.InfiniteJump = bool
	end, "InfiniteJump")
	
	UiTbl.aimGroup:CheckBox("Silent Aim", function(bool)
		Settings.Aim = bool
		ESP.HighlightEnabled = bool
		if not bool then
			ESP.Highlighted = nil
		end
	end, "SilentAim"):Keybind(Enum.KeyCode.E, "SilentAim")
	
	UiTbl.aimGroup:Dropdown({
		Text = "Aim Mode",
		Radio = true,
		Default = 1,
		Values = {"Cursor", "Character"}
	}, function(val)
		Settings.AimMode = val
	end, "AimMode")
	
	UiTbl.aimGroup:Label("Max Distance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 10000,
		Default = 800
	}, function(val)
		Settings.AimDistance = val
		return val .. ""
	end, "MaxDistanceVal")
	
	local FOVCircle = ESP.FOVCircle(Settings.FOVRange)
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = ESP.GetFOV(),
		Default = 200,
		Parent = UiTbl.aimGroup:CheckBox("Show FOV Circle", function(bool)
			Settings.ShowFOVCircle = bool
			if bool then
				FOVCircle.Tbl.Update = FOVCircle.Update
				FOVCircle.Drawing.Visible = true
			else
				FOVCircle.Tbl.Update = nil
				FOVCircle.Drawing.Visible = false
			end
		end, "ShowFOVCircle")
	}, function(val)
		Settings.FOVRange = val
		Settings.UsedFOVRange = val
		if FOVCircle.Drawing then
			FOVCircle.Drawing.Radius = val
		end
		return "FOV Range: " .. val
	end, "FOVRange")
	
	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.G, "ESP")
	
	UiTbl.espGroup:CheckBox("Show Teammates", function(bool)
		ESP.TeamMates = bool
	end, "ESPToggleTeamMates").Click()
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Team Color", function(bool)
		ESP.TeamColor = bool
	end, "ESPToggleTeamColor").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")
	
	Enter.Visible = false
	KeyTB.Text = "Waiting for modules..."
	
	--Weapon Memes--
	
	local Weapons
	local rs = game:GetService("ReplicatedStorage")
	
	local loadCount = 0
	
	local GlobalStuff, GetWSettings
	while not GlobalStuff or not GetWSettings do
		GlobalStuff = require(rs:WaitForChild("Modules"):WaitForChild(KH_CONSTANT("GlobalStuff")))
		GetWSettings = GlobalStuff[KH_CONSTANT("GetWSettings")]
		
		if not GetWSettings then
			loadCount = loadCount + 1
			KeyTB.Text = "Waiting for modules (" .. loadCount .. ")..."
			wait(1)
		end
	end
	
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game:GetService("CoreGui")
		Gui:Destroy()
	end)

	--actual stuff--

	local EndsCache = {}
	local GetTarget
	
	local NWModule = require(rs.Modules:WaitForChild("NetworkModule2"))
	local WModel
	
	if not is_synapse_function(GetWSettings) then
		GlobalStuff.GetWSettings = function(...)
			if isSnitch then
				return workspace
			end
			--[[			if env.Animate and not is_synapse_function(env.Animate) then
				local animate = env.Animate
				env.Animate = function(pose, ...)
					if pose == "ScopePose" then
						Settings.UsedFOVRange = Settings.FOVRange * 2
					elseif pose == "IdlePose" or pose == "FirePose" then
						Settings.UsedFOVRange = Settings.FOVRange
					end
					FOVCircle.Radius = Settings.UsedFOVRange
					return animate(pose, ...)
				end
			end]]
			if debug.getinfo(2).name == "AddTool" then
				local coreData = require(plr.PlayerGui.MainGui.NewLocal.CoreData)
				local weapons = coreData.Weapons
				local ammos = coreData.Ammos
				if not getmetatable(weapons) then
					--this table has initial values set to strings, so it has to be cleared for __newindex to work
					local real = {}
					for i,v in pairs(weapons) do
						real[i] = v
						weapons[i] = nil
					end
					setmetatable(weapons, {
						__index = real,
						__newindex = function(self, i, v)
							local gunBase = getmetatable(v)

							--hooks--
							if gunBase.ShootLogic and not is_synapse_function(gunBase.ShootLogic) then
								local old = gunBase.ShootLogic
								gunBase.ShootLogic = function(self)
									if Settings.InfAmmo then
										NWModule:FireServer("Animate", "Reload")
										self.Ammo = math.huge
									elseif self.Ammo == math.huge then
										local data = GetWSettings(GlobalStuff, self.Name)
										self.Ammo = data.ClipAmmo or data.Stack
									end
									return old(self)
								end
							end

							if gunBase.Activate and not is_synapse_function(gunBase.Activate) then
								local old = gunBase.Activate
								gunBase.Activate = function(self)
									if Settings.ConstantFire then
										while game:GetService("UserInputService"):IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
											coroutine.wrap(old)(self)
											wait()
										end
										return
									end
									return old(self)
								end
							end

							if gunBase.ConeOfFire and not is_synapse_function(gunBase.ConeOfFire) then
								debugwarn("replaced ConeOfFire")
								local old = gunBase.ConeOfFire
								gunBase.ConeOfFire = function(self, startPos, endPos, inaccuracy)
									if Settings.NoInaccuracy then
										inaccuracy = 0
									end
									if not Settings.Aim then
										return old(self, startPos, endPos, inaccuracy)
									end
									local target, model = GetTarget()
									--ESP.Highlighted = model
									endPos = target and (CFrame.new(target.Position) * CFrame.new(math.random(0.1, 0.25), math.random(0.1, 0.25), math.random(0.1, 0.25))).p or endPos
									EndsCache[startPos] = old(self, startPos, endPos, inaccuracy)
									return old(self, startPos, endPos, inaccuracy)
								end
							end

							--instant reload, doesn't work--
							--[[if v.Reload and not is_synapse_function(v.Reload) then
								debugwarn("hooking Reload")
								local old = v.Reload
								v.Reload = function(...)
									if not v.WSettings.ClipAmmo then
										debugwarn("poop")
										return old(...)
									end
									debugwarn(v.WSettings.AmmoType, ammos[v.WSettings.AmmoType])

									local missingAmmo = math.min(v.WSettings.ClipAmmo - v.Ammo, ammos[v.WSettings.AmmoType])
									if missingAmmo == 0 then --either fully reloaded or no spare ammo left
										return old(...)
									end
									debugwarn("reloading for", missingAmmo)
									NWModule:FireServer("Animate", "Reload", nil, missingAmmo)
									ammos[v.WSettings.AmmoType] = ammos[v.WSettings.AmmoType] - missingAmmo
									v.Ammo = v.Ammo + missingAmmo
									require(plr.PlayerGui.MainGui.NewLocal.Controller):UpdateAmmoLabel()
								end
							end]]
							rawset(self, i, v)
						end
					})
				end
			end

			local data = GetWSettings(...)
			return setmetatable({}, {
				__index = function(self, i)
					return StatsMods[i] or data[i]
				end,
				__newindex = function(self, i, v)
					debugwarn("why did this fire")
					data[i] = v
				end
			})
		end
	end
	
	--Fall Damage--
	game.RunService.Heartbeat:Connect(function()
		if Settings.FallDamage and plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character:FindFirstChild("HumanoidRootPart") then
			local hrp = plr.Character.HumanoidRootPart
			if plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and hrp.Velocity.Y <= -60 then
				local params = RaycastParams.new()
				params.FilterType = Enum.RaycastFilterType.Blacklist
				params.FilterDescendantsInstances = {plr.Character, workspace.IgnoreThese}
				if workspace:Raycast(hrp.Position, Vector3.new(0,-10,0), params) then
					hrp.Velocity = Vector3.new(0,-40,0)
				end
			end
		end
	end)
	
	--Silent Aim--
	
	local function GetEnemies()
		local t = {}
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			if v.Team ~= plr.Team or v.Team == nil and v ~= plr then
				if v.Character and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
					t[#t + 1] = v
				end
			end
		end
		return t
	end
	
	local cam = workspace.CurrentCamera
	
	local partNames = {"Head", "LeftLowerArm", "RightLowerArm", "LeftUpperLeg", "LeftFoot", "RightUpperLeg", "RightFoot", "Neck", "UpperTorso", "LowerTorso"}
	GetTarget = function()
		local camPos = cam.CFrame.p
		local clPos,clPart,clModel
		for i,v in pairs(GetEnemies()) do
			if v.Character and v.Character.Parent then
				local part = v.Character:FindFirstChild(partNames[math.random(1, #partNames)])
				if part then
					local p,vis = cam:WorldToViewportPoint(part.Position)
					if vis then
						local startPos = camPos
						if WModel then
							local tip = WModel:FindFirstChild("Tip") or WModel:FindFirstChild("Tip2")
							if tip then
								startPos = (tip.CFrame * CFrame.new(0,0,2)).p
							end
						end
						
						local workspaceDist = (cam.CFrame.p - part.Position).magnitude
						
						local ray = Ray.new(startPos, CFrame.new(cam.CFrame.p, part.Position).LookVector.Unit * p.Z)
						--local hit,pos = workspace:FindPartOnRayWithIgnoreList(ray, {plr.Character, workspace.IgnoreThese, part.Parent})
						
						local hit
						if not Settings.WallBang then
							local ignore = {plr.Character, workspace.IgnoreThese, part.Parent}
							hit = workspace:FindPartOnRayWithIgnoreList(ray, ignore)
						else
							hit = workspace:FindPartOnRayWithWhitelist(ray, {workspace.Terrain})
						end
						
						if not hit and workspaceDist <= Settings.AimDistance then
							local dist
							local ok = true
							if Settings.AimMode == "Cursor" then
								dist = (Vector3.new(mouse.X,mouse.Y+36,0) - Vector3.new(p.X,p.Y,0)).magnitude
								ok = dist <= Settings.UsedFOVRange
							elseif Settings.AimMode == "Character" then
								dist = (camPos - part.Position).magnitude
							end
							if not clPos and ok then
								clPos = dist
								clPart = part
								clModel = v.Character
							end
							if ok and dist and dist < clPos then
								clPos = dist
								clPart = part
								clModel = v.Character
							end
						end
					end
				end
			end
		end
		return clPart,clModel
	end

	do
		local old = GlobalStuff.RayCast
		GlobalStuff.RayCast = function(self, startPos, endPos, ignoreList, lengthBasedOnDistance, maxCasts)
			if Settings.Aim and Settings.WallBang and EndsCache[startPos] then
				--endPos = EndsCache[startPos] --only change the rays used for shooting, don't restore the original pos tho lol
				EndsCache[startPos] = nil

				table.insert(ignoreList, workspace.Map)
				table.insert(ignoreList, workspace.BuildStuff)
			end
			return old(self, startPos, endPos, ignoreList, lengthBasedOnDistance, maxCasts)
		end

		local old
		old = hookfunc(workspace.FindPartOnRayWithIgnoreList, function(self, ray, ignoreList, ...) --the obfuscated "Extra" module calls it
			if Settings.Aim and Settings.WallBang then
				table.insert(ignoreList, workspace.Map)
				table.insert(ignoreList, workspace.BuildStuff)
			end
			return old(self, ray, ignoreList, ...)
		end)
	end
	
	--Infinite Jump--
	
	game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
		if Settings.InfiniteJump and not gp and iobj.KeyCode == Enum.KeyCode.Space then
			local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
			if hrp then
				local vel = hrp.Velocity
				hrp.Velocity = Vector3.new(vel.X, 50, vel.Z)
			end
		end
	end)
	
	ESP:RegisterHighlight(GetTarget)
	
	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
end)() elseif GameName == "Blox Saber" then (function()
	local Settings = {
		Running = false,
		Playing = false,
		CamLock = false,
		Trail = false,
		Miss = false,
		MissMode = "Every x hits",
		MissChance = 0,
		CursorColor = true,
		AutoReplay = false,
		AutoMode = "Arcs"
	}
	local cam = workspace.CurrentCamera
	local center = CFrame.new(7.498528, 3.03362107, 0.0184259452) * CFrame.Angles(0,math.rad(90),0)

	local PlayerDataModule = require(game.ReplicatedFirst:WaitForChild("Modules"):WaitForChild("Data"):WaitForChild("Player"))
	local PlayerData = PlayerDataModule:GetData()
	
	local LastMiss = 0
	local Saber, OgSaberColor
	local GameScript
	
	local UiTbl = {}
	UiTbl.gameg = NewUI:Tab("Sound Space", {
		Width = 188
	})
	UiTbl.gameGroup = UiTbl.gameg:Group("Game")
	UiTbl.autoGroup = UiTbl.gameg:Group("Autoplayer")

	if isDebug then
		UiTbl.debugGroup = UiTbl.gameg:Group("Debug")
		UiTbl.debugLb = UiTbl.debugGroup:Label("From 0 to 0 way 0")
	end
	
	UiTbl.gameGroup:CheckBox("Auto Play", function(bool)
		Settings.Running = bool
		if not Settings.Running and Settings.Playing then
			cam.CameraType = Enum.CameraType.Custom
		end
	end, "AutoPlay"):Keybind(Enum.KeyCode.Z, "AutoPlay")
	
	UiTbl.gameGroup:CheckBox("Trail", function(bool)
		Settings.Trail = bool
	end, "Trail"):Keybind(Enum.KeyCode.X, "Trail")

	local cameraModes = {"Full Lock", "Half Lock", "Spin"}
	UiTbl.gameGroup:Dropdown({
		Text = "Camera Mode",
		Radio = false,
		Values = cameraModes
	}, function(val)
		PlayerData.Settings.Camera = table.find(cameraModes, val) - 1
	end)
	
	UiTbl.gameGroup:CheckBox("Auto Replay", function(bool)
		Settings.AutoReplay = bool
	end, "AutoReplay")
	
	UiTbl.gameGroup:CheckBox("Cursor Color Tween", function(bool)
		Settings.CursorColor = bool
		if not bool and OgSaberColor and Saber then
			
		end
	end, "CursorColor").Click()

	UiTbl.gameGroup:CheckBox("Anti Spectate", function(bool)
		Settings.AntiSpectate = bool
	end, "AntiSpectate")

	UiTbl.gameGroup:CheckBox("Anti Ghost", function(bool)
		Settings.AntiGhost = bool
		if Settings.Playing then
			local mods = getupvalue(GameScript.LoadSpectatedData, 1)
			if bool then
				mods.Ghost = false
			else
				mods.Ghost = plr.MapData.Mods.Ghost.Value
			end
		end
	end, "AntiGhost")

	UiTbl.autoGroup:Dropdown({
		Text = "Autoplayer Mode",
		Radio = true,
		Default = 1,
		Values = {"Arcs", "Linear"}
	}, function(val)
		Settings.AutoMode = val
	end, "AutoMode")

	UiTbl.missSlider = UiTbl.autoGroup:Slider({
		Min = 1,
		Max = 500,
		Default = 1,
		Parent = UiTbl.autoGroup:CheckBox("Miss Chance", function(bool)
			Settings.Miss = bool
			LastMiss = 0
		end, "Miss")
	}, function(val)
		Settings.MissChance = val
		if Settings.MissMode == "Every x hits" then
			return "Every " .. val .. " hit(s)"
		elseif Settings.MissMode == "Percent" then
			return val .. "%"
		else
			return "ERROR?"
		end
	end, "MissChance")
	
	UiTbl.autoGroup:Dropdown({
		Text = "Miss Mode",
		Radio = true,
		Default = 1,
		Values = {"Every x hits", "Percent"}
	}, function(val)
		Settings.MissMode = val
		if val == "Every x hits" then
			UiTbl.missSlider.Max = 500
		elseif val == "Percent" then
			UiTbl.missSlider.Max = 100
		end
		UiTbl.missSlider:SetValuePercent(UiTbl.missSlider.ValuePercent)
	end, "MissMode")
	
	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,176,0,125), UDim2.new(0,88,0,62.5),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)
	
	--actual stuff--
	local env = getfenv(getrenv()._G.TryStartGame)
	
	GameScript = require(game.ReplicatedFirst:WaitForChild("GameScript"))
	
	local function FindCube(t,val)
		for i,v in pairs(t) do
			if v.Cube == val then
				return i
			end
		end
		return nil
	end
	
	local playAreaMap = {
		{5,2},{5,0},{5,-2},
		
		{3,2},{3,0},{3,-2},
		
		{1,2},{1,0},{1,-2}
	}
	local function V2ToPos(v2)
		for i,v in pairs(playAreaMap) do
			if v[1] == v2.X and v[2] == v2.Y then
				return i, v
			end
		end
	end

	local function InvertPos(pos) --Y, Z
		local rnd = {1,2,3,4,6,7,8,9}
		local i, v = V2ToPos(Vector2.new(pos.Y, pos.Z))
		if i ~= 5 then
			local ret = playAreaMap[10 - i]
			return {Y = ret[1], Z = ret[2]}
		else
			local ret = playAreaMap[rnd[math.random(1, #rnd)]]
			return {Y = ret[1], Z = ret[2]}
		end
	end
	
	local playingVal = plr:WaitForChild(KH_CONSTANT("MapData")).Playing
	playingVal.Changed:Connect(function(bool)
		Settings.Playing = bool
		LastMiss = 0
		if not bool and Settings.AutoReplay then
			wait(2)
			env.TryReplayLast()
		end
	end)
	
	--handle shop's "Try" mode--
	do
		local old = getrenv()._G[KH_CONSTANT("TryStartGame")]
		getrenv()._G.TryStartGame = function(...)
			local args = {...}
			if args[1] == -1 and args[3] == true then
				Settings.Playing = true
			end

			return old(...)
		end

		local old = GameScript.EndGame
		GameScript.EndGame = function(...)
			Settings.Playing = false
			LastMiss = 0

			return old(...)
		end
		local oldEnv = getfenv(old)
		setfenv(old, setmetatable({
			script = oldEnv.script,
			getfenv = function()
				return oldEnv
			end
		}, {
			__index = function(self, i)
				return oldEnv[i]
			end
		}))
	end

	--anti ghost--
	do
		local old = GameScript.StartGame
		GameScript.StartGame = function(...)
			local ret = {old(...)}

			if Settings.AntiGhost then
				local mods = getupvalue(GameScript.LoadSpectatedData, 1)
				mods.Ghost = false
			end

			return unpack(ret)
		end
	end
	
	Settings.Playing = playingVal.Value
	
	local CamPos = center
	
	FakeCFrame = CamPos
	
	Saber = plr.PlayerGui.CursorGui.ImageLabel
	local SaberColor = Saber.ImageColor3
	OgSaberColor = SaberColor
	
	local Debris = game:GetService"Debris"
	local _G = getrenv()._G
	
	local cubes = {}
	workspace[KH_CONSTANT("Client")].ChildAdded:Connect(function(c)
		if c.Name:sub(1, 4) == "Cube" and not isSnitch then
			local new = {Cube = c}
			if Settings.Miss and Settings.Running then
				if Settings.MissMode == "Every x hits" and LastMiss >= Settings.MissChance
				or Settings.MissMode == "Percent" and math.random(1, 100) < Settings.MissChance then
					LastMiss = 0
					new.Miss = true
					
					local invert = InvertPos(c.Position)
					
					new.MissPos = Vector3.new(-0.5,invert.Y, invert.Z)
					local sb = c:FindFirstChildOfClass("SelectionBox")
					if sb then
						sb.Color3 = Color3.new(1,0,0)
						sb.SurfaceColor3 = Color3.new(1,0,0)
					end
				else
					LastMiss = LastMiss + 1
				end
			end
			cubes[#cubes + 1] = new
		end
	end)

	local last = Vector2.new(3, 0)
	local seed = tick()
	local n = 2
	workspace[KH_CONSTANT("Client")].ChildRemoved:Connect(function(c)
		local i = FindCube(cubes,c)
		if i then
			table.remove(cubes,i)
			CamPos = FakeCFrame
			SaberColor = Saber.ImageColor3
			last = Vector2.new(c.Position.Y, c.Position.Z)
			seed = tick()
		end
	end)

	local function rlerp(p1, p3, alpha, offset)
		if p1 == p3 then
			return p1
		end
		local dist = (p1 - p3).magnitude/2
		
		local lookAt = CFrame.lookAt(Vector3.new(0, p1.X, p1.Y), Vector3.new(0, p3.X, p3.Y))
		if p1.Y == p3.Y then
			lookAt = lookAt * CFrame.Angles(0,0,math.pi/2)
		end
		local rot = select(3, lookAt:ToOrientation())
		if rot ~= 0 then
			lookAt = CFrame.lookAt(Vector3.new(0, p1.X, p1.Y), Vector3.new(0, p3.X, p3.Y), Vector3.new(0,0,-1))
			debugwarn("corrected a possible NAN for start", p1, "end", p3)
		end
		lookAt = lookAt * CFrame.new(0,0,-dist)
		lookAt = lookAt * CFrame.new(0,offset,0)
		
		local p2 = Vector2.new(lookAt.p.Y, lookAt.p.Z)
		
		local x1,x2,x3 = p1.X, p2.X, p3.X
		local y1,y2,y3 = p1.Y, p2.Y, p3.Y
		
		local A = x1 * (y2 - y3) - y1 * (x2 - x3) + x2 * y3 - x3 * y2
		local B = (x1^2 + y1^2) * (y3 - y2) + (x2^2 + y2^2) * (y1 - y3) + (x3^2 + y3^2) * (y2 - y1)
		local C = (x1^2 + y1^2) * (x2 - x3) + (x2^2 + y2^2) * (x3 - x1) + (x3^2 + y3^2) * (x1 - x2)
		local D = (x1^2 + y1^2) * (x3 * y2 - x2 * y3) + (x2^2 + y2^2) * (x1 * y3 - x3 * y1) + (x3^2 + y3^2) * (x2 * y1 - x1 * y2)

		local x = -B/(2*A)
		local y = -C/(2*A)
		local r = math.sqrt((B^2 + C^2 - 4 * A * D)/(4 * A^2))
		
		local startAngle = math.atan2(y1 - y, x1 - x)
		local endAngle = math.atan2(y3 - y, x3 - x)

		if offset < 0 then --because lerp doesn't go two ways because circle
			if startAngle > 0 and endAngle < 0 then
				endAngle = 2 * math.pi + math.atan2(y3 - y, x3 - x)
			elseif startAngle < 0 and endAngle > 0 then
				endAngle = -2 * math.pi + math.atan2(y3 - y, x3 - x)
			elseif startAngle == math.pi and endAngle == 0 then --i have no idea why the fuck
				endAngle = 2 * math.pi + math.atan2(y3 - y, x3 - x)
			end
		elseif offset > 0 and startAngle == 0 and endAngle == math.pi then --i have no idea why the fuck v2
			endAngle = -2 * math.pi + math.atan2(y3 - y, x3 - x)
		end
		local angle = NewLib.CalculateValFromPercent(startAngle, endAngle, alpha)

		
		local newPos = Vector2.new(x, y) + r * Vector2.new(math.cos(angle), math.sin(angle))
		return newPos
	end

	local sidesMap = {
		0, 1, -1, -1, 0, 0, -1, 0, 0,
		1, 0, 1, 0, 0, 0, 0, 0, 0,
		1, 1, 0, 0, 0, 1, -1, 0, 1,
		-1, 0, 0, 0, 0, 0, -1, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 1, 0, 0, 0, 0, 0, 1,
		-1, 0, 0, -1, 0, 0, 0, -1, -1,
		0, 0, 0, 0, 0, 0, -1, 0, -1,
		0, 0, 1, 0, 0, 1, -1, -1, 0
	}
	local multMap = {
		nil, nil, nil, nil, nil, {0.5, nil}, nil, {nil, 0.5}, nil,
		nil, nil, nil, nil, nil, nil, nil, nil, nil,
		nil, nil, nil, {nil, 0.5}, nil, nil, nil, {0.5, nil}, nil,
		nil, nil, nil, nil, nil, nil, nil, nil, nil,
		nil, nil, nil, nil, nil, nil, nil, nil, nil,
		nil, nil, nil, nil, nil, nil, nil, nil, nil,
		nil, {nil, 0.5}, nil, nil, nil, {0.5, nil}, nil, nil, nil,
		nil, nil, nil, nil, nil, nil, nil, nil, nil,
		nil, {0.5, nil}, nil, {nil, 0.5}, nil, nil, nil, nil, nil,
	}
	local function VerticalTranslate(i)
		local map = {1, 4, 7, 2, 5, 8, 3, 6, 9}
		return map[i]
	end
	
	game:GetService("RunService"):BindToRenderStep("Cubez", 0, function()
		if not cubes[1] and Settings.Running and Settings.Playing then
			return
		end
		local curr = cubes[1]
		local CurrCube = curr and curr.Cube
		
		if curr and not curr.OgPos then
			curr.OgPos = CurrCube.Position
		end
		if not Settings.Miss and curr and curr.Miss then
			curr.Miss = nil
		end
		if Settings.Running and Settings.Playing then
			local ltrPos = Vector3.new(-0.5,CurrCube.Position.Y,CurrCube.Position.Z)
			local percent = math.abs(CurrCube.Position.X/curr.OgPos.X)
			if curr.Miss then
				ltrPos = curr.MissPos --invert the pos
			end
			
			--local p = math.clamp(1-percent,0,1) + 0.2
			local p
			if Settings.AutoMode == "Arcs" then
				p = math.clamp((1-percent), 0, 1)
				local ltrPosv2 = Vector2.new(ltrPos.Y, ltrPos.Z)

				local pos1 = VerticalTranslate(V2ToPos(last))
				local pos2 = VerticalTranslate(V2ToPos(ltrPosv2))

				local way = 0
				if pos1 and pos2 then --uh oh, turns out cubes dont have to be strictly in only 9 possible spots
					way = sidesMap[(pos2 - 1) * 9 + pos1]
					if isDebug then
						UiTbl.debugLb.LabelObj.Text = "From " .. pos1 .. " to " .. pos2 .. " way " .. way
					end
				else
					if isDebug then
						UiTbl.debugLb.LabelObj.Text = "Unknown alignment"
					end
				end

				if way == 0 then
					if pos1 and pos2 then
						math.randomseed(pos1 * pos2 + seed)
					else
						math.randomseed(seed)
					end
					way = math.random(0, 1) * 2 - 1 --f(x) = 2x - 1
				end
				if pos1 and pos2 then
					local mul = multMap[(pos2 - 1) * 9 + pos1]
					mul = mul and mul[way * 0.5 + 3/2] or 1 --f(x) = 1/2x + 3/2
					way = way * mul
				end

				local newP = rlerp(last, ltrPosv2, p , n * way)
				if newP.X ~= newP.X then
					debugwarn("NAN for start", last, "end", ltrPosv2)
					return
				end

				if PlayerData.Settings.Camera == 2 then
					FakeCFrame = CFrame.new(CamPos.p, Vector3.new(-0.5, newP.X, newP.Y))
				else
					FakeCFrame = CFrame.new(Vector3.new(center.p.X, newP.X, newP.Y), Vector3.new(center.p.X - 1, newP.X, newP.Y))
				end
			else
				p = math.clamp((1-percent) * 1.2, 0, 1.2)
				local goal
				if PlayerData.Settings.Camera == 2 then -- 0 = full lock, 1 = half lock, 2 = spin
					goal = CFrame.new(CamPos, ltrPos)
				else
					goal = CFrame.new(Vector3.new(center.p.X, ltrPos.Y, ltrPos.Z), Vector3.new(center.p.X - 1, ltrPos.Y, ltrPos.Z)) --make it face -1 on X axis
				end
				FakeCFrame = CamPos:lerp(goal, p)
			end

			cam.CFrame = FakeCFrame
			if Settings.CursorColor then
				local color = CurrCube:FindFirstChildOfClass("SelectionBox") and CurrCube:FindFirstChildOfClass("SelectionBox").Color3 or CurrCube.Color
				Saber.ImageColor3 = SaberColor:lerp(color, math.min(1, p))
			else
				Saber.ImageColor3 = OgSaberColor
			end
			
			if Settings.Trail then
				local trailP = Saber.Parent.Adornee:Clone()
				trailP.Parent = Saber.Parent.Adornee.Parent
				local trailGui = Saber.Parent:Clone()
				trailGui.Parent = trailP
				trailGui.Adornee = trailP
				trailGui.ImageLabel.BackgroundColor3 = trailGui.ImageLabel.ImageColor3
				trailGui.ImageLabel.BackgroundTransparency = 0
				trailGui.ImageLabel:TweenSizeAndPosition(UDim2.new(0,0,0,0), trailGui.ImageLabel.Position + UDim2.new(0,trailGui.ImageLabel.AbsoluteSize.X/2,0,trailGui.ImageLabel.AbsoluteSize.Y/2), nil, nil, 1, true)
				Debris:AddItem(trailP, 1)
			end
		elseif not Settings.Running and Settings.Playing then
			if curr then
				--local ltrPos = Vector3.new(-0.5,CurrCube.Position.Y,CurrCube.Position.Z)
				local percent = math.abs(CurrCube.Position.X/curr.OgPos.X)
				
				--local p = math.clamp(1-percent,0,1) + 0.2
				local p = math.clamp((1-percent) * 1.2, 0, 1.2)
				
				if Settings.CursorColor then
					local color = CurrCube:FindFirstChildOfClass("SelectionBox") and CurrCube:FindFirstChildOfClass("SelectionBox").Color3 or CurrCube.Color
					Saber.ImageColor3 = SaberColor:lerp(color, math.min(1, p))
				else
					Saber.ImageColor3 = OgSaberColor
				end
				
				if Settings.Trail then
					local trailP = Saber.Parent.Adornee:Clone()
					trailP.Parent = Saber.Parent.Adornee.Parent
					local trailGui = Saber.Parent:Clone()
					trailGui.Parent = trailP
					trailGui.Adornee = trailP
					trailGui.ImageLabel.BackgroundColor3 = trailGui.ImageLabel.ImageColor3
					trailGui.ImageLabel.BackgroundTransparency = 0
					trailGui.ImageLabel:TweenSizeAndPosition(UDim2.new(0,0,0,0), trailGui.ImageLabel.Position + UDim2.new(0,trailGui.ImageLabel.AbsoluteSize.X/2,0,trailGui.ImageLabel.AbsoluteSize.Y/2), nil, nil, 1, true)
					Debris:AddItem(trailP, 1)
				end
			end
		end
	end)

	local old = getsenv(game.ReplicatedFirst.GameScript).UpdateSaber
	getsenv(game.ReplicatedFirst.GameScript).UpdateSaber = function(...)
		if Settings.Running and Settings.Playing then
			setupvalue(old, 5, FakeCFrame.p) --mouse movement upvalue set in InputChanged
		end
		return old(...)
	end

	local oldidx
	oldidx = hookmetamethod(game, "__index", function(self, i)
		SX_VM_CNONE()
		if i == "CFrame" and self == cam and Settings.Running and Settings.Playing then
			return FakeCFrame
		end
		return oldidx(self, i)
	end)

	local oldni
	oldni = hookmetamethod(game, "__newindex", function(self, i, v)
		SX_VM_CNONE()
		if i == "ImageColor3" and self == Saber and Settings.CursorColor and not checkcaller() then
			return
		end
		return oldni(self, i, v)
	end)

	local oldnc
	oldnc = hookmetamethod(game, "__namecall",  function(self, ...)
		SX_VM_CNONE()
		if self.Name == "SendData" and Settings.AntiSpectate and getnamecallmethod() == "FireServer" then
			({...})[1].BC = {}
		end
		return oldnc(self, ...)
	end)
	
	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
end)() elseif GameName == "Bad Business" then (function()
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
	
	local Settings = {
		NoRecoil = false,
		FireRate = false,
		FireRateVal = 1,
		ConstantFire = false,
		InfJump = false,
		InfJumpVal = 40,
		SilentAim = false,
		AimDistance = 150,
		HeadshotChance = 100,
		Wallbang = false,
		ShowFOVCircle = false,
		AimMode = "Cursor",
		FOVRange = 200,
		UsedFOVRange = 200,
		AntiAim = false,
		FastSprint = false,
		FastSprintVal = 2.4,
	}
	local Modules,ChangeSpeed
	local isGrounded = true
	
	local UiTbl = {}
	UiTbl.weapons = NewUI:Tab("Weapons")
	UiTbl.gunsGroup = UiTbl.weapons:Group("Gun Mods")
	UiTbl.aimGroup = UiTbl.weapons:Group("Silent Aim")
	
	UiTbl.gunsGroup:CheckBox("Auto Reload", function(bool)
		Settings.AutoReload = bool
	end, "AutoReload")
	
	UiTbl.gunsGroup:CheckBox("No Recoil", function(bool)
		Settings.NoRecoil = bool
	end, "NoRecoil")
	
	UiTbl.gunsGroup:CheckBox("Constant Fire", function(bool)
		Settings.ConstantFire = bool
	end, "ConstantFire")
	
	UiTbl.gunsGroup:Slider({
		Min = 0,
		Max = 20,
		Default = 0,
		Fraction = 2,
		Parent = UiTbl.gunsGroup:CheckBox("Fire Rate", function(bool)
			Settings.FireRate = bool
		end, "FireRate")
	}, function(val)
		Settings.FireRateVal = val
		return val .. ""
	end, "FireRateVal")
	
	UiTbl.gunsGroup:CheckBox("Wallbang", function(bool)
		Settings.Wallbang = bool
	end, "Wallbang")
	
	UiTbl.gameg = NewUI:Tab("Game")
	UiTbl.movementGroup = UiTbl.gameg:Group("Movement")
	
	UiTbl.movementGroup:Slider({
		Min = 40,
		Max = 100,
		Default = 40,
		Parent = UiTbl.movementGroup:CheckBox("Infinite Jump", function(bool)
			Settings.InfJump = bool
		end, "InfJump")
	}, function(val)
		Settings.InfJumpVal = val
		return val .. ""
	end, "InfJumpVal")
	
	local ControlScript,CSMainClosure,CSConstIndex1,CSConstIndex2
	UiTbl.movementGroup:Slider({
		Min = 1.4,
		Max = 3,
		Default = 2.4,
		Fraction = 1,
		Parent = UiTbl.movementGroup:CheckBox("Fast Sprint", function(bool)
			Settings.FastSprint = bool
			ChangeSpeed(bool and Settings.FastSprintVal or false)
		end, "FastSprint")
	}, function(val)
		Settings.FastSprintVal = val
		if ChangeSpeed and Settings.FastSprint then
			ChangeSpeed(Settings.FastSprintVal)
		end
		return val .. ""
	end, "FastSprintVal")
	
	UiTbl.aimGroup:CheckBox("Silent Aim", function(bool)
		Settings.SilentAim = bool
		if not bool then
			ESP.Highlighted = nil
		end
	end, "SilentAim"):Keybind(Enum.KeyCode.E, "SilentAim")
	
	UiTbl.aimGroup:Dropdown({
		Text = "Aim Mode",
		Values = {"Cursor", "Character"},
		Radio = true,
		Default = 1
	}, function(val)
		Settings.AimMode = val
	end, "AimMode")
	
	UiTbl.aimGroup:Label("Max Distance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 150,
		Default = 150
	}, function(val)
		Settings.AimDistance = val
		return val .. ""
	end, "AimDistance")
	
	UiTbl.aimGroup:Label("Headshot Chance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 100
	}, function(val)
		Settings.HeadshotChance = val
		return val .. "%"
	end, "HeadshotChance")
	
	local FOVCircle = ESP.FOVCircle(Settings.FOVRange)
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = ESP.GetFOV(),
		Default = 200,
		Parent = UiTbl.aimGroup:CheckBox("Show FOV Circle", function(bool)
			Settings.ShowFOVCircle = bool
			if bool then
				FOVCircle.Tbl.Update = FOVCircle.Update
				FOVCircle.Drawing.Visible = true
			else
				FOVCircle.Tbl.Update = nil
				FOVCircle.Drawing.Visible = false
			end
		end, "ShowFOVCircle")
	}, function(val)
		Settings.FOVRange = val
		Settings.UsedFOVRange = val
		if FOVCircle.Drawing then
			FOVCircle.Drawing.Radius = val
		end
		return "FOV Range: " .. val
	end, "FOVRange")
	
	UiTbl.aimGroup:CheckBox("Highlight Target", function(bool)
		ESP.DoHighlight = bool
	end, "ESPDoHighlight")
	
	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.H, "ESP")
	
	UiTbl.espGroup:CheckBox("Show Teammates", function(bool)
		ESP.TeamMates = bool
	end, "ESPToggleTeamMates").Click()
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Team Color", function(bool)
		ESP.TeamColor = bool
	end, "ESPToggleTeamColor").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")
	
	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)

	--actual stuff--
	
	local function getupvalue(f, num)
		local i = 0
		for _,v in pairs(getupvalues(f)) do
			i = i + 1
			if i == num then
				return v
			end
		end
		return nil
	end

	local function hook(old, new)
		return hookfunc(old, function(...)
			return new(...)
		end)
	end
	
	local Network--,FakeModules
	
	for i,v in pairs(getgc()) do
		if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
			local up = getupvalues(v)
			for i,v in pairs(up) do
				if type(v) == "table" and rawget(v, KH_CONSTANT("Kitty")) then
					local f = getrawmetatable(v).__index
					Modules = getupvalue(f, 1)
					--FakeModules = v
					break
				end
			end
		end
	end

	if not Modules then
		return plr:Kick("[KiriotHub] Failed to initialize: couldn't find modules table (1)")
	end
	if type(Modules) ~= "table" then
		return plr:Kick("[KiriotHub] Failed to initialize: expected table, found " .. typeof(Modules))
	end
	
	local ModulesCache = {}
	local ModulesNames = {}
	
	local ModuleConsts = {
		Raycasts = {"CastGeometryAndEnemies", "CastGeometry"},
		[KH_CONSTANT("Network")] = {"BindEvent", "Invoke", "Fire"},
		Input = {"IsActionHeld", "Began", "Ended"},
		Items = {"GetConfig", "GivePlayerLoadout"},
		[KH_CONSTANT("Characters")] = {"GetPlayerFromCharacter", "GetCharacter"},
		Teams = {"GetPlayerTeam", "SetPlayerTeam"},
		Projectiles = {"Update", "KillProjectile"},
		Camera = {"Spectate", "FirstPerson"}
	}
	local function GetModule(name)
		if ModulesCache[name] then
			return ModulesCache[name]
		end
		
		if not ModuleConsts[name] then
			return warn("[KiriotHub]: Invalid module requested:",name)
		end
		
		if Modules[name] then
			return Modules[name]
		end
		
		local m,n
		for ind,t in pairs(Modules) do
			local ok = true
			for i,v in pairs(ModuleConsts[name]) do
				if not rawget(t, v) then
					ok = false
				end
			end
			if ok then
				m = t
				n = ind
				break
			end
		end
		if not m then
			error("[KiriotHub]: Couldn't find the module " .. name)
		end
		ModulesCache[name] = m
		ModulesNames[name] = n
		return m
	end
	
	for i,v in pairs(Modules) do
		if getmetatable(v) and getrawmetatable(v).__index then
			ModulesCache.Network = v
			ModulesNames.Network = i
			break
		end
	end
	
	Network = GetModule("Network")
	if not Network then
		return plr:Kick("[KiriotHub] Failed to initialize: couldn't find modules table (2)")
	end
	
	--Grabbing kick key, very hacky--
	local Paintball
	
	local Keys = {
		Exploit = "Bye"
	}
	do
		debugprint("Grabbing module")
		for i,v in pairs(game:GetService("ReplicatedStorage"):GetDescendants()) do
			if v.Name == "Paintball" and v.ClassName == "ModuleScript" then
				Paintball = v
				debugprint("Found!")
				break
			end
		end
		if Paintball then
			
			local funcs = require(Paintball)
			local f = debug.getproto(funcs.Create, 1)
			local consts = getconstants(f)
			
			local i = FIT(consts, "No recoil")
			if i then
				Keys.Exploit = consts[i-1]
				Keys.Global = consts[i-2]
				debugprint("Grabbed keys:",Keys.Global,Keys.Exploit)
			end
		end
	end
	
	if Network.BindEvent then
		local tbl = getupvalues(Network.BindEvent)[1] --the connections table
		for i,v in pairs(tbl) do
			local f = v.Callback
			local consts = getconstants(f)
			if FIT(consts, "Purchased") and FIT(consts, "EquipButton") then
				local key = v.Event
				Keys.Shop = key
				debugprint("Shop key:",key)
				break
			end
		end
	else
		debugwarn("No Network.BindEvent")
	end

	--anticheat block--
	do
		local old
		old = hookmetamethod(game, "__namecall", function(self, ...)
			SX_VM_CNONE()
			local args = {...}
			local method = getnamecallmethod()
			if method == "FireServer" and self.ClassName == "RemoteEvent" and #args == 2 and type(args[1]) == "string" and type(args[2]) == "string" and not checkcaller() then
				debugwarn("possible direct exploit report", self.GetFullName(self), args[1], args[2], "from", debug.traceback())
				--return wait(9e9)
			elseif method == "Destroy" and self.Parent == plr.Character then
				if not debug.getinfo(3).short_src:find("ControlScript") then --note: that function still has 2 detections but there is no reliable way to distinguish their calls from the ping one
					debugwarn("ATTEMPTED TO DESTROY", self.GetFullName(self))
					plr.Kick(plr, "\n[KiriotHub]: Stopped detection [3]")
					return
				end
			end
			return old(self, ...)
		end)

		local old
		old = hookfunc(getrenv().math.random, function(...)
			local args = {...}
			if args[1] and not args[2] then
				local consts = getconstants(3)
				if table.find(consts, "Character") and table.find(consts, "Item") and table.find(consts, "Inventory") and table.find(consts, "Challenges") then
					local stack = debug.getstack(3)
					local found = false
					for i,v in pairs(stack) do
						if type(v) == "table" and rawget(v, "Fire") then --v3.Network:Fire()
							found = true
							debug.setstack(3, i, {
								Fire = function(self, _, _, detecc)
									debugwarn("cleverly stopped detect:", detecc, "from", debug.traceback())
									plr:Kick("\n[KiriotHub]: Stopped detection [1]\n\n" .. khenc(tostring(detecc)))
									return Instance.new("BindableEvent").Event:Wait()
								end
							})
							break
						end
					end
					if not found and not FIT(stack, plr.Character) then --ControlScript removes the last child of player character as a ping event
						debugwarn("half-cleverly stopped detect from", debug.traceback())
						table.foreach(stack, debugprint)
						plr:Kick("\n[KiriotHub]: Stopped detection [2]")
						return Instance.new("BindableEvent").Event:Wait()
					end
				end
			end
			return old(...)
		end)
	end
	
	local RealStats = {}
	
	--Weapon Stats--
	local GetConfig
	GetConfig = hook(GetModule("Items").GetConfig, function(...)
		if debug.traceback():find("ItemScript") then
			return Instance.new("BindableEvent").Event:Wait()
		end

		local wpn = ({...})[2] --remember of self!
		
		if _G.SuddenlyDebug then
			isDebug = true
			debugprint("Args")
			for i,v in pairs({...}) do
				debugwarn(i,v,typeof(v))
			end
		end
		local res = GetConfig(...)
		return res
	end)

	--Retcheck bypass--
	do
		local funcs = getupvalue(Network.BindFunction, 1)
		local argName = getconstants(funcs.Item)[1]
		debugprint("Retcheck:",argName)
		funcs.Item = function(arg, gun)
			if arg ~= argName then --GetStats, RequestStats
				return
			end
			debugwarn("retcheck invoked with", arg, gun)
			return RealStats[gun.Name] or GetConfig(GetModule("Items"), gun) or Instance.new("BindableEvent").Event:Wait()
		end
	end
	
	local Fire 
	Fire = hook(Network.Fire, function(...)
		local args = {...}
		if type(args[2]) == "string" and args[2] ~= "Character" and type(args[3]) == "string" and type(args[4]) == "string" and not args[5] then
			--[[return]] debugwarn("possible exploit report with", args[2], args[3], args[4], "from", debug.traceback())
		end
		if Keys.Exploit and args[3] == Keys.Exploit then
			debugwarn("Stopped exploit report:", select(4, ...))
			return Instance.new("BindableEvent").Event:Wait()
		elseif args[3] == "Shoot" then
			local wpn = args[4]
			
			--Spoofing stuff--
			local real = GetConfig(GetModule("Items"), wpn)
			local CurrentStats = LuauFind(getupvalues(3), "FireModeList", true) --level 3 cuz hookfunction
			
			if not RealStats[wpn.Name] then
				local fireMode = wpn:WaitForChild("State"):FindFirstChild("FireMode")
				if fireMode then
					local new = game.HttpService:JSONDecode(game.HttpService:JSONEncode(real)) --big iq table copy
					new.FireMode = fireMode.Value
					RealStats[wpn.Name] = new
				end
			end

			if wpn.State:FindFirstChild("FireMode") then
				if Settings.ConstantFire then
					local val = FIT(CurrentStats.FireModeList, "Auto") --local v43 = u4.FireModeList[l__FireMode__5.Value];, find the index for "Auto" value in FireModeList
					if val then
						wpn.State.FireMode.Value = val
					else
						table.insert(CurrentStats.FireModeList, "Auto") --troll
						wpn.State.FireMode.Value = #CurrentStats.FireModeList
						CurrentStats.FireModes.Auto = select(2, next(CurrentStats.FireModes))
					end
				else
					wpn.State.FireMode.Value = RealStats[wpn.Name].FireMode
				end
			else
				debugwarn(wpn, "has no FireMode")
			end
			if CurrentStats then
				if Settings.FireRate and Settings.FireRateVal ~= 0 then
						for i,v in pairs(CurrentStats.FireModes) do
							v.FireRate = Settings.FireRateVal * 60 --they changed 1/val to 60/val
							v.BurstRate = Settings.FireRateVal * 60
						end
				else
					for i,v in pairs(CurrentStats.FireModes) do
						if RealStats[wpn.Name].FireModes[i] then --cuz my dummy Auto firemode was causing issues lol
							v.FireRate = RealStats[wpn.Name].FireModes[i].FireRate
							v.BurstRate = RealStats[wpn.Name].FireModes[i].BurstRate
						end
					end
				end
			else
				debugwarn(wpn, "has no CurrentStats")
			end
		elseif args[3] == "State" then
			if args[4] == "Look" and Settings.AntiAim then
				args[5] = math.random(1,2) == 1 and -10 or 10 --math.huge
				return Fire(unpack(args))
			elseif args[4] == "Grounded" then
				isGrounded = args[5]
			elseif args[4] == "Aiming" then
				if args[5] == true then
					Settings.UsedFOVRange = Settings.FOVRange * 2
				elseif args[5] == false then
					Settings.UsedFOVRange = Settings.FOVRange
				end
				FOVCircle.Radius = Settings.UsedFOVRange
			end
		end
		return Fire(...)
	end)
	if isSnitch then
		Network.Fire = nil
	end
	
	--[[_G.test = function()
		for i,v in pairs(game.ReplicatedStorage.Items:GetChildren()) do
			Fire(Network, Keys.Shop, "PurchaseWeapon", v.Name)
		end
	end]]
	
	--[[local SkinsParent = game:GetService("ReplicatedStorage"):WaitForChild("PlayerData"):WaitForChild(plr.Name):WaitForChild("Skins")
	local Skins,Models
	for i,v in pairs(game.ReplicatedStorage:GetDescendants()) do
		if v.Name == "Skins" and v.ClassName == "Folder" and v.Parent.ClassName == "ModuleScript" then
			Skins = v
		elseif v.Name == "Models" and v.Parent.ClassName == "ModuleScript" and v:FindFirstChild("Weapons") then
			Models = v.Weapons
		end
		if Skins and Models then
			break
		end
	end
	if Skins and Models then
		local dummyFolder = Instance.new("Folder")
		for i,v in pairs(Models:GetDescendants()) do
			local val = Instance.new("IntValue", dummyFolder)
			val.Name = v.Name
			val.Value = 1
		end
		
		for i,v in pairs(Skins:GetDescendants()) do
			if v.ClassName == "ModuleScript" then
				local new = dummyFolder:Clone()
				new.Name = v.Name
				
				local old = SkinsParent:FindFirstChild(v.Name)
				if old then
					old:Destroy()
				end
				new.Parent = SkinsParent
			end
		end
	end]]
	
	--No Recoil--
	coroutine.wrap(function()
		local cam = GetModule("Camera")
		local items = GetModule("Items")
		while not cam.FirstPerson.RecoilSpring do
			wait()
		end
		local old = cam.FirstPerson.RecoilSpring.Shove
		cam.FirstPerson.RecoilSpring.Shove = function(...)
			if Settings.NoRecoil then
				return
			end
			return old(...)
		end

		for i,v in pairs({"RecoilSpring", "CameraSpring", "WeaponMovementSpring", "WeaponRotationSpring"}) do
			coroutine.wrap(function()
				while not items.FirstPerson[v] do
					wait()
				end
				local old = items.FirstPerson[v].Shove
				items.FirstPerson[v].Shove = function(...)
					if Settings.NoRecoil then
						return
					end
					return old(...)
				end
			end)()
		end

		while not cam.Recoil do
			wait()
		end
		local old = cam.Recoil.Fire
		cam.Recoil.Fire = function(...)
			if Settings.NoRecoil then
				return
			end
			return old(...)
		end
	end)()
	
	game:GetService("UserInputService").InputEnded:Connect(function(iobj, gp)
		if iobj.UserInputType == Enum.UserInputType.MouseButton1 and not gp and Settings.AutoReload then
			local keypress = keypress or Input and Input.KeyPress
			if keypress then
				keypress(0x52)
			end
			local keyrelease = keyrelease or Input and Input.KeyUp
			if keyrelease then
				keyrelease(0x52)
			end
		end
	end)
	
	ChangeSpeed = function(val)
		if not ControlScript then
			ControlScript = plr.PlayerScripts:FindFirstChild("ControlScript")
		end
		if not ControlScript then
			return
		end
		if not CSMainClosure then
			local env = getsenv(ControlScript)
			for _,f in pairs(getgc()) do
				if type(f) == "function" and islclosure(f) and not is_synapse_function(f) and getfenv(f) == env then
					local consts = getconstants(f)
					for i,v in pairs(consts) do
						if v == 1.4 then
							CSMainClosure = f
							CSConstIndex1 = i
						elseif v == 1.8 then
							CSMainClosure = f
							CSConstIndex2 = i --2nd
						end
					end
					if CSMainClosure and CSConstIndex1 and CSConstIndex2 then
						break
					end
				end
			end
		end
		if CSMainClosure and CSConstIndex1 and CSConstIndex2 then
			setconstant(CSMainClosure, CSConstIndex1, val or 1.4)
			setconstant(CSMainClosure, CSConstIndex2, val or 1.8)
		else
			debugwarn("nope", CSMainClosure, CSConstIndex1, CSConstIndex2)
		end
	end
	
	local RoundType = game.ReplicatedStorage:WaitForChild("Round"):WaitForChild("RoundType")
	ESP.Overrides.GetTeam = function(p)
		if RoundType.Value:find("FFA") then --GamemodeScript
			return nil
		end
		if type(p) == "table" then
			p = p.Player
		end
		local team = game:GetService("Teams"):FindFirstChild(GetModule("Teams"):GetPlayerTeam(p))
		if team then
			return team
		end
		return nil
	end

	ESP.Overrides.IsTeamMate = function(p)
		if RoundType.Value:find("FFA") then
			return false
		end

		return ESP:GetTeam(plr) == ESP:GetTeam(p)
	end
	
	ESP.Overrides.GetPlrFromChar = function(char)
		return GetModule("Characters"):GetPlayerFromCharacter(char) or game:GetService("Players"):FindFirstChild(char.Name) or debugwarn("Can't find char for",char)
	end
	
	local cam = workspace.CurrentCamera
	
	local function GetPlayers()
		local res = {}
		local chars = workspace.Characters:GetChildren()
		for i,v in pairs(chars) do
			local p = GetModule("Characters"):GetPlayerFromCharacter(v)
			local new = {
				Player = p,
				Character = v,
				Name = p.Name
			}
			res[#res + 1] = new
		end
		return res
	end
	local function GetEnemies()
		local t = {}
		for i,v in pairs(GetPlayers()) do
			local team = ESP:GetTeam(v)
			if team ~= ESP:GetTeam(plr) or team == nil and v.Name ~= plr.Name then
				t[#t + 1] = v.Character
			end
		end
		return t
	end
	
	local GetTarget = loadstring([[
	local cam, GetEnemies, GetModule, Settings, mouse = ...
	return function()
		local camPos = cam.CFrame.p
		local clPos,clPart,clModel
		for i,v in pairs(GetEnemies()) do
			if v.Parent then
				local part = v:FindFirstChild("Body")
				if part and part:FindFirstChild("Head") then
					part = part.Head
					
					local p,vis = cam:WorldToViewportPoint(part.Position)
					if vis then
						local workspaceDist = (cam.CFrame.p - part.Position).magnitude
						
						local ray = Ray.new(camPos, CFrame.new(cam.CFrame.p, part.Position).LookVector.Unit * p.Z)
						local ignoreTable = {GetModule("Characters"):GetCharacter(plr), v, workspace.Projectiles}
						if Settings.Wallbang then
							ignoreTable[#ignoreTable + 1] = workspace.Geometry
							ignoreTable[#ignoreTable + 1] = workspace.NonGeometry
							ignoreTable[#ignoreTable + 1] = workspace.Gameplay
							ignoreTable[#ignoreTable + 1] = workspace.Effects
							ignoreTable[#ignoreTable + 1] = workspace.NonProjectileGeometry
							ignoreTable[#ignoreTable + 1] = workspace.Ragdolls
							ignoreTable[#ignoreTable + 1] = workspace.Terrain
						end
						for i,v in pairs(workspace:GetChildren()) do
							if v.ClassName == "Model" then
								ignoreTable[#ignoreTable + 1] = v
							end
						end
						local hit,pos = workspace:FindPartOnRayWithIgnoreList(ray, ignoreTable)
						if not hit and workspaceDist <= Settings.AimDistance then
							local dist
							local ok = true
							if Settings.AimMode == "Cursor" then
								dist = (Vector3.new(mouse.X,mouse.Y+36,0) - Vector3.new(p.X,p.Y,0)).magnitude
								ok = dist <= Settings.UsedFOVRange
							elseif Settings.AimMode == "Character" then
								dist = (camPos - part.Position).magnitude
							end
							if not clPos and ok then
								clPos = dist
								clPart = part
								clModel = v
							end
							if ok and dist and dist < clPos then
								clPos = dist
								clPart = part
								clModel = v
							end
						end
					end
				end
			end
		end
		return clPart,clModel,clPos
	end]])(cam, GetEnemies, GetModule, Settings, mouse)
	
	local CastGeometryAndEnemies
	CastGeometryAndEnemies = hook(GetModule("Raycasts").CastGeometryAndEnemies, function(...)
		local args = {...}
		if Settings.Wallbang then
			local new = {
				GeometryEnemyCache = {}
			}
			for i,v in pairs(workspace.Characters:GetChildren()) do
				if v:FindFirstChild("Hitbox") then
					local p = GetModule("Characters"):GetPlayerFromCharacter(v)
					if p then
						if not GetModule("Teams"):ArePlayersFriendly(plr, p) then
							table.insert(new.GeometryEnemyCache, v.Hitbox)
						end
					else
						table.insert(new.GeometryEnemyCache, v.Hitbox)
					end
				end
			end
			
			args[5] = new
		end
		return CastGeometryAndEnemies(unpack(args))
	end)

	local lastTarget, lastCaller
	
	local Reticle = GetModule("Input").Reticle
	local GetPosition = Reticle.GetPosition
	Reticle.GetPosition = function(...)
		if Settings.SilentAim then
			local char, target
			if ESP.Enabled and ESP.DoHighlight and ESP.Highlighted and workspace:IsAncestorOf(ESP.Highlighted) then
				char = ESP.Highlighted
			else
				target, char = GetTarget()
			end
			if char and char:FindFirstChild("Body") then
				if math.random(1, 100) >= Settings.HeadshotChance then
					target = char.Body:FindFirstChild("Chest")
				else
					target = char.Body:FindFirstChild("Head")
				end
			end
			if target then
				lastTarget = target
				lastCaller = debug.getinfo(2).func
				local camPos = cam.CFrame.p
				return camPos + CFrame.new(camPos, target.Position).LookVector
			end
		end
		return GetPosition(...)
	end

	local LookVector
	LookVector = hook(Reticle.LookVector, function(...)
		if Settings.SilentAim then
			if lastTarget and lastCaller == debug.getinfo(3).func then
				return CFrame.new(cam.CFrame.p, lastTarget.Position).LookVector
			end
		end
		return LookVector(...)
	end)

	local InitProjectile
	InitProjectile = hook(GetModule("Projectiles").InitProjectile, function(self, type, ...)
		if Settings.SilentAim then
			local data = getupvalue(InitProjectile, 1)[type]
			local grav = data.Gravity
			data.Gravity = 0
			local ret = {InitProjectile(self, type, ...)}
			data.Gravity = grav
			return unpack(ret)
		end
		return InitProjectile(self, type, ...)
	end)

	--bypassing new checks--
	setupvalue(GetModule("Camera").Recoil.Update, 1, true)
	setupvalue(GetModule("Projectiles").KillProjectile, 1, true)
	
	local f = loadstring([[
		local Settings,GetTarget,ESP = ...
		return function()
			if not Settings.SilentAim or not ESP.Enabled or not ESP.DoHighlight then
				return
			end
			local target,char = GetTarget()
			if target then
				ESP.Highlighted = char
			else
				ESP.Highlighted = nil
			end
		end
	]])(Settings,GetTarget,ESP)
	game:GetService("RunService").Stepped:Connect(f)
	
	local PlrChar = GetModule("Characters"):GetCharacter(plr)
	
	game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
		if gp then return end
		if iobj.KeyCode == Enum.KeyCode.Space and Settings.InfJump and PlrChar and PlrChar:FindFirstChild("Root") and not isGrounded then
			local root = PlrChar.Root
			root.Velocity = Vector3.new(root.Velocity.X, Settings.InfJumpVal, root.Velocity.Z)
		end
	end)
	
	--ESP--
	
	ESP.Overrides.GetColor = function(char)
		local p = ESP:GetPlrFromChar(char)
		if p then
			local team = ESP:GetTeam(p)
			if team then
				return team.Color.Value
			end
		end
		return nil
	end
	
	local function CharAdded(char)
		local p = game:GetService("Players"):FindFirstChild(char.Name) or ESP:GetPlrFromChar(char)
		if not p then
			debugwarn("Didn't find a player for",char)
			return
		end
		if p == plr then
			PlrChar = char
			if isDebug then
				_G.char = char
			end
			return
		end

		ESP:Add(char, {
			Name = p.Name,
			Player = p,
			PrimaryPart = char.PrimaryPart or char:WaitForChild("Root")
		})
	end
	workspace.Characters.ChildAdded:Connect(CharAdded)
	for i,v in pairs(workspace.Characters:GetChildren()) do
		coroutine.wrap(CharAdded)(v)
	end
	
	if isDebug then
		_G.Modules = GetModule
	end
	
	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
	--Modules.Characters.GetCharacter
end)() elseif GameName == "Arsenal" then
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
	local Aimbot = LoadAimbot()
	Aimbot.BulletSpeed = 350 --guns have BulletSpeed value set to 5000 and the script multiplies it by 0.07 ???
	
	local Settings = {
		InfAmmo = false,
		NoRecoil = false,
		WallBang = false,
		InfiniteJump = false,
		SilentAim = false,
		AimMode = "Cursor",
		AimDistance = 500,
		ShowFOVCircle = false,
		FOVRange = 200,
		SpeedEnabled = false,
		SpeedVal = 50,
		KnifeDistance = 100,
	}
	local Env, WepEnv, GetEnemies, deploy, RemoteName, RemoteKey, BitBuffer, ping
	local function ChangeSpeed(val)
		if plr.Character then
			local hum = plr.Character:FindFirstChildOfClass"Humanoid"
			if hum then
				hum.WalkSpeed = val
			end
		end
	end

	local rnd = Random.new()
	local function FakePing()
		local randomPing = rnd:NextNumber(1500, 1999) --they hardcoded the number 2000 to ban LOL, see ReplicatedStorage.Modules.ping, line 17 https://kiriot22.com/i/F7kWH5i7.png
		
		local buffer = BitBuffer()
		buffer.writeUnsigned(64, plr.UserId)
		buffer.writeUnsigned(9, math.clamp(math.ceil(randomPing * 1000), 0, 511))
		SecureFireServer(game.ReplicatedStorage.Events.UpdatePing, buffer.dumpString())
		SecureFireServer(game.ReplicatedStorage.UpdatePing, math.random(), math.random(100000, 999999))
	end
	
	local UiTbl = {}
	
	UiTbl.weapons = NewUI:Tab("Weapons")
	UiTbl.gunsGroup = UiTbl.weapons:Group("Guns")
	UiTbl.knivesGroup = UiTbl.weapons:Group("Knives")
	
	UiTbl.gunsGroup:CheckBox("Inf Ammo", function(bool)
		Settings.InfAmmo = bool
	end, "InfAmmo")
	
	UiTbl.gunsGroup:CheckBox("No Recoil", function(bool)
		Settings.NoRecoil = bool
	end, "NoRecoil")

	UiTbl.killAllCb = UiTbl.gunsGroup:CheckBox("Kill All", function(bool)
		Settings.KillAll = bool
		while Settings.KillAll do
			wait()
			local gun = Env.gun and Env.gun.Value
			if gun and typeof(gun) == "Instance" and not gun:FindFirstChild("Melee") then
				for i,v in pairs(GetEnemies()) do
					if v.Character then
						local s,e = pcall(function()
							local hit = v.Character:FindFirstChild("Head") or v.Character:FindFirstChild("HumanoidRootPart")
							--[=[SecureFireServer(game.ReplicatedStorage.Events:WaitForChild(RemoteName), hit, string.pack(
								"fffsi1fi1i1i1i2i1fi1i1i1fff",
								hit.Position.X,
								hit.Position.Y,
								hit.Position.Z,
								gun.Name,
								0 --[[crit (headshot) = 2, noncrit = 1, also noncrit = 0]],
								13 + math.random() --[[distance]],
								0 --[[backstab, 1 for true 0 for false]],
								0 --[[crit, 1 for true 0 for false]],
								0 --[[mcrit, 1 for true 0 for false]],
								1 --[[penetrated]],
								0 --[[mgfalloff, true if gun has LMG child, 1 for true 0 for false]],
								tick() - plr.PlayerGui.GUI.Client.Variables.btick.Value,
								WepEnv.currentSpell,
								WepEnv.ads.Value == true and 1 or 0 --[[ads, 1 for true 0 for false]],
								WepEnv.jumping.Value == true and 1 or 0 --[[jumping, 1 for true 0 for false]],
								hit.Position.X, --origin xyz
								hit.Position.Y,
								hit.Position.Z
							), RemoteKey)]=]

							local buffer = BitBuffer()
							buffer.writeString(gun.Name)
							buffer.writeUnsigned(2, 0) --crit
							buffer.writeUnsigned(2, 0) --backstab
							buffer.writeInt8(1) --penetrated
							buffer.writeFloat16(tick() - plr.PlayerGui.GUI.Client.Variables.btick.Value)
							buffer.writeInt8(WepEnv.currentSpell or 1)
							buffer.writeUnsigned(1, WepEnv.ads.Value == true and 1 or 0)
							buffer.writeUnsigned(1, WepEnv.jumping.Value == true and 1 or 0)
							buffer.writeVector3(hit.Position) --Origin of the ray casted from camera
							buffer.writeVector3(hit.Position) --hit pos

							FakePing()
							SecureFireServer(game.ReplicatedStorage.Events:WaitForChild(RemoteName), hit, buffer.dumpString(), RemoteKey)
						end)
						if not s then debugwarn(e) end
					end
				end
			end
		end
	end)
	UiTbl.killAllCb:Keybind(Enum.KeyCode.J, "KillAll")

	UiTbl.knifeAuraCb = UiTbl.knivesGroup:CheckBox("Knife Aura", function(bool)
		Settings.KnifeAura = bool
		if bool then
			while Settings.KnifeAura do
				wait()
				local gun = Env.gun and Env.gun.Value
				if gun and typeof(gun) == "Instance" and gun:FindFirstChild("Melee") then
					local target = Settings.AutofarmTarget or Settings.GetTarget()
					if target then
						pcall(function()
							local buffer = BitBuffer()
							buffer.writeString(gun.Name)
							buffer.writeUnsigned(2, 0) --crit
							buffer.writeUnsigned(2, 0) --backstab
							buffer.writeInt8(1) --penetrated
							buffer.writeFloat16(tick() - plr.PlayerGui.GUI.Client.Variables.btick.Value)
							buffer.writeInt8(WepEnv.currentSpell or 1)
							buffer.writeUnsigned(1, WepEnv.ads.Value == true and 1 or 0)
							buffer.writeUnsigned(1, WepEnv.jumping.Value == true and 1 or 0)
							buffer.writeVector3(target.Position) --Origin of the ray casted from camera
							buffer.writeVector3(target.Position) --hit pos

							FakePing()
							SecureFireServer(game.ReplicatedStorage.Events:WaitForChild(RemoteName), target, buffer.dumpString(), RemoteKey)
						end)
					end
				end
			end
		end
	end, "KnifeAura")
	UiTbl.knifeAuraCb:Keybind(Enum.KeyCode.Delete, "KnifeAura")

	UiTbl.knivesGroup:Label("Knife Max Distance")
	UiTbl.knivesGroup:Slider({
		Min = 0,
		Max = 150,
		Default = 100,
	}, function(val)
		Settings.KnifeDistance = val
		return val .. ""
	end, "KnifeDistance")

	UiTbl.aimbotG = NewUI:Tab("Aimbot")
	UiTbl.aimbotGroup = UiTbl.aimbotG:Group("Aimbot Settings")
	UiTbl.silentAimGroup = UiTbl.aimbotG:Group("Silent Aim Settings")
	UiTbl.mutualSettingsGroup = UiTbl.aimbotG:Group("General Settings")

	UiTbl.aimbotGroup:CheckBox("Aimbot", function(bool)
		Aimbot.Enabled = bool
	end, "Aimbot")

	UiTbl.aimbotGroup:CheckBox("Visibility Check", function(bool)
		Aimbot.VisCheck = bool
	end, "VisCheck").Click()

	UiTbl.aimbotGroup:Dropdown({
		Text = "Aim Part",
		Values = {"Head", "HumanoidRootPart"},
		Radio = true,
		Default = 1
	}, function(val)
		Aimbot.AimPart = val
	end, "AimPart")

	UiTbl.silentAimGroup:CheckBox("Silent Aim", function(bool)
		Settings.SilentAim = bool
		ESP.HighlightEnabled = bool
		if not bool then
			ESP.Highlighted = nil
		end
	end, "SilentAim"):Keybind(Enum.KeyCode.E, "SilentAim")

	UiTbl.silentAimGroup:CheckBox("Wallbang", function(bool)
		Settings.WallBang = bool
	end, "WallBang")

	UiTbl.silentAimGroup:Label("Headshot Chance")
	UiTbl.silentAimGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 100,
	}, function(val)
		Settings.HeadshotChance = val
		return val .. "%"
	end, "HeadshotChance")
	
	UiTbl.mutualSettingsGroup:Label("Max Distance")
	UiTbl.mutualSettingsGroup:Slider({
		Min = 0,
		Max = 1000,
		Default = 500,
	}, function(val)
		Settings.AimDistance = val
		return val .. ""
	end, "AimDistance")
	
	local FOVCircle = ESP.FOVCircle(Settings.FOVRange)
	UiTbl.mutualSettingsGroup:Slider({
		Min = 0,
		Max = 400,
		Default = 200,
		Parent = UiTbl.mutualSettingsGroup:CheckBox("Show FOV Circle", function(bool)
			Settings.ShowFOVCircle = bool
			if bool then
				FOVCircle.Tbl.Update = FOVCircle.Update
				FOVCircle.Drawing.Visible = true
			else
				FOVCircle.Tbl.Update = nil
				FOVCircle.Drawing.Visible = false
			end
		end, "ShowFOVCircle")
	}, function(val)
		Settings.FOVRange = val
		if FOVCircle.Drawing then
			FOVCircle.Drawing.Radius = val
		end
		return "FOV Range: " .. val
	end, "FOVCircle")
	
	UiTbl.gameg = NewUI:Tab("Game")
	UiTbl.movementGroup = UiTbl.gameg:Group("Movement")
	UiTbl.miscGroup = UiTbl.gameg:Group("Misc")
	
	UiTbl.movementGroup:CheckBox("Infinite Jump", function(bool)
		Settings.InfiniteJump = bool
	end, "InfiniteJump")
	
	UiTbl.movementGroup:Slider({
		Min = 0,
		Max = 200,
		Default = 50,
		Parent = UiTbl.movementGroup:CheckBox("Fast Speed", function(bool)
			Settings.SpeedEnabled = bool
			if bool then
				ChangeSpeed(Settings.SpeedVal)
			else
				ChangeSpeed(Settings.OGSpeed or 23)
			end
		end, "SpeedEnabled")
	}, function(val)
		Settings.SpeedVal = val
		if Settings.SpeedEnabled then
			ChangeSpeed(val)
		end
		return val .. ""
	end, "SpeedVal")

	UiTbl.autoDeployCb = UiTbl.miscGroup:CheckBox("Auto Deploy", function(bool)
		Settings.AutoDeploy = bool

		if bool and deploy and plr.PlayerGui.Menew.Enabled then
			deploy()
		end
	end, "AutoDeploy")

	UiTbl.miscGroup:CheckBox("Autofarm", function(bool)
		Settings.Autofarm = bool

		if bool then
			if not Settings.AutoDeploy then
				coroutine.wrap(UiTbl.autoDeployCb.Click)()
			end
			UiTbl.autoDeployCb.Enabled = false

			if not Settings.KillAll then
				coroutine.wrap(UiTbl.killAllCb.Click)()
			end
			UiTbl.killAllCb.Enabled = false

			if not Settings.KnifeAura then
				coroutine.wrap(UiTbl.knifeAuraCb.Click)()
			end
			UiTbl.knifeAuraCb.Enabled = false

			while Settings.Autofarm do
				wait()
				local gun = Env.gun and Env.gun.Value
				if gun and typeof(gun) == "Instance" and gun:FindFirstChild("Melee") then
					local enemies = GetEnemies()
					if #enemies > 0 then
						local enemy = enemies[math.random(1, #enemies)]
						local start = tick()
						while tick() - start < 2 and plr.Character and enemy.Character do
							Settings.AutofarmTarget = enemy.Character.HumanoidRootPart
							plr.Character:SetPrimaryPartCFrame(enemy.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,-3))
							wait()
						end
					end
				end
			end
			Settings.AutofarmTarget = nil

			UiTbl.autoDeployCb.Enabled = true
			if Settings.AutoDeploy then
				coroutine.wrap(UiTbl.autoDeployCb.Click)()
			end

			UiTbl.killAllCb.Enabled = true
			if Settings.KillAll then
				coroutine.wrap(UiTbl.killAllCb.Click)()
			end

			UiTbl.knifeAuraCb.Enabled = true
			if Settings.KnifeAura then
				coroutine.wrap(UiTbl.knifeAuraCb.Click)()
			end
		end
	end)

	UiTbl.miscGroup:Button("Rejoin Server", function()
		game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, plr)
	end)
	
	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.H, "ESP")
	UiTbl.espGroup:CheckBox("Show Teammates", function(bool)
		ESP.TeamMates = bool
	end, "ESPToggleTeamMates").Click()
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Team Color", function(bool)
		ESP.TeamColor = bool
	end, "ESPToggleTeamColor").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")
	
	Enter.Visible = false
	KeyTB.Text = "Waiting for modules..."
	--actual stuff--

	local loadCount = 0
	while not RemoteName and not RemoteKey and not BitBuffer and not ping do
		if not RemoteName and not RemoteKey then
			for i,v in pairs(getgc()) do
				if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
					local consts = getconstants(v)
					if FIT(consts, "dumpString") and FIT(consts, "doprojectile") and not FIT(consts, "itauntedhaha") then
						for i,v in pairs(consts) do
							if type(v) == "string" and v:find("HitPart") then
								if not (consts[i + 1] == "game" and consts[i + 2] == game and consts[i + 3] == "ReplicatedStorage" and consts[i + 5] == "toEulerAnglesXYZ") then
									return plr:Kick("[KiriotHub] Detected significant changes in the game's remote keys. The hub needs to be updated.\n" .. game.PlaceVersion)
								end
								RemoteName = v
								RemoteKey = consts[i + 4]
								break
							end
						end
					end
				end
			end
		end
		if not BitBuffer then
			if game.ReplicatedStorage:FindFirstChild("Modules") and game.ReplicatedStorage.Modules:FindFirstChild("BitBuffer") then
				BitBuffer = require(game.ReplicatedStorage.Modules.BitBuffer)
			end
		end
		if not ping then
			if game.ReplicatedStorage:FindFirstChild("Modules") and game.ReplicatedStorage.Modules:FindFirstChild("ping") then
				ping = require(game.ReplicatedStorage.Modules.ping)
			end
		end
		if not RemoteName and not RemoteKey and not BitBuffer and not ping then
			loadCount = loadCount + 1
			KeyTB.Text = "Waiting for modules (" .. loadCount .. ")..."
			wait(1)
		end
	end
	debugprint("Got", RemoteName, RemoteKey)

	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)

	
	--Bypassing Anti Cheat--
	local function getsenv(scr)
		for i,v in pairs(getgc()) do
			if type(v) == "function" and islclosure(v) and not is_synapse_function(v) and rawget(getfenv(v), "script") == scr then
				return getfenv(v)
			end
		end
	end

	local Main = plr.PlayerGui[KH_CONSTANT("GUI")][KH_CONSTANT("Client")]
	Env = getsenv(Main)
	while not Env.wep do wait() end
	WepEnv = getfenv(Env.wep.makearms)
	
	local banRemote = game:GetService("ReplicatedStorage"):FindFirstChild("BeanBoozled") or "BeanBoozled"
	
	local mt = getrawmetatable(game)
	make_writeable(mt)
	
	local old = mt.__namecall
	mt.__namecall = function(self, ...)
		SX_VM_CNONE()

		local realMethod = getnamecallmethod()
		if self.ClassName == "RemoteEvent" and (self == banRemote or tostring(self) == banRemote) or ({...})[1] == "ban" then
			local ev = Instance.new("BindableEvent")
			return ev.Event:Wait()
		elseif self.ClassName == "RemoteEvent" and Settings.SilentAim and not Settings.KillAll and (realMethod == "FireServer" or realMethod == "InvokeServer") then
			local args = {...}
			if self.Name == "ReplicateProjectile" and type(args[1]) == "table" then
				local data = args[1]
				local cam = workspace.CurrentCamera
				
				local target,char = Settings.GetTarget(true)
				if target then
					local new = CFrame.new(cam.CFrame.p, target.Position)
					--data[3] = new.p + new.lookVector * Settings.AimDistance
					--data[4] = new * CFrame.new(1.5, -0.65, 0)
					data[3] = target.CFrame.p
					data[4] = cam.CFrame

					setnamecallmethod(realMethod)
					return old(self, unpack(args))
				end
			elseif self.Name == "CreateProjectile" then
				local cam = workspace.CurrentCamera
				
				local target,char = Settings.GetTarget(true)
				if target then
					local new = CFrame.new(cam.CFrame.p, target.Position)
					--args[3] = new.p + new.lookVector * Settings.AimDistance
					args[3] = target.CFrame.p
					args[4] = cam.CFrame

					setnamecallmethod(realMethod)
					return old(self, unpack(args))
				end
			elseif self.Name == RemoteName then
				local target, char = Settings.GetTarget(true)
				if target then
					local oldBuffer = BitBuffer(args[2])
					local newBuffer = BitBuffer()
					args[1] = target

					newBuffer.writeString(oldBuffer.readString())

					oldBuffer.readUnsigned(2)
					newBuffer.writeUnsigned(2, target.Name == "Head" and 1 or 0)

					newBuffer.writeUnsigned(2, oldBuffer.readUnsigned(2))
					newBuffer.writeInt8(oldBuffer.readInt8())
					newBuffer.writeFloat16(oldBuffer.readFloat16())
					newBuffer.writeInt8(oldBuffer.readInt8())
					newBuffer.writeUnsigned(1, oldBuffer.readUnsigned(1))
					newBuffer.writeUnsigned(1, oldBuffer.readUnsigned(1))
					newBuffer.writeVector3(oldBuffer.readVector3())
					newBuffer.writeVector3(target.Position)

					args[2] = newBuffer.dumpString()

					if Settings.WallBang then
						FakePing()
					end
					
					setnamecallmethod(realMethod)
					return old(self, unpack(args))
				end
			end
		elseif self == workspace and realMethod == "FindPartOnRayWithWhitelist" and Settings.WallBang and debug.traceback():find("CreateProjectile") then
			local args = {...}
			table.remove(args[2], 2) --remove workspace.Map.Geometry from the whitelist
		end
		
		setnamecallmethod(realMethod)
		return old(self, ...)
	end
	
	Env.UnforseenConsequences = function() end
	
	local NewLoader = game:GetService("ReplicatedFirst"):FindFirstChild(KH_CONSTANT("NewLoader"))
	if NewLoader then
		local env = getsenv(NewLoader)
		for i,v in pairs(getgc()) do
			if type(v) == "function" and islclosure(v) and not is_synapse_function(v) and getfenv(v) == env then
				break --getfenv() disables the luau optimization
			end
		end
		env.wait = function() return Instance.new"BindableEvent".Event:Wait() end
	end

	local cam = workspace.CurrentCamera

	--auto deploy--
	do
		local menew = plr.PlayerGui:WaitForChild("Menew")
		deploy = function()
			local teamsTbl = {}
			if not getsenv(menew:WaitForChild("LocalScript")).play then
				wait(5)
			end
			getsenv(menew:WaitForChild("LocalScript")).play()
			
			local teams = plr.PlayerGui.GUI.TeamSelection
			if teams.Buttons.Visible then
				for i,v in pairs(teams.Buttons:GetChildren()) do
					
					if v.Visible then --exclude Pur
						local name = "T" .. v.Name:sub(1,1) .. "C"
						table.insert(teamsTbl, name)
						if v.lock.Visible == false then
							while not Env.JoinTeam do wait() end
							Env.JoinTeam(name)
							debugprint("joining team", name)

							wait(2)
							while plr.PlayerGui.GUI.Spectate.Visible and #teamsTbl > 0 do
								Env.JoinTeam(table.remove(teamsTbl))
								debugwarn("retrying to join a team")
								wait(2)
							end
							if #teamsTbl == 0 then
								debugwarn("failed to join any team")
							end
							return
						end
					end
				end
			else
				Env.JoinTeam("Random")
			end
		end
		
		menew:GetPropertyChangedSignal("Enabled"):Connect(function() --func setcharacter
			if Settings.AutoDeploy and menew.Enabled then
				UiTbl.autoDeployCb.Enabled = false
				for i=5,1,-1 do
					UiTbl.autoDeployCb.Components.Label.Object.Text = "Auto Deploy (" .. i .. ")"
					wait(1)
				end
				UiTbl.autoDeployCb.Components.Label.Object.Text = "Auto Deploy"
				if not Settings.Autofarm then
					UiTbl.autoDeployCb.Enabled = true
				end
				deploy()
			end
		end)
	end

	--Inf Ammo--
	do
		local old = Env.wep.firebullet
		Env.wep.firebullet = function(...)
			local gun = Env.gun and Env.gun.Value
			if Settings.InfAmmo then
				if gun and typeof(gun) == "Instance" then
					local val = 60
					local ammo = gun:FindFirstChild("Ammo")
					if ammo then
						val = ammo.Value + 1
					end
					--setupvalue(Env.autoreload, 3, val)
					Env.ammocount.Value = val
				end
			end

			--why was this here--
			--[[if Settings.SilentAim and gun and gun:FindFirstChild("Melee") and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
				local target = Settings.GetTarget()
				if target and (target.Position - plr.Character.HumanoidRootPart.Position).magnitude < 200 then
					game.ReplicatedStorage.Events.HitPart:FireServer(target, target.Position, gun.Name, 0, 0, false, false, false, 1, false, gun.FireRate.Value, gun.ReloadTime.Value, gun.Ammo.Value, gun.StoredAmmo.Value, gun.Bullets.Value, gun.EquipTime.Value, gun.RecoilControl.Value, gun.Auto.Value, gun["Speed%"].Value, game.ReplicatedStorage.wkspc.DistributedTime.Value, tick() - Env.btick, 1)
					return
				end
			end]]
			return old(...)
		end

		local old = WepEnv.clientf.CreateProjectile
		WepEnv.clientf.CreateProjectile = function(...)
			if Settings.SilentAim then
				local args = {...}
				if args[1] == plr.Name then
					local target = Settings.GetTarget(true)
					if target then
						--local new = CFrame.new(cam.CFrame.p, target.Position)
						args[4] = target.CFrame.p--new.p + new.lookVector * Settings.AimDistance
						args[5] = cam.CFrame--new * CFrame.new(1.5, -0.65, 0)

						if Settings.WallBang and false then --TODO: fix
							debugprint("projectile wooo")
							local gun = game.ReplicatedStorage.Weapons[args[10]]
							
							local buffer = BitBuffer()
							buffer.writeString(gun.Name)
							buffer.writeUnsigned(2, target.Name == "Head" and 2 or 0) --crit
							buffer.writeUnsigned(2, 0) --backstab
							buffer.writeInt8(1) --penetrated
							buffer.writeFloat16(tick() - plr.PlayerGui.GUI.Client.Variables.btick.Value)
							buffer.writeInt8(WepEnv.currentSpell or 1)
							buffer.writeUnsigned(1, WepEnv.ads.Value == true and 1 or 0)
							buffer.writeUnsigned(1, WepEnv.jumping.Value == true and 1 or 0)
							buffer.writeVector3(target.Position) --Origin of the ray casted from camera
							buffer.writeVector3(target.Position) --hit pos

							SecureFireServer(game.ReplicatedStorage.Events:WaitForChild(RemoteName), target, buffer.dumpString(), RemoteKey)
							return
						end
						return old(unpack(args))
					end
				end
			end

			return old(...)
		end
	end
	
	--Silent Aim--
	GetEnemies = function()
		local t = {}
		local plrIsJugger = plr:FindFirstChild("DesignColor") and plr.DesignColor.Value.Name == "Br. yellowish orange"
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			local team = ESP:GetTeam(v)
			local friendlyFire = v:FindFirstChild("FriendlyFire") and v.FriendlyFire.Value
			
			local isJugger = v:FindFirstChild("DesignColor") and v.DesignColor.Value.Name == "Br. yellowish orange"
			
			local added = false
			if (team ~= ESP:GetTeam(plr) or team == nil or friendlyFire or isJugger or plrIsJugger) and v ~= plr then
				if v.Character and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
					t[#t + 1] = v
					added = true
				end
			end
			
			if isJugger and not added then
				debugwarn("Something's wrong!")
				t[#t + 1] = v
			end

			if workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Hackula") then
				t[#t + 1] = {Character = workspace.Map.Hackula}
			end
		end
		return t
	end
	Aimbot:Register(GetEnemies, Settings)
	
	local function GetTarget(chance)
		SX_VM_CNONE()

		wait()
		local camPos = cam.CFrame.p
		local clPos,clPart,clModel

		local maxDistance = Settings.AimDistance
		local gun = Env.gun and Env.gun.Value
		if gun and typeof(gun) == "Instance" and gun:FindFirstChild("Melee") then
			maxDistance = Settings.KnifeDistance
			debugwarn("knife go brrr")
		end
		for i,v in pairs(GetEnemies()) do
			if v.Character and v.Character.Parent then
				local part = v.Character:FindFirstChild("Head")
				if chance and math.random(1, 100) >= Settings.HeadshotChance then
					part = v.Character:FindFirstChild("HumanoidRootPart")
				end
				if part then
					local p,vis = cam:WorldToViewportPoint(part.Position)
					if vis then
						local startPos = camPos
						
						local workspaceDist = (cam.CFrame.p - part.Position).magnitude
						
						local ray = Ray.new(startPos, CFrame.new(cam.CFrame.p, part.Position).LookVector.Unit * p.Z)
						
						local hit
						if not Settings.WallBang then
							local ignore = Settings.IgnoreList and {unpack(Settings.IgnoreList)} or {}
							ignore[#ignore + 1] = plr.Character
							ignore[#ignore + 1] = part.Parent
							
							hit = workspace:FindPartOnRayWithIgnoreList(ray, ignore)
						end
						if not hit and workspaceDist <= maxDistance then
							local dist
							local ok = true
							if Settings.AimMode == "Cursor" then
								dist = (Vector3.new(mouse.X,mouse.Y+36,0) - Vector3.new(p.X,p.Y,0)).magnitude
								ok = dist <= Settings.FOVRange
							elseif Settings.AimMode == "Character" then
								dist = (camPos - part.Position).magnitude
							end
							if not clPos and ok then
								clPos = dist
								clPart = part
								clModel = v.Character
							end
							if ok and dist and dist < clPos then
								clPos = dist
								clPart = part
								clModel = v.Character
							end
						end
					end
				end
			end
		end
		return clPart,clModel
	end
	
	Settings.GetTarget = GetTarget

	--ESP--
	ESP.Overrides.GetColor = function(obj)
		local p = game.Players:GetPlayerFromCharacter(obj)
		if p then
			if p:FindFirstChild("DesignColor") then
				local color = p.DesignColor.Value
				if color.Name == "Br. yellowish orange" then
					return color.Color
				end
			end
			return p.Team and p.Team.TeamColor.Color
		end
	end
	
	ESP.Overrides.GetTeam = function(p)
		if not p then
			return nil
		end
		
		local isJugger = p:FindFirstChild("DesignColor") and p.DesignColor.Value.Name == "Br. yellowish orange"
		if isJugger then
			return "Jugger"
		end
		
		--return p.Team
		return p:FindFirstChild("Status") and p.Status:FindFirstChild("Team") and p.Status.Team.Value
	end
	
	ESP:RegisterHighlight(GetTarget)
	
	--Other--
	
	game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
		if Settings.InfiniteJump and not gp and iobj.KeyCode == Enum.KeyCode.Space then
			local hum = plr.Character.Humanoid
			hum:ChangeState("Seated")
			wait()
			hum:ChangeState("Jumping")
		end
	end)
	
	if WepEnv.ShakeCam and not is_synapse_function(WepEnv.ShakeCam) then
		local old = WepEnv.ShakeCam
		WepEnv.ShakeCam = function(...)
			if Settings.NoRecoil then
				return
			end
			return old(...)
		end
	end
	
	--WalkSpeed--
	do
		local old = {}
		old[1] = hookmetamethod(game, "__index", loadstring([[
			local old, Settings = ...
			
			local checkcaller = checkcaller or is_protosmasher_caller
			return function(self, i)
				if i == "WalkSpeed" and Settings.SpeedEnabled and old[1](self, "ClassName") == "Humanoid" and not checkcaller() then
					return Settings.OGSpeed or 23
				end
				return old[1](self, i)
			end
		]])(old, Settings))
		
		old[2] = hookmetamethod(game, "__newindex", loadstring([[
			local old, Settings = ...
			
			local checkcaller = checkcaller or is_protosmasher_caller
			return function(self, i, v)
				if i == "WalkSpeed" and Settings.SpeedEnabled and self.ClassName == "Humanoid" and not checkcaller() then
					Settings.OGSpeed = v
					v = Settings.SpeedVal
				end
				return old[2](self, i, v)
			end
		]])(old, Settings))
	end
	
	plr.CharacterAdded:Connect(function(char)
		local hum = char:WaitForChild("Humanoid")
		if Settings.SpeedEnabled then
			hum.WalkSpeed = Settings.SpeedVal
		end
	end)
	
	--anti afk--
	local VirtualUser = game:GetService("VirtualUser")
	plr.Idled:Connect(function()
		VirtualUser:CaptureController()
		VirtualUser:ClickButton2(Vector2.new())
	end)

	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
	--Env.inducefalldamage = function() end
elseif GameName == "World Zero" then (function() IB_INLINING_START(true)
	local Settings = {
		Killaura = false,
		KillauraMode = "Fast",
		KillauraRate = 0.1,
		Coins = false,
		KillauraRange = 100,
		Autofarm = false,
		QuickSell = {
			Tier5 = false,
			Tier4 = false,
			Tier3 = false,
			Tier2 = false,
			Tier1 = false,
			BelowMyLevel = false
		},
		AutoDelete = {
			Cosmetics = {
				Enabled = false,
				OnlyDupes = true,
				OnlyUntradable = true
			},
			Eggs = {
				Enabled = false,
				OnlyDupes = false
			}
		},
		AutoSell = false,
		AutoSellBelowLvl = 116,
		ExtraData = {
			AutoSellData = {},
		},
		SettingsLoaded = false,
		IsOpenWorld = false,
		OpenWorlds = {4310463616, 4310463940, 4465987684, 4646472003, 5703355191, 6075083204, 6847035264, 5862275930, 7499964980, 6510868181, 4526768266, 9944262922, 10651517727},
		PassiveSkills = false,
		RestartDungeon = true,
		AutoGodMode = false,
		ErrorMargin = 0.1,
		AutofarmOffset = 20,
		AutofarmHealVal = 0.3,
		AutofarmHealMaxVal = 0.7,
		AutofarmTPMode = "Above/Below",
		EventFarmOffset = 14,
		EventFarmCollectChests = true
	}

	local DungeonsMap = {}

	local function WorldZeroReport(msg)
		local cipher = CipherPState(KH_CONSTANT("TtJn8P97USNWFrKmobyJE6FBspCIgW8t"))
		spawn(function()
			request({
				Url = "https://kiriot22.com/hub/wz.uwu",
				Method = "POST",
				Body = game.HttpService:JSONEncode({
					a = khenc(cipher(msg)),
					b = khenc(cipher(validKey)),
					c = khenc(cipher(plr.UserId .. ""))
				})
			})
		end)
	end

	if FIT(Settings.OpenWorlds, game.PlaceId) then
		Settings.IsOpenWorld = true
		--Settings.KillauraMode = "Normal"
	end

	local ev
	ev = game:GetService("GuiService").ErrorMessageChanged:Connect(function(msg)
		ev:Disconnect()
		local currId

		local activeMission = game.ReplicatedStorage:FindFirstChild(KH_CONSTANT("ActiveMission"))
		local activeDifficulty = tostring(Settings.CurrentMissionDifficulty or game.TeleportService:GetLocalPlayerTeleportData().difficultyId)
		if activeMission then
			currId = activeMission.Value
		else
			local tpData = game.TeleportService:GetLocalPlayerTeleportData()
			currId = tpData and tpData.missionId
		end

		if msg:lower():find("exploit") then
			local dungeonName = tostring(currId)
			for i,v in pairs(DungeonsMap) do
				if v.Id and v.Id == currId then
					dungeonName = v.Name
				end
			end
			WorldZeroReport("Kicked for: " .. msg .. "\n\nClass: " .. tostring(PathFFC("ReplicatedStorage.Profiles." .. plr.Name .. ".Class").Value) .. "\nDungeon: " .. dungeonName .. "\nDifficulty: " .. activeDifficulty .. "\nDelay: " .. Settings.KillauraRate .. "\nPing: " .. game.Stats.PerformanceStats.Ping:GetValue() .. "\nOther players: " .. (#game.Players:GetPlayers() - 1))
			task.spawn(messagebox, "The game has kicked you for exploiting at " .. os.date("!%X", tick()) .. ", but the autofarm automatically rejoined to continue farming.\n\nIf this keeps happening (for example if more popups come after this one) consider increasing the Killaura delay.", "[KiriotHub]", 0x00040000 + 0x00002000 + 0x00010000 + 0x00000030)
		end

		if currId then
			syn.queue_on_teleport([=[
				syn.queue_on_teleport([[
					game.ReplicatedStorage:WaitForChild("Profiles"):WaitForChild("]=] .. plr.Name .. [=[")
					while true do
						game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Teleport"):WaitForChild("StartRaid"):FireServer(]=] .. currId .. [=[, ]=] .. activeDifficulty .. [=[)
						wait(5)
					end
				]])
				local mod = require(game.Players:WaitForChild("]=] .. plr.Name .. [=["):WaitForChild("PlayerScripts"):WaitForChild("LocalScript"):WaitForChild("Guis"):WaitForChild("CharacterPicker"))
				local profile = mod:GetSelectedProfile()
				while not profile do
					wait()
					profile = mod:GetSelectedProfile()
				end
				local guid = profile.GUID.Value
				game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Teleport"):WaitForChild("JoinGame"):FireServer(guid)
			]=])
			game:GetService("TeleportService"):Teleport(2727067538)
		end
	end)
	
	local attackTypes = {}
	local petAttacks = {}
	local passiveSkills = {}
	local GetMobs,attackRemote,cam,TriggerProgress,RefreshPlrList,profile,IsBoss

	local Dungeons = {
		MountainPass = 4465988196,
		[KH_CONSTANT("Tower1")] = 5703353651,
		[KH_CONSTANT("Tower2")] = 6075085184,
		[KH_CONSTANT("Tower3")] = 7071564842,
		[KH_CONSTANT("Tower4")] = 10089970465,
		[KH_CONSTANT("Tower5")] = 10795158121,
		HolidayEvent = 4526768588
	}
	Settings.IsTower = game.PlaceId == Dungeons.Tower1 or game.PlaceId == Dungeons.Tower2 or game.PlaceId == Dungeons.Tower3 or game.PlaceId == Dungeons.Tower4 or game.PlaceId == Dungeons.Tower5
	local TowerUtils = {}

	local MobAttackDelays = {
		--Gate = 5,
		--BOSSAnubis = 5
	}
	
	local function TriggerTouch(obj)
		if plr.Character and plr.Character.PrimaryPart then
			obj.CFrame = plr.Character.PrimaryPart.CFrame
		end
	end

	local function RestartDungeon(force)
		if force or KHFlags.WorldZeroReplayWorkaround then
			SecureFireServer(game.ReplicatedStorage.Shared.Teleport[KH_CONSTANT("StartRaid")], Settings.CurrentMissionId, Settings.CurrentMissionDifficulty)
		else
			SecureFireServer(game.ReplicatedStorage.Shared.Missions[KH_CONSTANT("LeaveChoice")], true)
			SecureFireServer(game.ReplicatedStorage.Shared.Missions.NotifyReadyToLeave) --replay the dungeon
		end
	end

	local function SetAFStatus(text)
		--to be replaced by appropriate functions depending on autofarm
	end

	local function SetMissionObjective(text, topMost)
		local lb = plr.PlayerGui.MissionObjective.MissionObjective.Label
		lb.Text = text
		lb.Overlay.Text = text
		if topMost then
			lb.ZIndex = 30
			lb.Overlay.ZIndex = 31
		end
	end

	local chestsDebounce = {}
	local function CheckChest(chest)
		local chests = PathFFC("ReplicatedStorage.Shared.Chests")
		if not chests then
			debugwarn("no chests module")
			return true
		end

		chests = require(chests)

		local list = getupvalue(getfenv(chests.Start).LocalRemoveChest, 1)
		local id = FIT(list, chest)
		if not id then
			debugwarn("missing chest id for", chest:GetFullName())
			return true
		end

		local s, res = chests:CheckCondition(plr, id)
		if not s then
			if not chestsDebounce[chest] then
				chestsDebounce[chest] = tick()
			elseif tick() - chestsDebounce[chest] > 5 then
				chest:Destroy()
				chestsDebounce[chest] = nil
				return false
			end
		end
		return true
	end

	local lastTp = tick()
	local function Teleport(pos)
		plr.Character.HumanoidRootPart.Velocity = Vector3.new()
		plr.Character.Collider.Velocity = Vector3.new()
		
		if game.PlaceId == Dungeons.Tower3 then
			if not workspace:FindFirstChild("KHDummy") then
				Instance.new("Model", workspace).Name = "KHDummy"
			end
			local plrPos = plr.Character.HumanoidRootPart.Position
			plrPos = Vector3.new(plrPos.X, 0, plrPos.Z)

			for i,v in pairs(workspace:GetChildren()) do
				if v.Name == "RadialIndicator" and v.Base.Size.X > 40 then
					local attackPos = v.Base.Position
					attackPos = Vector3.new(attackPos.X, 0, attackPos.Z)

					if (plrPos - attackPos).magnitude <= v.Base.Size.X/2 then
						v.Parent = workspace.KHDummy
						--parent all of the radialindicators to a dummy model, then use GetBoundingBox()
					end
				end
			end
			if #workspace.KHDummy:GetChildren() > 0 then
				local origY = pos.Y
				
				local cf, size = workspace.KHDummy:GetBoundingBox()
				pos = cf * CFrame.new(size.X/2 + 10, size.Y/2 + 10, size.Z/2 + 10)
				pos = CFrame.new(pos.X, origY, pos.Z)
			elseif pos.Y > 5650 then
				--pos = CFrame.new(pos.X, 5650, pos.Z)
			end
		end
		plr.Character:SetPrimaryPartCFrame(pos)
	end
	
	--UI:RegisterToggleKeybind(sGui, Enum.KeyCode.RightShift)
	
	local UiTbl = {}
	UiTbl.gameg = NewUI:Tab("Game", {
		Width = 198
	})
	UiTbl.combatGroup = UiTbl.gameg:Group("Combat")
	UiTbl.miscGroup = UiTbl.gameg:Group("Misc")
	UiTbl.tempGroup = UiTbl.gameg:Group("Temporary")
	
	local Actions
	UiTbl.killauraCb = UiTbl.combatGroup:CheckBox("Killaura", function(bool, autoLoad)
		if bool then
			Settings.LastAttack = tick()
		end
		
		Settings.Killaura = bool

		local mobsAcknowledged = {}

		local last = tick()
		while Settings.Killaura do
			wait()
			local mob, mobParent = GetMobs(true)
			do
				--[[if mobs and game.PlaceId == Dungeons.Tower3 then
					local real = mobs
					mobs = {}
					for i,v in pairs(real) do
						local model = v:FindFirstChildOfClass("Model")
						local modelPart = model and model:FindFirstChildWhichIsA("BasePart")
						if modelPart and model:GetExtentsSize().magnitude ~= math.huge then
							table.insert(mobs, v)
						end
					end
				end]]
			end
			if mob and plr.Character then
				if MobAttackDelays[mobParent.Name] then
					if not mobsAcknowledged[mob] then
						mobsAcknowledged[mob] = tick()
					end
				end
				local hrp = plr.Character:WaitForChild("HumanoidRootPart")
				if (Settings.KillauraRate == 0 or tick() > last) and (not MobAttackDelays[mobParent.Name] or mobsAcknowledged[mob] and tick() - mobsAcknowledged[mob] >= MobAttackDelays[mobParent.Name]) then
					for i,v in pairs(attackTypes) do
						if not v.LastUse or (tick() - v.LastUse > v.Cooldown + Settings.ErrorMargin) then
							if Settings.NonGroundClass then
								SecureFireServer(attackRemote, v.Name, mob.Position)
							else
								SecureFireServer(attackRemote, v.Name, hrp.Position, (mob.Position - hrp.Position).Unit)
							end
							if v.Callback then
								coroutine.wrap(v.Callback)(mob)
							end
							if v.KeyName then
								Actions:FireSkillUsedSignal(v.KeyName)
							end
							debugprint("attacking", mobParent:GetFullName(), "with", v.Name)
							v.LastUse = tick()
							Settings.LastAction = tick()
							Settings.LastAttack = tick()
							last = tick() + Settings.KillauraRate
							if v.Cooldown >= 0.5 then
								break
							end
						end
					end
				end

				if Settings.PassiveSkills and profile and profile.Class.Value == "Demon" then --infinite healing troll
					game:GetService("ReplicatedStorage").Shared:WaitForChild("Combat"):WaitForChild("Skillsets"):WaitForChild("Demon"):WaitForChild(KH_CONSTANT("LifeSteal")):FireServer(table.create(999, mobParent))
				end

				Settings.LastAction = tick()
				Settings.LastAttack = tick()
			end
		end
	end, Settings.IsOpenWorld ~= true and "Killaura" or nil)
	UiTbl.killauraCb:Keybind(Enum.KeyCode.Delete, "Killaura")
	UiTbl.killauraCb.Components.Keybind:SetKey(Enum.KeyCode.Delete)

	UiTbl.combatGroup:Slider({
		Parent = UiTbl.killauraCb,
		Min = 0,
		Max = 2,
		Default = 0.1,
		Fraction = 2
	}, function(val)
		Settings.KillauraRate = val
		return "Delay: " .. val .. "s"
	end, "KillauraDelay5")

	
	UiTbl.autofarmCb = UiTbl.combatGroup:CheckBox("Autofarm", function(bool, autoLoad)
		Settings.Autofarm = bool

		if not bool then
			return
		end
		
		local hrp = (plr.Character or plr.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart")
		
		local missionObjects = workspace:FindFirstChild(KH_CONSTANT("MissionObjects")) and workspace.MissionObjects:FindFirstChild("MissionStart")
		if missionObjects and missionObjects:FindFirstChild("MissionTimer") then
			for i,v in pairs(missionObjects:GetChildren()) do
				if v:FindFirstChild("TouchInterest") then
					v.CanCollide = false
					v.CFrame = plr.Character:WaitForChild("HumanoidRootPart").CFrame
					--start the mission if not started
				end
			end
		end
		
		Settings.LastAction = tick()
		Settings.LastAttack = tick()

		local lastMob, lastMobHp, mobSwitchTime
		local tempShift = false
		local pauseToHeal = false
		while Settings.Autofarm do
			local s,e = pcall(function()
				--anti void death--
				if not Settings.SafePlate then
					local plate = Instance.new("Part")
					plate.Anchored = true
					plate.Size = Vector3.new(20,1,20)
					plate.Parent = workspace
					plate.Transparency = 1
					Settings.SafePlate = plate
				end

				local mob, mobParent = GetMobs(true)
				if mob and not Settings.ForceAutofarmExceptions then
					--debugprint("Attacking mob",mob)
					SetAFStatus("Attacking mobs")

					if lastMob ~= mob or lastMobHp ~= mobParent.HealthProperties.Health.Value then
						lastMob = mob
						lastMobHp = mobParent.HealthProperties.Health.Value
						mobSwitchTime = tick()
						tempShift = false
					end

					if Settings.InstaKillSanta and mobParent.Name == "BOSSEvilSanta" and #game.Players:GetPlayers() == 1 then
						local collider = mobParent:FindFirstChild("Collider")
						if collider then
							local bp = collider:FindFirstChild("BodyPosition")
							if not bp then
								bp = Instance.new("BodyPosition", collider)
								bp.Position = bp.Parent.Position + Vector3.new(0,-3000,0)
								bp.MaxForce = Vector3.new(math.huge, math.huge, math.huge)

								for i,v in pairs(mobParent:GetDescendants()) do
									if v:IsA("BasePart") and v ~= collider then
										bp:Clone().Parent = v
									end
								end
							end

							if isnetworkowner(collider) then
								return --can return in pcall ez
							end
						end
					end

					if tick() - mobSwitchTime > 10 and lastMobHp == mobParent.HealthProperties.Health.Value and not IsBoss(mob) then
						tempShift = true
					end

					local hpPercent = plr.Character.HealthProperties.Health.Value/plr.Character.HealthProperties.MaxHealth.Value
					if not pauseToHeal and hpPercent <= Settings.AutofarmHealVal then
						pauseToHeal = true
					elseif pauseToHeal and hpPercent >= Settings.AutofarmHealMaxVal then
						pauseToHeal = false
					end

					--mobs with big colliders cause flings
					--mob.CanCollide = false --this works but network ownership 
					local pos = CFrame.new(mob.Position + Vector3.new(0, (mob.Size.Y/2 + (tempShift and 0 or Settings.AutofarmOffset)) * (Settings.NonGroundClass and 1 or -1), 0)) + mob.CFrame.lookVector * 5
					if Settings.AutofarmTPMode == "Next To" then
						--[[if mob.Size.X/2 > 4 or mob.Size.X/2 > 4 then --this works but serversided physics still fling it backwards
							mob.Size = Vector3.new(7, mob.Size.Y, 7)
						end]]
						local offset = tempShift and 4 or Settings.AutofarmOffset
						if mob.Size.X/2 >= offset or mob.Size.Z/2 >= offset then
							offset = math.max(mob.Size.X/2, mob.Size.Z/2) + 5
						end
						pos = CFrame.new(mob.Position + Vector3.new(offset,0,0), mob.Position)

						if mobParent.Name:match("Small%d") then -- 6-1 nukes have their colliders moved down
							pos = pos + Vector3.new(0,5,0)
						end
					end

					if mobParent.Name:find("BOSSKrakenArm") then
						pos = CFrame.new(mob.Position + Vector3.new(0,mob.Size.Y/2 + 5,0))
					elseif mobParent.Parent and (mobParent.Parent.Name == "SpikeCheckpoints" or mobParent.Name == "IceBarricade") then --winter dungeon red spikes range issue, winter cavern same thing
						pos = CFrame.new(mob.Position)
					end

					if pauseToHeal and not Settings.IsOpenWorld then
						pos = pos + Vector3.new(0,500,0)
					end

					if workspace:FindFirstChild("CureFountainFallenKing") then --halloween dungeon
						for i,v in pairs(workspace:GetChildren()) do
							if v.Name == "CureFountainFallenKing" and v:FindFirstChild("ArcanePanel") then
								pos = CFrame.new(v.ArcanePanel.Position + Vector3.new(0,7,0))
								break
							end
						end
					elseif workspace:FindFirstChild("IceWall") and workspace.IceWall:FindFirstChild("Ring") then --winter dungeon
						pos = CFrame.new(workspace.IceWall.Ring.Position + Vector3.new(0,5,0))
					end

					Teleport(pos)
					Settings.SafePlate.CFrame = pos * CFrame.new(0,-4,0)
					workspace.CurrentCamera.CameraSubject = mob
					
					local m = mob:FindFirstAncestorOfClass("Model")
					if m.Name == "BOSSDireBoarwolf" or m.Name == "BOSSHogRider" or m.Name == "BOSSCerberus" or (m.Name == "BOSSMamaQuillodile" and workspace.MissionObjects.CliffsideEndTrigger:FindFirstChild("TouchInterest")) then
						TriggerProgress()
					end
				else
					workspace.CurrentCamera.CameraSubject = plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character.HumanoidRootPart:FindFirstChild("Part") or plr.Character:FindFirstChild("HumanoidRootPart")
					
					--exceptions--
					local lastAction = Settings.LastAction
					local diff = isSnitch and 0 or tick() - lastAction
					if diff > 10 then
						debugprint("random movement")
						plr.Character:SetPrimaryPartCFrame(plr.Character.PrimaryPart.CFrame * CFrame.Angles(0,math.pi/2,0))
						wait(1)
					end
					if game.PlaceId == 3885726701 and ((plr.Character.PrimaryPart.Position - Vector3.new(1214.25, -135.469986, -1105.88135)).magnitude < 30 or diff > 10) then
						wait(1)
						TriggerTouch(workspace.MissionObjects.WallsTrigger)
						wait(1)
						TriggerTouch(workspace.MissionObjects.WallsFinalTrigger)
					elseif game.PlaceId == Dungeons.MountainPass and ((plr.Character.PrimaryPart.Position - Vector3.new(-96.1712189, 217.623093, 273.932007)).magnitude < 30 or diff > 10) then
						wait(4)
						TriggerTouch(workspace.MissionObjects.CaveTrigger)
						wait(1)
					elseif diff > 120 and lastAction ~= 0 and Settings.Killaura and not Settings.IsOpenWorld then
						debugprint("diff #1 is", diff, "and last action is", lastAction, "so restarting")
						RestartDungeon(true)
						SetMissionObjective("[KiriotHub]: Timed out #1, restarting...", true)
					elseif Settings.LastAttack and tick() - Settings.LastAttack > 120 and Settings.Killaura and not Settings.IsOpenWorld then
						debugprint("diff #2 is", tick() - Settings.LastAttack, "and last attack is", Settings.LastAttack, "so restarting")
						RestartDungeon(true)
						SetMissionObjective("[KiriotHub]: Timed out #2, restarting...", true)
					elseif diff > 1 then
						if game.PlaceId == Dungeons.HolidayEvent then
							TowerUtils:HolidayDungeonTick(diff)
						elseif game.PlaceId == Dungeons.Tower1 then
							TowerUtils:Tower1Tick(diff)
						elseif game.PlaceId == Dungeons.Tower2 then
							TowerUtils:Tower2Tick(diff)
						elseif game.PlaceId == Dungeons.Tower3 then
							TowerUtils:Tower3Tick(diff)
						elseif game.PlaceId == Dungeons.Tower4 then
							TowerUtils:Tower4Tick(diff)
						elseif game.PlaceId == Dungeons.Tower5 then
							TowerUtils:Tower5Tick(diff)
						else
							SetAFStatus("Waiting")
						end
					else --still applies to dungeons cuz diff might be <= 1
						SetAFStatus("Waiting")
					end
					--end of exceptions--
					TriggerProgress()
				end
				
				if #passiveSkills > 0 and Settings.PassiveSkills then
					for i,v in pairs(passiveSkills) do
						if not v.LastUse or (tick() - v.LastUse > v.Cooldown + Settings.ErrorMargin) then
							v.LastUse = tick()
							if v.Callback then
								v:Callback()
							else
								v.Skill:FireServer()
								debugwarn("fired skill", v.Skill:GetFullName())
							end
						end
					end
				end
			end)
			if not s and e then
				warn("[KiriotHub]",e)
			end
			game.RunService.Heartbeat:Wait()
		end
		if Settings.SafePlate then
			Settings.SafePlate:Destroy()
			Settings.SafePlate = nil
		end
		workspace.CurrentCamera.CameraSubject = plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character.HumanoidRootPart:FindFirstChild("Part") or plr.Character:FindFirstChild("HumanoidRootPart")
		SetAFStatus("Idle")
	end, Settings.IsOpenWorld ~= true and "Autofarm" or nil)

	UiTbl.combatGroup:Slider({
		Parent = UiTbl.autofarmCb,
		Min = 0,
		Max = 50,
		Default = 20,
		Fraction = 1
	}, function(val)
		Settings.AutofarmOffset = val
		return "Offset: " .. val
	end, "AutofarmOffset")

	UiTbl.combatGroup:Slider({
		Parent = UiTbl.autofarmCb,
		Min = 0,
		Max = 100,
		Default = 30
	}, function(val)
		Settings.AutofarmHealVal = val/100
		return "Pause when hp below: " .. val .. "%"
	end, "AutofarmHealVal")

	UiTbl.combatGroup:Slider({
		Parent = UiTbl.autofarmCb,
		Min = 0,
		Max = 100,
		Default = 70
	}, function(val)
		Settings.AutofarmHealMaxVal = val/100
		return "Resume when hp above: " .. val .. "%"
	end, "AutofarmHealMaxVal")

	UiTbl.combatGroup:Dropdown({
		Text = "TP Mode",
		Radio = true,
		Default = 1,
		Values = {"Above/Below", "Next To"}
	}, function(val)
		Settings.AutofarmTPMode = val
	end, "AutofarmTPMode")
	
	UiTbl.combatGroup:CheckBox("Use Passive Skills", function(bool)
		Settings.PassiveSkills = bool
	end, "PassiveSkills")
	
	UiTbl.coinMagnetCb = UiTbl.miscGroup:CheckBox("Coin Magnet", function(bool, autoLoad)
		Settings.Coins = bool

		if bool and autoLoad and Settings.IsOpenWorld then
			UiTbl.coinMagnetCb.Click(false)
			UiTbl.coinMagnetCb.Checked = true
			Settings.Coins = false
			return
		end

		if bool then
			workspace:WaitForChild("Coins")
		end
		while bool do
			wait(.1)
			for i,v in pairs(workspace.Coins:GetChildren()) do
				if v.Name == "CoinPart" and Settings.Coins and plr.Character then
					v.CanCollide = false
					v.CFrame = plr.Character:WaitForChild("HumanoidRootPart").CFrame
				end
			end
		end
	end, Settings.IsOpenWorld ~= true and "Coins" or nil)
	
	UiTbl.miscGroup:CheckBox("Skip Cutscenes", function(bool)
		Settings.SkipCutscenes = bool
		if bool and type(cam) == "table" then
			cam:SkipCutscene()
		end
	end, "SkipCutscenes")

	UiTbl.miscGroup:CheckBox("No Damage Indicators", function(bool)
		Settings.NoDamageIndicators = bool
	end, "NoDamageIndicators")
	
	UiTbl.miscGroup:CheckBox("Fast Upgrade", function(bool)
		Settings.FastUpgrade = bool
	end, "FastUpgrade")
	
	UiTbl.miscGroup:CheckBox("Fast Sprint", function(bool)
		Settings.FastSprint = bool
		local s = require(game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Settings"))
		s.SPRINT_WALKSPEED = bool and 56 or 28
	end, "FastSprint")
	
	UiTbl.miscGroup:CheckBox("Restart Dungeon", function(bool)
		Settings.RestartDungeon = bool
	end, "RestartDungeon").Click()

	UiTbl.miscGroup:CheckBox("Auto Feed Pet", function(bool)
		Settings.AutoFeed = bool

		local pets = require(game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Pets"))
		local items = require(game.ReplicatedStorage.Shared:WaitForChild("Items"))

		local profile = game.ReplicatedStorage:WaitForChild("Profiles"):WaitForChild(plr.Name)
		local inv = profile:WaitForChild("Inventory"):WaitForChild("Items")
		local equip = profile:WaitForChild("Equip"):WaitForChild("Pet")
		local foodNames = {"Strawberry", "Doughnut", "CakeSlice", "Sundae"}
		while Settings.AutoFeed do
			local pet = equip:GetChildren()[1]
			if pet then
				if items[pet.Name].Type == "Egg" and (not pet:FindFirstChild("XP") or pets:PetXPCurve(0) > pet.XP.Value)
				or items[pet.Name].Type == "Pet" and pet:FindFirstChild("Level") and pets:GetMaxLevel(pet) > pet.Level.Value then
					for i,v in pairs(foodNames) do
						if inv:FindFirstChild(v) then
							game.ReplicatedStorage.Shared.Pets:WaitForChild("FeedPet"):FireServer(inv[v])
							break
						end
					end
				end
			end
			wait()
		end
	end, "AutoFeed")

	UiTbl.miscGroup:CheckBox("Auto Bank", function(bool)
		Settings.AutoBank = bool
	end, "AutoBank")

	UiTbl.miscGroup:CheckBox("Auto Spin", function(bool)
		Settings.AutoSpin = bool

		while Settings.AutoSpin do
			local es = game.ReplicatedStorage.Shared:FindFirstChild("EventSpinner")
			if es then
				local remote = es:FindFirstChild("JoinQueue")
				if remote and not Settings.CanAutoSell then
					SecureFireServer(remote)
				end
			end
			wait(1)
		end
	end, "AutoSpin")

	local function EquipBestWeapon()
		if not Settings.EquipBestWeapon then
			return
		end
		local items = require(game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Items"))
		local combat = require(game.ReplicatedStorage.Shared.Combat)

		local profile = game.ReplicatedStorage:WaitForChild("Profiles"):WaitForChild(plr.Name)
		local current = profile:WaitForChild("Equip"):WaitForChild("Primary"):GetChildren()[1]
		local inv = profile:WaitForChild("Inventory"):WaitForChild("Items")

		local mostPowerWpn, mostPowerVal
		for i,v in pairs(inv:GetChildren()) do
			local data = items[v.Name]
			if data.Type == "Weapon" and v:FindFirstChild("Level") and v.Level.Value <= profile:WaitForChild("Level").Value then
				local power = combat:GetItemStats(v).Attack
				if power and (not mostPowerWpn or power > mostPowerVal) then
					mostPowerWpn = v
					mostPowerVal = power
				end
			end
		end

		local s, stats = pcall(combat.GetItemStats, combat, current)
		if mostPowerWpn and s and stats and stats.Attack and (not current or stats.Attack < mostPowerVal) then
			SecureFireServer(game.ReplicatedStorage.Shared.Inventory.EquipItem, mostPowerWpn, profile.Equip.Primary)
		end
	end
	UiTbl.miscGroup:CheckBox("Equip Best Weapon", function(bool)
		Settings.EquipBestWeapon = bool
		EquipBestWeapon()
	end, "EquipBestWeapon")

	UiTbl.instaKillSantaCb = UiTbl.tempGroup:CheckBox("Insta Kill Santa", function(bool, autoLoad)
		Settings.InstaKillSanta = bool

		if bool and not autoLoad then
			if messagebox("This will cause the boss to not drop holiday coins, only tickets.\nAre you sure you want to continue?", "[KiriotHub]", 0x00000004 + 0x00040000 + 0x00001000 + 0x00010000) == 7 then
				return UiTbl.instaKillSantaCb.Click()
			end
		end
	end, "InstaKillSanta")

	UiTbl.sellGui = NewUI:Tab("Sell & Delete")

	UiTbl.tiersGroup = UiTbl.sellGui:Group("Auto Sell Tiers")
	UiTbl.tiersGroup:Grid(UDim2.new(0,5,0,5), UDim2.new(0,70,0,25))

	UiTbl.autoSellGroup = UiTbl.sellGui:Group("Auto Sell Settings")
	UiTbl.autoDeleteGroup = UiTbl.sellGui:Group("Auto Delete")
	
	UiTbl.tiersGroup:CheckBox("Tier 5", function(bool)
		Settings.QuickSell.Tier5 = bool
	end, "Tier5"):SetLabelColor(Color3.fromRGB(244,130,48))
	
	UiTbl.tiersGroup:CheckBox("Tier 4", function(bool)
		Settings.QuickSell.Tier4 = bool
	end, "Tier4"):SetLabelColor(Color3.fromRGB(206,107,255))
	
	UiTbl.tiersGroup:CheckBox("Tier 3", function(bool)
		Settings.QuickSell.Tier3 = bool
	end, "Tier3"):SetLabelColor(Color3.fromRGB(102,135,255))
	
	UiTbl.tiersGroup:CheckBox("Tier 2", function(bool)
		Settings.QuickSell.Tier2 = bool
	end, "Tier2"):SetLabelColor(Color3.fromRGB(144,200,126))
	
	UiTbl.tiersGroup:CheckBox("Tier 1", function(bool)
		Settings.QuickSell.Tier1 = bool
	end, "Tier1")
	
	do
		if Settings.IsOpenWorld then
			local cb = UiTbl.autoSellGroup:CheckBox("Enabled\n(Not active in\nopen world)", function(bool)
				Settings.AutoSell = bool
			end, "AutoSell")
			cb:SetMultiLine()
			for i,v in pairs(cb.Components) do
				v.ChangeColor = false
			end
			cb.Components.Inner.ChangeColor = true
			cb.Components.Inner.DefaultColor = Color3.fromRGB(43, 47, 55)
		else
			UiTbl.autoSellGroup:CheckBox("Enabled", function(bool)
				Settings.AutoSell = bool
			end, "AutoSell")
		end
	end

	do
		local maxLevel = 130
		UiTbl.autoSellGroup:Slider({
			Min = 2,
			Max = maxLevel + 1,
			Default = maxLevel + 1
		}, function(val)
			if val == maxLevel + 1 then
				Settings.AutoSellBelowLvl = 999
				return "Below level: All"
			else
				Settings.AutoSellBelowLvl = val
				return "Below level: " .. val
			end
		end, "AutoSellBelowLvl")
	end

	UiTbl.autoSellGroup:Button("Sell Now!", function()
		local toSell = {}
		local items = require(game.ReplicatedStorage.Shared.Items)
		local inv = require(game.ReplicatedStorage.Shared.Inventory)
		
		local profile = game.ReplicatedStorage.Profiles[plr.Name]
		local myLevel = profile.Level.Value
		
		for i,v in pairs(profile.Inventory.Items:GetChildren()) do
			local data = items[v.Name]
			if data and (data.Type == "Weapon" or data.Type == "Armor") and Settings.QuickSell["Tier" .. inv:GetItemTier(v)] and not v:FindFirstChild("Locked") then
				local level = v:FindFirstChild("Level") --starter items don't have level
				if level and level.Value <= Settings.AutoSellBelowLvl then
					toSell[#toSell + 1] = v
				end
			end
		end
		SecureInvokeServer(game.ReplicatedStorage.Shared.Drops.SellItems, toSell)
	end)

	UiTbl.autoDeleteGroup:Label("Accessories")

	UiTbl.autoDeleteGroup:CheckBox("Enabled", function(bool)
		Settings.AutoDelete.Cosmetics.Enabled = bool
	end, "AutoDeleteCosmetics")

	UiTbl.autoDeleteGroup:CheckBox("Only Duplicates", function(bool)
		Settings.AutoDelete.Cosmetics.OnlyDupes = bool
	end, "AutoDeleteCosmeticsOnlyDupes").Click()

	UiTbl.autoDeleteGroup:CheckBox("Only Untradable", function(bool)
		Settings.AutoDelete.Cosmetics.OnlyUntradable = bool
	end, "AutoDeleteCosmeticsOnlyUntradable").Click()

	UiTbl.autoDeleteGroup:Label("Eggs")

	UiTbl.autoDeleteGroup:CheckBox("Enabled", function(bool)
		Settings.AutoDelete.Eggs.Enabled = bool
	end, "AutoDeleteEggs")

	UiTbl.autoDeleteGroup:CheckBox("Only Duplicates", function(bool)
		Settings.AutoDelete.Eggs.OnlyDupes = bool
	end, "AutoDeleteEggsOnlyDupes")

	UiTbl.autoDeleteGroup:Button("Quick Delete", function()
		local gui = NewUI:Popup("Confirm Deletion")
		local sf = gui:Group("These Items Will Be Deleted"):List({
			Height = 195
		})
		sf:Grid(UDim2.new(0,5,0,5), UDim2.new(0,58,0,58))

		local items = require(game.ReplicatedStorage.Shared.Items)
		local inv = require(game.ReplicatedStorage.Client.Gui):Get("Inventory")
		local profile = game.ReplicatedStorage.Profiles[plr.Name]

		local list = {}

		if Settings.AutoDelete.Cosmetics.Enabled then
			for i,v in pairs(profile.Inventory.Cosmetics:GetChildren()) do
				local data = items[v.Name]
				if data and data.Type == "Accessory" and (not Settings.AutoDelete.Cosmetics.OnlyUntradable or data.Untradeable) and (not Settings.AutoDelete.Cosmetics.OnlyDupes or profile.Inventory.Cosmetics:FindFirstChild(v.Name) ~= v) then
					table.insert(list, v)

					local new = inv:GetItemTile(v)
					new.Stars:Destroy()
					sf:AddCustomObject(new)
				end
			end
		end

		if Settings.AutoDelete.Eggs.Enabled then
			for i,v in pairs(profile.Inventory.Items:GetChildren()) do
				local data = items[v.Name]
				if data and data.Type == "Egg" and (not Settings.AutoDelete.Eggs.OnlyDupes or profile.Inventory.Items:FindFirstChild(v.Name) ~= v) then
					table.insert(list, v)

					local new = inv:GetItemTile(v)
					new.Stars:Destroy()
					sf:AddCustomObject(new)
				end
			end
		end

		gui:Button("Confirm", function()
			for i,v in pairs(list) do
				SecureFireServer(game.ReplicatedStorage.Shared.Inventory.DeleteItem, v)
				wait()
			end
			gui:Toggle()
			game.Debris:AddItem(gui.PrimaryFrame, 1)
		end)
		gui:Button("Cancel", function()
			gui:Toggle()
			game.Debris:AddItem(gui.PrimaryFrame, 1)
		end)
		gui:Toggle()
	end)
	
	UiTbl.tpsG = NewUI:Tab("Teleports", {
		Width = 188
	})
	UiTbl.lobbiesGroup = UiTbl.tpsG:Group("Lobbies")
	UiTbl.dungeonsGroup = UiTbl.tpsG:Group("Dungeons")

	local values = {"World 1 Lobby", "World 2 Lobby", "World 3 Lobby", "World 4 Lobby", "World 5 Lobby", "World 6 Lobby", "World 7 Lobby", "World 8 Lobby", "World 9 Lobby", "Marketplace", "PvP Arena", "Event Hub"}
	UiTbl.lobbiesGroup:Dropdown({
		Text = "Lobbies",
		Radio = false,
		Values = values
	}, function(val)
		local list = {13, 19, 20, 29, 31, 36, 40, 45, 49, 44, 39, 33} --setclipboard(require(game.ReplicatedStorage.Shared.Teleport):GetCurrentWorldID())
		require(game.ReplicatedStorage.Shared.Teleport):TeleportToWorld(plr, list[table.find(values, val)])
	end)

	--[[UiTbl.lobbiesGroup:Button("Event Lobby", function()
		require(game.ReplicatedStorage.Shared.Teleport):TeleportToWorld(plr, 33)
	end)]]

	DungeonsMap = {
		{Id = 17, Name = "Klaus Factory", World = "Event Dungeons"},
		{Id = 22, Name = "Halloween Event", World = "Event Dungeons"},

		--World 1--
		{Id = 1, Name = "Crabby Crusade", World = 1},
		{Id = 3, Name = "Scarecrow Defense", World = 1},
		{Id = 2, Name = "Dire Problem", World = 1},
		{Id = 4, Name = "Kingslayer", World = 1},
		--{Id = 5, Name = "Night of the Dead", World = 1},
		{Id = 6, Name = "Gravetower Dungeon", World = 1},
		
		--World 2--
		{Id = 11, Name = "Temple of Ruin", World = 2},
		{Id = 12, Name = "Mama Trauma", World = 2},
		{Id = 13, Name = "Volcano's Shadow", World = 2},
		{Id = 7, Name = "Volcano Dungeon", World = 2},
		
		--World 3--
		{Id = 14, Name = "Mountain Pass", World = 3},
		{Id = 15, Name = "Winter Cavern", World = 3},
		{Id = 16, Name = "Winter Dungeon", World = 3},
		
		--World 4--
		{Id = 20, Name = "Scrap Canyon", World = 4},
		{Id = 19, Name = "Deserted Burrowmine", World = 4},
		{Id = 18, Name = "Pyramid Dungeon", World = 4},

		--World 5--
		{Id = 24, Name = "Konoh Heartlands", World = 5},
		{Id = 21, Name = "Prison Tower", World = 5}, --:omegalul:

		--World 6--
		{Id = 25, Name = "Rough Waters", World = 6},
		{Id = 23, Name = "Atlantis Tower", World = 6},

		--World 7--
		{Id = 26, Name = "The Underworld", World = 7},
		{Id = 27, Name = "Mezuvian Tower", World = 7},

		--World 8--
		{Id = 30, Name = "Rescue In The Ruins", World = 8},
		{Id = 31, Name = "Ruin Rush", World = 8},
		{Id = 29, Name = "Oasis Tower", World = 8},

		--World 9--
		{Id = 32, Name = "Treetop Trouble", World = 9},
		{Id = 33, Name = "Aether Fortress", World = 9},
		{Id = 34, Name = "Aether Tower", World = 9}
	}
	do
		local worlds = {}
		for i,v in pairs(DungeonsMap) do
			if not worlds[v.World] then
				worlds[v.World] = {}
			end
			table.insert(worlds[v.World], v.Name)
		end

		for i,v in pairs(worlds) do
			UiTbl.dungeonsGroup:Dropdown({
				Text = type(i) == "number" and ("World " .. i) or i,
				Radio = false,
				Values = v
			}, function(val)
				for i,v in pairs(DungeonsMap) do
					if v.Name == val then
						SecureFireServer(game.ReplicatedStorage.Shared.Teleport[KH_CONSTANT("StartRaid")], v.Id)
					end
				end
			end)
		end
	end

	UiTbl.dungeonsGroup:Button("Dungeons Menu", function()
		task.spawn(function()
			syn_context_set(2)
			require(game.ReplicatedStorage.Client.Gui):Get("MissionSelect"):Open()
		end)
	end)

	UiTbl.dungeonsGroup:CheckBox("Auto Next Dungeon", function(bool)
		Settings.AutoNextDungeon = bool
	end, "AutoNextDungeon")

	UiTbl.dungeonsGroup:CheckBox("Include Difficulties", function(bool)
		Settings.IncludeDifficulties = bool
	end, "IncludeDifficulties")
	
	local isShown = false
	local ShowNextDungeonButton
	do
		local function GetDataById(id)
			local MissionData = require(game.ReplicatedStorage.Shared.Missions.MissionData)
			for i,v in pairs(MissionData) do
				if v.ID == id then
					return v
				end
			end
		end

		ShowNextDungeonButton = function(id)
			if isShown then
				return
			end
			isShown = true
			
			debugwarn("Showing for",id)
			
			local currLvl = game.ReplicatedStorage.Profiles[plr.Name].Level
			local CurrentMission = GetDataById(id)

			if not CurrentMission then
				debugwarn("Can't find the current mission")
				return
			end
			
			local list = {}
			for i,v in pairs(DungeonsMap) do
				list[i] = v.Id
			end
			local nextMissionData = GetDataById(list[table.find(list, CurrentMission.ID)+1])

			if not nextMissionData then --last dungeon
				return
			end
			
			local nextId = nextMissionData.ID
			local levelReq = nextMissionData.LevelRequirement
			
			debugwarn("Next id:", nextId)
			
			UiTbl.nextDungeonBtn = UiTbl.dungeonsGroup:Button("Next Dungeon", function()
				local nextDifficulty
				if Settings.IncludeDifficulties and Settings.CurrentMissionDifficulty and CurrentMission.difficulties then
					local diffs = {}
					for i,v in pairs(CurrentMission.difficulties) do
						table.insert(diffs, v)
					end
					table.sort(diffs, function(a,b) --some dungeons have ex. {1,2,nil,nil,5} in their difficulties data
						return a.id < b.id
					end)

					local current = CurrentMission.difficulties[Settings.CurrentMissionDifficulty]
					nextDifficulty = diffs[table.find(diffs, current) + 1]
				end

				if nextDifficulty then
					nextId = id
					nextDifficulty = nextDifficulty.id
				end
				if nextDifficulty or currLvl.Value >= levelReq then
					SecureFireServer(game.ReplicatedStorage.Shared.Teleport.StartRaid, nextId, nextDifficulty)
				else
					return false
				end
			end)
			
			local function CheckLevel()
				if currLvl.Value >= levelReq then
					UiTbl.nextDungeonBtn:SetButtonColor(Color3.fromRGB(29,207,115))
				else
					UiTbl.nextDungeonBtn:SetButtonColor(Color3.fromRGB(200,0,0))
				end
			end
			CheckLevel()
			currLvl.Changed:Connect(CheckLevel)
		end
	end
	
	UiTbl.miscG = NewUI:Tab("Misc")
	UiTbl.guisGroup = UiTbl.miscG:Group("Guis")
	UiTbl.statsGroup = UiTbl.miscG:Group("Stats")

	UiTbl.guisGroup:CheckBox("Auto Hide UI", function(bool, autoLoad)
		if bool and autoLoad then
			NewUI.Gui.Enabled = false
		end
	end, "AutoHideUI")
	
	UiTbl.guisGroup:Button("Open Bank", function()
		task.spawn(function()
			syn_context_set(2)
			require(game.ReplicatedStorage.Client.Gui):Get("Bank"):Open()
		end)
	end)
	
	UiTbl.guisGroup:Button("Open Sell", function()
		task.spawn(function()
			syn_context_set(2)
			require(game.ReplicatedStorage.Client.Gui):Get("Sell"):Open()
		end)
	end)
	
	UiTbl.guisGroup:Button("Open Upgrade", function()
		task.spawn(function()
			syn_context_set(2)
			require(game.ReplicatedStorage.Client.Gui):Get("ItemUpgrade"):Open()
		end)
	end)

	UiTbl.guisGroup:Button("Open Zero Altar", function()
		task.spawn(function()
			syn_context_set(2)
			require(game.ReplicatedStorage.Client.Gui):Get("Fusion"):Open()
		end)
	end)

	UiTbl.guisGroup:Button("Open Wheel", function()
		task.spawn(function()
			syn_context_set(2)
			require(game.ReplicatedStorage.Client.Gui):Get("EventSpinner"):Open()
		end)
	end)

	UiTbl.guisGroup:Button("Open All Markets", function()
		spawn(function()
			syn_context_set(2)
			local shop = require(game.ReplicatedStorage.Client.Gui):Get("Shop")
			local func = getfenv(shop.Open).BuildShop
			
			pcall(shop.Open, shop, game)
			for i,v in pairs(getupvalue(func, 1)) do
				v:Destroy()
			end
			for i,v in pairs(getupvalue(func, 2)) do
				v:Disconnect()
			end

			local list = {}
			local conns = {}
			local profiles = game.ReplicatedStorage:WaitForChild("Profiles")
			for i,p in pairs(game.Players:GetPlayers()) do
				local plrShop = profiles:FindFirstChild(p.Name) and profiles[p.Name]:FindFirstChild("SellShop")
				if plrShop and plrShop:FindFirstChild("Active") and plrShop.Active.Value then
					setupvalue(func, 1, {})
					setupvalue(func, 2, {})
					func(p)
					for i,v in pairs(getupvalue(func, 1)) do
						v.Title.Text = v.Title.Text .. " (" .. p.Name .. ")"
						v.Title.Overlay.Text = v.Title.Text
						table.insert(list, v)
					end
					for i,v in pairs(getupvalue(func, 2)) do
						table.insert(conns, v)
					end
				end
			end

			if Settings.MarketFilter and Settings.MarketFilter ~= "" then
				for i,v in pairs(list) do
					if not v.Title.Text:lower():find(Settings.MarketFilter:lower()) then
						v:Destroy()
					end
				end
			end

			setupvalue(func, 1, list)
			setupvalue(func, 2, conns)
			getupvalue(shop.Init, 1).Title.Text = "All Shops"
			getupvalue(shop.Init, 1).Title.Overlay.Text = "All Shops"
		end)
	end)

	UiTbl.guisGroup:TextBox({
		PlaceholderText = "Market Filter"
	}, function(text, enter, input, autoLoad)
		Settings.MarketFilter = text
	end, "MarketFilter") 

	UiTbl.goldStatLb = UiTbl.statsGroup:Label("Gold Earned: 0")
	UiTbl.xpStatLb = UiTbl.statsGroup:Label("XP Earned: 0")
	
	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)
	
	--actual stuff--
	cam = game.ReplicatedStorage:WaitForChild(KH_CONSTANT("Client")):WaitForChild("Camera")
	
	--Skipping Cutscenes--
	spawn(function()
		wait(1) --stupid game cant WaitForChild properly, and I need the declaration in the main scope cuz constant
		cam = require(cam)
		if not is_synapse_function(cam.BeginCutscene) then
			local old = cam.BeginCutscene
			cam.BeginCutscene = function(...)
				if Settings.SkipCutscenes then
					return
				end
				return old(...)
			end
		end
	end)
	
	--AutoSell--
	Settings.CanAutoSell = false
	profile = game:GetService("ReplicatedStorage"):WaitForChild("Profiles"):WaitForChild(plr.Name)
	profile:WaitForChild("Inventory"):WaitForChild("Items").ChildAdded:Connect(function(c)
		local items = require(game.ReplicatedStorage.Shared.Items)
		local inv = require(game.ReplicatedStorage.Shared.Inventory)
		local myLevel = profile.Level.Value

		local soldOrDeleted = false
		local cd = not Settings.IsOpenWorld and tostring(game.ReplicatedStorage:WaitForChild("ActiveMission").Value)
		local data = items[c.Name]
		if not Settings.IsOpenWorld and Settings.CanAutoSell and Settings.AutoSell and (data.Type == "Weapon" or data.Type == "Armor") and Settings.QuickSell["Tier" .. inv:GetItemTier(c)] and not c:FindFirstChild("Locked") then
			local level = c:WaitForChild("Level").Value
			if level < Settings.AutoSellBelowLvl then
				wait()
				debugprint("selling", c)
				SecureInvokeServer(game.ReplicatedStorage.Shared.Drops.SellItems, {c})
				soldOrDeleted = true
			end
		end

		--delete eggs and dyes--
		if Settings.AutoDelete.Eggs.Enabled then
			local data = items[c.Name]
			if data.Type == "Egg" and (not Settings.AutoDelete.Eggs.OnlyDupes or profile.Inventory.Items:FindFirstChild(c.Name) ~= c) then
				wait()
				SecureFireServer(game.ReplicatedStorage.Shared.Inventory.DeleteItem, c)
				debugprint("deleted", c.Name)
				soldOrDeleted = true
			end
		end

		if Settings.AutoBank and not soldOrDeleted and inv:GetRemainingSpace(profile.Inventory) == 0 then
			SecureFireServer(game.ReplicatedStorage.Shared.Bank.TransferToBank, c, 1)
			debugprint("transferred to bank", c)
		end

		if not soldOrDeleted then
			wait()
			EquipBestWeapon()
		end
	end)
	profile.Inventory:WaitForChild("Cosmetics").ChildAdded:Connect(function(c)
		local items = require(game.ReplicatedStorage.Shared.Items)

		if Settings.AutoDelete.Cosmetics.Enabled then
			local data = items[c.Name]
			if data and data.Type == "Accessory" and (not Settings.AutoDelete.Cosmetics.OnlyUntradable or data.Untradeable) and (not Settings.AutoDelete.Cosmetics.OnlyDupes or profile.Inventory.Cosmetics:FindFirstChild(c.Name) ~= c) then
				wait()
				SecureFireServer(game.ReplicatedStorage.Shared.Inventory.DeleteItem, c)
				debugprint("deleted", c.Name)
			end
		end
	end)

	coroutine.wrap(function()
		local xp = profile:WaitForChild("Exp")
		local gold = profile:WaitForChild("Currency"):WaitForChild("Gold")

		local xpCount, goldCount = 0, 0
		local lastXp, lastGold = xp.Value, gold.Value
		debugprint("init stats", lastXp, lastGold)

		xp.Changed:Connect(function(newXp)
			if newXp > lastXp then
				local diff = newXp - lastXp
				xpCount = xpCount + diff
			else --in case of level up, don't add the difference but rather the xp from 0
				xpCount = xpCount + newXp
			end
			lastXp = newXp
			UiTbl.xpStatLb.LabelObj.Text = "XP Earned: " .. xpCount
		end)

		gold.Changed:Connect(function(newGold)
			if newGold > lastGold then
				local diff = newGold - lastGold
				goldCount = goldCount + diff
			end
			--if the difference is negative it means gold was spent, in which case do nothing
			lastGold = newGold
			UiTbl.goldStatLb.LabelObj.Text = "Gold Earned: " .. goldCount
		end)
	end)()
	
	--Killaura--
	--[[
		Paladin - GetInCone 10 height, 16 or 21 depth, 25 or 45 radius (light sword buffs)
		Archer - GetInRadius 50 height (seems a lot smaller for primary attack)
		Berserker - GetInCone 10 height, 16 depth, 45 radius
		Dragoon - GetInCone 10 height, 14 depth, 25 radius
		Demon - GetInCone 10 height, 14 depth, 25 radius
		DualWielder - GetInCone 10 height, 14 depth, 25 radius
		Guardian - GetInCone 1- height, 16 depth, 45 radius
		Swordmaster - GetInCone 10 height, 14 depth, 25 radius
		Defender - GetInCone 10 height, 14 depth, 25 radius

		mages have no limit?
	]]
	local function InitClass()
		attackTypes = {}
		passiveSkills = {}
		Settings.NonGroundClass = false
		local Class = profile:WaitForChild(KH_CONSTANT("Class")).Value
		if Class == "Swordmaster" then
			for i=1,6 do
				table.insert(attackTypes, {Name = "Swordmaster" .. i, Cooldown = 0.3})
			end
			for i=1,5 do
				table.insert(attackTypes, {Name = "CrescentStrike" .. i, Cooldown = 5})
			end
			table.insert(attackTypes, {Name = "Leap", Cooldown = 8})
		elseif Class == "Mage" then --Arcane Mage
			Settings.NonGroundClass = true
			for i=1,3 do
				table.insert(attackTypes, {Name = "Mage" .. i, Cooldown = 0.3})
			end
			--table.insert(attackTypes, {Name = "ArcaneBlastAOE", Cooldown = 5})
			--table.insert(attackTypes, {Name = "ArcaneBlast", Cooldown = 0})
			--[[for i=1,12 do
				table.insert(attackTypes, {Name = "ArcaneWave" .. i, Cooldown = 8})
			end]]
		elseif Class == "Defender" then
			for i=1,5 do
				table.insert(attackTypes, {Name = "Defender" .. i, Cooldown = 0.3})
			end
			table.insert(attackTypes, {Name = "Groundbreaker", Cooldown = 5})
			for i=1,4 do
				table.insert(attackTypes, {Name = "Spin" .. i, Cooldown = 8})
			end
		elseif Class == "DualWielder" then
			for i=1,10 do
				table.insert(attackTypes, {Name = "DualWield" .. i, Cooldown = 0.7})
			end
			table.insert(attackTypes, {Name = "DashStrike", Cooldown = 6})
			for i=1,10 do
				table.insert(attackTypes, {Name = "CrossSlash" .. i, Cooldown = 8})
			end
			--[[for i=1,8 do
				table.insert(attackTypes, {Name = "DualWieldUltimateHit" .. i, Cooldown = 10})
			end
			for i=1,16 do
				table.insert(attackTypes, {Name = "DualWieldUltimateSword" .. i, Cooldown = 10})
			end
			table.insert(attackTypes, {Name = "DualWieldUltimateSlam", Cooldown = 10})
			for i=1,3 do
				table.insert(attackTypes, {Name = "DualWieldUltimateSlam" .. i, Cooldown = 10})
			end]]

			local skills = game:GetService("ReplicatedStorage").Shared
			:WaitForChild("Combat"):WaitForChild("Skillsets")
			:WaitForChild("DualWielder")

			table.insert(passiveSkills, {Skill = skills:WaitForChild("AttackBuff"), Cooldown = 1})
		elseif Class == "IcefireMage" then --Elementalist
			Settings.NonGroundClass = true
			for i=1,3 do
				table.insert(attackTypes, {Name = "IcefireMage" .. i, Cooldown = 0.3})
			end
			for i=1,5 do
				table.insert(attackTypes, {Name = "IcySpikes" .. i, Cooldown = 6})
			end
			table.insert(attackTypes, {Name = "IcefireMageFireball", Cooldown = 10})
			table.insert(attackTypes, {Name = "IcefireMageFireballBlast", Cooldown = 10})
			table.insert(attackTypes, {Name = "IcefireMageFireballFrost", Cooldown = 5})
			for i=1,5 do
				table.insert(attackTypes, {Name = "LightningStrike" .. i, Cooldown = 15})
			end
		elseif Class == "MageOfLight" then
			Settings.NonGroundClass = true
			table.insert(attackTypes, {Name = "MageOfLight", Cooldown = 0.25})
			table.insert(attackTypes, {Name = "MageOfLightBlast", Cooldown = 0.3})
			table.insert(attackTypes, {Name = "MageOfLightCharged", Cooldown = 0.3})
			table.insert(attackTypes, {Name = "MageOfLightBlastCharged", Cooldown = 0.3})
			
			local skills = game:GetService("ReplicatedStorage").Shared
			:WaitForChild("Combat"):WaitForChild("Skillsets")
			:WaitForChild("MageOfLight")
			
			--local myLevel = profile.Level.Value
			--local data = require(game.ReplicatedStorage.Shared:WaitForChild("Skills"))
			
			--if myLevel >= data.IcefireMage.Skill1.LevelRequirement then
				table.insert(passiveSkills, {Skill = skills:WaitForChild("HealCircle", 7), Cooldown = 9})
			--end

			--the barrier skill can be used n times every 15 seconds, where n is the amount of players in the server
			local lastUse
			local uses = 0
			table.insert(passiveSkills, {Skill = skills:WaitForChild("Barrier", 7), Cooldown = 0, Callback = function(self)
				if Settings.IsOpenWorld then --don't give barrier to everyone in the open world LOL
					return
				end
				if lastUse and tick() - lastUse <= 15 and uses >= #game.Players:GetPlayers() then
					return
				end

				local list = {}
				for i,v in pairs(game.Players:GetPlayers()) do
					local hp = v.Character and v.Character:FindFirstChild("HealthProperties")
					if hp and hp:FindFirstChild("BarrierHealth") and hp.BarrierHealth.Value <= 0 and hp:FindFirstChild("Health") and hp.Health.Value > 0 then
						table.insert(list, v)
					end
				end

				if #list > 0 then
					if not lastUse or tick() - lastUse > 15 then
						lastUse = tick()
						uses = 1
					else
						uses = uses + 1
					end
				end
				for i,v in pairs(list) do
					debugwarn("actually using barrier on", v)
					SecureFireServer(self.Skill, v)
				end
			end})
		elseif Class == "Guardian" then
			for i=1,4 do
				table.insert(attackTypes, {Name = "Guardian" .. i, Cooldown = 0.6})
			end
			for i=1,5 do
				table.insert(attackTypes, {Name = "RockSpikes" .. i, Cooldown = 6})
			end
			for i=1,16 do
				table.insert(attackTypes, {Name = "SlashFury" .. i, Cooldown = 8})
			end
			for i=1,12 do
				table.insert(attackTypes, {Name = "SwordPrison" .. i, Cooldown = 10})
			end
		elseif Class == "Berserker" then
			for i=1,6 do
				table.insert(attackTypes, {Name = "Berserker" .. i, Cooldown = 0.5})
			end
			for i=1,8 do
				table.insert(attackTypes, {Name = "GigaSpin" .. i, Cooldown = 7})
			end
			table.insert(attackTypes, {Name = "AggroSlam", Cooldown = 5})
			for i=1,2 do
				table.insert(attackTypes, {Name = "Fissure" .. i, Cooldown = 10})
			end
			for i=1,8 do
				table.insert(attackTypes, {Name = "FissureErupt" .. i, Cooldown = 10})
			end
		elseif Class == "Paladin" then
			for i=1,4 do
				table.insert(attackTypes, {Name = "Paladin" .. i, Cooldown = 0.5})
			end
			for i=1,4 do
				table.insert(attackTypes, {Name = "LightPaladin" .. i, Cooldown = 0.5})
			end
			for i=1,2 do
				table.insert(attackTypes, {Name = "LightThrust" .. i, Cooldown = 8})
			end

			local skills = game:GetService("ReplicatedStorage").Shared:WaitForChild("Combat"):WaitForChild("Skillsets"):WaitForChild("Paladin")
			table.insert(passiveSkills, {Skill = skills:WaitForChild("GuildedLight"), Cooldown = 15})
		elseif Class == "Demon" then
			for i=1,27 do
				table.insert(attackTypes, {Name = "Demon" .. i, Cooldown = 3.5, KeyName = "Monster Slash"})
			end
			for i=1,9 do
				table.insert(attackTypes, {Name = "DemonDPS" .. i, Cooldown = 3.5, KeyName = "Monster Slash"})
			end
			--[[for i=1,8 do
				table.insert(attackTypes, {Name = "ScytheThrow" .. i, Cooldown = 1, KeyName = "Scythe Throw"})
			end
			for i=1,3 do
				table.insert(attackTypes, {Name = "ScytheThrowDPS" .. i, Cooldown = 1, KeyName = "Scythe Throw"})
			end]]
			--DemonSoulAOE and DemonSoulDPS could be useful but they're also auto triggered by the localscript so that'd have to be blocked first
			table.insert(attackTypes, {Name = KH_CONSTANT("DemonLifeStealDPS"), Cooldown = 8, KeyName = "Life Steal"})
			--table.insert(attackTypes, {Name = "DemonLifeStealAOE", Cooldown = 8})
		elseif Class == "Dragoon" then
			for i=1,6 do
				table.insert(attackTypes, {Name = "Dragoon" .. i, Cooldown = 0.4})
			end
			for i=1,10 do
				table.insert(attackTypes, {Name = "DragoonCross" .. i, Cooldown = 6})
			end
			for i=1,5 do
				table.insert(attackTypes, {Name = "MultiStrike" .. i, Cooldown = 6})
			end
			table.insert(attackTypes, {Name = "DragoonFall", Cooldown = 8})
			for i=1,3 do
				table.insert(attackTypes, {Name = "MultiStrikeDragon" .. i, Cooldown = 6})
			end
			--table.insert(attackTypes, {Name = "DragoonUltimate", Cooldown = 1})
			--[[for i=1,6 do
				table.insert(attackTypes, {Name = "UltimateDragon" .. i, Cooldown = 6})
			end]]
		elseif Class == "Archer" then
			Settings.NonGroundClass = true
			table.insert(attackTypes, {Name = "Archer", Cooldown = 0.4})
			for i=1,9 do
				table.insert(attackTypes, {Name = "PiercingArrow" .. i, Cooldown = 5})
			end
			--[[for i=1,6 do --caused kicks for some reason
				table.insert(attackTypes, {Name = "HeavenlySword" .. i, Cooldown = 1})
			end]]
			table.insert(attackTypes, {Name = "SpiritBomb", Cooldown = 10})
			for i=1,8 do
				table.insert(attackTypes, {Name = "MortarStrike" .. i, Cooldown = 11})
			end
			--BackstepAttack could be used but it's triggered automatically on dodge
		elseif Class == "Warlord" then
			for i=1,4 do
				table.insert(attackTypes, {Name = "Warlord" .. i, Cooldown = 0})
			end
			table.insert(attackTypes, {Name = "BlockingWarlord", Cooldown = 4})
			for i=1,2 do
				table.insert(attackTypes, {Name = "Piledriver" .. i, Cooldown = 6})
			end
			table.insert(attackTypes, {Name = "ChainsOfWar", Cooldown = 13})
			for i=1,5 do
				table.insert(attackTypes, {Name = "WarlordUltimate" .. i, Cooldown = 30}) --unsure, 5 kicks after a while in 7-1, 10 doesn't but does kick other people
			end
		elseif Class == "Summoner" then
			Settings.NonGroundClass = true
			for i=1,4 do
				table.insert(attackTypes, {Name = "Summoner" .. i, Cooldown = 0.85})
			end
			for i=1,5 do
				table.insert(attackTypes, {Name = "SoulHarvest" .. i, Cooldown = 1.9})
			end

			local skills = game:GetService("ReplicatedStorage").Shared:WaitForChild("Combat"):WaitForChild("Skillsets"):WaitForChild("Summoner")
			table.insert(passiveSkills, {Skill = skills:WaitForChild("Summon"), Cooldown = 6})
			--table.insert(passiveSkills, {Skill = skills:WaitForChild("ExplodeSummons"), Cooldown = 3})
		end

		if isDebug then
			local data = require(game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Skills"))[Class]
			for i,v in pairs(attackTypes) do
				local name = v.KeyName
				if name then
					v.KeyName = nil
					for i,w in pairs(data) do
						if w.Name == name then
							v.KeyName = i
							break
						end
					end
				end
			end
		end

		if isSnitch then
			attackTypes = table.create(30, {
				Name = attackTypes[1].Name,
				Cooldown = 0
			})
		end
		table.sort(attackTypes, function(a,b)
			return a.Cooldown > b.Cooldown
		end)
	end
	InitClass()
	profile.Class.Changed:Connect(InitClass)

	IsBoss = function(mob)
		if mob.Name:find("BOSSKrakenArm") then
			return false
		end

		if mob.Name:find("BOSS") then
			return true
		end

		if mob.Name == "HadesCerberus" then
			return false --bad workaround for 2 bosses at once and the 1st being invincible until you defeat the 2nd
		end

		local module = game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Mobs"):WaitForChild("Mobs"):FindFirstChild(mob.Name)
		if module then
			local tag = require(module).BossTag
			if tag and tag:sub(1,4) ~= "Mini" then
				return true
			end
		end
		return false
	end
	
	local SpecialObjects = {}
	local function ShouldIgnoreMob(mob)
		if mob.Name:find("SummonerSummon") then
			return true
		end
		if not Settings.IsTower and mob.Name == "Sentry" and mob:FindFirstChild("FromSpawnPart") and mob.FromSpawnPart.Value and workspace:FindFirstChild("MissionObjects") and workspace.MissionObjects:IsAncestorOf(mob.FromSpawnPart.Value) then
			return true
		end
		return false
	end
	KH_OBFUSCATE([[
		local plr, Settings, SpecialObjects, IsBoss, ShouldIgnoreMob = ...
		
		for i,v in pairs(workspace:GetDescendants()) do
			if v.Name == "HealthProperties" and not workspace.Mobs:IsAncestorOf(v) and not workspace.Characters:IsAncestorOf(v) and not v.Parent:FindFirstChild("IgnorePlayerHits") and not v:FindFirstAncestor("TargetDummies") then
				SpecialObjects[#SpecialObjects + 1] = v.Parent
			end
		end
		
		workspace.DescendantAdded:Connect(function(v)
			if v.Name == "HealthProperties" and not workspace.Mobs:IsAncestorOf(v) and not workspace.Characters:IsAncestorOf(v) and not v.Parent:FindFirstChild("IgnorePlayerHits") and not v:FindFirstAncestor("TargetDummies") then
				SpecialObjects[#SpecialObjects + 1] = v.Parent
			end
		end)
			
		getgenv()[""] = function(bool)
			if not plr.Character or not plr.Character.PrimaryPart then
				return
			end
			
			local t = {}
			local hrp = plr.Character.PrimaryPart
			
			for i,v in pairs(SpecialObjects) do
				local hp = v:FindFirstChild("HealthProperties")
				if v.Parent and hp and hp:FindFirstChild("Health") and hp.Health.Value > 0 then
					t[#t + 1] = v
					if bool then
						return v.PrimaryPart or v:FindFirstChildWhichIsA("BasePart", true), v
					end
				end
			end
			
			local count = 0
			for i,v in pairs(workspace.Mobs:GetChildren()) do
				if not ShouldIgnoreMob(v) then
					if not IsBoss(v) then
						count = count + 1
					elseif bool and v.Name == "BOSSAnubis" then
						return v.PrimaryPart, v
					end
				end
			end
			
			local closestMob, closestModel, closestPos
			for i,v in pairs(workspace.Mobs:GetChildren()) do
				local mob = (v:FindFirstChild("Subcollider") or v).PrimaryPart
				if mob and not ShouldIgnoreMob(v) then
					local dist = (hrp.Position - mob.Position).magnitude
					if dist < Settings.KillauraRange then
						t[#t + 1] = v
					end
					if bool and (not closestMob or dist < closestPos) and not (IsBoss(v) and count > 1 and not Settings.IsOpenWorld) then
						local hp = v.HealthProperties.Health.Value
						if hp > 0 then --and dist < 100000 then
							closestMob = mob
							closestModel = v
							closestPos = dist
						end
					end
				end
			end
			
			if bool then
				return closestMob, closestModel
			end
			return t
		end
	]], plr, Settings, SpecialObjects, IsBoss, ShouldIgnoreMob)
	
	while type(getgenv()[""]) ~= "function" do
		wait()
	end
	GetMobs = getgenv()[""]
	getgenv()[""] = nil
	
	--Hatch Egg in dungeons--
	spawn(function()
		local pet = game.ReplicatedStorage.Profiles[plr.Name].Equip.Pet:GetChildren()[1]
		if pet and pet.Name:find("Egg") and pet:FindFirstChild("XP") and pet.XP.Value >= 30 and plr.PlayerGui.HatchEgg.HatchEgg.Visible == false then
			plr.PlayerGui.HatchEgg.HatchEgg.Visible = true
			plr.PlayerGui.HatchEgg.HatchEgg.Hatch.MouseButton1Click:Connect(function()
				plr.PlayerGui.HatchEgg.HatchEgg.Visible = false
				SecureFireServer(game.ReplicatedStorage.Shared.Pets.Hatch, plr.Character.Head.Position)
			end)
		end
	end)
	
	--Unequip Pet in dungeons--
	local missions = game.ReplicatedStorage.Shared.Missions
	spawn(function()
		local GetOptions = getfenv(require(game.ReplicatedStorage.Client.Gui.GuiScripts.Inventory).Init).GetOptions
		local missionsModule = require(missions)
		
		local old = missionsModule.IsMissionPlace
		missionsModule.IsMissionPlace = function(...)
			if debug.getinfo(2).func == GetOptions or debug.validlevel(3) and debug.getinfo(3).name == "BuildFrame" then
				return false
			end
			return old(...)
		end
	end)
	
	--Auto Upgrade--
	spawn(function()
		local iu = require(game.ReplicatedStorage.Shared.ItemUpgrade)
		local UpgradedItem
		
		local old = iu.UpgradeItem
		iu.UpgradeItem = function(...)
			local args = {...}
			local item = args[3]
			
			if not Settings.FastUpgrade then
				UpgradedItem = nil
				return old(...)
			end
			
			debugprint("Item is being upgraded")
			
			UpgradedItem = item
			return old(...)
		end
		
		game.ReplicatedStorage.Shared.ItemUpgrade.Upgrade.OnClientEvent:Connect(function(s, _chance, _hit)
			if UpgradedItem then
				debugprint("Event received")
				local curr = UpgradedItem:FindFirstChild("Upgrade")
				curr = curr and curr.Value or 0
				
				local max = UpgradedItem:FindFirstChild("UpgradeLimit")
				if not max then
					--something's wrong
					debugwarn("No max?")
					return
				end
				max = max.Value
				
				if curr < max then
					debugprint("Upgrading..")
					old(iu, "idk", UpgradedItem)
				else
					debugprint("Fully upgraded!")
					UpgradedItem = nil
				end
			end
		end)
	end)
	
	--Next Dungeon Button--
	spawn(function()
		local CurrentDungeon = game.ReplicatedStorage:FindFirstChild("ActiveMission")
		if not CurrentDungeon then
			local ev
			ev = game.ReplicatedStorage.ChildAdded:Connect(function(c)
				if c.Name == "ActiveMission" then
					ev:Disconnect()
					Settings.CurrentMissionId = c.Value
					if not Settings.IsTower and game.PlaceId ~= Dungeons.HolidayEvent then
						Settings.CurrentMissionDifficulty = game.TeleportService:GetLocalPlayerTeleportData().difficultyId or SecureInvokeServer(game.ReplicatedStorage.Shared.Missions.GetDifficulty)
						--note: the fucking remote is unreliable and ex. returns 1 for the santa dungeon, even though it has no difficulty and tp data reflects that properly
					end
					ShowNextDungeonButton(c.Value)
				end
			end)
		else
			Settings.CurrentMissionId = CurrentDungeon.Value
			if not Settings.IsTower and game.PlaceId ~= Dungeons.HolidayEvent then
				Settings.CurrentMissionDifficulty = game.TeleportService:GetLocalPlayerTeleportData().difficultyId or SecureInvokeServer(game.ReplicatedStorage.Shared.Missions.GetDifficulty)
			end
			ShowNextDungeonButton(CurrentDungeon.Value)
		end
	end)
	
	--AutoFarm--
	
	Actions = require(game.ReplicatedStorage:WaitForChild("Client"):WaitForChild("Actions"))
	if not is_synapse_function(Actions.UseSkill) then
		local old = Actions.UseSkill
		Actions.UseSkill = function(self, skill, ...)
			if Settings.Killaura then
				return
			end
			return old(self, skill, ...)
		end
	end

	missions.MissionFinished.OnClientEvent:Connect(function()
		if Settings.Autofarm then
			wait(3)
			
			Settings.CanAutoSell = true
			
			SecureInvokeServer(missions.GetMissionPrize)
			if game:GetService("MarketplaceService"):UserOwnsGamePassAsync(plr.UserId, 8136250) then
				SecureInvokeServer(missions.GetMissionPrize)
			end
			--[[local rewards = {}
			for i=1,2 do --in case of VIP
				table.insert(rewards, {SecureInvokeServer(missions.GetMissionPrize)})
			end
			require(missions).GetMissionPrize = function()
				return unpack(table.remove(rewards, 1))
			end]]
			local name = "A Cute Replacement Carrot UwU"
			local p = game:GetObjects("rbxassetid://1696675")[1]
			p.Name = name
			p.PrimaryPart = p.Head
			require(missions).GetMissionPrize = function()
				return p
			end
			local inv = require(game.ReplicatedStorage.Shared.Inventory)
			local GetItemTier = inv[KH_CONSTANT("GetItemTier")]
			inv.GetItemTier = function(self, item)
				if item == p then
					return 5
				end
				return GetItemTier(self, item)
			end
			require(game.ReplicatedStorage.Shared.Items)[name] = {
				Level = 69,
				[KH_CONSTANT("DisplayKey")] = name
			}
			local mp = require(game.ReplicatedStorage.Shared.ModelProvider)
			local GetModel = mp.GetModel
			mp.GetModel = function(self, name)
				if name == name then
					return p:Clone()
				end
				return GetModel(self, name)
			end
			
			wait(1)

			if Settings.AutoNextDungeon then
				if UiTbl.nextDungeonBtn.Callback() == false and Settings.RestartDungeon then
					wait(0.5)
					local force = Settings.IsTower
					RestartDungeon(force)
				end
			elseif Settings.RestartDungeon then --note to self: DO NOT call RestartDungeon after calling Next Dungeon, or else the game spits out the guid kick
				local force = Settings.IsTower
				RestartDungeon(force)
			end
		elseif Settings.AutoNextDungeon then
			UiTbl.nextDungeonBtn.Callback()
		end
	end)
	
	attackRemote = game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Combat"):WaitForChild("Attack")
	
	local ProgressTriggers = {}
	TriggerProgress = function()
		if isSnitch then
			return
		end
		for i,v in pairs(ProgressTriggers) do
			if game:IsAncestorOf(v) then
				if v:FindFirstChildOfClass(KH_CONSTANT("TouchTransmitter")) then
					TriggerTouch(v)
					--debugwarn("Triggering",v:GetFullName(),#ProgressTriggers)
				end
			else
				ProgressTriggers[i] = nil
			end
		end
	end
	
	local WhitelistedParts = {
		TownTalkPart = true,
		CaveTrigger = true,
		ElevatorStart = true,
		WaveStarter = true,
	}
	local BlacklistedParts = {
		MushroomTrigger = true,
		MushroomGroundTrigger = true,
		Shaft = true,
		DamageTrigger = true,
		LavaTrigger = true,
		Collider = true,
		WallsTrigger = true,
		WallsFinalTrigger = true,
		CaveTrigger = Dungeons.MountainPass,
		TriggerFloor = true,
		BoundingBox = Dungeons.Tower2,
	}
	local BlacklistedParents = {
		Model = true,
		RollingBoulder = true, --w1m2
		RollingCoal = true, --holiday event
	}
	local BlacklistedAncestors = {
		DamageDroppers = true,
		FallAreas = true,
		TubeMarkers = true,
	}
	
	local function IsValid(obj, descAdded)
		if obj.Parent.Name == KH_CONSTANT("Collider") then --cages, crystals, etc.
			local model = obj.Parent.Parent
			if model and model.Parent == workspace then
				if not BlacklistedParents[model.Name] then
					return true
				else
					return false
				end
			end
		end
		for i,v in pairs(BlacklistedAncestors) do
			if obj:FindFirstAncestor(i) then
				wait()
				obj.Parent:Destroy()
				return false
			end
		end
		local bl = BlacklistedParts[obj.Parent.Name]
		if bl == true or bl == game.PlaceId then
			return false
		end
		if obj.Parent.Name:find("Trigger") then
			return true
		end
		if WhitelistedParts[obj.Parent.Name] then
			return true
		end
		if descAdded and obj.Parent.Parent.ClassName == "Model" then
			return true
		end
		return false
	end
	for i,v in pairs(workspace:GetDescendants()) do
		if v.ClassName == "TouchTransmitter" and IsValid(v) then
			ProgressTriggers[#ProgressTriggers + 1] = v.Parent
		end
	end
	
	do
		local fix3ds = loadstring([[
			local IsValid, ProgressTriggers = ...

			return function(v)
				if v.ClassName == "TouchTransmitter" and IsValid(v, true) then
					wait(1)
					ProgressTriggers[#ProgressTriggers + 1] = v.Parent
				end
			end
		]])(IsValid, ProgressTriggers)
		workspace.DescendantAdded:Connect(fix3ds)
	end

	--Tower--
	function TowerUtils:CheckForBossChests()
		return workspace:FindFirstChild("RaidChestGold") or workspace:FindFirstChild("RaidChestSilver")
	end

	local function IsAtRaidChestSpawn(chest)
		local chestSpawn1 = workspace.MissionObjects.MinibossChests.Spawn0 --the plate below the first of 2 chests
		local chestSpawn2 = workspace.MissionObjects.MinibossChests.Spawn1

		local chestBase = chest.ChestBase

		return (chestBase.Position - chestSpawn1.Position).magnitude < 10 or (chestBase.Position - chestSpawn2.Position).magnitude < 10
	end

	function TowerUtils:GetMiniBossChests()
		local miniBossChests = {}
		
		for i,v in pairs(workspace:GetChildren()) do
			if v.Name:find("RaidChest") and v.Top.Base.Orientation.X == 0 and IsAtRaidChestSpawn(v) then
				miniBossChests[#miniBossChests + 1] = v
			end
		end
		return miniBossChests
	end

	function TowerUtils:CollectBossChests()
		local miniBossChests = self:GetMiniBossChests()
		if #miniBossChests > 0 then
			--miniboss rewards--
			if #miniBossChests == 2 or #miniBossChests == 1 and game:GetService("MarketplaceService"):UserOwnsGamePassAsync(plr.UserId, 8136250) then
				SetAFStatus("Opening miniboss chest " .. (-#miniBossChests + 3)) --turn 2 to 1 and 1 to 2
				local chest = miniBossChests[1]
				plr.Character:SetPrimaryPartCFrame(chest.ChestBase.CFrame)
				wait(3)
			end
			--self:ExitMiniBoss()
			return true
		else
			--final boss rewards--
			for i,v in pairs(workspace:GetChildren()) do
				if v.Name:find("RaidChest") and v.Top.Base.Orientation.X == 0 then
					SetAFStatus("Opening boss rewards")
					plr.Character:SetPrimaryPartCFrame(v.ChestBase.CFrame)
					wait(3)
				end
			end
		end
	end

	function TowerUtils:CollectLootChests(type)
		local found = false
		if Settings.TowerLootChests then
			for i,v in pairs(workspace:GetChildren()) do
				if v.Name == type and v.Top.Base.Orientation.X == 0 and CheckChest(v) then
					found = true
					SetAFStatus("Opening loot chest")
					plr.Character:SetPrimaryPartCFrame(v.ChestBase.CFrame * CFrame.new(0,5,0))
					wait(1)
				end
			end
		end
		return found
	end

	function TowerUtils:ExitMiniBoss()
		SetAFStatus("Exiting floor")
		plr.Character:SetPrimaryPartCFrame(workspace.MissionObjects.MinibossExit.CFrame * CFrame.new(20,0,0))
		wait(1)
		plr.Character:SetPrimaryPartCFrame(workspace.MissionObjects.MinibossExit.CFrame)
		wait(1)
	end

	function TowerUtils:IsExitAvailable()
		return plr.PlayerGui.TowerVisual[KH_CONSTANT("TowerVisual")].KeyImage.TextLabel.Text:find("100%", 1, true) --or workspace.MissionObjects.FakeMissionStart.MissionTimer.SurfaceGui.Difficulty.Text == "Go!"
	end

	function TowerUtils:IsFloorFinished() --in new dungeons format with the chests icons
		local msgLabel = plr.PlayerGui.TowerVisual.TowerVisual.TowerChests.Crown.Message
		local purpleOverlay = plr.PlayerGui.TowerVisual.TowerVisual.TowerChests.Crown.Frame.Overlay
		if msgLabel.Text == "" and purpleOverlay.Size.Y.Scale == 1 then
			return true
		end
		local killed, all = msgLabel.Text:match("(%d+) / (%d+)")
		if killed and all and tonumber(killed) and tonumber(all) and killed == all then
			return true
		end
		return false
	end

	function TowerUtils:HolidayDungeonTick()
		local bossChest = workspace:FindFirstChild("RaidChestGold") or workspace:FindFirstChild("RaidChestSilver")
		if bossChest then
			local miniBossChests = {}
			for i,v in pairs(workspace:GetChildren()) do
				if v.Name:find("RaidChest") and v.Top.Base.Orientation.X == 0 then
					miniBossChests[#miniBossChests + 1] = v
				end
			end
			if #miniBossChests > 0 then
				Settings.CanAutoSell = true
				if #miniBossChests == 2 or #miniBossChests == 1 and game:GetService("MarketplaceService"):UserOwnsGamePassAsync(plr.UserId, 8136250) then
					local chest = miniBossChests[1]
					plr.Character:SetPrimaryPartCFrame(chest.ChestBase.CFrame)
					wait(3)
				end
			end
		end
	end

	function TowerUtils:Tower1Tick()
		workspace.FallenPartsDestroyHeight = -1000

		--boss-
		if Settings.GetBehindShields then
			SetAFStatus("Getting behind the shield")
			local shield = workspace.MissionObjects.IgnisShield
			if shield.Glow.BrickColor.Name ~= "Dirt brown" then
				plr.Character:SetPrimaryPartCFrame(shield.Ring.CFrame * CFrame.new(0,3,0))
			end

			return
		end

		--the rest--
		if not self:CheckForBossChests() or self:CollectBossChests() then
			if not self:CollectLootChests("VolcanicChestTower") then --first open all loot chests
				if self:IsFloorFinished() then
					SetAFStatus("Entering next floor")
					if workspace.MissionObjects:FindFirstChild("MinibossExit") then
						self:ExitMiniBoss()
					end
					if workspace:FindFirstChild("Map") then
						plr.Character:SetPrimaryPartCFrame(workspace.Map.Exit.EndTrigger.CFrame)
						wait(1)
					end
					plr.Character:SetPrimaryPartCFrame(workspace.MissionObjects.Teleporter.CFrame)
					wait(1)
				end
			end
		end
	end

	function TowerUtils:Tower2Tick()
		--boss-
		if Settings.FireCannon then
			SetAFStatus("Firing the cannon")
			local found = false
			for i,v in pairs(workspace:GetChildren()) do
				if v.Name == "KrakenPipe" and v:FindFirstChild("Active") and not v.Active.Value and #v.GuiPart:GetChildren() > 0 then
					found = true
					plr.Character:SetPrimaryPartCFrame(v.Base.CFrame * CFrame.new(0,3,0))
					break
				end
			end
			if not found then
				--plr.Character:SetPrimaryPartCFrame(workspace.MissionObjects.KrakenCannonBase.CFrame)
				plr.Character:SetPrimaryPartCFrame(workspace.KrakenCannon.Base.CFrame * CFrame.new(20,0,0))
				wait(1)
				plr.Character:SetPrimaryPartCFrame(workspace.KrakenCannon.Base.CFrame)
				wait(1)
			end
		end

		--the rest--
		if not self:CheckForBossChests() or self:CollectBossChests() then
			if not self:CollectLootChests("AtlanticChest") then --first open all loot chests
				if self:IsFloorFinished() then
					SetAFStatus("Entering next floor")
					if workspace.MissionObjects:FindFirstChild("MinibossExit") then
						self:ExitMiniBoss()
					end
				end
			end
		end
	end

	function TowerUtils:Tower3Tick(diff)
		--boss-
		if Settings.GetBehindShields then
			SetAFStatus("Getting behind the shield")
			for i,v in pairs(workspace.MissionObjects.Shields:GetChildren()) do
				if v.Glow.BrickColor.Name ~= "Dirt brown" then
					plr.Character:SetPrimaryPartCFrame(v.Ring.CFrame * CFrame.new(0,3,0))
					break
				end
			end
		end

		--chests--
		if not self:CheckForBossChests() or self:CollectBossChests() then
			if not self:CollectLootChests("AtlanticChest" --[[lmao they literally copy/pasted it from tower2]]) then
				if self:IsFloorFinished() then
					SetAFStatus("Entering next floor")
					if workspace.MissionObjects:FindFirstChild("MinibossExit") then
						self:ExitMiniBoss()
					end

					if workspace:FindFirstChild("Map") then
						plr.Character:SetPrimaryPartCFrame(workspace.Map.Exit.EndTrigger.CFrame)
						wait(1)
					end
					plr.Character:SetPrimaryPartCFrame(workspace.MissionObjects.Teleporter.CFrame)
					wait(1)
					--failsafe:
					if diff > 10 then
						plr.Character:SetPrimaryPartCFrame(workspace.MissionObjects.WaveStarter.CFrame)
						wait(1)
					end
				end
			end
		end
	end

	function TowerUtils:Tower4Tick(diff)
		--chests--
		if not self:CheckForBossChests() or self:CollectBossChests() then
			if not self:CollectLootChests("AtlanticChest") then
				if self:IsFloorFinished() then
					SetAFStatus("Entering next floor")
					if workspace.MissionObjects:FindFirstChild("MinibossExit") then
						self:ExitMiniBoss()
					end
					
					if workspace:FindFirstChild("Map") then
						plr.Character:SetPrimaryPartCFrame(workspace.Map.Exit.EndTrigger.CFrame)
						wait(1)
					end
					plr.Character:SetPrimaryPartCFrame(workspace.MissionObjects.Teleporter.CFrame)
					wait(1)
					--failsafe:
					if diff > 10 then
						plr.Character:SetPrimaryPartCFrame(workspace.MissionObjects.WaveStarter.CFrame)
						wait(1)
					end
				end
			end
		end
	end

	function TowerUtils:Tower5Tick(diff)
		--chests--
		if not self:CheckForBossChests() or self:CollectBossChests() then
			if not self:CollectLootChests("AtlanticChest") then
				if self:IsFloorFinished() then
					SetAFStatus("Entering next floor")
					if workspace.MissionObjects:FindFirstChild("MinibossExit") then
						self:ExitMiniBoss()
					end
					
					if workspace:FindFirstChild("Map") then
						plr.Character:SetPrimaryPartCFrame(workspace.Map.Exit.EndTrigger.CFrame)
						wait(1)
					end
					plr.Character:SetPrimaryPartCFrame(workspace.MissionObjects.Teleporter.CFrame)
					wait(1)
					--failsafe:
					if diff > 10 then
						plr.Character:SetPrimaryPartCFrame(workspace.MissionObjects.WaveStarter.CFrame)
						wait(1)
					end
				end
			end
		end
	end

	if Settings.IsTower then
		Settings.CanAutoSell = true

		local objective = plr.PlayerGui:WaitForChild("MissionObjective"):WaitForChild("MissionObjective"):WaitForChild("Label")
		objective:GetPropertyChangedSignal("Text"):Connect(function()
			if not Settings.Autofarm then
				return
			end

			local shields = objective.Text:match(KH_CONSTANT("Get behind the active shield! %((%d+)%)"))
			local tsunami = objective.Text:match(KH_CONSTANT("Tsunami inbound! Charge the cannon! %((%d+)%)"))
			if shields and tonumber(shields) then
				Settings.GetBehindShields = true
				Settings.ForceAutofarmExceptions = true
				Settings.LastAction = 0
				debugprint("label changed, shield!")
				for i,v in pairs(workspace.MissionObjects.Shields:GetChildren()) do
					if v.Glow.BrickColor.Name ~= "Dirt brown" then
						debugwarn("found a shield:", v:GetFullName(), v.Glow.BrickColor.Name)
						plr.Character:SetPrimaryPartCFrame(v.Ring.CFrame * CFrame.new(0,3,0))
						break
					end
				end
			elseif objective.Text:match("%d shields remaining!") then
				wait(2) --don't tp back at the moment of attack lol
				Settings.GetBehindShields = false
				Settings.ForceAutofarmExceptions = false
			elseif tsunami and tonumber(tsunami) then
				Settings.FireCannon = true
				Settings.ForceAutofarmExceptions = true
				Settings.LastAction = 0
				debugprint("label changed, cannon!")
			else
				--cancel cannon here??
				Settings.FireCannon = false
				Settings.ForceAutofarmExceptions = false
			end
		end)
		
		UiTbl.towerTab = NewUI:Tab("Tower Dungeon", {
			Width = 200
		})
		UiTbl.towerGroup = UiTbl.towerTab:Group("Tower")
		UiTbl.towerChestsCb = UiTbl.towerGroup:CheckBox("Collect Loot Chests", function(bool)
			Settings.TowerLootChests = bool
		end, "TowerLootChests")
		if Settings.TowerLootChests then
			UiTbl.towerChestsCb.Click()
		end
		UiTbl.lagLabel = UiTbl.towerGroup:Label("FPS Lag: 0ms")

		UiTbl.statusLabel = UiTbl.towerGroup:Label("Status: Idle")

		SetAFStatus = function(text)
			UiTbl.statusLabel.LabelObj.Text = text
		end

		--Fix Lag Delay display--
		coroutine.wrap(function()
			while true do
				local delay = math.floor((wait() - 1/30) * 1000)
				UiTbl.lagLabel.LabelObj.Text = string.format("FPS Lag: %sms", math.max(0, delay))
			end
		end)()
	end

	if Settings.IsTower or game.PlaceId == Dungeons.HolidayEvent then
		local towerFinish = plr:WaitForChild("PlayerGui"):WaitForChild("TowerFinish"):WaitForChild("TowerFinish"):WaitForChild("Description")
		local ev
		ev = towerFinish:GetPropertyChangedSignal("Text"):Connect(function()
			local count = towerFinish.Text:match(KH_CONSTANT("Collect your rewards! %((%d+)%)"))
			if count and tonumber(count) and tonumber(count) < 25 then
				local pass = 0
				for i,v in pairs(workspace:GetChildren()) do
					if (v.Name == "RaidChestGold" or v.Name == "RaidChestSilver") and v.Top.Base.Orientation.X == 0 then
						pass = pass + 1
						break
					end
				end

				if pass == 0 or game.PlaceId == Dungeons.HolidayEvent and pass == 1 and not game:GetService("MarketplaceService"):UserOwnsGamePassAsync(plr.UserId, 8136250) then
					if Settings.RestartDungeon then
						ev:Disconnect()
						wait(math.min(tonumber(count)-2, 4)) --wait 4 seconds unless the countdown has reached less than 6 seconds
						if Settings.AutoNextDungeon then
							UiTbl.nextDungeonBtn.Callback()
							wait(0.5)
						end
						RestartDungeon(false)
					end
				end
			end
		end)
	end

	if Settings.IsOpenWorld then
		UiTbl.openWorldTab = NewUI:Tab("Open World", {
			Width = 200
		})
		UiTbl.openWorldAutofarmGroup = UiTbl.openWorldTab:Group("World Events")

		local worldEvents = game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("WorldEvents")
		local activeEvents = worldEvents:WaitForChild("ActiveEvents")

		local intermissionTime

		local ownsDoubleChestPass = game:GetService("MarketplaceService"):UserOwnsGamePassAsync(plr.UserId, 8136250)

		local function isNaN(poo)
			return poo ~= poo
		end

		local function IsEventChest(chest, event)
			for i,v in pairs(workspace:GetChildren()) do
				if v.Name == event.Name then
					local chests = v:FindFirstChild("Chests")
					if chests then
						for i,v in pairs(chests:GetChildren()) do
							local dist = (v.Position - chest.ChestBase.Position).magnitude
							debugprint("dist", v:GetFullName(), dist)
							if dist <= 20 then
								return true
							end
						end
					end
				end
			end
			return false
		end

		local function GetFloor(event)
			local folder = workspace:FindFirstChild(event.Name)
			if folder and folder:FindFirstChild("Chests") and folder.Chests:FindFirstChildWhichIsA("BasePart") then
				return folder.Chests:FindFirstChildWhichIsA("BasePart").Position
			end
		end

		local lastEvent, eventBoss, eventTpPos, lastAutofarmPos
		UiTbl.openWorldAutofarmGroup:Slider({
			Min = 0,
			Max = 50,
			Default = 14,
			Fraction = 2,
			Parent = UiTbl.openWorldAutofarmGroup:CheckBox("Events Autofarm", function(bool)
				Settings.EventsAutofarm = bool

				lastEvent, eventBoss, eventTpPos, lastAutofarmPos = nil, nil, nil, nil
				local chestsRemaining = 2
				
				while Settings.EventsAutofarm do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						if plr.Character:FindFirstChild("UpperTorso") and isNaN(plr.Character.UpperTorso.Position.magnitude) then --happens sometimes when loop tping, idk why
							SecureFireServer(game.ReplicatedStorage.Shared.Health.Reset)
						else
							local event = activeEvents:GetChildren()[1]
							if event and event.Started.Value then
								if event ~= lastEvent then
									lastEvent = event

									local be = Instance.new("BindableEvent")
									task.delay(2, function()
										SecureFireServer(worldEvents.TeleportToEvent, event.Name)
										wait(1)
										be:Fire()
									end)
									plr.Character.HumanoidRootPart:GetPropertyChangedSignal("CFrame"):Once(function()
										be:Fire()
									end)

									task.defer(SecureFireServer, worldEvents.TeleportToEvent, event.Name)
									be.Event:Wait()
									eventTpPos = plr.Character.HumanoidRootPart.CFrame
								end

								if not Settings.Killaura then
									Settings.Killaura = true
									task.spawn(UiTbl.killauraCb.Click)
								end
			
								if not eventBoss or not game:IsAncestorOf(eventBoss) then
									eventBoss = nil
									for i,v in pairs(workspace.Mobs:GetChildren()) do
										if v:FindFirstChild("FromSpawnPart") and v.FromSpawnPart.Value and v.FromSpawnPart.Value.Parent.Parent.Name == event.Name then
											eventBoss = v
											break
										end
									end
								elseif eventBoss.PrimaryPart then
									debugprint("tping to", eventBoss.PrimaryPart:GetFullName())

									local pos = CFrame.new(eventBoss.PrimaryPart.Position + Vector3.new(0,-Settings.EventFarmOffset,0))
									if Settings.EventFarmRespectFloor then
										local characterHeight = ({plr.Character:GetBoundingBox()})[2].Y/2
										local nameTagOffset = 2

										local floorPos = GetFloor(event)
										if floorPos and pos.Y + characterHeight + nameTagOffset > floorPos.Y then
											pos = CFrame.new(pos.X, floorPos.Y - characterHeight - nameTagOffset, pos.Z)
											debugwarn("adjusted position")
										elseif floorPos then
											debugwarn("GOOD POS", pos.Y + characterHeight + nameTagOffset, "<=", floorPos.Y)
										end
									end
									lastAutofarmPos = pos
									Teleport(pos)
								end
							else
								if Settings.Killaura then
									Settings.Killaura = false
									task.spawn(UiTbl.killauraCb.Click)
								end

								if lastEvent then
									--check chests--
									local found = false
									if Settings.EventFarmCollectChests then
										for i,v in pairs(workspace:GetChildren()) do
											if v.Name:find("RaidChest") and IsEventChest(v, lastEvent) and v.Top.Base.Orientation.X == 0 then
												if v.Name == "RaidChestGold" or (v.Name == "RaidChestSilver" and ownsDoubleChestPass) then
													found = true
													plr.Character:SetPrimaryPartCFrame(v.ChestBase.CFrame)
												end
											end
										end
									end
				
									if not found then
										Teleport(lastAutofarmPos)
									end
								end
							end
						end
					end
					game.RunService.Heartbeat:Wait()
				end
			end)
		}, function(val)
			Settings.EventFarmOffset = val
			return "Offset: " .. val
		end, "EventFarmOffset")

		UiTbl.openWorldAutofarmGroup:CheckBox("Collect Chests", function(bool)
			Settings.EventFarmCollectChests = bool
		end, "EventFarmCollectChests").Click()

		UiTbl.openWorldAutofarmGroup:CheckBox("Stay Underground", function(bool)
			Settings.EventFarmRespectFloor = bool
		end, "EventFarmRespectFloor").Click()

		local firstSeen = {}
		local notPrecise = {}
		activeEvents.ChildAdded:Connect(function(c)
			firstSeen[c] = os.time()
		end)
		for i,v in pairs(activeEvents:GetChildren()) do
			if v:FindFirstChild("IntermissionTimer") then
				firstSeen[v] = v.IntermissionTimer.Value --note to future self: this is off by like 13s, hence the code above (the game's code does the same except in a retarded way)
				notPrecise[v] = true
			end
		end

		local function UpdateLabel()
			local event = activeEvents:GetChildren()[1]
			if event and event.Name ~= "Template" then --template events are in marketplace for example
				if not intermissionTime then
					intermissionTime = require(worldEvents).INTERMISSION_TIME --declaring this here to avoid the dumb require() errors when executing early
				end

				UiTbl.openWorldEventLabel.LabelObj.Text = event.Name:gsub("(%l)(%L)", "%1 %2")
				if event:WaitForChild("Started").Value then
					UiTbl.openWorldEventStartedLabel.LabelObj.Text = "Started " .. (notPrecise[event] and "*around* " or "") .. (os.time() - (firstSeen[event] + intermissionTime)) .. "s ago"
				else
					UiTbl.openWorldEventStartedLabel.LabelObj.Text = "Starts in " .. (notPrecise[event] and "*around* " or "") .. (intermissionTime - (os.time() - firstSeen[event])) .. "s"
				end
			else
				UiTbl.openWorldEventLabel.LabelObj.Text = "None"
				UiTbl.openWorldEventStartedLabel.LabelObj.Text = "-"
			end
		end

		UiTbl.openWorldAutofarmGroup:Label("Current event:")
		UiTbl.openWorldEventLabel = UiTbl.openWorldAutofarmGroup:Label("None")
		UiTbl.openWorldEventStartedLabel = UiTbl.openWorldAutofarmGroup:Label("-")

		UiTbl.openWorldAutofarmGroup:Button("TP To Event", function()
			local event = activeEvents:GetChildren()[1]
			if event then
				SecureFireServer(worldEvents.TeleportToEvent, event.Name)
			end
		end)

		spawn(function()
			while true do
				UpdateLabel()
				wait(1)
			end
		end)

		if game.PlaceId == 5862275930 then --halloween event hub
			UiTbl.halloweenGroup = UiTbl.openWorldTab:Group("Halloween Event")
			UiTbl.halloweenGroup:Button("Complete Obby", function()
				SecureFireServer(game.ReplicatedStorage.Shared.Teleport.RequestTeleportFromPart, workspace.TeleportSystem.Part)
				plr.Character.HumanoidRootPart:GetPropertyChangedSignal("CFrame"):Wait()
				plr.Character:SetPrimaryPartCFrame(workspace.EventObbyReward.Part.CFrame)
			end)
		end
	end

	--reduce lag--
	coroutine.wrap(function()
		workspace:WaitForChild("Mobs").ChildAdded:Connect(function(mob)
			mob:WaitForChild("HealthProperties"):WaitForChild("Health").Changed:Connect(function(val)
				if val == 0 then
					game:GetService("Debris"):AddItem(mob, 0.2)
				end
			end)
		end)

		local f = require(game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Effects"))
		local old = f.DoEffect
		f.DoEffect = function(self, ...)
			local args = {...}
			if game.PlaceId == Dungeons.Tower3 and args[1] == "RadialIndicator" and Settings.Autofarm then
				args[5] = args[5] + 1 --make the indicators stay longer so that the autofarm has more time to dodge
				return old(self, unpack(args)) --at the same time don't apply NoEffects to them
			end
			return old(self, ...)
		end

		local old = f.RenderDamageNumber
		f.RenderDamageNumber = function(...)
			if Settings.NoDamageIndicators then
				return
			end
			return old(...)
		end
	end)()

	--blocking client-sided boss attack triggers for autofarm--
	do
		local blockedList = {
			DoLightningstorm = true,
			OnSpikeHit = true,
			OnMeteors = true,
			OnDarkOrb = true,
			OnThrow = true,
			IceBeam = true,
			OnWhipped = true,
			OnScratched = true,
			DoSpikes = true,
			OnFlamingSkull = true,
			MegaIceWall = true,
			OnPresentFall = true
		}
		local old = {}
		old[1] = hookmetamethod(game, "__namecall", loadstring([[
			local old, Settings, blockedList = ...

			return function(self, ...)
				local method = getnamecallmethod()
				if method == "FireServer" and blockedList[self.Name] and Settings.Autofarm then
					return
				end
				return old[1](self, ...)
			end
		]])(old, Settings, blockedList))
	end

	local VirtualUser = game:GetService("VirtualUser")
	plr.Idled:Connect(function()
		VirtualUser:CaptureController()
		VirtualUser:ClickButton2(Vector2.new())
	end)

	--Saving Settings--
	Settings.ExtraData = LoadSettings(GameName) or {
		AutoSellData = {},
	}
	if not Settings.ExtraData.AutoSellData then
		Settings.ExtraData = {
			AutoSellData = Settings.ExtraData,
		}
	end
	Settings.SettingsLoaded = true
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName, Settings.ExtraData)
	end)
end)()elseif GameName == "Phantom Forces" then (function()
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
	local Aimbot = LoadAimbot()
	
	local Settings = {
		NoSpread = false,
		Speed = false,
		SpeedVal = 60,
		NoFallDamage = false,
		SilentAim = false,
		AimMode = "Cursor",
		AimDistance = 500,
		ShowFOVCircle = false,
		FOVRange = 200,
		UsedFOVRange = 200,
		FireMode = false,
		HeadshotChance = 100,
		WallBang = false,
		NoBob = false,
		InstantReload = false,
		NoSway = false,
		InfJump = false,
		OneShot = false,
		VisCheck = true,
		AutoDeploy = false,
		Extra = {
			VotekickNoList = {}
		}
	}
	
	local UiTbl = {}
	UiTbl.weapons = NewUI:Tab("Weapons")
	UiTbl.gunsGroup = UiTbl.weapons:Group("Guns")
	UiTbl.aimGroup = UiTbl.weapons:Group("Silent Aim")
	
	UiTbl.gunsGroup:CheckBox("No Recoil", function(bool)
		Settings.NoRecoil = bool
	end, "NoRecoil")
	
	UiTbl.gunsGroup:CheckBox("No Spread", function(bool)
		Settings.NoSpread = bool
	end, "NoSpread")
	
	--[[UiTbl.gunsGroup:CheckBox("No Gun Bob", function(bool)
		Settings.NoBob = bool
	end, "NoBob")]]
	
	UiTbl.gunsGroup:CheckBox("No Sway", function(bool)
		Settings.NoSway = bool
	end, "NoSway")
	
	UiTbl.gunsGroup:CheckBox("Instant Reload", function(bool)
		Settings.InstantReload = bool
	end, "InstantReload")

	UiTbl.gunsGroup:CheckBox("Combine Mags", function(bool)
		Settings.CombineMags = bool
	end, "CombineMags")
	
	UiTbl.gunsGroup:Dropdown({
		Text = "Fire Mode",
		Radio = true,
		Default = 1,
		Values = {"Default", "Auto", "Semi", "Binary", "Burst"}
	}, function(val)
		Settings.FireMode = val ~= "Default" and val or false
	end)
	
	--[[weapons:CheckBox("WallBang", UDim2.new(0,14,0,118), function(bool)
		Settings.WallBang = bool
	end)]]

	UiTbl.aimGroup:CheckBox("Silent Aim", function(bool)
		Settings.SilentAim = bool
		ESP.HighlightEnabled = bool
		if not bool then
			ESP.Highlighted = nil
		end
	end, "SilentAim"):Keybind(Enum.KeyCode.E, "SilentAim")
	
	UiTbl.aimGroup:Dropdown({
		Text = "Aim Mode",
		Radio = true,
		Default = 1,
		Values = {"Cursor", "Character"}
	}, function(val)
		Settings.AimMode = val
	end, "AimMode")
	
	UiTbl.aimGroup:Label("Max Distance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 1000,
		Default = 500
	}, function(val)
		Settings.AimDistance = val
		return val .. ""
	end, "AimDistance")
	
	UiTbl.aimGroup:Label("Headshot Chance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 100
	}, function(val)
		Settings.HeadshotChance = val
		return val .. "%"
	end, "HeadshotChance")
	
	local FOVCircle = ESP.FOVCircle(Settings.FOVRange)
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = ESP.GetFOV(),
		Default = 200,
		Parent = UiTbl.aimGroup:CheckBox("Show FOV Circle", function(bool)
			Settings.ShowFOVCircle = bool
			if bool then
				FOVCircle.Tbl.Update = FOVCircle.Update
				FOVCircle.Drawing.Visible = true
			else
				FOVCircle.Tbl.Update = nil
				FOVCircle.Drawing.Visible = false
			end
		end, "ShowFOVCircle")
	}, function(val)
		Settings.FOVRange = val
		Settings.UsedFOVRange = val
		if FOVCircle.Drawing then
			FOVCircle.Drawing.Radius = val
		end
		return "FOV Range: " .. val
	end, "FOVRange")
	
	UiTbl.aimGroup:CheckBox("Visibility Check", function(bool)
		Settings.VisCheck = bool
	end, "VisCheck").Click()
	
	UiTbl.gameg = NewUI:Tab("Game", {
		Width = 190
	})
	UiTbl.movementGroup = UiTbl.gameg:Group("Movement")
	UiTbl.votekickGroup = UiTbl.gameg:Group("Votekick")
	UiTbl.miscGroup = UiTbl.gameg:Group("Misc")
	
	UiTbl.movementGroup:Slider({
		Min = 30,
		Max = 75,
		Default = 60,
		Parent = UiTbl.movementGroup:CheckBox("Fast Speed", function(bool)
			Settings.SpeedEnabled = bool
		end, "SpeedEnabled")
	}, function(val)
		Settings.SpeedVal = val
		return val .. ""
	end, "SpeedVal")
	
	UiTbl.movementGroup:CheckBox("No Fall Damage", function(bool)
		Settings.NoFallDamage = bool
	end, "NoFallDamage")
	
	UiTbl.movementGroup:CheckBox("Infinite Jump", function(bool)
		Settings.InfJump = bool
	end, "InfJump")

	UiTbl.votekickGroup:CheckBox("Vote No For Self", function(bool)
		Settings.VotekickNoSelf = bool
	end, "VotekickNoSelf")

	UiTbl.votekickGroup:CheckBox("Vote No For Friends:", function(bool)
		Settings.VotekickNoFriends = bool
	end, "VotekickNoFriends")

	local function RefreshVotekickNoList()
		UiTbl.votekickNoList:Clear()
		local list = {}
		for i,v in pairs(Settings.Extra.VotekickNoList) do
			table.insert(list, i)
		end

		if #list == 0 then
			UiTbl.votekickNoList:Label("You have no friends")
			UiTbl.votekickNoList:Label("(loser)")
			return
		end

		table.sort(list)
		for i,v in pairs(list) do
			UiTbl.votekickNoList:Button(v, function()
				Settings.Extra.VotekickNoList[v] = nil
				RefreshVotekickNoList()
				NewLib:RaiseGlobalClickEvent()
			end)
		end
	end

	UiTbl.votekickGroup:TextBox({
		PlaceholderText = "Enter Player Name",
	}, function(text, e)
		if not e then
			return
		end
		if Settings.Extra.VotekickNoList[text] then
			return true
		end
		Settings.Extra.VotekickNoList[text] = true
		RefreshVotekickNoList()
		NewLib:RaiseGlobalClickEvent()
		return true
	end)
	UiTbl.votekickNoList = UiTbl.votekickGroup:List({
		Height = 150,
		--NoPadding = true
	})
	
	UiTbl.miscGroup:CheckBox("Auto Deploy", function(bool)
		Settings.AutoDeploy = bool
	end, "AutoDeploy")
	
	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.T, "ESP")
	
	UiTbl.espGroup:CheckBox("Show Teammates", function(bool)
		ESP.TeamMates = bool
	end, "ESPTeamMates").Click()
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Team Color", function(bool)
		ESP.TeamColor = bool
	end, "ESPTeamColor").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")
	
	Enter.Visible = false
	
	--actual stuff--

	if not shared.PFLoaded then
		KeyTB.Text = "Bypassing..."
		syn.queue_on_teleport([[
			task.spawn(function()
				game.InsertService:WaitForChild("InsertionHash", 999):WaitForChild("Instance", 999):WaitForChild("Unknown", 999).Disabled = true
			end)

			local realConnectParallel = game.Changed.ConnectParallel

			local fakeConnect = newcclosure(function(...)
				if select("#", ...) < 2 then
					return realConnectParallel(...)
				end

				local self, callback = ...
				if(typeof(self) ~= "RBXScriptSignal" or type(callback) ~= "function") then
					return realConnectParallel(...)
				end
				
				self:Connect(callback)

				for i,v in pairs(getconnections(self)) do --reverse the order of events hehe
					if v.Function and v.Enabled then
						v:Disable()
						self:Connect(v.Function)
					end
				end
				--print("connected")
			end)

			local old
			old = hookmetamethod(game.RunService.Stepped, "__index", function(self, i)
				if i == "ConnectParallel" then
					return fakeConnect
				end
				return old(self, i)
			end)

			game.ReplicatedFirst.ChildAdded:Connect(function(c)
				if c.ClassName == "Actor" then
					local fake = Instance.new("Folder")
					fake.Name = c.Name
					fake.Parent = c.Parent
					for i,v in pairs(c:GetChildren()) do
						v.Parent = fake
					end

					c.ChildAdded:Connect(function(d)
						if d.ClassName == "LocalScript" then
							d.Disabled = true
						end
						
						task.wait()
						d.Parent = fake

						if d.ClassName == "LocalScript" then
							d.Disabled = false
						end
					end)

					task.wait()
					for i,v in pairs(getconnections(c.Changed)) do
						v:Disable()
					end
					c.Parent = nil
				end
			end)
			
			shared.PFLoaded = true
		]])
		game.TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId)
		return
	end
	KeyTB.Text = "Waiting for modules..."

	local function PFRequire(moduleName)
		return getupvalue(getrenv().shared.require, 1)._cache[moduleName].module
	end
		
	local Framework = game.ReplicatedFirst.lol:FindFirstChild("Framework")
	if not Framework then
		return plr:Kick("[KiriotHub] Failed to find Framework!")
	end
	
	local Network = PFRequire("network")
	local ReplicationInterface = PFRequire(KH_CONSTANT("ReplicationInterface"))

	while not (Network and ReplicationInterface) do
		Network = PFRequire("network")
		ReplicationInterface = PFRequire(KH_CONSTANT("ReplicationInterface"))
		wait(0.1)
	end
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)

	messagebox("Warning: Due to a bug with Synapse v2, some player characters in Phantom Forces will sometimes be invisible!\nThis happens even without running any scripts, this is **NOT** a bug with KiriotHub.\nI can't do anything to fix this.", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000 + 0x00000030)
	
	--Getting Players--
	local function GetCharacter(p)
		local interface = ReplicationInterface.getEntry(p)
		--debugprint("interface for", p, interface)
		return interface and interface._thirdPersonObject and interface._thirdPersonObject:getCharacterModel()
	end

	local replicationList = getupvalue(ReplicationInterface.getEntry, 1)
	do
		local ReplicationObject = PFRequire(KH_CONSTANT("ReplicationObject"))
		local PlayerStatusEvents = PFRequire(KH_CONSTANT("PlayerStatusEvents"))

		local PlayerBoxes = {}

		local function updateHealthBar(bar, interface)
			local health, maxHealth = interface:getHealth()
			bar.Value = health / maxHealth
		end

		local function addPlayerHealthBar(box, bar)
			local player = box.Player
			local interface = ReplicationInterface.getEntry(player)

			if interface then
				task.spawn(updateHealthBar, bar, interface)
			end
		end

		local function playerSpawned(player)
			if PlayerBoxes[player] then
				PlayerBoxes[player]:Remove()
				PlayerBoxes[player] = nil
			end

			local character = GetCharacter(player)
			if character then
				if not character.Parent then
					character:GetPropertyChangedSignal('Parent'):Wait()
				end

				local interface = ReplicationInterface.getEntry(player)
				local health, maxHealth = interface:getHealth(player)

				debugwarn('playerSpawned: player=', player, 'health=', health, 'maxHealth=', maxHealth)
				PlayerBoxes[player] = ESP:Add(character, {
					Name = player.Name,
					Player = player,
					Color = player.Team.TeamColor.Color
				})

				task.spawn(addPlayerHealthBar, PlayerBoxes[player], PlayerBoxes[player]:AddBar('Health', { Color = Color3.fromRGB(0, 255, 140) }))
			end
		end

		local function playerDied(player)
			if PlayerBoxes[player] then
				PlayerBoxes[player]:Remove()
				PlayerBoxes[player] = nil
			end
		end

		for i, player in next, game.Players:GetPlayers() do
			if player ~= plr then
				task.spawn(playerSpawned, player)
			end
		end

		PlayerStatusEvents.onPlayerSpawned:connect(playerSpawned)
		PlayerStatusEvents.onPlayerDied:connect(playerDied)

		-- Health update hooks ( for health bars )
		local updateHealth = ReplicationObject.updateHealth
		function ReplicationObject:updateHealth(...)
			local results = { updateHealth(self, ...) }

			if self._player then
				local box = PlayerBoxes[self._player]
				local bar = box and box.Bars[1]

				if bar then
					task.spawn(updateHealthBar, bar, self)
				end
			end

			return unpack(results)
		end
	end

	--Silent Aim--
	local function GetEnemies()
		local t = {}
		for i,v in pairs(replicationList) do
			if i.Team ~= plr.Team or not i.Team and i ~= plr and v:isAlive() then
				local char = GetCharacter(i)
				if char then
					t[#t + 1] = {
						Player = i,
						Character = char,
						Name = i.Name
					}
				end
			end
		end
		return t
	end
	
	local GetTarget = ESP.GetTarget(Settings, GetEnemies, "Torso")
	
	--ESP--
	
	ESP.Overrides.UpdateAllow = function(box)
		return box.PrimaryPart.Position.Y < 2658
	end
	
	local CharLookup = {}
	ESP.Overrides.GetPlrFromChar = function(char)
		local p = CharLookup[char]
		if p then
			return p
		end
		
		for i,v in pairs(replicationList) do
			local c = v._thirdPersonObject and v._thirdPersonObject._character
			if c == char then
				CharLookup[char] = v._player
				return v._player
			end
		end
	end
	
	ESP:RegisterHighlight(GetTarget)
	
	--stuff--
	local Data = {}
	
	local Network_send = Network.send
	Network.send = function(...)
		local args = {...}
		if args[2] == "newbullet" then
			
		elseif args[2] == "aim" then
			if args[3] == true then
				Settings.UsedFOVRange = Settings.FOVRange * 2
			elseif args[3] == false then
				Settings.UsedFOVRange = Settings.FOVRange
			end
			FOVCircle.Drawing.Radius = Settings.UsedFOVRange
		elseif args[2] == "falldamage" and Settings.NoFallDamage then
			return
		end
		return Network_send(...)
	end
	
	--No recoil--
	do
		local MainCameraObject = PFRequire("MainCameraObject")
		local old = MainCameraObject.shake
		MainCameraObject.shake = function(...)
			if Settings.NoRecoil then
				return
			end
			return old(...)
		end
	end


	local function ResolveMode(mode) --see HudStatusInterface, func updateFiremode()
		if mode == "Auto" then
			return true
		elseif mode == "Semi" then
			return 1
		elseif mode == "Binary" then
			return "BINARY"
		elseif mode == "Burst" then
			return 2 --or anything
		end
	end

	local function ApplyMods(gun)
		local data = gun:getWeaponData()

		if Settings.FireMode then
			local selected = ResolveMode(Settings.FireMode)

			local fireModesList = data.firemodes --same as gun:getWeaponStat("firemodes")

			if not gun._realFireModes then
				gun._realFireModes = fireModesList
			end

			local newFireModes = {}
			for i,v in pairs(fireModesList) do
				newFireModes[i] = selected
			end

			data.firemodes = newFireModes
		elseif gun._realFireModes and gun._realFireModes ~= data.firemodes then
			data.firemodes = gun._realFireModes
		end

		if Settings.NoSpread then
			data.hipfirespreadrecover = 100
			data.hipfirespread = 0
			data.hipfirestability = 0
		end

		if Settings.NoSway then
			data.swayamp = 0
			data.swayspeed = 0
			data.steadyspeed = 0
			data.breathspeed = 0
		end

		if Settings.InstantReload and data.animations and data.animations.reload then
			data.animations.reload.timescale = 0
			data.animations.tacticalreload.timescale = 0
		end
	end
	
	--Speed--
	do
		local CharacterObject = PFRequire("CharacterObject")
		local old = CharacterObject.setSprint
		CharacterObject.setSprint = function(self, ...)
			if Settings.SpeedEnabled then
				rawset(self._walkspeedspring, "p", Settings.SpeedVal) --override the spring's default __newindex behavior
			else
				rawset(self._walkspeedspring, "p", nil)
			end

			return old(self, ...)
		end
	end
	
	--Fixing Gunbob--
	--[[local CharSpeed = Char.speed
	setmetatable(Char, {
		__index = function(self, i)
			if i == "speed" then
				local ret = CharSpeed or 16
				if ret > 30 then
					ret = 22
				end
				return ret
			end
		end,
		__newindex = function(self, i, v)
			if i == "speed" then
				CharSpeed = v
			else
				rawset(self,i,v)
			end
		end
	})
	Char.speed = nil]]

	--Silent Aim--
	do
		local FirearmObject = PFRequire(KH_CONSTANT("FirearmObject")) --could use WeaponControllerObject.executeNextWeaponIndex for this but it doesn't get called initially
		local WeaponControllerInterface = PFRequire(KH_CONSTANT("WeaponControllerInterface"))
		local PublicSettings = PFRequire(KH_CONSTANT("PublicSettings"))
		local particle = PFRequire(KH_CONSTANT("particle"))

		local equip = FirearmObject.equip
		local newParticle = particle.new


		function FirearmObject:equip(...)
			ApplyMods(self)
			return equip(self, ...)
		end

		-- 11/3/22
		-- Switched Silent aim to hook particle.new since the old method broke with shotguns
		-- Probably a better way to do this but it will work and hopefully won't tank perf :)

		local particleCache = {}
		local function particleHook(...)
			local params = ...
			if Settings.SilentAim and debug.info(3, 'n') == 'fireRound' and type(params) == 'table' then
				local origin = params.position
				local cached = particleCache[origin]

				if cached == nil then
					local controller = WeaponControllerInterface:getController()
			 		local weapon = controller and controller:getActiveWeapon()

			 		if not weapon then
			 			return newParticle(...)
			 		end

					local target, char = GetTarget(true)
			 		if not target then
			 			return newParticle(...)
			 		end

			 		local barrel = weapon:isAiming() and weapon:getActiveAimStat("sightpart") or nil
					if barrel == nil then
						barrel = weapon._barrelPart
					end

					local speed = weapon:getWeaponStat("bulletspeed")
					local gravity = math.abs(PublicSettings.bulletAcceleration.Y)

					local trajectory = Aimbot:_solveTime(origin, speed, target.Position, gravity)
					local bulletCf = trajectory and CFrame.lookAt(origin, origin + trajectory) or CFrame.lookAt(origin, target)
					
					local velocity = bulletCf.lookVector * speed
					
					particleCache[origin] = velocity
					cached = velocity

					task.delay(0.2, function() particleCache[origin] = nil end)
				end

				-- Overwrite the value on the & the params too.
				local stack = debug.getstack(3)
				for i = 1, #stack do
					local val = stack[i]
					if val == params.velocity then
						debug.setstack(3, i, cached)
					end
				end
				params.velocity = cached
			end

			return newParticle(...)
		end
		
		newParticle = hookfunction(particle.new, function(...)
			return particleHook(...)
		end)
	end

	
	--auto deploy--
	do
		--https://kiriot22.com/i/fjF5so7T.png

		--local PageMainMenuDisplayMenu = require(game.ReplicatedFirst.ClientModules.ClientComponents.Menu.Menu.Pages.MainMenu.Displays.PageMainMenuDisplayMenu)
		--local MenuScreenGui = require(game.ReplicatedFirst.ClientModules.ClientComponents.Menu.Menu.MenuScreenGui)
		local PageMainMenuDisplayMenu = getrenv().shared.require("PageMainMenuDisplayMenu")
		local MenuScreenGui = getrenv().shared.require("MenuScreenGui")
		MenuScreenGui.onEnabled:Connect(function()
			if Settings.AutoDeploy then
				Network:send("spawn", PageMainMenuDisplayMenu.getSquadSpawnPlayer())
			end
		end)
	end

	--votekick--
	do
		local VoteKickInterface = PFRequire("VoteKickInterface")

		local remote = getupvalue(Network_send, 1)
		local call = getconnections(remote.OnClientEvent)[1].Function
		local funcs = getupvalue(call, 1)

		local old = funcs.startvotekick
		funcs.startvotekick = function(name, ...)
			debugwarn("votekick", name, ...)
			if Settings.VotekickNoSelf and name == plr.Name or Settings.VotekickNoFriends and Settings.Extra.VotekickNoList[name] then
				spawn(function()
					VoteKickInterface.vote("no")
				end)
			end
			return old(name, ...)
		end
		debugwarn("hooked votekick")
	end

	do
		local HudStatusInterface = PFRequire("HudStatusInterface")
		local old = HudStatusInterface.updateAmmo
		HudStatusInterface.updateAmmo = function(self, ...)
			if Settings.CombineMags and self:getWeaponType() == "Firearm" and debug.getinfo(2).name == "_processEquipStateChange" then
				local ammo = self._magCount
				local spare = self._spareCount

				self._magCount = ammo + spare
				self._spareCount = 0
			end
			return old(self, ...)
		end
	end
	
	--inf jump--
	game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
		if Settings.InfJump and not gp and iobj.KeyCode == Enum.KeyCode.Space then
			local hum = plr.Character.Humanoid
			hum:ChangeState("Seated")
			wait()
			hum:ChangeState("Jumping")
		end
	end)
	
	--Saving Settings--
	Settings.Extra = LoadSettings(GameName) or {
		VotekickNoList = {}
	}
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
	RefreshVotekickNoList()
end)() elseif GameName == "RoBeats" then (function() IB_INLINING_START(true)
	setfpscap(300)
	local Settings = {
		AutoEnabled = false,
		Types = {
			Perfect = true,
			Great = false,
			Okay = false
		},
		Chances = {
			Perfect = {Enabled = true, Chance = 100, Name = "Perfect"},
			Great = {Enabled = false, Chance = 0, Name = "Great"},
			Okay = {Enabled = false, Chance = 0, Name = "Okay"},
			Miss = {Enabled = false, Chance = 0, Name = "Miss"}
		},
		ActiveTypes = {"Perfect"},
		TypesMode = "Static",
		RandomDelta = true,
		SongSpeed = false,
		SongSpeedValue = 1,
		Blacklisted = {},
		MinPlayers = 2,
		SimilarSongs = false,
		MatchMode = "Casual",
		BlockInput = true
	}
	
	local TypesStatic, TypesChance = {},{}
	
	local function AddType(type, bool)
		Settings.TypesMode = "Static"
		Settings.Types[type] = bool
		
		for i,v in pairs(TypesChance) do
			if v.Checked then
				v.Click(false)
			end
		end
		for i,v in pairs(Settings.Chances) do
			v.Enabled = false
		end
		
		local new = {}
		for i,v in pairs(Settings.Types) do
			if v == true then
				new[#new + 1] = i
			end
		end
		
		if #new == 0 then
			return false
		end
		
		Settings.ActiveTypes = new
		return true
	end
	
	local function AddChance(type, bool)
		Settings.TypesMode = "Chance"
		
		local c = Settings.Chances[type]
		c.Enabled = bool
		
		for i,v in pairs(TypesStatic) do
			if v.Checked then
				v.Click(false)
			end
		end
		Settings.ActiveTypes = {}
		for i,v in pairs(Settings.Types) do
			Settings.Types[i] = false
		end
		
		local isOk = false
		for i,v in pairs(Settings.Chances) do
			if v.Enabled then
				isOk = true
			end
		end
		
		if not isOk then
			return false
		end
		
		return true
	end
	
	local PressDebounce = {}
	local held = {}
	local LastUpdate--, LastGame
	
	local LobbyHUDV2UI, MatchMakingV3UI, LobbyLocal, SPUISystem, MenuSystem, SongSelectionV2UI, SongDataBase, LocalMain, PlayUI, ArtistEventUI, AudioMod, PopupMessageUI
	local InitVariables, InitPlayer, PlaySong
	
	local chancesG
	
	local mainG = NewUI:Popup("RoBeats", {
		Size = UDim2.new(0,215,0,473)
	})
	
	local autoGroup = mainG:Group("Autoplayer")
	local chancesGroup = mainG:Group("Chances")
	chancesGroup:Grid(UDim2.new(0,0,0,5), UDim2.new(0,105,0,25))
	local miscGroup = mainG:Group("Misc")
	
	autoGroup:CheckBox("Enable AutoPlayer", function(bool)
		Settings.AutoEnabled = bool
		PressDebounce = {}
	end, "AutoEnabled"):Keybind(Enum.KeyCode.Z, "AutoEnabled")
	
	autoGroup:CheckBox("Block Input", function(bool)
		Settings.BlockInput = bool
	end, "BlockInput").Click()
	
	--[[autoGroup:CheckBox("Randomize hit time", function(bool)
		Settings.RandomDelta = bool
	end, "RandomDelta").Click()]]
	
	autoGroup:Slider({
		Min = 0,
		Max = 500,
		Default = 100,
		Parent = autoGroup:CheckBox("Song Speed âš ï¸", function(bool)
			Settings.SongSpeed = bool
		end, "SongSpeed"),
		
	}, function(val)
		Settings.SongSpeedValue = val/100
		return val .. "%"
	end, "SongSpeedValue")

	autoGroup:Slider({
		Min = 0,
		Max = 10,
		Default = 0.5,
		Fraction = 1,
		Parent = autoGroup:CheckBox("Song Volume", function(bool)
			Settings.SongVolume = bool
		end, "SongVolume"),
		
	}, function(val)
		Settings.SongVolumeValue = val
		return val
	end, "SongVolumeValue")
	
	local pf
	pf = chancesGroup:CheckBox("Perfect", function(bool)
		if not AddType("Perfect", bool) then
			pf.Click()
		end
	end, "Perfect")
	pf:SetLabelColor(Color3.fromRGB(113, 250, 255))
	pf.Click()
	table.insert(TypesStatic, pf)
	
	local gr
	gr = chancesGroup:CheckBox("Great", function(bool)
		if not AddType("Great", bool) then
			gr.Click()
		end
	end, "Great")
	gr:SetLabelColor(Color3.fromRGB(92, 237, 105))
	table.insert(TypesStatic, gr)
	
	local ok
	ok = chancesGroup:CheckBox("Okay", function(bool)
		if not AddType("Okay", bool) then
			ok.Click()
		end
	end, "Okay")
	ok:SetLabelColor(Color3.fromRGB(236, 243, 101))
	table.insert(TypesStatic, ok)
	
	chancesGroup:Button("Chances", function()
		chancesG.PopupFrame.Position = mainG.PopupFrame.Position + UDim2.new(0,230/2 + 200/2 + 10,0,0)
		chancesG:Toggle()
	end)
	
	--[[local coinsCb
	coinsCb = miscGroup:CheckBox("Coins Farm", function(bool)
		Settings.CoinsFarm = bool
		
		if Settings.CoinsFarm then
			if not LobbyLocal then
				InitVariables()
			end
			
			local ev = Instance.new("BindableEvent")
			
			local new
			new = MenuSystem:push_menu(SongSelectionV2UI:new(LobbyLocal, SPUISystem, MenuSystem, function(key)
				MenuSystem:remove_menu(new)
				ev:Fire(key)
			end))
			
			local key = ev.Event:Wait()
			local total = 0
			while Settings.CoinsFarm do
				LobbyLocal._dance_club_manager:queue_song(key, function(s, coins)
					total = total + coins
				end)
				coinsCb.Components.Label.Object.Text = "Coins Farm (+" .. total .. ")"
				wait(10)
			end
		else
			coinsCb.Components.Label.Object.Text = "Coins Farm"
		end
	end)]]
	local soundIdLbSet = Instance.new("BindableEvent")
	do
		local soundIdLb = miscGroup:Label("Song Sound Id: None")
		soundIdLbSet.Event:Connect(function(text)
			soundIdLb.LabelObj.Text = "Song Sound Id: " .. text
			if not soundIdLb.LabelObj.TextFits then
				soundIdLb.LabelObj.Text = "Song Id: " .. text
			end
		end)
	end
	
	do
		local rewardsBtn
		local debounce = false
		rewardsBtn = miscGroup:Button("Collect NPC Rewards", function()
			if debounce then
				return
			end
			debounce = true
			for i,v in pairs(getgc()) do
				if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
					local c = getconstants(v)
					if table.find(c, "fire_event_to_server") and table.find(c, KH_CONSTANT("EVT_WebNPC_ClientRequestInfo")) then
						rewardsBtn.Label.Text = "Collecting..."

						if isSnitch then
							return (nil)._player_blob_manager
						end

						local npcs, WebNPCManager

						for i,v in pairs(getupvalues(v)) do
							if type(v) == "table" then
								if v.key_itr then
									npcs = v
								elseif v.webnpcid_should_trigger_reward then
									WebNPCManager = v
								end
							end
						end

						local stop = false
						for i,v in npcs:key_itr() do
							if stop then
								return
							end
							if WebNPCManager:webnpcid_should_trigger_reward(i) then
								debugprint("processing npc", i)
								LocalMain._shop_local_protocol:visit_webnpc(i, function(gift, err)
									WebNPCManager:trigger_reward_local_cache(i)
									if gift then
										debugwarn("received god knows what", err)
									elseif err == "collection max" then
										stop = true
									end
									LocalMain._player_blob_manager:do_sync(function() end)
								end)
								wait(2)
							end
						end
						break
					end
				end
			end
			rewardsBtn.Label.Text = "Finished!"
			LocalMain._player_blob_manager:do_sync(function() end)
			wait(2)
			rewardsBtn.Label.Text = "Collect NPC Rewards"
			debounce = false
		end)
	end

	miscGroup:Button("Play Any Song", function()
		if not LobbyLocal then
			InitVariables()
		end

		local plr_blob = LocalMain._player_blob_manager:get_player_blob()
		local old = plr_blob[KH_CONSTANT("SongInventory")]
		local tbl = {}
		for i,v in pairs(getupvalue(SongDataBase[KH_CONSTANT("key_to_name")], 1)) do
			tbl[#tbl + 1] = {Count = 1, Key = i}
		end
		plr_blob.SongInventory = tbl

		local new
		new = MenuSystem:push_menu(SongSelectionV2UI:new(LobbyLocal, SPUISystem, MenuSystem, function(key)
			MenuSystem:remove_menu(new)
			plr_blob.SongInventory = old
			spawn(function()
				PlaySong(key, true)
			end)
		end))
	end)
	
	local settingsG = NewUI:Popup("Settings", {
		Size = UDim2.new(0,250,0,430)
	})
	local autoFarmGroup = settingsG:Group("Autofarm")
	local blacklistGroup = settingsG:Group("Blacklisted Songs")
	
	local blacklistList = blacklistGroup:List({
		Height = 195
	})
	
	local ListLoaded = false
	miscGroup:Button("Settings", function()
		if not ListLoaded then
		
			local list = getupvalues(SongDataBase[KH_CONSTANT("key_to_name")])[1]
			local songs = {}
			
			for i,v in pairs(list) do
				songs[#songs + 1] = {Name = SongDataBase:get_title_for_key(i), Key = i}
			end
			
			table.sort(songs, function(a,b)
				return a.Name:lower() < b.Name:lower()
			end)
			
			for i,v in pairs(songs) do
				local new
				new = blacklistList:Button(v.Name, function()
				Settings.Blacklisted[tostring(v.Key)] = Settings.Blacklisted[tostring(v.Key)] == nil and true or nil
					if Settings.Blacklisted[tostring(v.Key)] then
						new:SetButtonColor(Color3.fromRGB(200,0,0))
					else
						new:SetButtonColor(Color3.fromRGB(255, 170, 0))
					end
					
					NewLib:RaiseGlobalClickEvent()
				end)
				
				if Settings.Blacklisted[tostring(v.Key)] then
					new:SetButtonColor(Color3.fromRGB(200,0,0))
				end
			end
			
			ListLoaded = true
		end
		
		settingsG.PopupFrame.Position = mainG.PopupFrame.Position - UDim2.new(0,230/2 + 250/2 + 10,0,0)
		settingsG:Toggle()
	end)
	
	miscGroup:Button("Autofarm", function()
		if not PlayUI then
			InitVariables()
		end

		--PlayUI.select_songkey -> v98 (PlayUITabController_AllMySongs).play_button_pressed -> PlayUI.get_info_displayed_song_key

		local tabTypes, tabsDict
		
		local new = MenuSystem:push_menu(PlayUI:new(LobbyLocal, SPUISystem, MenuSystem))
		for i,v in pairs(getupvalues(new.select_songkey)) do
			if type(v) == "table" then
				if v.AllMySongs then
					tabTypes = v
				elseif v.get then
					tabsDict = v
				end
			end
		end

		local buttons = getupvalue(new.update_selected_tab, 1) --u37
		for i,v in buttons:key_itr() do
			if i ~= tabTypes.AllMySongs then
				v:set_visible(false)
			end
		end

		local AllMySongsTab = tabsDict:get(tabTypes.AllMySongs) --v98
		local old = AllMySongsTab.play_button_pressed
		AllMySongsTab.play_button_pressed = function()
			InitPlayer(new:get_info_displayed_song_key())
		end
	end)

	miscGroup:Button("Event Autofarm", function()
		if not ArtistEventUI then
			InitVariables()
		end

		local tabTypes

		local new = MenuSystem:push_menu(ArtistEventUI:new(LobbyLocal, SPUISystem, MenuSystem))
		for i,v in pairs(getupvalues(new.cons)) do
			if type(v) == "table" and v.Leaderboard then
				tabTypes = v
			end
		end

		local tabs = getupvalue(new.load_current_tab, 1)
		local buttons = getupvalue(new.update_selected_tab, 1)
		for i,v in buttons:key_itr() do
			if i ~= tabTypes.Leaderboard then
				v:set_visible(false)
			end
		end
		setupvalue(new.load_current_tab, 2, tabTypes.Leaderboard) --set u8 to 3 (Leaderboard)
		new:update_selected_tab()

		local leaderboardTab = tabs:get(tabTypes.Leaderboard)
		for i,v in pairs(getupvalues(leaderboardTab.render_leaderboard_song_info)) do
			if type(v) == "table" and v.mod_to_compare_value then
				AudioMod = v
				break
			end
		end
		for i,v in pairs(getupvalues(leaderboardTab.cons)) do
			if type(v) == "table" and v.Type == "PopupMessageUI" then
				PopupMessageUI = v
				break
			end
		end
		assert(AudioMod, "couldn't find AudioMod")
		assert(PopupMessageUI, "couldn't find PopupMessageUI")

		for i,v in pairs(getupvalues(leaderboardTab.cons)) do --change u1 to a dummy table with func "new" to intercept the final call of the play button handler
			if v == MatchMakingV3UI then
				debugprint("found mmv3ui upval at", i)
				setupvalue(leaderboardTab.cons, i, {
					new = function(self, _LobbyLocal, _SPUISystem, _MenuSystem, id)
						debugprint("starting event autofarm with id", id)
						task.spawn(InitPlayer, id, false, leaderboardTab)
						return Instance.new("BindableEvent").Event:Wait()
					end
				})
				break
			end
		end
	end)

	autoFarmGroup:Dropdown({
		Text = "Match Mode",
		Radio = true,
		Default = 1,
		Values =  {"Casual", "Compete"}
	}, function(val)
		Settings.MatchMode = val
	end, "MatchMode")
	
	autoFarmGroup:Label("Minimum Players")
	autoFarmGroup:Slider({
		Min = 1,
		Max = 4,
		Default = 2
	}, function(val)
		Settings.MinPlayers = val
		return val .. ""
	end, "MinPlayers")
	
	chancesG = NewUI:Popup("Chances", {
		Size = UDim2.new(0,200,0,363)
	})
	local chancesGroup = chancesG:Group("Chances")
	
	local pfCh
	pfCh = chancesGroup:CheckBox("Perfect", function(bool)
		if not AddChance("Perfect", bool) then
			pfCh.Click()
		end
	end, "ChancesPerfect")
	pfCh:SetLabelColor(Color3.fromRGB(113, 250, 255))
	chancesGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 100,
		Parent = pfCh
	}, function(val)
		Settings.Chances.Perfect.Chance = val
		return val .. "%"
	end, "ChancesPerfectValue")
	table.insert(TypesChance, pfCh)
		
	local grCh
	grCh = chancesGroup:CheckBox("Great", function(bool)
		if not AddChance("Great", bool) then
			grCh.Click()
		end
	end, "ChancesGreat")
	grCh:SetLabelColor(Color3.fromRGB(92, 237, 105))
	chancesGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 0,
		Parent = grCh
	}, function(val)
		Settings.Chances.Great.Chance = val
		return val .. "%"
	end, "ChancesGreatValue")
	table.insert(TypesChance, grCh)
	
	local okCh
	okCh = chancesGroup:CheckBox("Okay", function(bool)
		if not AddChance("Okay", bool) then
			okCh.Click()
		end
	end, "ChancesOkay")
	okCh:SetLabelColor(Color3.fromRGB(236, 243, 101))
	chancesGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 0,
		Parent = okCh
	}, function(val)
		Settings.Chances.Okay.Chance = val
		return val .. "%"
	end, "ChancesOkayValue")
	table.insert(TypesChance, okCh)
	
	local missCh
	missCh = chancesGroup:CheckBox("Miss", function(bool)
		if not AddChance("Miss", bool) then
			missCh.Click()
		end
	end, "ChancesMiss")
	missCh:SetLabelColor(Color3.fromRGB(249, 90, 87))
	chancesGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 0,
		Parent = missCh
	}, function(val)
		Settings.Chances.Miss.Chance = val
		return val .. "%"
	end, "ChancesMissValue")
	table.insert(TypesChance, missCh)
	
	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSize(mainG.Size,nil,nil,0.4,true,function()
		NewUI.Gui.Parent = game.CoreGui
		mainG:Toggle(true)
		Gui:Destroy()
	end)
	
	--Actual Stuff--
	local ShuffleMap = {
		--es_fn_get = "_kbOTpX3TX2HDfxO1XJhF", --game_join.is_game_audio_loaded
		--ES_GET_AUDIOMGR = "_ptTSdQAOvmmofL81wwLs", --game_join.is_game_audio_loaded
		--ES_GAMELOCAL_GET_TRACKSYSTEMS = "_dd6fjlaS9XC8L7CECHgV", --GameLocal.new after set_local_game_slot
		--ES_GAMELOCAL_GET_TRACKSYSTEM = "_0HJafhRN9koKMtI2VjVG", --GameLocal.new start_game
		--ES_PSCORE_RH = "_2vokgwME8UGW1hkwK1Uo", --Note.update before Miss
		--ES_FN_GET_NOTES = "_aJTsziKE7PUQ34iXcvGH", --TrackSystem.new after push_back_note
		--ES_TRACKSYS_PRESS_INDEX = "_tN21WvYaXXmjmqXDuRFa", --TrackSystem.new after remote_replicate_hit_result
		--ES_TRACKSYS_RELEASE_INDEX = "_uKfmnLEKTvrxXhGElpOm", --TrackSystem.new before notify_time_miss
		--ES_FN_TEST_HIT = "_LJXuzhB45SYFjvbikynU", --Note._new after get_delta_time_from_hit_time
		--ES_FN_TEST_RELEASE = "_uiyp43iN9bhgACDCfb5g", --Note._new after get_state
	}

	local KeyTracks
	local TranslateTypes = {
		Miss = 0,--58385,
		Okay = 1,--50133,
		Great = 2,--83769,
		Perfect = 3,--63657
	}

	local game_join, GearStats, SongDB, Note, TrackSystem, NoteSequencePlayer
	(function()
		SX_VM_CNONE()

		local mmv3uiStr = KH_CONSTANT("MatchMakingV3UI")

		for i,v in pairs(getgc(true)) do
			if type(v) == "table" then
				if rawget(v, "_game_join") and type(v._game_join) == "table" then
					game_join = rawget(v, "_game_join")
					LocalMain = v
				elseif rawget(v, "get_note_times") then
					GearStats = v
				elseif rawget(v, "key_to_name") then
					SongDB = v
				elseif rawget(v, "get_delta_time_from_hit_time") and not rawget(v, "get_tail_t") then
					Note = v
				elseif rawget(v, "Type") == mmv3uiStr then
					MatchMakingV3UI = v
				elseif (not TrackSystem or not NoteSequencePlayer or not SongSelectionV2UI) and rawget(v, "new") and islclosure(v.new) then
					local func = v.new
					local consts = getconstants(func)
					if FIT(consts, "get_default_base_color_list") then
						TrackSystem = v
					elseif FIT(consts, "add_spectate_replication_event_handled_index") then
						NoteSequencePlayer = v
					elseif FIT(consts, "update_list_elements") and not FIT(consts, "get_song_list") then
						SongSelectionV2UI = v
					end
				end
			end
			if game_join and GearStats and SongDB and Note and TrackSystem and NoteSequencePlayer then
				break
			end
		end
	end)()
	
	SongDataBase = SongDB

	local LocalMainScript = getfenv(LocalMain[KH_CONSTANT("get_current_dayid")]).script
	local SPRemoteEvent
	--Bypass detections--
	local s,e = pcall(function()
		assert(LocalMain._error_report, "#1")
		local old = LocalMain._error_report.report_client_error
		LocalMain._error_report.report_client_error = function(self, data)
			return warn(string.format("[%s] report_client_error (%s)--(%s)", isDebug and "Blocked LOL" or "Client", tostring(data.Error), tostring(data.StackTrace)))
		end

		for i,v in pairs(getupvalues(old)) do
			if type(v) == "table" and rawget(v, KH_CONSTANT("EVT_EventReport_ClientExploitDetected")) then
				SPRemoteEvent = v
				break
			end
		end

		assert(SPRemoteEvent, "#2")
		assert(LocalMain._evt, "#3")

		local old = LocalMain._evt.fire_event_to_server
		LocalMain._evt.fire_event_to_server = setfenv(function(self, event, ...)
			if event == SPRemoteEvent.EVT_EventReport_ClientExploitDetected then
				return debugwarn("exploit event fired", ...)
			end
			return old(self, event, ...)
		end, getfenv(old))
	end)
	if not s then
		return plr:Kick("[KiriotHub] Failed to initialize antiexploit bypass: " .. tostring(e))
	end

	--UnShuffle--
	do
		local function FindFromConsts(func, data)
			local consts = getconstantsnc(func)
			for i,v in pairs(data) do
				ShuffleMap[i] = consts[FIT(consts, v[1]) + v[2]]
			end
		end
		local function FindProtoFromConsts(func, protoConst, data)
			for i,v in pairs(debug.getprotos(func)) do
				local consts = getconstants(v)
				if FIT(consts, protoConst) then
					FindFromConsts(v, data)
					break
				end
			end
		end
		local consts = getconstants(game_join[KH_CONSTANT("is_game_audio_loaded")])
		ShuffleMap.ES_GET_AUDIOMGR = consts[1]

		local GameLocal
		for i,v in pairs(getupvalues(game_join.load_game)) do
			if type(v) == "table" and v.new and v.Mode then
				GameLocal = v
				break
			end
		end
		FindFromConsts(GameLocal.new, {
			ES_GAMELOCAL_GET_TRACKSYSTEMS = {KH_CONSTANT("set_local_game_slot"), 1},
			ES_GAMELOCAL_GET_TRACKSYSTEM = {"start_game", 2}
		})

		--NoteSequencePlayer line 167--
		FindProtoFromConsts(NoteSequencePlayer.new, "update_spectate_note_sequence_events_start_index", {
			ES_FN_GET_NOTES = {"update_scoremanager_to_note_sequence_event", 1},
			ES_TRACKSYS_PRESS_INDEX = {KH_CONSTANT("contains"), 1},
			ES_TRACKSYS_RELEASE_INDEX = {"remove_at", 1}
		})
		FindProtoFromConsts(TrackSystem.new, "press", {
			get_track = {"press", -1}
		})

		FindFromConsts(Note.update, {
			ES_PSCORE_RH = {KH_CONSTANT("ParamNoteIndex"), 1},
			GetScoreManager = {"PlaySFX", -2},
			note_should_remove = {"PlaySFX", -3},
			get_local_game_slot = {"Pre", 3}
		})

		FindFromConsts(Note.cons, {
			get_statsdict = {"get", 1}
		})
		FindFromConsts(getupvalue(Note.cons, 3)._new, { --the base function
			ES_FN_TEST_HIT = {"get_delta_time_from_hit_time", 1},
			ES_FN_TEST_RELEASE = {KH_CONSTANT("get_state"), 1}
		})
		FindProtoFromConsts(GameLocal.new, "control_pressed", {
			TrackSystemUpdate = {"profileend", 2}
		})

		--Resolving the notes enums--
		local SPUtil = getupvalue(Note[KH_CONSTANT("update")], 1)
		local NoteResult = getupvalue(Note.update, 11)
		for i,v in pairs(SPUtil) do
			if type(v) == "function" and getupvalues(v)[1] == NoteResult then
				local consts = getconstants(v)
				if consts[4] then
					local miss, okay, great, perfect = consts[1], consts[2], consts[3], consts[4]
					TranslateTypes.Miss = NoteResult[miss]
					TranslateTypes.Okay = NoteResult[okay]
					TranslateTypes.Great = NoteResult[great]
					TranslateTypes.Perfect = NoteResult[perfect]
					debugwarn(miss, okay, great, perfect)
					break
				end
			end
		end

		if not TranslateTypes.Perfect then
			debugwarn("Failed to find TranslateTypes.Perfect")
		end

		table.foreach(ShuffleMap, debugwarn)
		debugwarn("pv", game.PlaceVersion)
	end
	
	local f = game_join.start_game_tutorial_mode
	local up = getupvalues(f)
	
	PlaySong = function(id, fake)
		local TutorialData, GameJoinProtocol, GameStartV2UI = up[1], up[2], up[4]
		local slot, player_info = TutorialData:get_player_info_data()		
		local gear_data = TutorialData:get_gear_info_data()
		local protocol = GameJoinProtocol[KH_CONSTANT("new")](GameJoinProtocol, LocalMain)
		protocol:set_networked(not fake)
		protocol:set_tutorial(false)
		protocol:set_slot(slot)
		protocol:set_player_info(player_info)
		protocol:set_gear_info(gear_data)
		protocol:set_selected_song_key(id)
		protocol:set_mode(GameJoinProtocol.Mode.ServerNotifyClientDoPreload)
		
		TutorialData:game_join_protocol_initialize(protocol)
		LocalMain[KH_CONSTANT("_menus")]:push_menu(GameStartV2UI:new(LocalMain, LocalMain._spui, LocalMain._menus, protocol))
		
		if not fake then
			protocol:mmv3_fire_local_ready()
		else
			local game_local = getupvalue(game_join.is_game_finished, 1)
			while not game_join:is_game_finished() do
				wait(1)
			end

			local up = getupvalues(game_local[KH_CONSTANT("create_game_end_ui")])
			local GameEndV2UI = up[5]
			--game_local and LocalMain should still be in upvalues of either create_game_end_ui or load_game_end_menu, just in case
			local menu = GameEndV2UI:new(LocalMain, game_local)
			game_local._menus:push_menu(menu)
		end
	end
	
	InitVariables = function()
		local init_buttondrawer_down_ui = KH_CONSTANT("init_buttondrawer_down_ui")
		
		for i,v in pairs(getgc(true)) do
			if type(v) == "table" and rawget(v, init_buttondrawer_down_ui) then
				LobbyHUDV2UI = v
				break
			end
		end

		if isSnitch then
			LobbyHUDV2UI = nil
		end
		
		for i,v in pairs(getupvalues(LobbyHUDV2UI[init_buttondrawer_down_ui])) do
			if type(v) == "table" then
				if v._game_join_protocol then
					LobbyLocal = v
				elseif v.uiobj_rescale_to_max_nxy then
					SPUISystem = v
				elseif rawget(v, "new") then
					local consts = getconstants(v.new)
					if v.InfoState then
						PlayUI = v
					elseif v.set_notification_display then
						ArtistEventUI = v
					end
				end
				if LobbyLocal and SPUISystem and PlayUI and ArtistEventUI then
					break
				end
			end
		end

		for i,v in pairs(getupvalues(LobbyHUDV2UI.cons)) do
			if type(v) == "table" and v.push_menu then
				MenuSystem = v
				break
			end
		end

		debugprint("init variables:", LobbyLocal, SPUISystem, PlayUI, ArtistEventUI, MenuSystem)
	end

	local function FuckingWaitForEventProperly(event)
		local be = Instance.new("BindableEvent")

		LocalMain._evt:clear_pending_on(event)
		debugwarn("waiting for event", event)
		LocalMain._evt:wait_on_event_once(event, function(...)
			debugwarn("received event response for", event)
			be:Fire(...)
		end)
		return be.Event:Wait()
	end
	
	InitPlayer = function(id, fake, event)
		if fake then
			return PlaySong(id, true)
		end
		if LastUpdate and tick() - LastUpdate < 2 then
			return false --in case they try to use it mid-game
		end
		
		if not LobbyHUDV2UI then
			InitVariables()
		end

		local matchModeTypes = {
			Compete = 1,
			Casual = 2
		}

		local player = MatchMakingV3UI:new(LobbyLocal, SPUISystem, MenuSystem, id, nil)
		MenuSystem:push_menu(player)
		
		for i,v in pairs(getupvalues(player.create_ui)) do
			if type(v) == "table" and rawget(v, "set_selected_mode") then
				v:set_selected_mode(matchModeTypes[Settings.MatchMode])
				debugwarn("Changed!")
				break
			end
		end
		player:push_matchmaking_settings() --update the gui visually

		debugprint("Waiting for plrgui")
		wait(1)--plr.PlayerGui.ChildAdded:Wait()
		debugprint("Got")
		
		local game_join_protocol = LobbyLocal[KH_CONSTANT("_game_join_protocol")]
		
		while getupvalue(game_join_protocol.update, 2) == 3 do --MatchmakingWaiting
			debugprint("Waiting for players..", game_join_protocol:get_slots():count())
			if game_join_protocol:get_slots():count() >= (Settings.MinPlayers or 2) then
				for i=1,4 do --check if nobody joined with a blacklisted song
					local slot = game_join_protocol:get_slots():get(i)
					if slot and slot._requested_song_key and Settings.Blacklisted[tostring(slot._requested_song_key)] then
						game_join_protocol:mmv3_player_leave()
						MenuSystem:remove_menu(player) --NEVER call player:do_remove() on its own
						wait(1)
						return InitPlayer(id)
					end
				end
				game_join_protocol:mmv3_fire_local_ready()
			end
			wait(1)
		end
		
		if game_join_protocol:get_slots():count() < (Settings.MinPlayers or 2) then
			debugwarn("Wrong players amount:", game_join_protocol:get_slots():count())
		end
		
		while getupvalue(game_join_protocol.update, 2) < 9 do
			local type = getupvalue(game_join_protocol.update, 2)
			if type == 5 then --Votepick
				wait(1)
				debugwarn("Voting for the song")
				game_join_protocol:votepick_for_key(id)
				break
			end
			wait()
		end
		
		local game_join = getupvalues(game_join_protocol[KH_CONSTANT("is_preload_finished")])[1]._game_join
		debugprint("Waiting for state")
		repeat wait() until getupvalue(game_join_protocol.update, 2) >= 9
		
		--local gl = game_join:get_game()
		local gl = getupvalue(game_join.is_game_finished, 1)
		if not is_synapse_function(gl._menus.push_menu) then
			local old = gl._menus.push_menu
			gl._menus.push_menu = function(self, menu)
				if FIT(getconstants(2), KH_CONSTANT("SFX_ENDCHEER_1")) then --called from create_game_end_ui which is called from load_game_end_menu
					gl._menus.push_menu = old
					delay(1, function()
						menu:on_close_button()
						wait(2)
						if not event then
							InitPlayer(id)
						else
							local start = os.time()
							local lastStatus = "None"
							local popup = MenuSystem:push_menu(PopupMessageUI:new(LocalMain, SPUISystem, MenuSystem))
							popup:set_text("[KiriotHub] Event Autofarm", "Waiting until the next song becomes available...")
							popup:set_close_button_visible(false)

							local enums = getupvalue(event.render_time_remaining, 2)
							debugprint("checking event state")
							local lastCheck
							while true do
								local diff = os.time() - start
								if not lastCheck or tick() - lastCheck > 30 then
									lastCheck = tick()
									spawn(function()
										LocalMain._evt:fire_event_to_server(SPRemoteEvent.EVT_LeaderboardEvent_ClientRequestLeaderboardData)
									end)
									local data = FuckingWaitForEventProperly(SPRemoteEvent.EVT_LeaderboardEvent_ServerRequestLeaderboardDataResponse)
									if not data then
										return debugwarn("leaderboard data not fetched")
									end
									data = enums:from_table(data[#data])
									if data:get_state() == enums.State.Active then
										debugprint("wooooooo")
										LocalMain._menus:remove_menu(popup)
	
										local songKey = data:get_song_key() --u28:get_song_key()
										--find the biggest difficulty which isn't greyed out
										local keyAudioMod = SongDataBase:key_get_audiomod(songKey)
										local modes = SongDataBase:get_audiomod_to_modes_of_songkey(songKey)
										local bestKey = modes:get(0)
										for i,v in modes:key_itr() do
											if AudioMod:mod_to_compare_value(i) <= AudioMod:mod_to_compare_value(keyAudioMod) then
												bestKey = v
												debugprint("best key is", v, "with idx", i)
											end
										end
										debugprint("final best key is", bestKey)
										InitPlayer(bestKey, false, event)
										return
									else
										lastStatus = FIT(enums.State, data:get_state())
									end
								end
								popup:set_text("[KiriotHub] Event Autofarm", "Waiting until the next song becomes available (" .. diff .. ")...\nCurrent status: " .. lastStatus)
								wait(0.5)
							end
						end
					end)
				end
				return old(self, menu)
			end
		end
		return true
	end
	
	if isDebug then
		_G.a = InitPlayer
		_G.args = {}
	end
	
	local old = game_join.load_game
	game_join.load_game = function(...)
		if isDebug then
			debugwarn(#_G.args + 1,"Called with",...)
			table.insert(_G.args,{...})
			debugprint(debug.traceback())
		end
		PressDebounce = {}
		held = {}
		if isSnitch then
			return old()
		end
		return old(...)
	end
	
	local NoteTimings
	
	local function HookRegisterHit(game)
		local deltaRnd = Random.new()
		local ScoreManager = game[ShuffleMap.GetScoreManager](game)
		local old = ScoreManager[ShuffleMap.ES_PSCORE_RH]

		if is_synapse_function(old) then
			return
		end
		ScoreManager[ShuffleMap.ES_PSCORE_RH] = function(...)
			local args = {...}
			local score = args[#args]
			if type(score) == "table" and score.Delta and Settings.RandomDelta then
				local delta = score.Delta
				local A = NoteTimings and NoteTimings[1] or 150
				local Z = NoteTimings and NoteTimings[2] or 90
				local L = NoteTimings and NoteTimings[3] or 40
				local P = NoteTimings and NoteTimings[4] or -20
				local U = NoteTimings and NoteTimings[5] or -45
				local H = NoteTimings and NoteTimings[6] or -80
				
				_G.tim = NoteTimings
				
				local function Check(d, min, max)
					if not (d <= min and max < d) then
						debugwarn(d,"doesn't fit for x <=",min,"and",max,"< x")
					end
				end
				if delta <= A and Z < delta then --Okay
					score.Delta = deltaRnd:NextNumber(Z,A)
					Check(score.Delta, A, Z)
				elseif delta <= Z and L < delta then --Great
					score.Delta = deltaRnd:NextNumber(L,Z)
					Check(score.Delta, Z, L)
				elseif delta <= L and P < delta then --Perfect
					score.Delta = deltaRnd:NextNumber(P,L)
					Check(score.Delta, L, P)
				elseif delta <= P and U < delta then --Great
					if deltaRnd:NextInteger(0,1) == 1 then  --the other delta case has a rare chance to happen, so let's help it
						score.Delta = deltaRnd:NextNumber(L,Z)
						Check(score.Delta, Z, L)
					else --this one's normal
						score.Delta = deltaRnd:NextNumber(U,P)
						Check(score.Delta, P, U)
					end
				elseif delta <= U and H < delta then --Okay
					if deltaRnd:NextInteger(0,1) == 1 then --the other delta case has a rare chance to happen, so let's help it
						score.Delta = deltaRnd:NextNumber(Z,A)
						Check(score.Delta, A, Z)
					else --this one's normal
						score.Delta = deltaRnd:NextNumber(H,U)
						Check(score.Delta, U, H)
					end
				end
			end
			return old(...)
		end
	end
	
	local rnd = Random.new()
	local function Roll()
		--[[
			Idea: Make the chances sort of a bar, with the note types length respetive to their chances
			Example:
				Perfect = 50%, symbol: @
				Great = 50%, symbol: #
				Okay = 20%, symbol: $
				Miss = 10%, symbol: %
				
				Bar: @@@@@#####$$%
		Rnd (1,130):       ^ (70)
				
			This also raises the 100 limit ^^	
		]]--
		local t = {}
		local sum = 0
		
		for i,v in pairs(Settings.Chances) do
			if v.Enabled then
				t[#t + 1] = v
				sum = sum + v.Chance
			end
		end
		
		table.sort(t, function(a,b)
			return a.Chance > b.Chance
		end)
		
		for i,v in pairs(t) do
			local start
			if i == 1 then
				start = 1
			else
				start = t[i - 1].End
			end
			
			v.Start = start
			v.End = start + v.Chance
		end
		
		local rndNum = rnd:NextInteger(1,sum)
		
		for i,v in pairs(t) do
			if rndNum >= v.Start and rndNum < v.End then
				return v.Name
			end
		end
		
		debugprint("Not supposed to print:",rndNum)
	end
	
	local noteTypeRolled = {}
	
	local function yes(game) --game is GameLocal
		if isDebug then
			_G.game = game
		end
		if not Settings.AutoEnabled then
			return
		end
		LastUpdate = tick()
		--LastGame = game
		HookRegisterHit(game)
		
		if game._input then
			if not is_synapse_function(game._input.control_just_pressed) then
				local old = game._input.control_just_pressed
				game._input.control_just_pressed = function(self, arg)
					if Settings.AutoEnabled and Settings.BlockInput and type(KeyTracks) == "table" and KeyTracks[arg] then
						return
					end
					return old(self, arg)
				end
			end
			if not is_synapse_function(game._input.control_just_released) then
				local old = game._input.control_just_released
				game._input.control_just_released = function(self, arg)
					if Settings.AutoEnabled and Settings.BlockInput and type(KeyTracks) == "table" and KeyTracks[arg] then
						return
					end
					return old(self, arg)
				end
			end
		end
		
		local slot = game[ShuffleMap.get_local_game_slot](game)
		--local tracksystem = game:get_tracksystem(slot)
		local tracksystem = game[ShuffleMap.ES_GAMELOCAL_GET_TRACKSYSTEM](game, slot)
		
		if not NoteTimings or tick() - LastUpdate > 10 then
			NoteTimings = {GearStats:get_note_times(tracksystem[ShuffleMap.get_statsdict](tracksystem))}
		end
		
		local notes = tracksystem[ShuffleMap.ES_FN_GET_NOTES](tracksystem)
		if not notes then
			return
		end
		
		--[[
			Problem: Notes rolled as "Miss" cached in noteTypeRolled never get uncached on hit,
			as they never get hit
			
			Solution: Check for all notes that passed the hit line, and remove their cached type
			if it's "Miss"
		]]--
		for i,v in pairs(noteTypeRolled) do
			if v == "Miss" and i[ShuffleMap.note_should_remove](i) then
				noteTypeRolled[i] = nil
				held[i:get_track_index()] = nil
			end
		end

		local press_track_index = tracksystem[ShuffleMap.ES_TRACKSYS_PRESS_INDEX] --needs to be called with self now
		local release_track_index = tracksystem[ShuffleMap.ES_TRACKSYS_RELEASE_INDEX] --this too
		
		for i=1,notes:count() do
			local note = notes:get(i)
			local track = note:get_track_index()
			
			local currentType = noteTypeRolled[note]
			if not currentType then
				if Settings.TypesMode == "Static" then
					currentType = Settings.ActiveTypes[rnd:NextInteger(1, #Settings.ActiveTypes)]
				else
					currentType = Roll()
					debugprint("Rolled",currentType,"for track",track,"note",note)
					if not currentType then --learn to set your % chances correctly noobs
						--roll a random active one instead
						local list = {}
						for i,v in pairs(Settings.Chances) do
							if v.Enabled then
								list[#list + 1] = i
							end
						end
						currentType = list[rnd:NextInteger(1, #list)]
					end
				end
				noteTypeRolled[note] = currentType
			end
			
			local s, res = note[ShuffleMap.ES_FN_TEST_HIT](note, game)
			if held[track] and s then
				if not table.find(held[track], note) then
					table.insert(held[track], note)
				end
				if #held[track] > 2 then
					held[track] = nil
				end	
			end

			if not held[track] then
				local uhoh = note:get_delta_time_from_hit_time() > 0 and noteTypeRolled[note] ~= "Miss"
				if s and res == TranslateTypes[currentType] or uhoh then
					
					if not PressDebounce[note] or tick() - PressDebounce[note] >= 0.5 then
						--PressDebounce[note] = tracksystem:press_track_index(tracksystem, game, track) and tick()
						PressDebounce[note] = press_track_index(tracksystem, game, track) and tick()
						debugprint("Pressed track",track,"note",note)
						game:debug_any_press() --remove the keybind tooltips
						
						if note.get_tail_t then
							held[track] = {note}
						elseif not uhoh or s and res == TranslateTypes[currentType] then
							local isFastSpeed = Settings.SongSpeed and Settings.SongSpeedValue >= 2

							local function rel() --can't wait()
								if isFastSpeed then
									check:GetService("RunService").RenderStepped:Wait()
								else
									wait()
								end
								noteTypeRolled[note] = nil
								--tracksystem:release_track_index(tracksystem, game, track)
								release_track_index(tracksystem, game, track)
								tracksystem[ShuffleMap.get_track](tracksystem, track):release()
								game:debug_any_press()
								debugwarn("Released track",track,"note",note)
								
								PressDebounce[note] = false
							end
							if isFastSpeed then
								coroutine.wrap(rel)()
							else
								spawn(rel)
							end
						else --anti miss
							release_track_index(tracksystem, game, track)
							tracksystem[ShuffleMap.get_track](tracksystem, track):release()
							game:debug_any_press()
							PressDebounce[note] = false
						end
					else
						debugwarn("Debounce rules")
					end
				end
			else
				local s, res = note[ShuffleMap.ES_FN_TEST_RELEASE](note, game)
				if s and res == TranslateTypes[currentType] then
					held[track] = nil
					noteTypeRolled[note] = nil
					--tracksystem:release_track_index(tracksystem, game, track)
					release_track_index(tracksystem, game, track)
					game:debug_any_press()
					
					PressDebounce[note] = false
				end
			end
		end
	end
	
	local update = game_join[KH_CONSTANT("update")]
	game_join.update = function(self, scale)
		local t = getupvalues(update)[2] --GameJoin, line 119, I:update() - grab I
		if Settings.SongSpeed then
			scale = scale * Settings.SongSpeedValue
		end
		if t then
			--local audioManager = t._audio_manager
			local audioManager = t[ShuffleMap.ES_GET_AUDIOMGR](t)
			if audioManager then
				local sound = getupvalue(audioManager.teardown, 1)
				if sound then
					sound.PlaybackSpeed = Settings.SongSpeed and Settings.SongSpeedValue or 1
					sound.Volume = audioManager:is_playing() and (Settings.SongVolume and Settings.SongVolumeValue or 0.5) or sound.Volume
					soundIdLbSet:Fire(tostring(sound.SoundId):match("%d+") or "None")
				end
			end
			--for i,v in t._tracksystems:key_itr() do
			--for i,v in t[ShuffleMap.ES_GAMELOCAL_GET_TRACKSYSTEMS](t):key_itr() do
			for i,v in getupvalues(t.setup_world)[2]:key_itr() do --the upvalue they nil and restore when needed
				if v[ShuffleMap.TrackSystemUpdate] and not is_synapse_function(v[ShuffleMap.TrackSystemUpdate]) then
					local old = v[ShuffleMap.TrackSystemUpdate] --GameLocal, line 233, hook update
					v[ShuffleMap.TrackSystemUpdate] = function(self, scale, game)
						if not game:is_spectate() then
							yes(game)
							if not KeyTracks then
								local level = 2
								KeyTracks = getupvalue(level, 10) --GameLocal at KEY_TRACK1
							end
						end
						return old(self, scale, game)
					end
				end
			end
		end
		return update(self, scale)
	end
	
	--Saving Settings--
	Settings.Blacklisted = LoadSettings(GameName) or {}
	wait(1)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName, Settings.Blacklisted)
	end)
	
	local VirtualUser = game:GetService("VirtualUser")
	plr.Idled:Connect(function()
		VirtualUser:CaptureController()
		VirtualUser:ClickButton2(Vector2.new())
	end)
end)()elseif GameName == "Counter Blox" then
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
	
	local Settings = {
		InfAmmo = false,
		InfCash = false,
		AntiAim = false,
		ThirdPerson = false,
		ThirdPersonVal = 10,
		NoRecoil = false,
		FireRate = false,
		FireRateVal = 0,
		WallBang = false,
		SilentAim = false,
		AimDistance = 500,
		AimMode = "Cursor",
		InfiniteJump = false,
		SpeedEnabled = false,
		SpeedVal = 50,
		NoFallDamage = false,
		FOVRange = 200
	}
	local ChangeWeaponStat,Env,Client,Deploy
	local function ChangeSpeed(val)
		if plr.Character then
			local hum = plr.Character:FindFirstChildOfClass"Humanoid"
			if hum then
				hum.WalkSpeed = val
			end
		end
	end
	
	local SpaceDown = false
	
	local UiTbl = {}
	UiTbl.weapons = NewUI:Tab("Weapons")
	UiTbl.gunsGroup = UiTbl.weapons:Group("Guns")
	UiTbl.aimGroup = UiTbl.weapons:Group("Silent Aim")
	
	UiTbl.gunsGroup:CheckBox("Inf Ammo", function(bool)
		Settings.InfAmmo = bool
		if Env and Env.countammo then
			Env.countammo()
		end
	end, "InfAmmo")
	
	UiTbl.gunsGroup:CheckBox("No Recoil", function(bool)
		Settings.NoRecoil = bool
	end, "NoRecoil")
	
	UiTbl.gunsGroup:CheckBox("Constant Fire", function(bool)
		ChangeWeaponStat("Auto", bool and true or nil)
	end, "ConstantFire")
	
	UiTbl.gunsGroup:Slider({
		Min = 0,
		Max = 0.5,
		Default = 0.05,
		Fraction = 2,
		Parent = UiTbl.gunsGroup:CheckBox("Fire Rate", function(bool)
			Settings.FireRate = bool
			if not bool then
				ChangeWeaponStat("FireRate", nil)
			else
				ChangeWeaponStat("FireRate", Settings.FireRateVal)
			end
		end, "FireRate")
	}, function(val)
		Settings.FireRateVal = val
		if Settings.FireRate and ChangeWeaponStat then
			ChangeWeaponStat("FireRate", val)
		end
		return val .. ""
	end, "FireRateVal")
	
	UiTbl.gunsGroup:CheckBox("Wallbang", function(bool)
		Settings.WallBang = bool
	end, "WallBang")

	UiTbl.killAllCb = UiTbl.gunsGroup:CheckBox("Kill All", function(bool)
		Settings.KillAll = bool
		while Settings.KillAll do
			wait()
			local gun = Env.gun
			if gun and typeof(gun) == "Instance" and not gun:FindFirstChild("Melee") then
				for i,v in pairs(Settings.GetEnemies()) do
					if v.Character then
						pcall(function()
							local hit = v.Character:FindFirstChild("Head") or v.Character:FindFirstChild("HumanoidRootPart")
							for i=1,3 do
								game.ReplicatedStorage.Events.HitPart:FireServer(hit, hit.Position, gun.Name, 4096, plr.Character and plr.Character:FindFirstChild("Gun"), nil, nil, 1, nil, false, workspace.CurrentCamera.CFrame.p, 41016, Vector3.new(0,0,-1))
							end
						end)
					end
				end
			end
		end
	end)
	
	UiTbl.gameg = NewUI:Tab("Game")
	UiTbl.movementGroup = UiTbl.gameg:Group("Movement")
	UiTbl.autoDeployGroup = UiTbl.gameg:Group("Auto Deploy")
	
	UiTbl.movementGroup:CheckBox("Third Person", function(bool)
		Settings.ThirdPerson = bool
		if bool then
			plr.CameraMaxZoomDistance = Settings.ThirdPersonVal
			plr.CameraMinZoomDistance = Settings.ThirdPersonVal
		else
			plr.CameraMinZoomDistance = 0.5 --has to be in reversed order smh
			plr.CameraMaxZoomDistance = 0.5
		end
	end, "ThirdPerson"):Keybind(Enum.KeyCode.Z, "ThirdPerson")
	
	UiTbl.movementGroup:CheckBox("Infinite Jump", function(bool)
		Settings.InfiniteJump = bool
	end, "InfiniteJump")
	
	UiTbl.movementGroup:CheckBox("Infinite Cash", function(bool)
		Settings.InfCash = bool
	end, "InfCash")
	
	UiTbl.movementGroup:CheckBox("No Fall Damage", function(bool)
		Settings.NoFallDamage = bool
	end, "NoFallDamage")
	
	
	UiTbl.movementGroup:Slider({
		Min = 0,
		Max = 200,
		Default = 50,
		Parent = UiTbl.movementGroup:CheckBox("Fast Speed", function(bool)
			Settings.SpeedEnabled = bool
			if bool then
				ChangeSpeed(Settings.SpeedVal)
			else
				ChangeSpeed(Settings.OGSpeed or 17)
			end
		end, "SpeedEnabled")
	}, function(val)
		Settings.SpeedVal = val
		if Settings.SpeedEnabled then
			ChangeSpeed(val)
		end
		return val .. ""
	end, "SpeedVal")
	
	UiTbl.movementGroup:CheckBox("BHop", function(bool)
		Settings.BHop = bool
		if bool then
			while Settings.BHop do
				wait()
				local char = plr.Character
				if SpaceDown and char and char:FindFirstChildOfClass("Humanoid") then
					char:FindFirstChildOfClass("Humanoid").Jump = true
				end
			end
		end
	end, "BHop"):Keybind(Enum.KeyCode.T, "BHop")

	UiTbl.autoDeployGroup:CheckBox("Enabled", function(bool)
		Settings.AutoDeploy = bool
 
		while Settings.AutoDeploy do
			if not plr.Character and Deploy then
				Deploy()
			end
			wait(1)
		end
	end, "AutoDeploy")

	UiTbl.autoDeployGroup:Dropdown({
		Text = "Team",
		Radio = true,
		Default = 1,
		Values =  {"CT", "T"}
	}, function(val)
		Settings.AutoDeployTeam = val
	end, "AutoDeployTeam")
	
	UiTbl.aimGroup:CheckBox("Silent Aim", function(bool)
		Settings.SilentAim = bool
		ESP.HighlightEnabled = bool
		if not bool then
			ESP.Highlighted = nil
		end
	end, "SilentAim"):Keybind(Enum.KeyCode.E, "SilentAim")
	
	UiTbl.aimGroup:Dropdown({
		Text = "Aim Mode",
		Radio = true,
		Default = 1,
		Values =  {"Cursor", "Character"}
	}, function(val)
		Settings.AimMode = val
	end, "AimMode")
	
	UiTbl.aimGroup:Label("Max Distance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 1000,
		Default = 500,
	}, function(val)
		Settings.AimDistance = val
		return val .. ""
	end, "AimDistance")
	
	UiTbl.aimGroup:Label("Headshot Chance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 100
	}, function(val)
		Settings.HeadshotChance = val
		return val .. "%"
	end, "HeadshotChance")
	
	local FOVCircle = ESP.FOVCircle(Settings.FOVRange)
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = ESP.GetFOV(),
		Default = 200,
		Parent = UiTbl.aimGroup:CheckBox("Show FOV Circle", function(bool)
			Settings.ShowFOVCircle = bool
			if bool then
				FOVCircle.Tbl.Update = FOVCircle.Update
				FOVCircle.Drawing.Visible = true
			else
				FOVCircle.Tbl.Update = nil
				FOVCircle.Drawing.Visible = false
			end
		end, "ShowFOVCircle")
	}, function(val)
		Settings.FOVRange = val
		Settings.UsedFOVRange = val
		if FOVCircle.Drawing then
			FOVCircle.Drawing.Radius = val
		end
		return "FOV Range: " .. val
	end, "FOVRange")
	
	UiTbl.miscGui = NewUI:Tab("Misc")
	UiTbl.teamGroup = UiTbl.miscGui:Group("Change Team")
	UiTbl.teamGroup:Grid(UDim2.new(0,5,0,5), UDim2.new(0,80,0,27))
	UiTbl.otherGroup = UiTbl.miscGui:Group("Other")
	
	UiTbl.teamGroup:Button("CT", function()
		game:GetService("ReplicatedStorage").Events.JoinTeam:FireServer("CT")
	end):SetButtonColor(Color3.fromRGB(124, 161, 202))
	
	UiTbl.teamGroup:Button("T", function()
		game:GetService("ReplicatedStorage").Events.JoinTeam:FireServer("T")
	end):SetButtonColor(Color3.fromRGB(202, 183, 124))
	
	UiTbl.otherGroup:Button("Unlock All Skins", function()
		local Inventories = {}
		for i,v in pairs(getgc(true)) do
			if type(v) == "table" and not getmetatable(v) and v[1] and type(v[1]) == "table" and type(v[1][1]) == "string" then --getsenv(plr.PlayerGui.Client).CurrentInventory :?
				table.insert(Inventories, v)
			end
		end

		for i,Inventory in pairs(Inventories) do
			
			local AlreadyOwned = {}
			for i,v in pairs(Inventory) do
				AlreadyOwned[v[1]] = true
			end
			
			local Images = Client[KH_CONSTANT("Images")]
			for i,v in pairs(Images:GetChildren()) do
				local name = v.Name
				if name ~= "Banana" then
					for i,v in pairs(v:GetChildren()) do
						if v.ClassName == "StringValue" and (v.Value:find("http") or v.Value:find("rbx")) then
							local skinName = name .. "_" .. v.Name
							if not AlreadyOwned[skinName] then
								table.insert(Inventory, {skinName})
							end
						elseif v.ClassName ~= "StringValue" then
							debugwarn("Weird classname",v:GetFullName())
						end
					end
				end
			end
		end
		Settings.SkinsUnlocked = true
	end)
	
	UiTbl.otherGroup:CheckBox("Anti Aim", function(bool)
		Settings.AntiAim = bool
	end, "AntiAim")
	
	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.H, "ESP")
	
	UiTbl.espGroup:CheckBox("Show Teammates", function(bool)
		ESP.TeamMates = bool
	end, "ESPToggleTeamMates").Click()
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Team Color", function(bool)
		ESP.TeamColor = bool
	end, "ESPToggleTeamColor").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")
	
	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)
	
	--actual stuff--
	
	for i,v in pairs(plr:WaitForChild("PlayerGui"):GetChildren()) do
		if v.ClassName == "LocalScript" and v.Name == KH_CONSTANT("Client") then
			Client = v
			break
		end
	end
	if not Client then
		return plr:Kick("[KiriotHub] Failed to find Client!")
	end
	Env = getsenv(Client)
	local old = getrenv()
	
	--Inf Ammo--
	local AmmoContainer = {
		primarystored = 0,
		secondarystored = 0,
		ammo = 0,
		storedammo = 0,
		ammocount = 0,
		ammocount2 = 0,
		ammocount3 = 0,
		ammocount4 = 0
	}
	local RecoilContainer = {
		RecoilX = 0,
		RecoilY = 0
	}
	for i,v in pairs(AmmoContainer) do
		AmmoContainer[i] = rawget(Env, v) or 0
		Env[i] = nil
	end
	for i,v in pairs(RecoilContainer) do
		Env[i] = nil
	end
	getrawmetatable(Env).__index = function(self, i)
		if AmmoContainer[i] then
			if Settings.InfAmmo then
				return old.math.huge
			else
				return AmmoContainer[i]
			end
		elseif RecoilContainer[i] then
			if Settings.NoRecoil then
				return 0
			else
				return RecoilContainer[i]
			end
		end
		return old[i]
	end
	getrawmetatable(Env).__newindex = function(self, i, v)
		if AmmoContainer[i] then
			if v then --anti nil and false
				AmmoContainer[i] = v
			end
			return
		elseif RecoilContainer[i] then
			RecoilContainer[i] = v
			return
		end
		return old.rawset(self, i, v)
	end
	
	--Third Person--
	local old = {}
	old[1] = hookmetamethod(game, "__newindex", loadstring([[
		local old, Settings, plr = ...
		return function(self, i, v)
			if self == plr and (i == "CameraMaxZoomDistance" or i == "CameraMinZoomDistance") and Settings.ThirdPerson and not checkcaller() then
				v = Settings.ThirdPersonVal
			elseif i == "WalkSpeed" and self.ClassName == "Humanoid" and Settings.SpeedEnabled and not checkcaller() then
				Settings.OGSpeed = v
				return
			end
			return old[1](self, i, v)
		end
	]])(old, Settings, plr))
	
	--No Recoil--
	if Env.KickBack and not is_synapse_function(Env.KickBack) then
		local old = Env.KickBack
		Env.KickBack = function(...)
			if Settings.NoRecoil then
				return
			end
			return old(...)
		end
	end
	
	--Fire Rate--
	local WpnsCache = {}
	ChangeWeaponStat = function(stat, val)
		for i,v in pairs(game:GetService"ReplicatedStorage".Weapons:GetChildren()) do
			local statVal = v:FindFirstChild(stat)
			if statVal then
				if not WpnsCache[v] then
					WpnsCache[v] = {[stat] = statVal.Value}
				elseif WpnsCache[v] and not WpnsCache[v][stat] then
					WpnsCache[v][stat] = statVal.Value
				end
				for i,v in pairs(getconnections(statVal.Changed)) do
					v:Disable()
				end
				if not val then
					statVal.Value = WpnsCache[v].stat
				else
					statVal.Value = val
				end
			end
		end
	end
	
	local remote = game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("ControlTurn")
	local fallDmgRemote = game:GetService("ReplicatedStorage").Events:WaitForChild("FallDamage")
	local dataRemote = game:GetService("ReplicatedStorage").Events:WaitForChild("DataEvent")
	local annoyingRemote = game:GetService("ReplicatedStorage"):WaitForChild(KH_CONSTANT("GetInventory"))

	--[=[local mt = getrawmetatable(game)
	make_writeable(mt)
	
	local old = mt.__namecall
	mt.__namecall = loadstring([[
		local old,Settings,remote,fallDmgRemote,dataRemote,plr,annoyingRemote,FIT = ...
		
		return function(self, ...)
			local realMethod = getnamecallmethod()
			local args = {...}
			
			if Settings.SilentAim and self.Name == "HitPart" and self.ClassName == "RemoteEvent" and not checkcaller() then
				local target,char = Settings.GetTarget(true)
				if target then
					args[1] = target
					args[2] = target.Position
					args[10] = false
					
					setnamecallmethod(realMethod)
					return old(self, unpack(args))
				end
			elseif not Settings.SilentAim and Settings.WallBang and self == workspace and realMethod == "FindPartOnRayWithIgnoreList" and not checkcaller() then
				table.insert(args[2], workspace.Map)
			elseif self == remote and Settings.AntiAim then
				local method = getnamecallmethod()
				if method == "FireServer" then
					args[1] = math.huge
					return old(self, unpack(args))
				end
			elseif self == fallDmgRemote and Settings.NoFallDamage then
				return
			elseif self.ClassName == "RemoteEvent" and realMethod == "FireServer" and (args[1] == "kick" or self.Name:match("{%w+%-%w+%-%w+%-%w+%-%w+}")) then
				return
			elseif self.Name == "Hugh" or self.Name == "Moolah" then
				return
			elseif self == dataRemote and Settings.SkinsUnlocked and type(args[1]) == "table" and args[1][1] == "EquipItem" then
				local args = args[1]
				
				local team = args[2]
				local wpn = args[3]
				
				local skin = args[4][1]:split("_")[2]
				
				local function Equip(folder)
					local val = folder:FindFirstChild(wpn)
					if val then
						val.Value = skin
					end
				end
				
				if team == "Both" then
					Equip(plr.SkinFolder.CTFolder)
					Equip(plr.SkinFolder.TFolder)
				else
					Equip(plr.SkinFolder:FindFirstChild(team .. "Folder"))
				end
			elseif self == annoyingRemote and Settings.SkinsUnlocked then
				local ev = Instance.new("BindableEvent").Event
				return ev.Wait(ev)
			elseif self.ClassName == "RemoteEvent" and args[1] == "kick" then
				local ev = Instance.new("BindableEvent").Event
				return ev.Wait(ev)
			end
			
			setnamecallmethod(realMethod)
			return old(self, ...)
		end
	]])(old, Settings, remote, fallDmgRemote, dataRemote, plr, annoyingRemote, FIT)]=]
	getreg()[""] = {Settings, remote, fallDmgRemote, dataRemote, plr, annoyingRemote}
	run_secure_lua("")
	--Silent Aim--
	
	local function GetEnemies(bool)
		local t = {}
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			if v.Team ~= plr.Team or v.Team == nil and v ~= plr then
				if v.Character and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
					t[#t + 1] = bool and v.Character or v
				end
			end
		end
		return t
	end
	Settings.GetEnemies = GetEnemies
	
	local cam = workspace.CurrentCamera
	
	local function GetTarget(chance)
		local camPos = cam.CFrame.p
		local clPos,clPart,clModel
		for i,v in pairs(GetEnemies()) do
			if v.Character and v.Character.Parent then
				local part = v.Character:FindFirstChild("Head")
				if chance and math.random(1, 100) >= Settings.HeadshotChance then
					part = v.Character:FindFirstChild("HumanoidRootPart")
				end
				if part then
					local p,vis = cam:WorldToViewportPoint(part.Position)
					if vis then
						local startPos = camPos
						
						local workspaceDist = (cam.CFrame.p - part.Position).magnitude
						
						local ray = Ray.new(startPos, CFrame.new(cam.CFrame.p, part.Position).LookVector.Unit * p.Z)
						
						local hit
						if not Settings.WallBang then
							local ignore = Settings.IgnoreList and {unpack(Settings.IgnoreList)} or {}
							ignore[#ignore + 1] = plr.Character
							ignore[#ignore + 1] = part.Parent
							
							hit = workspace:FindPartOnRayWithIgnoreList(ray, ignore)
						end
						if not hit and workspaceDist <= Settings.AimDistance then
							local dist
							local ok = true
							if Settings.AimMode == "Cursor" then
								dist = (Vector3.new(mouse.X,mouse.Y+36,0) - Vector3.new(p.X,p.Y,0)).magnitude
								ok = dist <= Settings.FOVRange
							elseif Settings.AimMode == "Character" then
								dist = (camPos - part.Position).magnitude
							end
							if not clPos and ok then
								clPos = dist
								clPart = part
								clModel = v.Character
							end
							if ok and dist and dist < clPos then
								clPos = dist
								clPart = part
								clModel = v.Character
							end
						end
					end
				end
			end
		end
		return clPart,clModel
	end
	
	Settings.GetTarget = GetTarget
	
	--ESP--
	
	ESP.Overrides.UpdateAllow = function(box)
		return box.Object:FindFirstChild("HumanoidRootPart")
	end
	ESP:RegisterHighlight(GetTarget)
	
	--Other--
	
	game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
		if not gp and iobj.KeyCode == Enum.KeyCode.Space then
			SpaceDown = true
		end
		if Settings.InfiniteJump and not gp and iobj.KeyCode == Enum.KeyCode.Space then
			local hum = plr.Character and plr.Character.Humanoid
			hum:ChangeState("Seated")
			wait()
			hum:ChangeState("Jumping")
		end
	end)
	
	game:GetService("UserInputService").InputEnded:Connect(function(iobj, gp)
		if not gp and iobj.KeyCode == Enum.KeyCode.Space then
			SpaceDown = false
		end
	end)
	
	plr.CharacterAdded:Connect(function(char)
		local hum = char:WaitForChild("Humanoid")
		if Settings.SpeedEnabled then
			hum.WalkSpeed = Settings.SpeedVal
		end
	end)
	
	local cash = plr:WaitForChild("Cash")
	old[2] = hookmetamethod(game, "__index", loadstring([[
		local old, Settings, cash = ...
		return function(self, i)
			if self == cash and i == "Value" and Settings.InfCash then
				return math.huge
			end
			return old[2](self, i)
		end
	]])(old, Settings, cash))
	
	--Auto Deploy--
	Deploy = function()
		game:GetService("ReplicatedStorage").Events.JoinTeam:FireServer(Settings.AutoDeployTeam)
		plr.PlayerGui.Menew.Enabled = false
		plr.PlayerGui.GUI.TeamSelection.Visible = false
	end

	local old
	old = hookfunc(getrenv().table.insert, function(tbl, ...)
		local func = debug.getinfo(3).func
		local i = table.find(getupvalues(func), game.Stats)
		if i then
			setupvalue(func, i, {
				GetMemoryUsageMbForTag = function() return nil end
			})
			table.clear(getupvalue(func, 1))
			hookfunc(getrenv().table.insert, old)
			return
		end
		return old(tbl, ...)
	end)
	
	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
elseif GameName == "R2DA" then (function()
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
		
	local Settings = {
		AutoReload = false,
		InfEnergy = false,
		InfAccuracy = false,
		InfRange = false,
		InfJump = false,
		NoRecoil = false,
		SilentAim = false,
		Wallbang = false,
		TargetAll = false,
		AimMode = "Cursor",
		AimDistance = 999,
		ShowFOVCircle = false,
		FOVRange = 200,
		HeadshotChance = 100,
		Speed = false,
		SpeedVal = 50,
		NoFallDamage = false,
		NoStoreLock = false,
		InfAmmo = false,
		Autofarm = false
	}
	local EnergySet, GunSystemMain, AccuracyIndex, DamageNpc
	local function IsSolo()
		return #game:GetService("Players"):GetPlayers() == 1
	end
	
	local UiTbl = {}
	UiTbl.weapons = NewUI:Tab("Weapons")
	UiTbl.gunsGroup = UiTbl.weapons:Group("Guns")
	UiTbl.aimGroup = UiTbl.weapons:Group("Silent Aim")
	UiTbl.miscGroup = UiTbl.weapons:Group("Misc")
	
	UiTbl.gunsGroup:CheckBox("Auto Reload", function(bool)
		Settings.AutoReload = bool
	end, "AutoReload")
	
	UiTbl.gunsGroup:CheckBox("Inf Accuracy", function(bool)
		Settings.InfAccuracy = bool
		if GunSystemMain and AccuracyIndex then
			setconstant(GunSystemMain, AccuracyIndex, bool and 0 or 2.5)
		end
	end, "InfAccuracy")
	
	UiTbl.gunsGroup:CheckBox("Inf Range", function(bool)
		Settings.InfRange = bool
	end, "InfRange")
	
	UiTbl.gunsGroup:CheckBox("No Recoil", function(bool)
		Settings.NoRecoil = bool
	end, "NoRecoil")
	
	UiTbl.gunsGroup:CheckBox("Wallbang", function(bool)
		Settings.Wallbang = bool
	end, "Wallbang")
	
	UiTbl.gameg = NewUI:Tab("Game")
	UiTbl.movementGroup = UiTbl.gameg:Group("Movement")
	
	UiTbl.infEnergyCb = UiTbl.movementGroup:CheckBox("Infinite Energy", function(bool)
		Settings.InfEnergy = bool
		if EnergySet then
			EnergySet(bool and math.huge or not bool and 100)
		end
	end, "InfEnergy")
	
	UiTbl.movementGroup:CheckBox("Infinite Jump", function(bool)
		Settings.InfJump = bool
	end, "InfJump")
	
	UiTbl.movementGroup:CheckBox("No Fall Damage", function(bool)
		Settings.NoFallDamage = bool
	end, "NoFallDamage")
	
	UiTbl.movementGroup:Slider({
		Min = 0,
		Max = 35,
		Default = 35,
		Parent = UiTbl.movementGroup:CheckBox("Fast Speed", function(bool)
			Settings.SpeedEnabled = bool
			local hum = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid")
			if hum then
				hum.WalkSpeed = bool and Settings.SpeedVal or 16
			end
		end, "SpeedEnabled")
	}, function(val)
		Settings.SpeedVal = val
		
		if Settings.SpeedEnabled and plr.Character then
			local hum = plr.Character:FindFirstChildOfClass("Humanoid")
			if hum then
				hum.WalkSpeed = Settings.SpeedVal
			end
		end
		return val .. ""
	end, "SpeedVal")
	
	UiTbl.movementGroup:Slider({
		Min = 5,
		Max = 100,
		Default = 5,
		Parent = UiTbl.movementGroup:CheckBox("HipHeight", function(bool)
		Settings.HipHeight = bool
			local hum = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid")
			if hum then
				if bool then
					hum.HipHeight = Settings.HipHeightVal
				else
					hum.HipHeight = 0
				end
			end
		end, "HipHeight")
	}, function(val)
		Settings.HipHeightVal = val
		
		if Settings.HipHeight and plr.Character then
			local hum = plr.Character:FindFirstChildOfClass("Humanoid")
			if hum then
				hum.HipHeight = Settings.HipHeightVal
			end
		end
		return val .. ""
	end, "HipHeightVal")
	
	UiTbl.aimGroup:CheckBox("Silent Aim", function(bool)
		Settings.SilentAim = bool
		ESP.HighlightEnabled = bool

		if not bool then
			ESP.Highlighted = nil
		end
	end, "SilentAim"):Keybind(Enum.KeyCode.E, "SilentAim")
	
	UiTbl.aimGroup:Label("Max Distance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 1000,
		Default = 500
	}, function(val)
		Settings.AimDistance = val
		return val .. ""
	end, "AimDistance")
	
	UiTbl.aimGroup:Label("Headshot Chance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 100
	}, function(val)
		Settings.HeadshotChance = val
		return val .. "%"
	end, "HeadshotChance")
	
	local FOVCircle = ESP.FOVCircle(Settings.FOVRange)
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = ESP.GetFOV(),
		Default = 200,
		Parent = UiTbl.aimGroup:CheckBox("Show FOV Circle", function(bool)
			Settings.ShowFOVCircle = bool
			if bool then
				FOVCircle.Tbl.Update = FOVCircle.Update
				FOVCircle.Drawing.Visible = true
			else
				FOVCircle.Tbl.Update = nil
				FOVCircle.Drawing.Visible = false
			end
		end, "FOVCircle")
	}, function(val)
		Settings.FOVRange = val
		if FOVCircle.Drawing then
			FOVCircle.Drawing.Radius = val
		end
		return "FOV Range: " .. val
	end, "FOVRange")
	
	UiTbl.aimGroup:CheckBox("Ignore Teams", function(bool)
		Settings.TargetAll = bool
	end, "TargetAll")
	
	UiTbl.miscGroup:CheckBox("No Store Lock", function(bool)
		Settings.NoStoreLock = bool
		if bool then
			for i,v in pairs(plr.PlayerGui:GetDescendants()) do
				if v.Name == "Cover" and v.Visible then
					v.Visible = false
				end
			end
		end
	end, "NoStoreLock")
	
	local zombieTbl = {}
	UiTbl.autofarmCb = UiTbl.miscGroup:CheckBox("Autofarm", function(bool)
		if bool and not IsSolo() and not isPrivileged then
			return UiTbl.autofarmCb.Click()
		end
		if bool and not DamageNpc then
			return UiTbl.autofarmCb.Click()
		end
		Settings.Autofarm = bool
		
		local lastNpc = tick()
		while Settings.Autofarm do
			wait()
			for i,v in pairs(workspace.Characters.Zombies:GetChildren()) do
				if not IsSolo() then
					if not zombieTbl[v] then
						zombieTbl[v] = tick()
					elseif (tick() - zombieTbl[v]) >= 2 and DamageNpc(v) then --wait 2 seconds after the zombie's spawn and between dmg
						lastNpc = tick()
						zombieTbl[v] = nil
					end
				else
					if DamageNpc(v) then
						lastNpc = tick()
					end
				end
			end
			if tick() - lastNpc > 25 and plr.Character and IsSolo() then
				plr.Character:BreakJoints()
				wait(15)
				game:GetService("ReplicatedStorage").RemoteEvents.SetReady:FireServer(true)
				lastNpc = tick()
			elseif not plr.Character then
				lastNpc = tick()
				if IsSolo() then
					game:GetService("ReplicatedStorage").RemoteEvents.SetReady:FireServer(true)
				end
			end
		end
	end, "Autofarm")
	
	UiTbl.miscGui = NewUI:Tab("Misc")
	UiTbl.collectGroup = UiTbl.miscGui:Group("Collectibles")
	
	UiTbl.collectGroup:Button("Collect All Tickets", function()
		plr.Character.PrimaryPart = plr.Character.HumanoidRootPart
		local pos = plr.Character.PrimaryPart.Position
		
		local list = {}
		for i,v in pairs(workspace.NoRay:GetChildren()) do
			if v:FindFirstChild"Ticket" and v:FindFirstChild"TouchInterest" then
				list[#list + 1] = v
			end
		end
		table.sort(list, function(a,b)
			return (a.Position - pos).magnitude < (b.Position - pos).magnitude
		end)
		
		for i,v in pairs(list) do
			repeat
				wait()
				plr.Character:SetPrimaryPartCFrame(v.CFrame)
			until not plr.Character or not v.Parent
		end
	end)
	
	UiTbl.collectGroup:Button("Open All Chests", function()
		plr.Character.PrimaryPart = plr.Character.HumanoidRootPart
		local pos = plr.Character.PrimaryPart.Position

		local platform
		if KHFlags.R2DAPlatform then
			platform = Instance.new("Part")
			platform.Size = Vector3.new(5, 0.3, 5)
			platform.Anchored = true
			platform.CFrame = CFrame.new(pos + Vector3.new(0,300,0))
			platform.Parent = workspace
			plr.Character:MoveTo(platform.Position)
		end
		
		local list = {}
		for i,v in pairs(workspace.Map:GetChildren()) do
			if v.Name == "RegularChest" then
				list[#list + 1] = v
			end
		end
		table.sort(list, function(a,b)
			return (a.Chest.Position - pos).magnitude < (b.Chest.Position - pos).magnitude
		end)
		
		for i,v in pairs(list) do
			repeat
				local t = plr.Character.PrimaryPart or plr.Character:FindFirstChildWhichIsA("BasePart")
				if KHFlags.R2DAUseTouchInterest then
					firetouchinterest(t, v.Chest, 0)
					firetouchinterest(t, v.Chest, 1)
				else
					v.Chest.CanCollide = false
					v.Chest.CFrame = t.CFrame
				end
				wait()
			until v.Open.Value == true
		end

		if KHFlags.R2DAPlatform then
			plr.Character:SetPrimaryPartCFrame(CFrame.new(pos))
			platform:Destroy()
		end
	end)
	
	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.G, "ESP")
	UiTbl.espGroup:CheckBox("Show Players", function(bool)
		ESP.Players = bool
	end, "ESPTogglePlayers").Click()
	UiTbl.espGroup:CheckBox("Show Teammates", function(bool)
		ESP.TeamMates = bool
	end, "ESPTeamMates").Click()
	UiTbl.espGroup:CheckBox("Show Zombie NPCs", function(bool)
		ESP.NPCs = bool
	end, "ESPZombieNPCs")
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Team Color", function(bool)
		ESP.TeamColor = bool
	end, "ESPTeamColor").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")
	
	Enter.Visible = false
	KeyTB.Text = "Waiting for modules..."
	
	--actual stuff--
	
	local GunSystem, Energy, Animate, FireBullet, LoadTryRestock
	
	do
		local loadCount = 0
		while not GunSystem or not Energy or not FireBullet or not LoadTryRestock do
			for i,v in pairs(getnilinstances()) do
				if v.ClassName == "ModuleScript" then
					if v.Name == KH_CONSTANT("GunSystem") then
						GunSystem = v
					elseif v.Name == "Energy" then
						Energy = v
					elseif v.Name == "Animate" and not table.find(getconstants(getscriptclosure(v)), "SService") then --there are 2 modules with the same name and one errors on require
						Animate = v
					elseif v.Name == "FireBullet" then
						FireBullet = v
					elseif v.Name == "LoadTryRestock" then
						LoadTryRestock = v
					end
				end
				if GunSystem and Energy and Animate and FireBullet and LoadTryRestock then
					break
				end
			end
			if not GunSystem or not Energy or not FireBullet or not LoadTryRestock then
				loadCount = loadCount + 1
				KeyTB.Text = "Waiting for modules (" .. loadCount .. ")..."
				wait(1)
			end
		end
	end
	
	KeyTB.Visible = false
	
	do --for some reason synapse randomy gives the tween callback the context level 2, so this is a workaround--
		Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138), nil, nil, 0.4, true, function()
			if isDebug then
				debugprint("caller:", checkcaller())
				debugprint("context:", syn_context_get())
			end
			syn_context_set(7)
			NewUI.Gui.Parent = game.CoreGui
			Gui:Destroy()
		end)
	end
	
	if typeof(GunSystem) ~= "Instance" or GunSystem.ClassName ~= "ModuleScript" then
		return plr:Kick("[KiriotHub] Uh oh! This isn't supposed to happen!!1")
	end
	
	local GunSystemInit = require(GunSystem)
	local upvals = getupvalues(GunSystemInit)
	
	local f = upvals[6]
	
	if not f or type(f) ~= "function" then
		debugwarn("invalid upval index")
		f = upvals[#upvals]
	end
	if not f or type(f) ~= "function" then
		return plr:Kick("[KiriotHub] Failed to initialize: Couldn't find the function #1")
	end
	
	local BanRemote = upvals[3]
	debugprint("banremote:", BanRemote, typeof(BanRemote))
	if not BanRemote then
		return plr:Kick("[KiriotHub] Failed to initialize: Couldn't find the ban remote")
	end
	
	--Getting Codes And Changing Gun Stats--
	local WepData = require(game:GetService("ReplicatedStorage"):WaitForChild("Modules").WeaponType)
	local LoadedGuns = {}
	
	local Codes = {}
	local GetCodes = game:GetService("ReplicatedStorage").RemoteEvents.GetCodes
	local Transform = getupvalue(GunSystemInit, 1)
	debugprint("name", debug.getinfo(Transform).name)
	
	local InvokeServer = Instance.new("RemoteFunction").InvokeServer
	for i,v in pairs(getupvalues(f)) do
		if v == InvokeServer then
			debugprint("hooked invokeserver")
			local function new(self, ...)
				local res = {InvokeServer(self, ...)}
				if res[2] and type(res[2]) == "table" and res[2].AMMO then
					if not AccuracyIndex and Settings.InfAccuracy then
						res[2].ACCURACY = math.huge
					end
					if Settings.InfRange then
						res[2].RANGE = 99999
					end
					if Settings.NoRecoil then
						res[2].KICKBACK = 0
					end
				end
				if self == GetCodes then
					local name = ({...})[1]
					
					local code = Transform(res[1], res[3])
				
					debugprint("Fetched code for",name,"-",code)
					Codes[name] = code
					
					if WepData[name] == "GUN" then
						LoadedGuns[#LoadedGuns + 1] = name
					end
				end
				return unpack(res)
			end
			Settings.AntiGC = {new}
			setupvalue(f, i, new)
		end
	end
	
	--AntiCheat Bypass--
	local FireServer
	FireServer = hookfunc(Instance.new("RemoteEvent").FireServer, function(self, ...)
		if BanRemote and self == BanRemote or self.ClassName == "RemoteEvent" and self.Name == "FX" then
			return debugwarn("Ban attempt:",...)
		end
		return FireServer(self, ...)
	end)
	if not FSHookPresent then
		UpdateFSHookFuncs(FireServer)
	end
	
	--Auto Reload--
	local DoRemoteReload = false
	local GetClosestCrate = require(game:GetService("ReplicatedStorage"):WaitForChild("Modules", 5):WaitForChild(KH_CONSTANT("GetClosestCrate")))
	
	for i,v in pairs(getupvalues(require(LoadTryRestock))) do
		if v == GetClosestCrate then
			debugwarn("replacing GetClosestCrate")
			setupvalue(require(LoadTryRestock), i, function(...)
				debugwarn("gcc called")
				if not Settings.AutoReload or not DoRemoteReload then
					return GetClosestCrate(...)
				end
				--workspace.Map.Reloads.AmmoTable.Main.Gui.Amount
				DoRemoteReload = false
				for i,v in pairs(workspace.Map.Reloads:GetChildren()) do
					local main = v:FindFirstChild("Main")
					if main then
						local gui = main:FindFirstChild("Gui")
						if gui and gui:FindFirstChild("Amount") then
							local amount = tonumber(gui.Amount.Text)
							if amount and amount > 0 then
								return v
							end
						end
					end
				end
				--use inf ammo reload here?
				return nil
			end)
		end
	end
	
	local function ClipAdded(c)
		c:GetPropertyChangedSignal("Text"):Connect(function()
			if Settings.AutoReload and tonumber(c.Text) == 0 then
				if tonumber(c.Parent.Stored.Text) == 0 then
					DoRemoteReload = true
				end
				wait(0.5)
				local keypress = keypress or Input and Input.KeyPress
				if keypress then
					keypress(0x52)
				end
				local keyrelease = keyrelease or Input and Input.KeyUp
				if keyrelease then
					keyrelease(0x52)
				end
			end
		end)
	end
	
	plr:WaitForChild("PlayerGui", 5).ChildAdded:Connect(function(c)
		if c.Name == "Survivor" then
			ClipAdded(c:WaitForChild"HUD":WaitForChild"Ammo":WaitForChild"Clip")
		end
	end)
	
	local hud = plr.PlayerGui:FindFirstChild("Survivor")
	if hud then
		if hud:FindFirstChild("HUD") and hud.HUD:FindFirstChild("Ammo") then
			ClipAdded(hud.HUD.Ammo:WaitForChild"Clip")
		end
	end
	
	--Inf Energy--
	if not Energy then
		--disable inf energy button
		debugwarn("Energy not found")
		UiTbl.infEnergyCb.Enabled = false
		UiTbl.infEnergyCb:SetLabelColor(Color3.new(1,0,0))
	else
		local hasRan = false
		
		local env = getfenv(require(Energy))
		local f = env.loadenergy or getupvalues(require(Energy))[1]

		local function InitEnergySet(func)
			local numMap = getupvalue(func, 2)
			numMap[math.huge] = "inf"

			local strMap = getupvalue(func, 4)
			strMap["inf"] = math.huge
		end
		
		env.init = function()
			return function()
				local change, idk, set = f()
				EnergySet = set
				InitEnergySet(EnergySet)
				return function(...)
					hasRan = true
					--re enable inf energy button
					UiTbl.infEnergyCb.Enabled = true
					UiTbl.infEnergyCb:SetLabelColor(Color3.new(1,1,1))
					
					if not Settings.InfEnergy then
						return change(...)
					end
					set(math.huge)
					return
				end, idk, set
			end
		end
		
		local set = getupvalue(require(Animate), 8) --setEnergy from plr.PlayerGui.Chat.Code.Main.Main.Energy
		if not set then
			--disable inf energy button
			UiTbl.infEnergyCb.Enabled = false
			UiTbl.infEnergyCb:SetLabelColor(Color3.new(1,0,0))
		else
			EnergySet = set
			InitEnergySet(EnergySet)
			spawn(function()
				while not hasRan do
					wait(1)
					if Settings.InfEnergy then
						set(math.huge)
					end
				end
			end)
		end
	end
	
	--Inf Accuracy--
	for i,v in pairs(getgc()) do
		if type(v) == "function" and islclosure(v) and not is_synapse_function(v) and getfenv(v) == getfenv(GunSystemInit) then
			local c = getconstants(v)
			local i = FIT(c, 2.5)
			if i then
				GunSystemMain = v
				AccuracyIndex = i
				break
			end
		end
	end
	
	--Wallbang & Silent Aim--
	local cam = workspace.CurrentCamera

	local function is_ffa()
		local gamemode = PathFFC("Workspace.Settings.CurrentMap.Gamemode").Value
		return gamemode == "FFA" or gamemode == "PDM"
	end
	
	local function GetEnemies()
		local t = {}
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			if (v.Team ~= plr.Team or (v.Team == nil and plr.Team ~= nil) or is_ffa() or (v.Team and v.Team.Name == "Survivior" and Settings.TargetAll)) and v ~= plr then
				if v.Character and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
					t[#t + 1] = v.Character
				end
			end
		end
		if not (plr.Team and plr.Team.Name == "Zombie") then
			for i,v in pairs(workspace.Characters.Zombies:GetChildren()) do
				if not game:GetService("Players"):GetPlayerFromCharacter(v) then
					t[#t + 1] = v
				end
			end
		end
		return t
	end
	
	local function GetTarget(chance)
		local camPos = cam.CFrame.p
		local clPos,clPart,clModel
		for i,v in pairs(GetEnemies()) do
			if v.Parent then
				local part = v:FindFirstChild("Head")
				if chance and math.random(1, 100) >= Settings.HeadshotChance then
					part = v:FindFirstChild("HumanoidRootPart")
				end
				if not part then
					part = v:FindFirstChildWhichIsA("BasePart")
				end
				if part then
					local p,vis = cam:WorldToViewportPoint(part.Position)
					if vis then
						local startPos = camPos
						
						local workspaceDist = (cam.CFrame.p - part.Position).magnitude
						
						local ray = Ray.new(startPos, CFrame.new(cam.CFrame.p, part.Position).LookVector.Unit * p.Z)
						
						local hit
						if not Settings.Wallbang then
							local ignore = {plr.Character,part.Parent,workspace:FindFirstChild("NoRay")}
							
							hit = workspace:FindPartOnRayWithIgnoreList(ray, ignore)
						end
						if not hit and workspaceDist <= Settings.AimDistance then
							local dist
							local ok = true
							if Settings.AimMode == "Cursor" then
								dist = (Vector3.new(mouse.X,mouse.Y+36,0) - Vector3.new(p.X,p.Y,0)).magnitude
								ok = dist <= Settings.FOVRange
							elseif Settings.AimMode == "Character" then
								dist = (camPos - part.Position).magnitude
							end
							if not clPos and ok then
								clPos = dist
								clPart = part
								clModel = v
							end
							if ok and dist and dist < clPos then
								clPos = dist
								clPart = part
								clModel = v
							end
						end
					end
				end
			end
		end
		return clPart,clModel
	end
	
	local projectile = getfenv(require(FireBullet)).projectile
	if projectile and not is_synapse_function(projectile) then
		getfenv(require(FireBullet)).projectile = function(origin,dir,ignore)
			if Settings.Wallbang then
				if not FIT(ignore, workspace.Map) then
					ignore[#ignore + 1] = workspace.Map
				end
				if not FIT(ignore, workspace.Terrain) then
					ignore[#ignore + 1] = workspace.Terrain
				end
			elseif not Settings.Wallbang then
				local function Remove(obj)
					local i = FIT(ignore, obj)
					if i then
						table.remove(ignore, i)
					end
				end
				Remove(workspace.Map)
				Remove(workspace.Terrain)
			end
			if Settings.SilentAim then
				local target = GetTarget(true)
				if target then
					dir = CFrame.new(origin, target.Position).lookVector * Settings.AimDistance
				end
			end
			return projectile(origin, dir, ignore)
		end
	end
	--fuck you wally--
	--[[do
		for i,v in pairs(getupvalues(f)) do
			if v == require(LoadSingleFire) then
				debugprint("aha found you", i)
				setupvalue(f, i, function(data)
					if not is_synapse_function(data.Funcs.ShootBullet) then
						debugprint("replacing le func")
						local old = data.Funcs.ShootBullet
						data.Funcs.ShootBullet = function(...)
							local notWallshot = getupvalue(old, 3)
							local ignore = getupvalue(notWallshot, 3)
							if Settings.Wallbang then
								if not FIT(ignore, workspace.Map) then
									ignore[#ignore + 1] = workspace.Map
								end
								if not FIT(ignore, workspace.Terrain) then
									ignore[#ignore + 1] = workspace.Terrain
								end
							else
								local function Remove(obj)
									local i = FIT(ignore, obj)
									if i then
										table.remove(ignore, i)
									end
								end
								Remove(workspace.Map)
								Remove(workspace.Terrain)
							end

							if Settings.SilentAim then
								local args = {...}
								local target = GetTarget(true)
								if target then
									args[1] = CFrame.new(args[1].p, target.Position)
									return old(unpack(args))
								end
							end
							return old(...)
						end
					end
					return v(data)
				end)
				break
			end
		end
	end]]
	
	ESP:AddObjectListener(workspace.Characters.Zombies, {
		Color =  Color3.new(1,1,0),
		Type = "Model",
		PrimaryPart = function(obj)
			local hrp = obj:FindFirstChildWhichIsA("BasePart")
			while not hrp do
				wait()
				hrp = obj:FindFirstChildWhichIsA("BasePart")
			end
			return hrp
		end,
		Validator = function(obj)
			return not game.Players:FindFirstChild(obj.Name) --stupid GetPlayerFromCharacter returns nil every time, it's probably called too early
		end,
		CustomName = function(obj)
			return obj:FindFirstChild("Zombie") and obj.Zombie.Value or obj.Name
		end,
		IsEnabled = "NPCs",
	})
	
	ESP:RegisterHighlight(GetTarget)
	
	--ESP Color Fix--
	ESP.Overrides.GetColor = function(obj)
		local p = game:GetService("Players"):GetPlayerFromCharacter(obj)
		if p and p.Team and p.Team.TeamColor.Name == "White" and ESP.TeamColor then
			return ESP.Color--Color3.fromRGB(145,145,145)
		end
		return p and ESP.TeamColor and p.Team and p.Team.TeamColor.Color or ESP.Color
	end
	
	--Infinite Jump--
	game:GetService("ContextActionService"):BindAction("fuku", function(name, state, iobj)
		if state == Enum.UserInputState.Begin and Settings.InfJump and plr.Character then
			local hum = plr.Character.Humanoid
			hum:ChangeState("Seated")
			wait()
			hum:ChangeState("Jumping")
		end
	end, false, Enum.KeyCode.Space)
	
	--Speed, HipHeight and Chests cooldown--
	do
		local function CharChildAdded(c)
			if c.Name == "OpeningChest" then
				repeat
					c:Destroy()
					wait()
				until not c.Parent
			end
		end
		local function CharAdded(char)
			char.ChildAdded:Connect(CharChildAdded)

			local hum = char:WaitForChild("Humanoid")
			if Settings.SpeedEnabled then
				hum.WalkSpeed = Settings.SpeedVal
			end
			if Settings.HipHeight then
				hum.HipHeight = Settings.HipHeightVal
			end
			hum:GetPropertyChangedSignal("HipHeight"):Connect(function()
				if Settings.HipHeight and hum.HipHeight ~= Settings.HipHeightVal then
					hum.HipHeight = Settings.HipHeightVal
				end
			end)
		end
		plr.CharacterAdded:Connect(CharAdded)
		
		if plr.Character then
			CharAdded(plr.Character)
		end
	end
	
	--No fall damage--
	local fallDmgRemote = game:GetService"ReplicatedStorage".RemoteEvents.SelfDamage
	local restockRemote = game:GetService"ReplicatedStorage".RemoteFunctions.Restock
	local settingsRemote = game:GetService"ReplicatedStorage".RemoteEvents.SetSettings
	
	local old = {}
	
	local LastRobuxStoreCheck = KH_CONSTANT("LastRobuxStoreCheck")
	
	local wasSpoofed = false
	local function SecureInfAmmo(self, args)
		if not Settings.InfAmmo then
			return old[1](self, unpack(args))
		end
		
		if not wasSpoofed then
			--settingsRemote:FireServer(LastRobuxStoreCheck, 1000000)
			SecureFireServer(settingsRemote, LastRobuxStoreCheck, 1000000)
			wasSpoofed = true
		end
		args[2] = {
			Parent = workspace.Map.Reloads,
			Clips = plr.Settings[LastRobuxStoreCheck]
		}
		--setnamecallmethod("InvokeServer")
		--return old(self, unpack(args))
		return SecureInvokeServer(self, unpack(args))
	end
	
	do
		old[1] = hookmetamethod(game, "__namecall", loadstring([[
			local old, Settings, IsLuau, fallDmgRemote, a, b = ...
			
			local getnamecallmethod = getnamecallmethod or get_namecall_method
			return function(self, ...)
				local args = {...}
				local method = IsLuau and getnamecallmethod() or not IsLuau and table.remove(args,#args)
				
				if method == "FireServer" and Settings.NoFallDamage and self == fallDmgRemote then
					return
				elseif method == "InvokeServer" and self == a then
					return b(self, args)
				end
				
				return old[1](self, ...)
			end
		]])(old, Settings, IsLuau, fallDmgRemote, restockRemote, SecureInfAmmo))
		
		old[2] = hookmetamethod(game, "__newindex", loadstring([[
			local old, Settings = ...
			
			local checkcaller = checkcaller or is_protosmasher_caller
			return function(self, i, v)
				if (i == "WalkSpeed" or i == "HipHeight") and self.ClassName == "Humanoid" and Settings.SpeedEnabled and not checkcaller() then
					return
				end
				return old[2](self, i, v)
			end
		]])(old, Settings))

		old[3] = hookmetamethod(game, "__index", loadstring([[
			local old, Settings = ...

			local checkcaller = checkcaller or is_protosmasher_caller
			return function(self, i)
				if i == "HipHeight" and Settings.HipHeight and old[3](self, "ClassName") == "Humanoid" then
					return 0
				elseif i == "WalkSpeed" and Settings.SpeedEnabled and old[3](self, "ClassName") == "Humanoid" then
					return 16
				end
				return old[3](self, i)
			end
		]])(old, Settings))
	end
	
	local function InfAmmoReload(tool)
		if not wasSpoofed then
			SecureFireServer(settingsRemote, LastRobuxStoreCheck, 1000000)
			wasSpoofed = true
		end
		
		if not SecureInvokeServer(restockRemote, tool, {
			Parent = workspace.Map.Reloads,
			Clips = plr.Settings[LastRobuxStoreCheck]
		}) then
			return error("Reload failed")
		end
	end
	
	--No store lock--
	game.ItemChanged:Connect(function(obj, prop)
		if obj.Name == "Cover" and prop == "Visible" and Settings.NoStoreLock then
			wait()
			obj.Visible = false
		end
	end)
	
	--AutoFarm--
	do
		local GunBlacklist = {
			Minigun = true,
			Flamethrower = true,
			M202 = true,
			RPG = true
		}
		local BulletHit = game:GetService("ReplicatedStorage").RemoteEvents.BulletHit
		DamageNpc = function(npc, tool)
			if not plr.Character then
				return
			end
			if not tool and #LoadedGuns == 0 then
				return --debugwarn("no loadedguns")
			elseif not tool then
				for i,v in pairs(LoadedGuns) do
					local gun = plr.Backpack:FindFirstChild(v) or plr.Character:FindFirstChild(v)
					if gun and gun:FindFirstChild("Handle") and not GunBlacklist[v] then
						tool = gun
						break
					end
				end
			end
			
			if not tool then
				return warn("[KiriotHub] No usable gun found")
			end
			
			if not Codes[tool.Name] then
				return --warn("[KiriotHub] No code for " .. tool.Name)
			end
			
			local hum = npc:FindFirstChildOfClass("Humanoid")
			if not hum then
				return false
			end
			
			InfAmmoReload(tool)
			
			local new = {
				Headshot = false,
				Humanoid = hum,
				Perc = 1,
				Origin = tool.Handle.Position,
				Size = Vector3.new(2,1,1)
			}
			
			local hit = npc:FindFirstChild("Head") or npc.PrimaryPart or npc:FindFirstChildWhichIsA("BasePart")
			if not hit then
				return false
			end
			new.Hit = hit
			if hit.Name == "Head" then
				new.Headshot = true
			end
			
			new.Position = hit.Position
			
			SecureFireServer(BulletHit, new, 1, Codes[tool.Name])
			return true
		end
		
		local VirtualUser = game:GetService("VirtualUser")
		plr.Idled:Connect(function()
			VirtualUser:CaptureController()
			VirtualUser:ClickButton2(Vector2.new())
		end)
	end

	--Staff alert--
	do
		local function Alert(p)
			getsenv(plr.PlayerGui.Chat.Bottom.Chatbar.You).post({"âš ï¸ [KiriotHub]: Game staff joined: " .. p.Name .. " âš ï¸", Color3.fromRGB(255, 127, 0)})
		end
		local function PlrAdded(p)
			for i,v in pairs({"IsMod", "IsDev"}) do
				local obj = p:WaitForChild(v)
				if obj.Value then
					return Alert(p)
				end
				local ev
				ev = obj.Changed:Connect(function(val)
					if val then
						ev:Disconnect()
						Alert(p)
					end
				end)
			end
		end
		game.Players.PlayerAdded:Connect(PlrAdded)
		for i,v in pairs(game.Players:GetPlayers()) do
			coroutine.wrap(PlrAdded)(v)
		end
	end
	
	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
end)() elseif GameName == "BIG Paintball" then
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
	
	local Settings = {
		SilentAim = false,
		AimMode = "Cursor",
		AimDistance = 1000,
		FOVRange = 200,
		UsedFOVRange = 200,
		WallBang = false,
		InfiniteJump = false,
		SpeedEnabled = false,
		JumpPowerEnabled = false,
		FireRate = false,
		FireRateVal = 0.01,
		Velocity = false,
		VelocityVal = 500
	}
	local lib,RealStats,GetRemote,Kill
	local CurrentGun = {}
	
	local function ChangeHumStat(val, stat)
		if plr.Character then
			local hum = plr.Character:FindFirstChildOfClass"Humanoid"
			if hum then
				hum[stat] = val
			end
		end
	end
	
	local UiTbl = {}
	UiTbl.weapons = NewUI:Tab("Weapons")
	UiTbl.modsGroup = UiTbl.weapons:Group("Gun Mods")
	
	local function ChangeStat(stat, val)
		if not lib or not RealStats then
			return
		end
		for i,v in pairs(lib.Directory.Guns) do
			if val then
				v[stat] = val
			else
				v[stat] = RealStats[i][stat]
			end
		end
	end
	
	UiTbl.modsGroup:CheckBox("Constant Fire", function(bool)
		ChangeStat("automatic", bool)
	end, "ConstantFire")
	
	
	UiTbl.modsGroup:Slider({
		Min = 0.01,
		Max = 1,
		Default = 0.01,
		Fraction = 2,
		Parent = UiTbl.modsGroup:CheckBox("Fire Rate", function(bool)
			Settings.FireRate = bool
			if bool then
				ChangeStat("shotrate", Settings.FireRateVal)
			else
				ChangeStat("shotrate", nil)
			end
		end, "FireRate")
	}, function(val)
		Settings.FireRateVal = math.max(val, 0.01) --0 crashes and some ppl will have it saved in their configs
		if Settings.FireRate then
			ChangeStat("shotrate", val)
		end
		return val .. ""
	end, "FireRateVal2")
	
	UiTbl.modsGroup:Slider({
		Min = 0,
		Max = 1000,
		Default = 500,
		Parent = UiTbl.modsGroup:CheckBox("Bullet Velocity", function(bool)
			Settings.Velocity = bool
			if bool then
				ChangeStat("velocity", Settings.VelocityVal)
			else
				ChangeStat("velocity", nil)
			end
		end, "Velocity")
	}, function(val)
		Settings.VelocityVal = val
		if Settings.Velocity then
			ChangeStat("velocity", val)
		end
		return val .. ""
	end, "VelocityVal")
	
	UiTbl.modsGroup:CheckBox("Wallbang", function(bool)
		Settings.WallBang = bool
	end, "WallBang")

	UiTbl.modsGroup:CheckBox("Unlock All", function(bool)
		Settings.UnlockAll = bool
	end, "UnlockAll")
	
	UiTbl.gameG = NewUI:Tab("Game")
	UiTbl.movementGroup = UiTbl.gameG:Group("Movement")
	UiTbl.aimGroup = UiTbl.gameG:Group("Silent Aim")
	
	UiTbl.movementGroup:CheckBox("Infinite Jump", function(bool)
		Settings.InfiniteJump = bool
	end, "InfiniteJump")
	
	UiTbl.movementGroup:Slider({
		Min = 0,
		Max = 200,
		Default = 50,
		Parent = UiTbl.movementGroup:CheckBox("Fast Speed", function(bool)
			Settings.SpeedEnabled = bool
			if bool then
				ChangeHumStat(Settings.SpeedVal, "WalkSpeed")
			else
				ChangeHumStat(15, "WalkSpeed")
			end
		end, "SpeedEnabled")
	}, function(val)
		Settings.SpeedVal = val
		if Settings.SpeedEnabled then
			ChangeHumStat(val, "WalkSpeed")
		end
		return val .. ""
	end, "SpeedVal")

	UiTbl.movementGroup:Slider({
		Min = 0,
		Max = 200,
		Default = 50,
		Parent = UiTbl.movementGroup:CheckBox("Jump Power", function(bool)
			Settings.JumpPowerEnabled = bool
			if bool then
				ChangeHumStat(Settings.JumpPowerVal, "JumpPower")
			else
				ChangeHumStat(35, "JumpPower")
			end
		end, "JumpPowerEnabled")
	}, function(val)
		Settings.JumpPowerVal = val
		if Settings.JumpPowerEnabled then
			ChangeHumStat(val, "JumpPower")
		end
		return val .. ""
	end, "JumpPowerVal")
	
	UiTbl.aimGroup:CheckBox("Silent Aim", function(bool)
		Settings.SilentAim = bool
		ESP.HighlightEnabled = bool
		if not bool then
			ESP.Highlighted = nil
		end
	end, "SilentAim"):Keybind(Enum.KeyCode.E, "SilentAim")
	
	UiTbl.aimGroup:Dropdown({
		Text = "Aim Mode",
		Default = 1,
		Radio = true,
		Values = {"Cursor", "Character"}
	}, function(val)
		Settings.AimMode = val
	end, "AimMode")
	
	UiTbl.aimGroup:Label("Max Distance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 1000,
		Default = 1000
	}, function(val)
		Settings.AimDistance = val
		return val .. ""
	end, "AimDistance")
	
	UiTbl.aimGroup:CheckBox("Silent Aim\nAlways Hits\nThe Target", function(bool)
		Settings.SilentAimAlwaysHitsTheTarget = bool
	end, "SilentAimAlwaysHitsTheTarget"):SetMultiLine()
	
	local FOVCircle = ESP.FOVCircle(Settings.FOVRange)
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = ESP.GetFOV(),
		Default = 200,
		Parent = UiTbl.aimGroup:CheckBox("Show FOV Circle", function(bool)
		Settings.ShowFOVCircle = bool
		if bool then
			FOVCircle.Tbl.Update = FOVCircle.Update
			FOVCircle.Drawing.Visible = true
		else
			FOVCircle.Tbl.Update = nil
			FOVCircle.Drawing.Visible = false
		end
	end, "ShowFOVCircle")
	}, function(val)
		Settings.FOVRange = val
		if FOVCircle.Drawing then
			FOVCircle.Drawing.Radius = val
		end
		return "FOV Range: " .. val
	end, "FOVRange")

	UiTbl.miscGui = NewUI:Tab("Misc")
	UiTbl.miscGroup = UiTbl.miscGui:Group("Misc")
	
	UiTbl.miscGroup:Button("Reset", function()
		--[[local remote = workspace.__THINGS.__REMOTES:FindFirstChild("request respawn")
		if not remote then
			GetRemote("request respawn")
			remote = workspace.__THINGS.__REMOTES:WaitForChild("request respawn")
		end
		remote:FireServer({{CurrentGun.Id or "1"}, {false}})]]
		return plr.Character and plr.Character:BreakJoints()
	end)
	UiTbl.miscGroup:Button("Kill All (ban risk!)", function()
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			if v ~= plr then
				wait(0.2)
				spawn(function()
					Kill(v)
				end)
			end
		end
	end)
	
	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.H, "ESP")
	
	UiTbl.espGroup:CheckBox("Show Teammates", function(bool)
		ESP.TeamMates = bool
	end, "ESPToggleTeamMates").Click()
	UiTbl.espGroup:CheckBox("Show Sentries", function(bool)
		ESP.Sentries = bool
	end, "ESPSentries").Click()
	UiTbl.espGroup:CheckBox("Show Drones", function(bool)
		ESP.Drones = bool
	end, "ESPDrones").Click()
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Team Color", function(bool)
		ESP.TeamColor = bool
	end, "ESPToggleTeamColor").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")
	
	Enter.Visible = false
	KeyTB.Text = "Waiting for modules..."
	
	--actual stuff--
	local loadCount = 0
	
	lib = game:GetService("ReplicatedStorage")[KH_CONSTANT("Framework")].Library
	lib = require(lib)
	
	GetRemote = getfenv(lib.Network.Fire).GetRemote
	
	while not GetRemote do
		GetRemote = getfenv(lib.Network.Fire).GetRemote
		if not GetRemote then
			loadCount = loadCount + 1
			KeyTB.Text = "Waiting for modules (" .. loadCount .. ")..."
			wait(1)
		end
	end
	
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)
	
	local doDmg = KH_CONSTANT("do damage")
	local DamageRemote = workspace.__THINGS.__REMOTES:FindFirstChild(doDmg)
	if not DamageRemote then
		GetRemote(doDmg)
		DamageRemote = workspace.__THINGS.__REMOTES:WaitForChild(doDmg)
	end
	
	Kill = function(p)
		if p.Character then
			local id = lib.Functions.GenerateUID()
			lib.Network.Fire("New Projectile", CFrame.new(plr.Character.Head.Position, p.Character.Head.Position), id, math.floor(workspace.DistributedGameTime))
			--[[SecureFireServer(workspace.__THINGS.__REMOTES[doDmg], {
				{p.Character.Humanoid, id, CurrentGun.Data and CurrentGun.Data.velocity or 235, p.Character.Head.Position, false},
			})]]
			lib.Network.Fire("Do Damage", p.Character.Humanoid, id, CurrentGun.Data and CurrentGun.Data.velocity or 235, p.Character.Head.Position, false)
		end
	end
	
	local function KillSentry(sentry)
		local id = lib.Functions.GenerateUID()
		lib.Network.Fire("New Projectile", CFrame.new(plr.Character.Head.Position, sentry.Top.Main.Position), id, math.floor(workspace.DistributedGameTime))
		lib.Network.Fire("Do Sentry Damage", sentry, (CurrentGun.Data and CurrentGun.Data.velocity or 235)/20, id)
	end
	
	local function KillDrone(drone)
		local id = lib.Functions.GenerateUID()
		lib.Network.Fire("New Projectile", CFrame.new(plr.Character.Head.Position, drone.Base.Position), id, math.floor(workspace.DistributedGameTime))
		lib.Network.Fire("Do Drone Damage", drone, (CurrentGun.Data and CurrentGun.Data.velocity or 235)/20, id)
	end
	
	--Grabbing the current gun--
	local _GunStats = game:GetService("ReplicatedStorage").Framework.Modules[KH_CONSTANT("1 | Directory")].Guns
	
	local old = {}
	old[1] = hookmetamethod(game, "__namecall", loadstring([[
		local old, CurrentGun, Guns, OwnsGun = ...
		
		local rs = game:GetService"RunService"
		
		return function(self, ...)
			local args = {...}
			local method = getnamecallmethod()
			
			if method == "FireServer" and self.Name == "request respawn" then
				local id = args[1][1]
				if Guns[id] then
					if not OwnsGun(id) and not checkcaller() then
						if not CurrentGun.Id then
							CurrentGun.Id = "1"
							CurrentGun.Data = Guns["1"]
						end
						args[1][1] = "1"
					end
					CurrentGun.Data = Guns[id]
					CurrentGun.Id = id
				end
			elseif method == "IsStudio" and self == rs and debug.traceback():find("First Person Controller") then
				return true
			end
			
			setnamecallmethod(method)
			return old[1](self, ...)
		end
	]])(old, CurrentGun, lib.Directory.Guns, function(name) return lib.GunCmds.DoesOwnGun(plr, name, true) end))
	
	--Silent Aim--
	local cam = workspace.CurrentCamera
	
	local function GetEnemies()
		local t = {}
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			if v.Team ~= plr.Team or v.Team == nil and v ~= plr then
				if v.Character and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
					t[#t + 1] = {Model = v.Character, Player = v}
				end
			end
		end
		for i,v in pairs(workspace.__THINGS.Sentries:GetChildren()) do
			local p = game:GetService("Players"):FindFirstChild(v.Name)
			if p and (p.Team ~= plr.Team or p.Team == nil and p ~= plr) then
				t[#t + 1] = {Model = v}
			end
		end
		for i,v in pairs(workspace.__THINGS.Drones:GetChildren()) do
			local p = game:GetService("Players"):FindFirstChild(v.Name)
			if p and (p.Team ~= plr.Team or p.Team == nil and p ~= plr) then
				t[#t + 1] = {Model = v}
			end
		end
		return t
	end
	
	local function GetTarget()
		local camPos = cam.CFrame.p
		local clPos,clPart,clPlr,clModel
		for i,v in pairs(GetEnemies()) do
			if v.Model and v.Model.Parent then
				local part = v.Model:FindFirstChild("Head") or v.Model:FindFirstChild("HumanoidRootPart") or v.Model:FindFirstChild("Hitbox",true) or v.Model:FindFirstChild("Base")
				if part then
					local p,vis = cam:WorldToViewportPoint(part.Position)
					if vis then
						local startPos = camPos
						
						local workspaceDist = (cam.CFrame.p - part.Position).magnitude
						
						local ray = Ray.new(startPos, CFrame.new(cam.CFrame.p, part.Position).LookVector.Unit * p.Z)
						
						local hit
						if not Settings.WallBang then
							local ignore = Settings.IgnoreList or {}
							ignore[#ignore + 1] = plr.Character
							ignore[#ignore + 1] = part.Parent
							
							hit = workspace:FindPartOnRayWithIgnoreList(ray, ignore)
						end
						if not hit and workspaceDist <= Settings.AimDistance then
							local dist
							local ok = true
							if Settings.AimMode == "Cursor" then
								dist = (Vector3.new(mouse.X,mouse.Y+36,0) - Vector3.new(p.X,p.Y,0)).magnitude
								ok = dist <= Settings.UsedFOVRange
							elseif Settings.AimMode == "Character" then
								dist = (camPos - part.Position).magnitude
							end
							if not clPos and ok then
								clPos = dist
								clPart = part
								clPlr = v.Player
								clModel = v.Model
							end
							if ok and dist and dist < clPos then
								clPos = dist
								clPart = part
								clPlr = v.Player
								clModel = v.Model
							end
						end
					end
				end
			end
		end
		return clPart,clModel,clPlr
	end
	
	local old = lib.Projectiles.Fire
	lib.Projectiles.Fire = function(p, cf, ...)
		if p ~= plr or not Settings.SilentAim then
			return pcall(old, p, cf, ...)
		end
		
		local target, char, tPlr = GetTarget()
		if target then
			debugprint("Spoofering to",tPlr)
			local newCf = CFrame.new(cf.p, target.Position)
			if Settings.WallBang or Settings.SilentAimAlwaysHitsTheTarget then
				coroutine.wrap(function()
					if tPlr then
						Kill(tPlr)
					else
						if target.Parent:FindFirstChild("Turret Top") then
							KillSentry(target.Parent.Parent)
						elseif target.Parent:FindFirstChild("Propeller") then
							KillDrone(target.Parent)
						end
					end
				end)()
			end
			return old(p, newCf, ...)
		end
		return old(p, cf, ...)
	end
	
	local old = lib.Network.Fire
	lib.Network.Fire = function(type, ...)
		if type == "New Projectile" and Settings.SilentAim then
			local args = {...}
			
			local target, char, p = GetTarget()
			if target and p then
				args[1] = CFrame.new(workspace.CurrentCamera.CFrame.p, target.Position)
			end
			return old(type, unpack(args))
		end
		return old(type, ...)
	end
	
	ESP:RegisterHighlight(GetTarget)

	ESP.Overrides.UpdateAllow = function(box)
		local hum = box.Object:FindFirstChildOfClass("Humanoid")
		if hum and hum.Health <= 0 then
			return false
		end
		return true
	end
	
	--Sentries--
	ESP:AddObjectListener(workspace.__THINGS.Sentries, {
		CustomName = function(obj)
			return obj.Name .. "'s Sentry"
		end,
		Color = function(obj)
			local color = Color3.new(1,1,0)
			local owner = game:GetService("Players"):FindFirstChild(obj.Name)
			if owner and owner.Team then
				color = owner.Team.TeamColor.Color
			end
			return color
		end,
		IsEnabled = function(box)
			local owner = game:GetService("Players"):FindFirstChild(box.Object.Name)
			return ESP.Sentries and not (not ESP.TeamMates and owner and owner.Team == plr.Team)
		end,
		PrimaryPart = function(obj)
			return obj:WaitForChild("Top"):WaitForChild("Main")
		end
	})
	
	--Drones--
	ESP:AddObjectListener(workspace.__THINGS.Drones, {
		CustomName = function(obj)
			return obj.Name .. "'s Drone"
		end,
		Color = function(obj)
			local color = Color3.new(1,1,0)
			local owner = game:GetService("Players"):FindFirstChild(obj.Name)
			if owner and owner.Team then
				color = owner.Team.TeamColor.Color
			end
			return color
		end,
		IsEnabled = function(box)
			local owner = game:GetService("Players"):FindFirstChild(box.Object.Name)
			return ESP.Drones and not (not ESP.TeamMates and owner and owner.Team == plr.Team)
		end,
		PrimaryPart = "Base"
	})
	
	--Gun memes--
	RealStats = {}
	for i,v in pairs(lib.Directory.Guns) do
		local new = {}
		RealStats[i] = new
		for i,v in pairs(v) do
			new[i] = v
		end
	end
	
	--Speed--
	do
		local old = {}
		old[1] = hookmetamethod(game, "__newindex", loadstring([[
			local old, Settings = ...
			
			local checkcaller = checkcaller or is_protosmasher_caller
			return function(self, i, v)
				if (i == "WalkSpeed" and Settings.SpeedEnabled) or (i == "JumpPower" and Settings.JumpPowerEnabled) then
					if self.ClassName == "Humanoid" and not checkcaller() then
						return
					end
				end
				return old[1](self, i, v)
			end
		]])(old, Settings))
	end

	--Unlock all--
	do
		local old = lib.GunCmds.DoesOwnGun
		lib.GunCmds.DoesOwnGun = function(self, gun, real)
			if not Settings.UnlockAll or real then --checkcaller bad
				return old(self, gun)
			end
			return true
		end

		local env = getsenv(plr:WaitForChild('PlayerScripts'):WaitForChild('Scripts'):WaitForChild('Game'):WaitForChild('First Person Controller'))
		local old = env.DoesOwnGun
		function env.DoesOwnGun(...)
			if not Settings.UnlockAll then
				return old(...)
			end
			return true
		end
	end
	
	plr.CharacterAdded:Connect(function(char)
		local hum = char:WaitForChild("Humanoid")
		if Settings.SpeedEnabled then
			hum.WalkSpeed = Settings.SpeedVal
		end
		if Settings.JumpPowerEnabled then
			hum.JumpPower = Settings.JumpPowerVal
		end
	end)
	
	--Other--
	
	game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
		if Settings.InfiniteJump and not gp and iobj.KeyCode == Enum.KeyCode.Space then
			local hrp = plr.Character.HumanoidRootPart
			hrp.Velocity = hrp.Velocity + Vector3.new(0,Settings.JumpPowerEnabled and Settings.JumpPowerVal or 35)
		end
	end)
	
	if isDebug then
		_G.lib = lib
	end
	
	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
elseif GameName == "Vesteria" then
	--[[
		The server checks if you attack with the same number anim in a row (ex. strike1, then strike1 again), in which case you don't deal damage
	]]
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))({HrpName = "hitbox"})
	local setscriptes = getupvalue(getgenv().syn.secure_call, 9)

	local Settings = {
		Killaura = false,
		GodMode = false,
		InfStamina = false,
		AutoPickup = false,
		DamageIndicators = false,
		AutoFish = false,
		Keys = {
			[Enum.KeyCode.W] = CFrame.new(0,0,-40),
			[Enum.KeyCode.S] = CFrame.new(0,0,40),
			[Enum.KeyCode.A] = CFrame.new(-40,0,0),
			[Enum.KeyCode.D] = CFrame.new(40,0,0),
			[Enum.KeyCode.Q] = CFrame.new(0,-40,0),
			[Enum.KeyCode.E] = CFrame.new(0,40,0),
		},
		ESPMobsFilter = {},
		KillauraDelay = 0
	}
	
	local GetMobs, network, itemsFolder, PickUp, animationInterface, LocalGodTable, entityManifestCollection

	local hashes = {
		playerRequest_damageEntity = nil, --playerRequest_damageEntity_batch,
		pickUpItemRequest = nil
	}

	local UiTbl = {}
	UiTbl.gameg = NewUI:Tab("Game", {
		Width = 198
	})
	UiTbl.combatGroup = UiTbl.gameg:Group("Combat")
	UiTbl.mechanicsGroup = UiTbl.gameg:Group("Mechanics")
	UiTbl.staffAlert = UiTbl.gameg:Group("Staff Alert")
	
	local replicatePlayerAnimationSequence = KH_CONSTANT("replicatePlayerAnimationSequence") --replicatePlayerAnimationSequence
	
	UiTbl.killauraCb = UiTbl.combatGroup:CheckBox("Killaura", function(bool)
		if not GetMobs or not network or not animationInterface then
			debugwarn("Couldn't find a variable", GetMobs, network, id, animationInterface)
			return
		end

		Settings.Killaura = bool
		Settings.LastSwing = tick()

		while Settings.Killaura do
			local mobs = GetMobs()
	
			if #mobs > 0 then
				if tick() - Settings.LastSwing > Settings.SwingDelay then
					Settings.LastSwing = tick()
					animationInterface:replicateClientAnimationSequence("swordAnimations", "strike2")
				end
			end
	
			while #mobs > 0 do
				local batch = {}
				for i = 1, 10 do
					local mob = table.remove(mobs, 1)
					if not mob then break end
					table.insert(batch, { mob, Vector3.zero, "equipment", nil, game:GetService("HttpService"):GenerateGUID(false) })
				end
				if next(batch) then
					debugprint('sending batch network attack')
					network:fireServer(hashes.playerRequest_damageEntity, batch)
				else
					debugwarn('batch is empty')
				end
			end
	
			task.wait(Settings.KillauraDelay)
		end
	end, "Killaura")
	UiTbl.killauraCb:Keybind(Enum.KeyCode.Z, "Killaura")
	UiTbl.combatGroup:Slider({
		Min = 0,
		Max = 1,
		Default = 0,
		Fraction = 2,
		Parent = UiTbl.killauraCb
	}, function(val)
		Settings.KillauraDelay = val
		return "Delay: " .. val .. "s"
	end, "KillauraDelay")

	UiTbl.combatGroup:Slider({
		Min = 0,
		Max = 1,
		Default = 0,
		Fraction = 2,
		Parent = UiTbl.killauraCb
	}, function(val)
		Settings.SwingDelay = val
		return "Swing delay: " .. val .. "s"
	end, "SwingDelay")
	
	UiTbl.combatGroup:CheckBox("God Mode (Mobs)", function(bool)
		Settings.GodMode = bool
	end, "GodMode")
	
	UiTbl.mechanicsGroup:CheckBox("Inf Stamina", function(bool)
		Settings.InfStamina = bool
	end, "InfStamina")
	
	UiTbl.mechanicsGroup:CheckBox("Auto Pickup", function(bool)
		Settings.AutoPickup = bool
		if bool and itemsFolder then
			while Settings.AutoPickup do
				wait(0.1)
				for i,v in pairs(itemsFolder:GetChildren()) do
					PickUp(v)
				end
			end
		end
	end, "AutoPickup")

	UiTbl.mechanicsGroup:CheckBox("Auto Fish", function(bool)
		Settings.AutoFish = bool
	end, "AutoFish")

	UiTbl.mechanicsGroup:CheckBox("No Damage Indicators", function(bool)
		Settings.DamageIndicators = bool
	end, "DamageIndicators")

	local oldAmbient
	UiTbl.mechanicsGroup:CheckBox("Fullbright", function(bool)
		Settings.Fullbright = bool

		if not oldAmbient then
			oldAmbient = game.Lighting.Ambient
		end
		game.Lighting.Ambient = bool and Color3.new(1,1,1) or oldAmbient
	end, "Fullbright")

	local oldFog
	UiTbl.mechanicsGroup:CheckBox("No Fog", function(bool)
		Settings.Fullbright = bool

		if not oldFog then
			oldFog = game.Lighting.FogEnd
		end
		game.Lighting.FogEnd = bool and 9e9 or oldFog
	end, "NoFog")
	
	UiTbl.flyCb = UiTbl.mechanicsGroup:CheckBox("Fly", function(bool)
		Settings.Fly = bool
		
		--Reset externalVelocity, thank you Vesteria devs for leaving one function non-localized--
		local func = getsenv(plr.PlayerScripts.repo.controlScript).perform_forceJump
		for i,v in pairs(getupvalues(func)) do --affected by luau function inlining
			if typeof(v) == "Vector3" then
				setupvalue(func, i, Vector3.new())
				break
			end
		end
	end)
	UiTbl.flyCb:Keybind(Enum.KeyCode.F, "Fly")
	UiTbl.mechanicsGroup:Slider({
		Min = 0,
		Max = 300,
		Default = 40,
		Parent = UiTbl.flyCb
	}, function(val)
		Settings.FlySpeed = val
		return "Speed: " .. val
	end, "FlySpeed")

	UiTbl.staffAlert:CheckBox("Notification", function(bool)
		Settings.StaffAlertNotify = bool
	end, "StaffAlertNotify").Click()

	UiTbl.staffAlert:CheckBox("Kick", function(bool)
		Settings.StaffAlertKick = bool
	end, "StaffAlertKick")
	
	UiTbl.tpG = NewUI:Tab("Teleports")
	UiTbl.locationsGroup = UiTbl.tpG:Group("Locations")

	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	UiTbl.espFilterGroup = UiTbl.espGui:Group("ESP Mobs Filter")
	
	local bossMobs = {
		["Scarab"] = true,
		["Auktufiti the Watcher"] = true,
		["Sarakis the Impaler"] = true,
		["Azariah the Blood-crazed"] = true,
	}

	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.T, "ESP")
	
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 3000,
		Default = 1000,
		Parent = UiTbl.espGroup:CheckBox("Show Mobs", function(bool)
			ESP.Mobs = bool
		end, "ESPMobs")
	}, function(val)
		ESP.MobsDistance = val
		return "Max Distance: " .. val
	end, "ESPMobsDistance")
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 3000,
		Default = 1000,
		Parent = UiTbl.espGroup:CheckBox("Show Chests", function(bool)
			ESP.Chests = bool
		end, "ESPChests")
	}, function(val)
		ESP.ChestsDistance = val
		return "Max Distance: " .. val
	end, "ESPChestsDistance")
	UiTbl.espGroup:CheckBox("Show Players", function(bool)
		ESP.Players = bool
	end, "ESPTogglePlayers").Click()
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")
	
	Enter.Visible = false
	
	--actual stuff--
	local loadCount = 0
	while not (hashes.playerRequest_damageEntity and hashes.pickUpItemRequest and LocalGodTable) do
		for i,v in pairs(getgc(true)) do
			if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
				local consts = getconstants(v)
	
				if not hashes.playerRequest_damageEntity and consts[1] == "table" and consts[2] == "remove" and consts[4] == "insert" and consts[7] == "fireServer" then
					hashes.playerRequest_damageEntity = consts[6]
				end
				if not hashes.pickUpItemRequest and FIT(consts, "Pick-up failed: ") then
					local num = FIT(consts, "item")
					hashes.pickUpItemRequest = consts[num + 1]
				end
	
				if hashes.playerRequest_damageEntity and hashes.pickUpItemRequest and LocalGodTable then
					break
				end
			elseif not LocalGodTable and type(v) == "table" and rawget(v, "HasFinished") ~= nil then
				LocalGodTable = v
			end
		end
		if not (hashes.playerRequest_damageEntity and hashes.pickUpItemRequest and LocalGodTable) then
			loadCount = loadCount + 1
			KeyTB.Text = "Waiting for modules (" .. loadCount .. ")..."
			wait(1)
		end
	end

	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)

	animationInterface = require(plr.PlayerScripts:WaitForChild("repo"):WaitForChild("animationInterface"))
	
	--Prevent the animation from setting the debounce & No Mobs Damage--
	do
		local gc = getgc()
		for i = 1, #gc do
			local fn = gc[i]
			if type(fn) == 'function' and getinfo(fn).name == 'flagPlayer' then
				debugwarn('Hooking flagPlayer function')
				hookfunction(fn, function(first)
					plr:Kick('[KiriotHub] Stopped detection. Code: ' .. tostring(first))
				end)
			end
		end
		network = require(game:GetService("ReplicatedStorage").modules.network)
		local gameClient = plr.PlayerScripts:waitForChild('client')
		local function safeCall(f, ...)
			-- Required bypass for the game's callcheck
			-- The hub can directly (network:fireServer) or indirectly (animationInterface:replicateClientAnimationSequence, which fires network:fireServer) 
			-- Link to anticheat script: https://paste.sh/wS_ZzmUd#fZxFTidK2t2J8E4orPA8qPIV
			-- Hidden by GC'ing a script from ReplicatedFirst
			setscriptes(gameClient)
			local results = { pcall(f, ...) }
			setscriptes(nil)
			table.remove(results, 1)
			return unpack(results)
		end

		network = require(game:GetService("ReplicatedStorage").modules.network)

		local oldFireServer = network.fireServer
		network.fireServer = function(self, ...)
			local args = { ... }
			if checkcaller() then
				return safeCall(oldFireServer, self, ...)
			end

			if Settings.GodMode then
				if args[1] == "playerRequest_damageEntity" and args[4] == "monster" then 
					return 
				end

				-- Explanation of why this is also needed:
				-- Some monster's attacks call network:fire("requestEntityDamageDealt") which adds their attack to the 
				-- "playerRequest_damageEntity_batch" queue instead of a direct fireServer call with "playerRequest_damageEntity"

				if args[1] == 'playerRequest_damageEntity_batch' and type(args[2]) == 'table' then
					local batch = args[2]
					for i = #batch, 1, -1 do
						local atk = batch[i]
						if type(atk) == 'table' and FIT(atk, "monster") then
							table.remove(batch, i) --TODO: don't send the entire thing at all if length is 0 after removal?
						end
					end
				end
			end

			return oldFireServer(self, ...)
		end

		--[[local oldInvokeServer = network.invokeServer
		network.invokeServer = function(self, ...)
			local args = {...}
			if checkcaller() then 
				return safeCall(oldInvokeServer, self, unpack(args))
			end

			return oldInvokeServer(self, unpack(args))
		end]]

		--Killaura lag fix--
		local lastPropagation = tick() - 2
		local lastData

		local oldFire = network.fire
		network.fire = function(...)
			local args = {...}
			if checkcaller() then 
				return safeCall(oldFire, ...)
			end

			if args[2] == "propogationRequestToSelf" and args[3] == "nonSerializeData" and not isSnitch then
				if tick() - lastPropagation <= (Settings.Killaura and 1 or 0.3) then
					lastData = args
					return
				end
				lastData = nil
				lastPropagation = tick()
			end
			return oldFire(...)
		end

		task.spawn(function()
			while true do
				if lastData and tick() - lastPropagation > 1.5 then
					debugwarn("poop")
					safeCall(oldFire, unpack(lastData))
					lastData = nil
				end
				task.wait(1)
			end
		end)
	end
	
	--Hooks--
	do
		--Inf Stamina & BodyGyro override--
		local old = {}
		old[1] = hookmetamethod(game, "__index", loadstring([[
			local old, plr, Settings = ...
			
			return function(self, i)
				if i == "Value" and Settings.InfStamina and old[1](self, "Name") == "stamina" and old[1](self, "Parent") and old[1](old[1](self, "Parent"), "Parent") == old[1](plr, "Character") then
					return 69
				end
				return old[1](self, i)
			end
		]])(old, plr, Settings))
		
		if not isSnitch then
			old[2] = hookmetamethod(game, "__newindex", loadstring([[
				local old, Settings = ...
				
				return function(self,i,v)
					if Settings.BodyGyroOverride and Settings.BodyGyroOverride[self] and not checkcaller() then
						return
					end
					return old[2](self,i,v)
				end
			]])(old, Settings))
		end
	end
	
	--Killaura--
	do
		local range = 20
		entityManifestCollection = workspace:WaitForChild(KH_CONSTANT("placeFolders")):WaitForChild("entityManifestCollection")
		GetMobs = function()
			if not plr.Character or not plr.Character.PrimaryPart then
				return {}
			end

			local t = {}
			for i,v in pairs(entityManifestCollection:GetChildren()) do
				local type = v:FindFirstChild("entityType")
				if type and type.Value == "monster" then
					local root = v.ClassName == "Part" and v or v:FindFirstChildWhichIsA("BasePart", true)
					if root and (root.Position - plr.Character.PrimaryPart.Position).magnitude < range then
						t[#t + 1] = v
					end
				end
			end
			return t
		end
	end
	
	--Teleports--
	coroutine.wrap(function()
		local list = {}
		for i,v in pairs(workspace:GetChildren()) do
			if v.ClassName == "Part" and v:FindFirstChild("teleportDestination") and v:FindFirstChild("TouchInterest") then
				local placeId = v[KH_CONSTANT("teleportDestination")].Value
				list[#list + 1] = {Part = v, Id = placeId}
			end
		end
		
		for i,v in pairs(list) do
			local placeName = game:GetService("MarketplaceService"):GetProductInfo(v.Id).Name
			
			UiTbl.locationsGroup:Button(placeName, function()
				network:invokeServer("playerRequest_useTeleporter", v.Part)
			end)
		end
	end)()

	-- Flight rewrite
	task.spawn(function()
		local FlyCF = nil
		while true do
			local dt = task.wait()
			if Settings.Fly and plr.Character and plr.Character.PrimaryPart then
				local root = plr.Character.PrimaryPart
				if FlyCF == nil then
					FlyCF = CFrame.new(root.CFrame.p)
				end
				local mouse = plr:GetMouse()
				local speed = Settings.FlySpeed
				local targetCf = workspace.CurrentCamera.CFrame
				local force = Vector3.zero
				local keys = {
					[Enum.KeyCode.W] = targetCf.lookVector   * speed,
					[Enum.KeyCode.S] = -targetCf.lookVector  * speed,
					[Enum.KeyCode.A] = -targetCf.rightVector * speed,
					[Enum.KeyCode.D] = targetCf.rightVector  * speed,
					[Enum.KeyCode.Space] = targetCf.upVector * speed,
					[Enum.KeyCode.LeftControl] = -targetCf.upVector * speed,
				}
				for key, shift in next, keys do
					if game.UserInputService:IsKeyDown(key) then
						force = force + shift
					end
				end
				force = force * dt
				FlyCF = FlyCF * CFrame.new(force)
				local goal = CFrame.lookAt(FlyCF.p, targetCf.p + (targetCf.lookVector * 10000))
				if isSnitch then
					goal = CFrame.new(0/0, 0/0, 0/0)
				end
				root.Velocity = Vector3.zero
				root.CFrame = goal
				local grounder = root:findFirstChild('grounder')
				local hitboxGyro = root:findFirstChild('hitboxGyro')
				local hitboxVelocity = root:findFirstChild('hitboxVelocity')
				if grounder then 
					grounder.Position = goal.p
				end
				if hitboxGyro then
					hitboxGyro.CFrame = goal
				end
				if hitboxVelocity then
					hitboxVelocity.Velocity = Vector3.zero
					hitboxVelocity.MaxForce = Vector3.zero
				end
			else
				FlyCF = nil
			end
		end
	end)


	--Mobs--
	local RefreshMobsFilter
	coroutine.wrap(function()
		local sf = UiTbl.espFilterGroup:List({
			Height = 195
		})
		local lookup = game.ReplicatedStorage:WaitForChild("monsterLookup")
		local init = false
		RefreshMobsFilter = function()
			init = true
			sf:Clear()
			local list = lookup:GetChildren()
			table.sort(list, function(a,b)
				return a.Name:lower() < b.Name:lower()
			end)
			for i,v in pairs(list) do
				--add to bosses list while at it--
				local data = require(v)
				if data.boss then
					bossMobs[v.Name] = true
				end

				--handle the rest--
				local btn
				btn = sf:Button(v.Name, function()
					if Settings.ESPMobsFilter[v.Name] == nil then
						Settings.ESPMobsFilter[v.Name] = true
						btn:SetButtonColor(Color3.fromRGB(200,0,0))
					else
						Settings.ESPMobsFilter[v.Name] = nil
						btn:SetButtonColor(Color3.fromRGB(255, 170, 0))
					end
					NewLib:RaiseGlobalClickEvent()
				end)
				if Settings.ESPMobsFilter[v.Name] then
					btn:SetButtonColor(Color3.fromRGB(200,0,0))
				end
			end
		end
		lookup.ChildAdded:Connect(function()
			if init then
				RefreshMobsFilter()
			end
		end)
	end)()
	
	--Auto Pickup--
	do
		local debounce = {}

		local range = 20
		PickUp = function(c)
			if not Settings.AutoPickup or not plr.Character or not plr.Character.PrimaryPart then
				return
			end
			if c:FindFirstChild("owners") and (c.owners:FindFirstChild(tostring(plr.UserId)) or #c.owners:GetChildren() == 0) or not c:FindFirstChild("owners") then
				if not debounce[c] or tick() - debounce[c] > 0.5 then
					if (plr.Character.PrimaryPart.Position - c.Position).magnitude < range then
						debounce[c] = tick()
						network:invokeServer(hashes.pickUpItemRequest, c)
					else
						local bp = c:FindFirstChild("BodyPosition")
						if not bp then
							bp = Instance.new("BodyPosition", c)
							bp.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
							bp.Position = plr.Character.PrimaryPart.Position
						end
					end
				end
			end
		end
		
		itemsFolder = workspace.placeFolders.items
	end

	--Removing Damage Indicators--
	do
		if not isSnitch then
			local old = {}
			old[1] = hookmetamethod(game, "__namecall", loadstring([[
				local old, Settings = ...
				return function(self, ...)
					if Settings.DamageIndicators and self.Name == "damageIndicator" and getnamecallmethod() == "Clone" then
						return Instance.new("BindableEvent").Event:Wait()
					end
					return old[1](self, ...)
				end
			]])(old, Settings))
		end
	end

	--Auto Fishing--
	do
		if not isSnitch then
			local lastFishingPos

			local old = animationInterface[replicatePlayerAnimationSequence]
			animationInterface[replicatePlayerAnimationSequence] = function(...)
				local args = {...}
				if args[2] == "fishingrodAnimations" and args[3] == "cast-line" then --fishing-rod function attack
					lastFishingPos = args[5]
				end
				return old(...)
			end
			network:connect("signal_fishingBobBobbed", "OnClientEvent", function()
				if Settings.AutoFish then
					wait(.5)
					animationInterface:replicateClientAnimationSequence("fishingrodAnimations", "reel-line")
					wait(2)
					animationInterface:replicateClientAnimationSequence("fishingrodAnimations", "cast-line", nil, lastFishingPos)
					network:invoke("setCharacterArrested", true)
					network:invoke("setCharacterMovementState", "isFishing", true)
				end
			end)
		end
	end

	--Fullbright, No Fog--
	game.Lighting:GetPropertyChangedSignal("Ambient"):Connect(function()
		if Settings.Fullbright then
			game.Lighting.Ambient = Color3.new(1,1,1)
		end
	end)
	game.Lighting:GetPropertyChangedSignal("FogEnd"):Connect(function()
		if Settings.NoFog then
			game.Lighting.FogEnd = 9e9
		end
	end)

	--Staff Alert--
	spawn(function()
		local ranks = {"Tester", "Gamemaster", "Former Developer", "Developer", "Director", "Founder"}
		local function PlrAdded(p)
			local rank = p:GetRoleInGroup(4238824)
			if table.find(ranks, rank) then
				if Settings.StaffAlertNotify then
					for i=1,3 do
						network:fire("alert", {
							text = "[KiriotHub] Staff alert: " .. p.Name .. " is a " .. rank, 
							textColor3 = Color3.new(1,1,1), 
							backgroundColor3 = Color3.fromRGB(255, 127, 0), 
							backgroundTransparency = 0, 
							textStrokeTransparency = 1, 
							font = Enum.Font.SourceSansBold
						}, 8, "giantEnemySpawned")
					end
				end
				if Settings.StaffAlertKick then
					local time = os.date("*t")
					time.min = time.min < 10 and "0" .. time.min or time.min
					plr:Kick("\n[KiriotHub] Game staff joined: " .. p.Name .. "\nRank: " .. rank .. "\nAt " .. time.hour .. ":" .. time.min)
					network:fire("alert", {
						text = "[KiriotHub] Kicked because game staff joined: " .. p.Name .. ", Rank: " .. rank .. ", at " .. time.hour .. ":" .. time.min, 
						textColor3 = Color3.new(1,1,1), 
						backgroundColor3 = Color3.fromRGB(255, 0, 0), 
						backgroundTransparency = 0, 
						textStrokeTransparency = 1, 
						font = Enum.Font.SourceSansBold
					}, 9e9, "giantEnemySpawned")
				end
			end
		end
		repeat wait() until Settings.StaffAlertKick ~= nil
		game:GetService("Players").PlayerAdded:Connect(PlrAdded)
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			PlrAdded(v)
		end
	end)

	--ESP--
	ESP:AddObjectListener(entityManifestCollection, {
		Type = "Part",
		Validator = function(obj)
			return obj:WaitForChild("entityType", 5) and obj.entityType.Value == "monster" and obj:WaitForChild("state", 5) and obj.state.Value ~= "dead" and not (obj:FindFirstChild("isDamageImmune") and obj.isDamageImmune.Value == true)
		end,
		CustomName = function(obj)
			return obj:FindFirstChild("specialName") and obj.specialName.Value or obj.Name
		end,
		Color = function(obj)
			local name = obj:FindFirstChild("specialName") and obj.specialName.Value or obj.Name
			local color = Color3.fromRGB(62, 139, 255)

			if bossMobs[name] then
				color = Color3.fromRGB(200,0,0)
			elseif obj:FindFirstChild("giantEnemySmoke") then
				color = Color3.fromRGB(0,255,0)
			end
			return color
		end,
		IsEnabled = function(box)
			if not ESP.Mobs then
				return false
			end
			if Settings.ESPMobsFilter[box.Object.Name] then
				local specialName = box.Object:FindFirstChild("specialName")
				if not (specialName and bossMobs[specialName.Value] or box.Object:FindFirstChild("giantEnemySmoke")) then
					return false
				end
			end
			if (box.PrimaryPart.Position - workspace.CurrentCamera.CFrame.p).magnitude > ESP.MobsDistance then
				return false
			end
			return true
		end,
		OnAdded = function(box)
			box.Object.state.Changed:Connect(function(val)
				if val == "dead" then
					box:Remove()
				end
			end)
		end
	})

	coroutine.wrap(function()
		local tbl = {
			Type = "Model",
			Color = Color3.fromRGB(161, 104, 100),
			PrimaryPart = "RootPart",
			Validator = function(obj)
				return obj:FindFirstChild("chestLevel") and obj:WaitForChild("defaultChest", 5) and obj.defaultChest:WaitForChild("Top", 5) and obj.defaultChest:WaitForChild("Bottom", 5)
			end,
			CustomName = function(obj)
				return "Chest" -- lvl " .. obj.chestLevel.Value
			end,
			IsEnabled = function(box)
				if not ESP.Chests then
					return false
				end
				if (box.PrimaryPart.Position - workspace.CurrentCamera.CFrame.p).magnitude > ESP.ChestsDistance then
					return false
				end

				--checking if open--
				if box.Object.defaultChest.Top.Orientation.X ~= box.Object.defaultChest.Bottom.Orientation.X or box.Object.defaultChest.Top.Orientation.Z ~= box.Object.defaultChest.Bottom.Orientation.Z then
					return false
				end
				return true
			end
		}
		ESP:AddObjectListener(workspace, tbl)
		
		local chests = workspace:WaitForChild("Chests", 999)
		if chests then
			ESP:AddObjectListener(chests, tbl)
		end
	end)()

	--Anti Afk--
	do
		local VirtualUser = game:GetService("VirtualUser")
		plr.Idled:Connect(function()
			VirtualUser:CaptureController()
			VirtualUser:ClickButton2(Vector2.new())
		end)
	end

	--Lag on purpose--
	if isSnitch then
		spawn(function()
			local diff = 1/30
			while true do
				local t = tick()
				while tick() - t < diff do end
				wait()
			end
		end)
	end
	
	--Saving Settings--
	Settings.ESPMobsFilter = LoadSettings(GameName) or {}
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName, Settings.ESPMobsFilter)
	end)

	RefreshMobsFilter()
elseif GameName == "Adventure Up" then (function() IB_INLINING_START(true)
	local Settings = {
		Killaura = false,
		Autofarm = false,
		Dungeon = "Crystal Caverns",
		DungeonTransl = {
			--[[["Crystal Caverns"] = 1,
			["Skylands"] = 2,
			["Royal Hall"] = 3]]
		},
		Difficulty = "Normal",
		DifficultyTransl = {
			["Normal"] = 1,
			["Heroic"] = 2,
			["Mythic"] = 3,
			["Maxed"] = 4
		},
		AutoReturn = true,
		AutoRejoin = true,
		AutoSell = false,
		CutTrees = false,
		MineOres = false,
		CollectFlowers = false,
		TravelMethod = "Teleport",
		AutoSellSettings = {
			Tier6 = false,
			Tier5 = false,
			Tier4 = false,
			Tier3 = false,
			Tier2 = false,
			Tier1 = false,
			BelowMyLevel = false,
			BelowGearLevel = false,
			Gems = false
		},
		AutoCombine = false,
		AutoCombineMax = 3,
		AutofarmSpeed = 20,
		WalkSpeed = false,
		WalkSpeedVal = 20,
		ExtraData = {
			AutoCraftList = {},
			AutoPotList = {},
		},
		NoCollisions = true
	}

	local Resources = {
		Data = game:GetService("HttpService"):JSONDecode([=[{"Dungeons":{"6":{"PlayersMax":5,"ImageOffset":null,"LoadingImageSmall":"","Name":"Cool Place!","Image":"","LevelMax":42,"LoadingImageRight":"","Available":false,"Audio":{"Boss":-1,"Ambience":-1,"Music":-1},"PlaceId":3416484751,"LevelMin":32,"LoadingImageLeft":"","Number":6,"ImageSize":null,"PlayersMin":2},"4":{"PlayersMax":6,"ImageOffset":null,"LoadingImageSmall":"rbxassetid://4425418168","Name":"Tomb of Ancients","Image":"rbxassetid://4849503378","LevelMax":34,"LoadingImageRight":"rbxassetid://4425417906","Available":true,"Audio":{"Boss":"Dungeons/4 - Tomb of Ancients/Boss","Ambience":"Dungeons/4 - Tomb of Ancients/Ambience","Music":"Dungeons/4 - Tomb of Ancients/Music"},"PlaceId":3598232959,"LevelMin":24,"LoadingImageLeft":"rbxassetid://4425417517","Number":4,"ImageSize":null,"PlayersMin":2},"5":{"PlayersMax":6,"ImageOffset":null,"LoadingImageSmall":"rbxassetid://4849510733","Name":"Mount Ashea","Image":"rbxassetid://4849503378","LevelMax":42,"LoadingImageRight":"rbxassetid://4849510610","Available":true,"Audio":{"Boss":"Dungeons/5 - Mount Ashea/Boss","Ambience":"Dungeons/5 - Mount Ashea/Ambience","Music":"Dungeons/5 - Mount Ashea/Music"},"PlaceId":4142858848,"LevelMin":32,"LoadingImageLeft":"rbxassetid://4849510411","Number":5,"ImageSize":null,"PlayersMin":2},"2":{"PlayersMax":6,"ImageOffset":null,"LoadingImageSmall":"rbxassetid://4425416066","Name":"Skylands","Image":"rbxassetid://4849503378","LevelMax":18,"LoadingImageRight":"rbxassetid://4425415829","Available":true,"Audio":{"Boss":"Dungeons/2 - Skylands/Boss","Ambience":"Dungeons/2 - Skylands/Ambience","Music":"Dungeons/2 - Skylands/Music"},"PlaceId":3300980249,"LevelMin":8,"LoadingImageLeft":"rbxassetid://4425415443","Number":2,"ImageSize":null,"PlayersMin":2},"3":{"PlayersMax":6,"ImageOffset":null,"LoadingImageSmall":"rbxassetid://4425417108","Name":"Royal Hall","Image":"rbxassetid://4849503378","LevelMax":26,"LoadingImageRight":"rbxassetid://4425416845","Available":true,"Audio":{"Boss":"Dungeons/3 - Royal Hall/Boss","Ambience":"Dungeons/3 - Royal Hall/Ambience","Music":"Dungeons/3 - Royal Hall/Music"},"PlaceId":3244983644,"LevelMin":16,"LoadingImageLeft":"rbxassetid://4425416473","Number":3,"ImageSize":null,"PlayersMin":2},"1":{"PlayersMax":6,"ImageOffset":null,"LoadingImageSmall":"rbxassetid://4425415055","Name":"Crystal Caverns","Image":"rbxassetid://4849503378","LevelMax":10,"LoadingImageRight":"rbxassetid://4425414732","Available":true,"Audio":{"Boss":"Dungeons/1 - Crystal Caverns/Boss","Ambience":"Dungeons/1 - Crystal Caverns/Ambience","Music":"Dungeons/1 - Crystal Caverns/Music"},"PlaceId":3214306383,"LevelMin":0,"LoadingImageLeft":"rbxassetid://4425414296","Number":1,"ImageSize":null,"PlayersMin":2}},"Explores":{"6":{"LoadingImageSmall":"rbxassetid://4425398091","LevelMax":50,"LoadingImageRight":"rbxassetid://4425397847","Name":"Elder's Ridge","Image":"rbxassetid://4849503565","Available":true,"Audio":{"Music":"Explores/6 - Elders Ridge/Music","Ambience":"Explores/6 - Elders Ridge/Ambience"},"LoadingImageLeft":"rbxassetid://4425397466","Number":6,"PlaceId":3422254926,"LevelMin":40,"ImageSize":null,"ImageOffset":null},"7":{"LoadingImageSmall":"rbxassetid://4849511664","LevelMax":58,"LoadingImageRight":"rbxassetid://4849511527","Name":"Mystic Falls","Image":"rbxassetid://4849503565","Available":true,"Audio":{"Music":"Explores/7 - Mystic Falls/Music","Ambience":"Explores/7 - Mystic Falls/Ambience"},"LoadingImageLeft":"rbxassetid://4849511296","Number":7,"PlaceId":4490601563,"LevelMin":48,"ImageSize":null,"ImageOffset":null},"4":{"LoadingImageSmall":"rbxassetid://4425396102","LevelMax":34,"LoadingImageRight":"rbxassetid://4425395837","Name":"Icy Peak","Image":"rbxassetid://4849503565","Available":true,"Audio":{"Music":"Explores/4 - Icy Peak/Music","Ambience":"Explores/4 - Icy Peak/Ambience"},"LoadingImageLeft":"rbxassetid://4425395434","Number":4,"PlaceId":3300988881,"LevelMin":24,"ImageSize":null,"ImageOffset":null},"5":{"LoadingImageSmall":"rbxassetid://4425397073","LevelMax":42,"LoadingImageRight":"rbxassetid://4425396818","Name":"Moai Shores","Image":"rbxassetid://4849503565","Available":true,"Audio":{"Music":"Explores/5 - Moai Shores/Music","Ambience":"Explores/5 - Moai Shores/Ambience"},"LoadingImageLeft":"rbxassetid://4425396494","Number":5,"PlaceId":3409678003,"LevelMin":32,"ImageSize":null,"ImageOffset":null},"2":{"LoadingImageSmall":"rbxassetid://4425393999","LevelMax":18,"LoadingImageRight":"rbxassetid://4425393756","Name":"Lost Ruins","Image":"rbxassetid://4849503565","Available":true,"Audio":{"Music":"Explores/2 - Lost Ruins/Music","Ambience":"Explores/2 - Lost Ruins/Ambience"},"LoadingImageLeft":"rbxassetid://4425393379","Number":2,"PlaceId":3244985257,"LevelMin":8,"ImageSize":null,"ImageOffset":null},"3":{"LoadingImageSmall":"rbxassetid://4425395042","LevelMax":26,"LoadingImageRight":"rbxassetid://4425394758","Name":"Mysterious Marsh","Image":"rbxassetid://4849503565","Available":true,"Audio":{"Music":"Explores/3 - Mysterious Marsh/Music","Ambience":"Explores/3 - Mysterious Marsh/Ambience"},"LoadingImageLeft":"rbxassetid://4425394381","Number":3,"PlaceId":3253821504,"LevelMin":16,"ImageSize":null,"ImageOffset":null},"0":{"LoadingImageSmall":"rbxassetid://4425399069","LevelMax":-1,"LoadingImageRight":"rbxassetid://4425398789","Available":true,"Name":"Lobby","Image":"rbxassetid://4849503565","LoadingImageLeft":"rbxassetid://4425399940","Number":0,"PlaceId":3194820651,"LevelMin":-1,"ImageSize":null,"ImageOffset":null},"1":{"LoadingImageSmall":"rbxassetid://4425393012","LevelMax":10,"LoadingImageRight":"rbxassetid://4425392750","Name":"Pleasant Valley","Image":"rbxassetid://4849503565","Available":true,"Audio":{"Music":"Explores/1 - Pleasant Valley/Music","Ambience":"Explores/1 - Pleasant Valley/Ambience"},"LoadingImageLeft":"rbxassetid://4425392380","Number":1,"PlaceId":3241297377,"LevelMin":0,"ImageSize":null,"ImageOffset":null}},"Currency":{"Diamonds":[{"Product":666825375,"Bonus":0,"Cost":25,"Amount":50,"ImageSize":null,"Image":"rbxassetid://3645945331","ImageOffset":null},{"Product":666825729,"Bonus":25,"Cost":100,"Amount":250,"ImageSize":null,"Image":"rbxassetid://3645945331","ImageOffset":null},{"Product":666825972,"Bonus":50,"Cost":800,"Amount":2400,"ImageSize":null,"Image":"rbxassetid://3645945331","ImageOffset":null},{"Product":666826226,"Bonus":100,"Cost":2500,"Amount":10000,"ImageSize":null,"Image":"rbxassetid://3645945331","ImageOffset":null}],"Gold":[{"Product":0,"Bonus":0,"Cost":15,"Amount":75,"ImageSize":null,"Image":"rbxassetid://3645944933","ImageOffset":null},{"Product":0,"Bonus":20,"Cost":75,"Amount":450,"ImageSize":null,"Image":"rbxassetid://3645944933","ImageOffset":null},{"Product":0,"Bonus":35,"Cost":250,"Amount":1700,"ImageSize":null,"Image":"rbxassetid://3645944933","ImageOffset":null},{"Product":0,"Bonus":50,"Cost":1000,"Amount":7500,"ImageSize":null,"Image":"rbxassetid://3645944933","ImageOffset":null}]},"Professions":{"Mining":{"Level":1,"CallbackExperience":"GetRequiredExperienceMining","ImageOffset":null,"LevelMax":60,"Items":[],"Image":"rbxassetid://4631336808","ExperienceMax":500,"StatLevel":"MiningLevel","CallbackMaxLevel":"GetMaxLevelMining","Name":"Mining","Experience":0,"StatExperience":"MiningExperience","ImageSize":null,"Enabled":true},"Fishing":{"CallbackExperience":"GetRequiredExperienceFishing","ImageOffset":null,"Image":"rbxassetid://4631336808","StatLevel":"FishingLevel","Name":"Fishing","CallbackMaxLevel":"GetMaxLevelFishing","StatExperience":"FishingExperience","ImageSize":null,"Enabled":false},"Alchemy":{"Level":1,"CallbackExperience":"GetRequiredExperienceAlchemy","ImageOffset":null,"LevelMax":60,"Items":[{"RarityMax":1,"GoldValue":25,"Recipe":{"ValleyFlower":2},"ConsumableLevel":1,"Description":"Gives you 4% extra Max Health for 5 minutes","Rarity":1,"Experience":150,"RarityMin":1,"Name":"TinyMaxHealthPotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Max Health Potion","Level":1,"Category":"Pleasant Valley","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":1,"GoldValue":35,"Recipe":{"ValleyFlower":3},"ConsumableLevel":1,"Description":"Gives you 2% extra Attack Damage for 5 minutes","Rarity":1,"Experience":600,"RarityMin":1,"Name":"TinyAttackDamagePotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Attack Damage Potion","Level":2,"Category":"Pleasant Valley","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":1,"GoldValue":50,"Recipe":{"ValleyFlower":4},"ConsumableLevel":1,"Description":"Gives you 5% extra Hit for 5 minutes","Rarity":1,"Experience":1200,"RarityMin":1,"Name":"TinyHitPotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Hit Potion","Level":4,"Category":"Pleasant Valley","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":1,"GoldValue":100,"Recipe":{"ValleyFlower":2,"RedBerries":4},"ConsumableLevel":1,"Description":"Gives you 5% extra Dodge for 5 minutes","Rarity":1,"Experience":2400,"RarityMin":1,"Name":"TinyDodgePotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Dodge Potion","Level":6,"Category":"Pleasant Valley","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":1,"GoldValue":130,"Recipe":{"ValleyFlower":3,"RedBerries":5},"ConsumableLevel":1,"Description":"Increases your Attack Speed by 5% for 5 minutes","Rarity":1,"Experience":4050,"RarityMin":1,"Name":"TinyAttackSpeedPotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Attack Speed Potion","Level":8,"Category":"Pleasant Valley","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":1,"GoldValue":50,"Recipe":{"AncientSunflower":2},"ConsumableLevel":1,"Description":"Increases healing done by 5% for 5 minutes","Rarity":1,"Experience":1200,"RarityMin":1,"Name":"TinyHealingPotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Healing Potion","Level":8,"Category":"Lost Ruins","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":70,"Recipe":{"AncientSunflower":3},"ConsumableLevel":10,"Description":"Gives you 10% extra Hit for 10 minutes","Rarity":2,"Experience":2400,"RarityMin":2,"Name":"LesserHitPotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Hit Potion","Level":10,"Category":"Lost Ruins","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":1,"GoldValue":160,"Recipe":{"ValleyFlower":4,"RedBerries":6},"ConsumableLevel":1,"Description":"Gives you 5% extra Experience gained from monsters & dungeons for 5 minutes","Rarity":1,"Experience":6600,"RarityMin":1,"Name":"TinyExperiencePotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Experience Potion","Level":10,"Category":"Pleasant Valley","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":100,"Recipe":{"AncientSunflower":4},"ConsumableLevel":10,"Description":"Gives you 10% extra Dodge for 10 minutes","Rarity":2,"Experience":3750,"RarityMin":2,"Name":"LesserDodgePotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Dodge Potion","Level":12,"Category":"Lost Ruins","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":1,"GoldValue":200,"Recipe":{"RunicStone":4,"AncientSunflower":2},"ConsumableLevel":1,"Description":"Gives you 4% extra Crit Power for 5 minutes","Rarity":1,"Experience":6600,"RarityMin":1,"Name":"TinyCritPowerPotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Crit Power Potion","Level":14,"Category":"Lost Ruins","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":105,"Recipe":{"BogStems":2},"ConsumableLevel":10,"Description":"Gives you 4% extra Attack Damage for 10 minutes","Rarity":2,"Experience":3000,"RarityMin":2,"Name":"LesserAttackDamagePotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Attack Damage Potion","Level":16,"Category":"Mysterious Marsh","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":1,"GoldValue":250,"Recipe":{"RunicStone":5,"AncientSunflower":3},"ConsumableLevel":1,"Description":"Gives you 1 extra Walkspeed for 5 minutes","Rarity":1,"Experience":9900,"RarityMin":1,"Name":"TinyWalkspeedPotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Walkspeed Potion","Level":16,"Category":"Lost Ruins","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":310,"Recipe":{"RunicStone":6,"AncientSunflower":4},"ConsumableLevel":10,"Description":"Gives you 8% extra Experience gained from monsters & dungeons for 10 minutes","Rarity":2,"Experience":13200,"RarityMin":2,"Name":"LesserExperiencePotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Experience Potion","Level":18,"Category":"Lost Ruins","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":1,"GoldValue":160,"Recipe":{"BogStems":3},"ConsumableLevel":1,"Description":"Gives you 10% extra Health Regeneration for 5 minutes","Rarity":1,"Experience":4800,"RarityMin":1,"Name":"TinyRegenerationPotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Regeneration Potion","Level":18,"Category":"Mysterious Marsh","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":210,"Recipe":{"BogStems":4},"ConsumableLevel":10,"Description":"Gives you 8% extra Max Health for 10 minutes","Rarity":2,"Experience":6750,"RarityMin":2,"Name":"LesserMaxHealthPotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Max Health Potion","Level":20,"Category":"Mysterious Marsh","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":420,"Recipe":{"PoisonBerries":4,"BogStems":2},"ConsumableLevel":10,"Description":"Gives you 10% extra Attack Speed for 10 minutes","Rarity":2,"Experience":10500,"RarityMin":2,"Name":"LesserAttackSpeedPotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Attack Speed Potion","Level":22,"Category":"Mysterious Marsh","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":280,"Recipe":{"FrostyRoot":3},"ConsumableLevel":10,"Description":"Increases healing done by 12% for 10 minutes","Rarity":2,"Experience":5250,"RarityMin":2,"Name":"LesserHealingPotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Healing Potion","Level":24,"Category":"Icy Peak","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":1,"GoldValue":550,"Recipe":{"PoisonBerries":5,"BogStems":3},"ConsumableLevel":1,"Description":"Gives you 4% extra Gold gained from monsters & dungeons for 5 minutes","Rarity":1,"Experience":14250,"RarityMin":1,"Name":"TinyGoldPotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Gold Potion","Level":24,"Category":"Mysterious Marsh","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":3,"GoldValue":680,"Recipe":{"PoisonBerries":6,"BogStems":4},"ConsumableLevel":20,"Description":"Gives you 10% extra Experience gained from monsters & dungeons for 15 minutes","Rarity":3,"Experience":18750,"RarityMin":3,"Name":"MajorExperiencePotion","Consumable":true,"Sellable":true,"DisplayName":"Major Experience Potion","Level":26,"Category":"Mysterious Marsh","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":3,"GoldValue":370,"Recipe":{"FrostyRoot":4},"ConsumableLevel":20,"Description":"Gives you 12% extra Hit for 15 minutes","Rarity":3,"Experience":7500,"RarityMin":3,"Name":"MajorHitPotion","Consumable":true,"Sellable":true,"DisplayName":"Major Hit Potion","Level":26,"Category":"Icy Peak","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":3,"GoldValue":460,"Recipe":{"FrostyRoot":5},"ConsumableLevel":20,"Description":"Gives you 12% extra Dodge for 15 minutes","Rarity":3,"Experience":10200,"RarityMin":3,"Name":"MajorDodgePotion","Consumable":true,"Sellable":true,"DisplayName":"Major Dodge Potion","Level":28,"Category":"Icy Peak","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":970,"Recipe":{"IceThorn":5,"FrostyRoot":3},"ConsumableLevel":10,"Description":"Gives you 6% extra Crit Power for 10 minutes","Rarity":2,"Experience":16500,"RarityMin":2,"Name":"LesserCritPowerPotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Crit Power Potion","Level":30,"Category":"Icy Peak","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":1200,"Recipe":{"IceThorn":6,"FrostyRoot":4},"ConsumableLevel":10,"Description":"Gives you 2 extra Walkspeed for 10 minutes","Rarity":2,"Experience":21000,"RarityMin":2,"Name":"LesserWalkspeedPotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Walkspeed Potion","Level":32,"Category":"Icy Peak","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":3,"GoldValue":430,"Recipe":{"Coconut":3},"ConsumableLevel":20,"Description":"Gives you 10% extra Max Health for 15 minutes","Rarity":3,"Experience":6750,"RarityMin":3,"Name":"MajorMaxHealthPotion","Consumable":true,"Sellable":true,"DisplayName":"Major Max Health Potion","Level":32,"Category":"Moai Shores","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":4,"GoldValue":1440,"Recipe":{"IceThorn":7,"FrostyRoot":5},"ConsumableLevel":30,"Description":"Gives you 15% extra Experience gained from monsters & dungeons for 20 minutes","Rarity":4,"Experience":25500,"RarityMin":4,"Name":"GrandExperiencePotion","Consumable":true,"Sellable":true,"DisplayName":"Grand Experience Potion","Level":34,"Category":"Icy Peak","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":3,"GoldValue":580,"Recipe":{"Coconut":4},"ConsumableLevel":20,"Description":"Gives you 12% extra Attack Speed for 15 minutes","Rarity":3,"Experience":9150,"RarityMin":3,"Name":"MajorAttackSpeedPotion","Consumable":true,"Sellable":true,"DisplayName":"Major Attack Speed Potion","Level":34,"Category":"Moai Shores","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":720,"Recipe":{"Coconut":5},"ConsumableLevel":10,"Description":"Gives you 20% extra Health Regeneration for 10 minutes","Rarity":2,"Experience":11700,"RarityMin":2,"Name":"LesserRegenerationPotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Regeneration Potion","Level":36,"Category":"Moai Shores","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":1,"GoldValue":1500,"Recipe":{"CoralBits":5,"Coconut":3},"ConsumableLevel":1,"Description":"Increases your normal item drop rate by 5% for 5 minutes","Rarity":1,"Experience":19200,"RarityMin":1,"Name":"TinyLootPotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Loot Potion","Level":38,"Category":"Moai Shores","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":1880,"Recipe":{"CoralBits":6,"Coconut":4},"ConsumableLevel":10,"Description":"Gives you 10% extra Gold gained from monsters & dungeons for 10 minutes","Rarity":2,"Experience":24750,"RarityMin":2,"Name":"LesserGoldPotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Gold Potion","Level":40,"Category":"Moai Shores","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":3,"GoldValue":600,"Recipe":{"VikingLotus":3},"ConsumableLevel":20,"Description":"Gives you 25% extra Health Regeneration for 15 minutes","Rarity":3,"Experience":7200,"RarityMin":3,"Name":"MajorRegenerationPotion","Consumable":true,"Sellable":true,"DisplayName":"Major Regeneration Potion","Level":40,"Category":"Elder's Ridge","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":3,"GoldValue":810,"Recipe":{"VikingLotus":4},"ConsumableLevel":20,"Description":"Gives you 8% extra Attack Damage for 15 minutes","Rarity":3,"Experience":10050,"RarityMin":3,"Name":"MajorAttackDamagePotion","Consumable":true,"Sellable":true,"DisplayName":"Major Attack Damage Potion","Level":42,"Category":"Elder's Ridge","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":1,"GoldValue":2220,"Recipe":{"CoralBits":7,"Coconut":5},"ConsumableLevel":1,"Description":"Increases your gem drop rate by 10% for 5 minutes","Rarity":1,"Experience":30000,"RarityMin":1,"Name":"TinyGemPotion","Consumable":true,"Sellable":true,"DisplayName":"Tiny Gem Potion","Level":42,"Category":"Moai Shores","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":3,"GoldValue":1010,"Recipe":{"VikingLotus":5},"ConsumableLevel":20,"Description":"Increases healing done by 14% for 15 minutes","Rarity":3,"Experience":13200,"RarityMin":3,"Name":"MajorHealingPotion","Consumable":true,"Sellable":true,"DisplayName":"Major Healing Potion","Level":44,"Category":"Elder's Ridge","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":3,"GoldValue":2120,"Recipe":{"FrozenFungi":5,"VikingLotus":3},"ConsumableLevel":20,"Description":"Gives you 8% extra Crit Power for 15 minutes","Rarity":3,"Experience":21750,"RarityMin":3,"Name":"MajorCritPowerPotion","Consumable":true,"Sellable":true,"DisplayName":"Major Crit Power Potion","Level":46,"Category":"Elder's Ridge","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":4,"GoldValue":600,"Recipe":{"GoldenMushroom":4},"ConsumableLevel":20,"Description":"Gives you 15% extra Max Health for 20 minutes","Rarity":4,"Experience":10950,"RarityMin":4,"Name":"GrandMaxHealthPotion","Consumable":true,"Sellable":true,"DisplayName":"Grand Max Health Potion","Level":48,"Category":"Mystic Falls","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":3,"GoldValue":2620,"Recipe":{"FrozenFungi":6,"VikingLotus":4},"ConsumableLevel":20,"Description":"Gives you 3 extra Walkspeed for 15 minutes","Rarity":3,"Experience":28500,"RarityMin":3,"Name":"MajorWalkspeedPotion","Consumable":true,"Sellable":true,"DisplayName":"Major Walkspeed Potion","Level":48,"Category":"Elder's Ridge","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":4,"GoldValue":810,"Recipe":{"GoldenMushroom":5},"ConsumableLevel":20,"Description":"Gives you 15% extra Attack Speed for 20 minutes","Rarity":4,"Experience":14250,"RarityMin":4,"Name":"GrandAttackSpeedPotion","Consumable":true,"Sellable":true,"DisplayName":"Grand Attack Speed Potion","Level":50,"Category":"Mystic Falls","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":3130,"Recipe":{"FrozenFungi":7,"VikingLotus":5},"ConsumableLevel":10,"Description":"Increases your gem drop rate by 15% for 10 minutes","Rarity":2,"Experience":34500,"RarityMin":2,"Name":"LesserGemPotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Gem Potion","Level":50,"Category":"Elder's Ridge","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":4,"GoldValue":1010,"Recipe":{"GoldenMushroom":6},"ConsumableLevel":30,"Description":"Gives you 30% extra Health Regeneration for 20 minutes","Rarity":4,"Experience":17250,"RarityMin":4,"Name":"GrandRegenerationPotion","Consumable":true,"Sellable":true,"DisplayName":"Grand Regeneration Potion","Level":52,"Category":"Mystic Falls","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":3,"GoldValue":2120,"Recipe":{"MagicBerries":6,"GoldenMushroom":4},"ConsumableLevel":20,"Description":"Gives you 15% extra Gold gained from monsters & dungeons for 15 minutes","Rarity":3,"Experience":30000,"RarityMin":3,"Name":"MajorGoldPotion","Consumable":true,"Sellable":true,"DisplayName":"Major Gold Potion","Level":54,"Category":"Mystic Falls","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":2,"GoldValue":2620,"Recipe":{"MagicBerries":7,"GoldenMushroom":5},"ConsumableLevel":10,"Description":"Increases your normal item drop rate by 8% for 10 minutes","Rarity":2,"Experience":37500,"RarityMin":2,"Name":"LesserLootPotion","Consumable":true,"Sellable":true,"DisplayName":"Lesser Loot Potion","Level":56,"Category":"Mystic Falls","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"},{"RarityMax":3,"GoldValue":3130,"Recipe":{"MagicBerries":8,"GoldenMushroom":6},"ConsumableLevel":10,"Description":"Increases your gem drop rate by 15% for 15 minutes","Rarity":3,"Experience":45000,"RarityMin":3,"Name":"MajorGemPotion","Consumable":true,"Sellable":true,"DisplayName":"Major Gem Potion","Level":58,"Category":"Mystic Falls","AmountMax":10,"Type":"Potion","Amount":1,"DisplayType":"Potion"}],"Image":"rbxassetid://4631336808","ExperienceMax":500,"StatLevel":"AlchemyLevel","CallbackMaxLevel":"GetMaxLevelAlchemy","Name":"Alchemy","Experience":0,"StatExperience":"AlchemyExperience","ImageSize":null,"Enabled":true},"Crafting":{"Level":1,"CallbackExperience":"GetRequiredExperienceCrafting","ImageOffset":null,"LevelMax":80,"Items":[{"Level":1,"GoldValue":20,"Category":"Pleasant Valley","DiamondsValue":0,"Experience":100,"Name":"CopperBars","Recipe":{"CopperOre":2},"DisplayName":"Copper Bars","Amount":1,"DisplayType":"Material","EquipLevel":1,"Rarity":1,"AmountMax":20,"Type":"Material"},{"DisplayType":"Weapon","Equippable":true,"Level":1,"DisplayName":"Copper Dagger","Category":"Pleasant Valley","Recipe":{"CopperBars":1,"OakLogs":2},"Experience":200,"Name":"CopperDagger","EquipSlot":"Weapon","EquipLevel":1,"EquipStats":{"AttackDamage":3,"Strength":1,"Accuracy":0,"Fortitude":0,"Agility":1,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":2,"DisplayName":"Copper Sword","Category":"Pleasant Valley","Recipe":{"CopperBars":2,"OakLogs":4},"Experience":800,"Name":"CopperSword","EquipSlot":"Weapon","EquipLevel":2,"EquipStats":{"AttackDamage":5,"Strength":2,"Accuracy":0,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":3,"DisplayName":"Copper Polearm","Category":"Pleasant Valley","Recipe":{"CopperBars":2,"OakLogs":6},"Experience":1400,"Name":"CopperPolearm","EquipSlot":"Weapon","EquipLevel":3,"EquipStats":{"AttackDamage":7,"Strength":2,"Accuracy":1,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":3,"DisplayName":"Copper Wand","Category":"Pleasant Valley","Recipe":{"CopperBars":2,"OakLogs":7},"Experience":1700,"Name":"CopperWand","EquipSlot":"Weapon","EquipLevel":3,"EquipStats":{"AttackDamage":5,"Strength":0,"Accuracy":0,"Fortitude":0,"Agility":2,"Intellect":2},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":4,"DisplayName":"Copper Scimitar","Category":"Pleasant Valley","Recipe":{"CopperBars":3,"OakLogs":5},"Experience":2000,"Name":"CopperScimitar","EquipSlot":"Weapon","EquipLevel":4,"EquipStats":{"AttackDamage":6,"Strength":2,"Accuracy":0,"Fortitude":0,"Agility":2,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":5,"DisplayName":"Copper Axe","Category":"Pleasant Valley","Recipe":{"CopperBars":4,"OakLogs":6},"Experience":3100,"Name":"CopperAxe","EquipSlot":"Weapon","EquipLevel":5,"EquipStats":{"AttackDamage":8,"Strength":3,"Accuracy":1,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Ring","Equippable":true,"Level":5,"DisplayName":"Copper Ring","Category":"Pleasant Valley","Recipe":{"CopperBars":1,"OakLogs":8},"Experience":2400,"Name":"CopperRing","EquipSlot":"AccessorySecondary","EquipLevel":5,"EquipStats":{"Strength":1,"Accuracy":1,"Fortitude":1,"Agility":1,"Intellect":2},"Type":"Accessory"},{"DisplayType":"Shield","Equippable":true,"Level":6,"DisplayName":"Copper Shield","Category":"Pleasant Valley","Recipe":{"CopperBars":3,"OakLogs":6},"Experience":3000,"Name":"CopperShield","EquipSlot":"Shield","EquipLevel":6,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":3,"Defense":12,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":6,"DisplayName":"Copper Staff","Category":"Pleasant Valley","Recipe":{"CopperBars":2,"OakLogs":8},"Experience":2900,"Name":"CopperStaff","EquipSlot":"Weapon","EquipLevel":6,"EquipStats":{"AttackDamage":8,"Strength":0,"Accuracy":2,"Fortitude":0,"Agility":0,"Intellect":3},"Type":"Weapon"},{"DisplayType":"Armor","Equippable":true,"Level":7,"DisplayName":"Copper Helmet","Category":"Pleasant Valley","Recipe":{"CopperBars":2,"OakLogs":2},"Experience":1700,"Name":"CopperHat","EquipSlot":"ArmorHat","EquipLevel":7,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":3,"Defense":10,"Intellect":2},"Type":"Armor"},{"DisplayType":"Armor","Equippable":true,"Level":8,"DisplayName":"Copper Gauntlets","Category":"Pleasant Valley","Recipe":{"CopperBars":2,"OakLogs":3},"Experience":2200,"Name":"CopperArms","EquipSlot":"ArmorArms","EquipLevel":8,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":2,"Fortitude":3,"Defense":12,"Intellect":0},"Type":"Armor"},{"Level":8,"Category":"Lost Ruins","DiamondsValue":0,"Name":"IronBars","Experience":1000,"GoldValue":40,"Recipe":{"IronOre":2},"DisplayName":"Iron Bars","Rarity":1,"Amount":1,"DisplayType":"Material","EquipLevel":8,"AmountMax":20,"Description":"","Type":"Material"},{"DisplayType":"Armor","Equippable":true,"Level":9,"DisplayName":"Copper Greaves","Category":"Pleasant Valley","Recipe":{"CopperBars":3,"OakLogs":3},"Experience":3200,"Name":"CopperLegs","EquipSlot":"ArmorLegs","EquipLevel":9,"EquipStats":{"Agility":2,"Strength":0,"Accuracy":0,"Fortitude":3,"Defense":16,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":9,"DisplayName":"Iron Dagger","Category":"Lost Ruins","Recipe":{"IronBars":1,"PineLogs":3},"Experience":2600,"Name":"IronDagger","EquipSlot":"Weapon","EquipLevel":9,"EquipStats":{"AttackDamage":12,"Strength":3,"Accuracy":0,"Fortitude":0,"Agility":3,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Necklace","Equippable":true,"Level":10,"DisplayName":"Copper Necklace","Category":"Pleasant Valley","Recipe":{"CopperBars":1,"OakLogs":10},"Experience":5000,"Name":"CopperNecklace","EquipSlot":"AccessoryPrimary","EquipLevel":10,"EquipStats":{"Strength":2,"Accuracy":2,"Fortitude":2,"Agility":2,"Intellect":4},"Type":"Accessory"},{"DisplayType":"Armor","Equippable":true,"Level":10,"DisplayName":"Copper Chestplate","Category":"Pleasant Valley","Recipe":{"CopperBars":5,"OakLogs":10},"Experience":8000,"Name":"CopperTop","EquipSlot":"ArmorTop","EquipLevel":10,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":5,"Defense":18,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":10,"DisplayName":"Iron Sword","Category":"Lost Ruins","Recipe":{"IronBars":2,"PineLogs":5},"Experience":4700,"Name":"IronSword","EquipSlot":"Weapon","EquipLevel":10,"EquipStats":{"AttackDamage":14,"Strength":6,"Accuracy":0,"Fortitude":0,"Agility":1,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":11,"DisplayName":"Iron Polearm","Category":"Lost Ruins","Recipe":{"IronBars":2,"PineLogs":6},"Experience":5300,"Name":"IronPolearm","EquipSlot":"Weapon","EquipLevel":11,"EquipStats":{"AttackDamage":18,"Strength":6,"Accuracy":1,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":11,"DisplayName":"Iron Wand","Category":"Lost Ruins","Recipe":{"IronBars":2,"PineLogs":8},"Experience":6600,"Name":"IronWand","EquipSlot":"Weapon","EquipLevel":11,"EquipStats":{"AttackDamage":14,"Strength":0,"Accuracy":0,"Fortitude":0,"Agility":3,"Intellect":6},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":12,"DisplayName":"Iron Scimitar","Category":"Lost Ruins","Recipe":{"IronBars":3,"PineLogs":6},"Experience":7000,"Name":"IronScimitar","EquipSlot":"Weapon","EquipLevel":12,"EquipStats":{"AttackDamage":16,"Strength":6,"Accuracy":0,"Fortitude":0,"Agility":4,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":13,"DisplayName":"Iron Axe","Category":"Lost Ruins","Recipe":{"IronBars":4,"PineLogs":8},"Experience":10200,"Name":"IronAxe","EquipSlot":"Weapon","EquipLevel":13,"EquipStats":{"AttackDamage":20,"Strength":8,"Accuracy":1,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Ring","Equippable":true,"Level":13,"DisplayName":"Iron Ring","Category":"Lost Ruins","Recipe":{"IronBars":1,"PineLogs":10},"Experience":8400,"Name":"IronRing","EquipSlot":"AccessorySecondary","EquipLevel":13,"EquipStats":{"Strength":3,"Accuracy":3,"Fortitude":3,"Agility":3,"Intellect":6},"Type":"Accessory"},{"DisplayType":"Shield","Equippable":true,"Level":14,"DisplayName":"Iron Shield","Category":"Lost Ruins","Recipe":{"IronBars":4,"PineLogs":6},"Experience":9800,"Name":"IronShield","EquipSlot":"Shield","EquipLevel":14,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":8,"Defense":24,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":14,"DisplayName":"Iron Staff","Category":"Lost Ruins","Recipe":{"IronBars":3,"PineLogs":8},"Experience":9700,"Name":"IronStaff","EquipSlot":"Weapon","EquipLevel":14,"EquipStats":{"AttackDamage":20,"Strength":0,"Accuracy":2,"Fortitude":0,"Agility":0,"Intellect":8},"Type":"Weapon"},{"DisplayType":"Armor","Equippable":true,"Level":15,"DisplayName":"Iron Helmet","Category":"Lost Ruins","Recipe":{"IronBars":3,"PineLogs":2},"Experience":6000,"Name":"IronHat","EquipSlot":"ArmorHat","EquipLevel":15,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":8,"Defense":18,"Intellect":5},"Type":"Armor"},{"Level":16,"Category":"Mysterious Marsh","DiamondsValue":0,"Name":"AdamantiumBars","Experience":2700,"GoldValue":120,"Recipe":{"AdamantiumOre":3},"DisplayName":"Adamantium Bars","Rarity":2,"Amount":1,"DisplayType":"Material","EquipLevel":16,"AmountMax":20,"Description":"","Type":"Material"},{"DisplayType":"Armor","Equippable":true,"Level":16,"DisplayName":"Iron Gauntlets","Category":"Lost Ruins","Recipe":{"IronBars":3,"PineLogs":3},"Experience":7000,"Name":"IronArms","EquipSlot":"ArmorArms","EquipLevel":16,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":5,"Fortitude":8,"Defense":22,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":17,"DisplayName":"Adamantium Dagger","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":1,"WillowLogs":3},"Experience":8000,"Name":"AdamantiumDagger","EquipSlot":"Weapon","EquipLevel":17,"EquipStats":{"AttackDamage":24,"Strength":7,"Accuracy":0,"Fortitude":0,"Agility":7,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Armor","Equippable":true,"Level":17,"DisplayName":"Iron Greaves","Category":"Lost Ruins","Recipe":{"IronBars":4,"PineLogs":3},"Experience":8800,"Name":"IronLegs","EquipSlot":"ArmorLegs","EquipLevel":17,"EquipStats":{"Agility":5,"Strength":0,"Accuracy":0,"Fortitude":8,"Defense":26,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":18,"DisplayName":"Adamantium Sword","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":2,"WillowLogs":6},"Experience":15400,"Name":"AdamantiumSword","EquipSlot":"Weapon","EquipLevel":18,"EquipStats":{"AttackDamage":26,"Strength":12,"Accuracy":1,"Fortitude":0,"Agility":2,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Necklace","Equippable":true,"Level":18,"DisplayName":"Iron Necklace","Category":"Lost Ruins","Recipe":{"IronBars":2,"PineLogs":10},"Experience":13000,"Name":"IronNecklace","EquipSlot":"AccessoryPrimary","EquipLevel":18,"EquipStats":{"Strength":5,"Accuracy":5,"Fortitude":5,"Agility":5,"Intellect":8},"Type":"Accessory"},{"DisplayType":"Armor","Equippable":true,"Level":18,"DisplayName":"Iron Chestplate","Category":"Lost Ruins","Recipe":{"IronBars":6,"PineLogs":12},"Experience":20000,"Name":"IronTop","EquipSlot":"ArmorTop","EquipLevel":18,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":14,"Defense":28,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":19,"DisplayName":"Adamantium Polearm","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":2,"WillowLogs":8},"Experience":16800,"Name":"AdamantiumPolearm","EquipSlot":"Weapon","EquipLevel":19,"EquipStats":{"AttackDamage":32,"Strength":12,"Accuracy":2,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":19,"DisplayName":"Adamantium Wand","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":2,"WillowLogs":9},"Experience":18400,"Name":"AdamantiumWand","EquipSlot":"Weapon","EquipLevel":19,"EquipStats":{"AttackDamage":26,"Strength":0,"Accuracy":0,"Fortitude":0,"Agility":5,"Intellect":12},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":20,"DisplayName":"Adamantium Scimitar","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":3,"WillowLogs":6},"Experience":18000,"Name":"AdamantiumScimitar","EquipSlot":"Weapon","EquipLevel":20,"EquipStats":{"AttackDamage":28,"Strength":12,"Accuracy":0,"Fortitude":0,"Agility":6,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":21,"DisplayName":"Adamantium Axe","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":4,"WillowLogs":8},"Experience":24000,"Name":"AdamantiumAxe","EquipSlot":"Weapon","EquipLevel":21,"EquipStats":{"AttackDamage":36,"Strength":15,"Accuracy":2,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Ring","Equippable":true,"Level":21,"DisplayName":"Adamantium Ring","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":1,"WillowLogs":12},"Experience":19000,"Name":"AdamantiumRing","EquipSlot":"AccessorySecondary","EquipLevel":21,"EquipStats":{"Strength":6,"Accuracy":6,"Fortitude":6,"Agility":6,"Intellect":10},"Type":"Accessory"},{"DisplayType":"Shield","Equippable":true,"Level":22,"DisplayName":"Adamantium Shield","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":3,"WillowLogs":8},"Experience":20000,"Name":"AdamantiumShield","EquipSlot":"Shield","EquipLevel":22,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":14,"Defense":46,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":22,"DisplayName":"Adamantium Staff","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":2,"WillowLogs":11},"Experience":22000,"Name":"AdamantiumStaff","EquipSlot":"Weapon","EquipLevel":22,"EquipStats":{"AttackDamage":36,"Strength":0,"Accuracy":4,"Fortitude":0,"Agility":0,"Intellect":15},"Type":"Weapon"},{"DisplayType":"Armor","Equippable":true,"Level":23,"DisplayName":"Adamantium Helmet","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":3,"WillowLogs":3},"Experience":14000,"Name":"AdamantiumHat","EquipSlot":"ArmorHat","EquipLevel":23,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":14,"Defense":30,"Intellect":10},"Type":"Armor"},{"DisplayType":"Armor","Equippable":true,"Level":24,"DisplayName":"Adamantium Gauntlets","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":3,"WillowLogs":5},"Experience":16500,"Name":"AdamantiumArms","EquipSlot":"ArmorArms","EquipLevel":24,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":10,"Fortitude":14,"Defense":36,"Intellect":0},"Type":"Armor"},{"Level":24,"Category":"Icy Peak","DiamondsValue":0,"Name":"MithrilBars","Experience":4000,"GoldValue":210,"Recipe":{"MithrilOre":3},"DisplayName":"Mithril Bars","Rarity":2,"Amount":1,"DisplayType":"Material","EquipLevel":24,"AmountMax":20,"Description":"","Type":"Material"},{"DisplayType":"Armor","Equippable":true,"Level":25,"DisplayName":"Adamantium Greaves","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":4,"WillowLogs":5},"Experience":19500,"Name":"AdamantiumLegs","EquipSlot":"ArmorLegs","EquipLevel":25,"EquipStats":{"Agility":10,"Strength":0,"Accuracy":0,"Fortitude":14,"Defense":40,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":25,"DisplayName":"Mithril Dagger","Category":"Icy Peak","Recipe":{"MithrilBars":1,"RedwoodLogs":5},"Experience":15000,"Name":"MithrilDagger","EquipSlot":"Weapon","EquipLevel":25,"EquipStats":{"AttackDamage":44,"Strength":11,"Accuracy":0,"Fortitude":0,"Agility":11,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Necklace","Equippable":true,"Level":26,"DisplayName":"Adamantium Necklace","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":2,"WillowLogs":12},"Experience":21500,"Name":"AdamantiumNecklace","EquipSlot":"AccessoryPrimary","EquipLevel":26,"EquipStats":{"Strength":8,"Accuracy":8,"Fortitude":8,"Agility":8,"Intellect":16},"Type":"Accessory"},{"DisplayType":"Armor","Equippable":true,"Level":26,"DisplayName":"Adamantium Chestplate","Category":"Mysterious Marsh","Recipe":{"AdamantiumBars":6,"WillowLogs":15},"Experience":37500,"Name":"AdamantiumTop","EquipSlot":"ArmorTop","EquipLevel":26,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":22,"Defense":50,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":26,"DisplayName":"Mithril Sword","Category":"Icy Peak","Recipe":{"MithrilBars":2,"RedwoodLogs":8},"Experience":24000,"Name":"MithrilSword","EquipSlot":"Weapon","EquipLevel":26,"EquipStats":{"AttackDamage":46,"Strength":18,"Accuracy":2,"Fortitude":0,"Agility":4,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":27,"DisplayName":"Mithril Polearm","Category":"Icy Peak","Recipe":{"MithrilBars":2,"RedwoodLogs":10},"Experience":26000,"Name":"MithrilPolearm","EquipSlot":"Weapon","EquipLevel":27,"EquipStats":{"AttackDamage":54,"Strength":18,"Accuracy":5,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":27,"DisplayName":"Mithril Wand","Category":"Icy Peak","Recipe":{"MithrilBars":2,"RedwoodLogs":12},"Experience":30000,"Name":"MithrilWand","EquipSlot":"Weapon","EquipLevel":27,"EquipStats":{"AttackDamage":46,"Strength":0,"Accuracy":0,"Fortitude":0,"Agility":9,"Intellect":18},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":28,"DisplayName":"Mithril Scimitar","Category":"Icy Peak","Recipe":{"MithrilBars":3,"RedwoodLogs":9},"Experience":28000,"Name":"MithrilScimitar","EquipSlot":"Weapon","EquipLevel":28,"EquipStats":{"AttackDamage":50,"Strength":18,"Accuracy":0,"Fortitude":0,"Agility":10,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":29,"DisplayName":"Mithril Axe","Category":"Icy Peak","Recipe":{"MithrilBars":4,"RedwoodLogs":10},"Experience":32500,"Name":"MithrilAxe","EquipSlot":"Weapon","EquipLevel":29,"EquipStats":{"AttackDamage":58,"Strength":22,"Accuracy":6,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Ring","Equippable":true,"Level":29,"DisplayName":"Mithril Ring","Category":"Icy Peak","Recipe":{"MithrilBars":2,"RedwoodLogs":12},"Experience":28500,"Name":"MithrilRing","EquipSlot":"AccessorySecondary","EquipLevel":29,"EquipStats":{"Strength":9,"Accuracy":9,"Fortitude":9,"Agility":9,"Intellect":18},"Type":"Accessory"},{"DisplayType":"Shield","Equippable":true,"Level":30,"DisplayName":"Mithril Shield","Category":"Icy Peak","Recipe":{"MithrilBars":3,"RedwoodLogs":9},"Experience":28000,"Name":"MithrilShield","EquipSlot":"Shield","EquipLevel":30,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":22,"Defense":76,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":30,"DisplayName":"Mithril Staff","Category":"Icy Peak","Recipe":{"MithrilBars":3,"RedwoodLogs":9},"Experience":31000,"Name":"MithrilStaff","EquipSlot":"Weapon","EquipLevel":30,"EquipStats":{"AttackDamage":58,"Strength":0,"Accuracy":9,"Fortitude":0,"Agility":0,"Intellect":22},"Type":"Weapon"},{"DisplayType":"Armor","Equippable":true,"Level":31,"DisplayName":"Mithril Helmet","Category":"Icy Peak","Recipe":{"MithrilBars":3,"RedwoodLogs":5},"Experience":21000,"Name":"MithrilHat","EquipSlot":"ArmorHat","EquipLevel":31,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":26,"Defense":48,"Intellect":14},"Type":"Armor"},{"DisplayType":"Armor","Equippable":true,"Level":32,"DisplayName":"Mithril Gauntlets","Category":"Icy Peak","Recipe":{"MithrilBars":3,"RedwoodLogs":7},"Experience":24000,"Name":"MithrilArms","EquipSlot":"ArmorArms","EquipLevel":32,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":14,"Fortitude":26,"Defense":56,"Intellect":0},"Type":"Armor"},{"Level":32,"Category":"Moai Shores","DiamondsValue":0,"Name":"TikiumBars","Experience":7000,"GoldValue":400,"Recipe":{"TikiumOre":4},"DisplayName":"Tikium Bars","Rarity":3,"Amount":1,"DisplayType":"Material","EquipLevel":32,"AmountMax":20,"Description":"","Type":"Material"},{"DisplayType":"Armor","Equippable":true,"Level":33,"DisplayName":"Mithril Greaves","Category":"Icy Peak","Recipe":{"MithrilBars":4,"RedwoodLogs":8},"Experience":27000,"Name":"MithrilLegs","EquipSlot":"ArmorLegs","EquipLevel":33,"EquipStats":{"Agility":14,"Strength":0,"Accuracy":0,"Fortitude":26,"Defense":64,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":33,"DisplayName":"Tikium Dagger","Category":"Moai Shores","Recipe":{"TikiumBars":1,"PalmLogs":6},"Experience":23000,"Name":"TikiumDagger","EquipSlot":"Weapon","EquipLevel":33,"EquipStats":{"AttackDamage":68,"Strength":19,"Accuracy":0,"Fortitude":0,"Agility":19,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Necklace","Equippable":true,"Level":34,"DisplayName":"Mithril Necklace","Category":"Icy Peak","Recipe":{"MithrilBars":3,"RedwoodLogs":13},"Experience":29500,"Name":"MithrilNecklace","EquipSlot":"AccessoryPrimary","EquipLevel":34,"EquipStats":{"Strength":13,"Accuracy":13,"Fortitude":13,"Agility":13,"Intellect":24},"Type":"Accessory"},{"DisplayType":"Armor","Equippable":true,"Level":34,"DisplayName":"Mithril Chestplate","Category":"Icy Peak","Recipe":{"MithrilBars":8,"RedwoodLogs":18},"Experience":53000,"Name":"MithrilTop","EquipSlot":"ArmorTop","EquipLevel":34,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":42,"Defense":68,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":34,"DisplayName":"Tikium Sword","Category":"Moai Shores","Recipe":{"TikiumBars":2,"PalmLogs":8},"Experience":34000,"Name":"TikiumSword","EquipSlot":"Weapon","EquipLevel":34,"EquipStats":{"AttackDamage":72,"Strength":28,"Accuracy":4,"Fortitude":0,"Agility":8,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":35,"DisplayName":"Tikium Polearm","Category":"Moai Shores","Recipe":{"TikiumBars":2,"PalmLogs":14},"Experience":44000,"Name":"TikiumPolearm","EquipSlot":"Weapon","EquipLevel":35,"EquipStats":{"AttackDamage":84,"Strength":28,"Accuracy":10,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":35,"DisplayName":"Tikium Wand","Category":"Moai Shores","Recipe":{"TikiumBars":3,"PalmLogs":12},"Experience":45000,"Name":"TikiumWand","EquipSlot":"Weapon","EquipLevel":35,"EquipStats":{"AttackDamage":72,"Strength":0,"Accuracy":0,"Fortitude":0,"Agility":16,"Intellect":28},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":36,"DisplayName":"Tikium Scimitar","Category":"Moai Shores","Recipe":{"TikiumBars":3,"PalmLogs":12},"Experience":45000,"Name":"TikiumScimitar","EquipSlot":"Weapon","EquipLevel":36,"EquipStats":{"AttackDamage":78,"Strength":28,"Accuracy":0,"Fortitude":0,"Agility":18,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":37,"DisplayName":"Tikium Axe","Category":"Moai Shores","Recipe":{"TikiumBars":4,"PalmLogs":16},"Experience":58000,"Name":"TikiumAxe","EquipSlot":"Weapon","EquipLevel":37,"EquipStats":{"AttackDamage":90,"Strength":35,"Accuracy":10,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Ring","Equippable":true,"Level":37,"DisplayName":"Tikium Ring","Category":"Moai Shores","Recipe":{"TikiumBars":2,"PalmLogs":16},"Experience":45500,"Name":"TikiumRing","EquipSlot":"AccessorySecondary","EquipLevel":37,"EquipStats":{"Strength":16,"Accuracy":16,"Fortitude":16,"Agility":16,"Intellect":26},"Type":"Accessory"},{"DisplayType":"Shield","Equippable":true,"Level":38,"DisplayName":"Tikium Shield","Category":"Moai Shores","Recipe":{"TikiumBars":3,"PalmLogs":12},"Experience":40000,"Name":"TikiumShield","EquipSlot":"Shield","EquipLevel":38,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":34,"Defense":122,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":38,"DisplayName":"Tikium Staff","Category":"Moai Shores","Recipe":{"TikiumBars":2,"PalmLogs":16},"Experience":50000,"Name":"TikiumStaff","EquipSlot":"Weapon","EquipLevel":38,"EquipStats":{"AttackDamage":90,"Strength":0,"Accuracy":15,"Fortitude":0,"Agility":0,"Intellect":35},"Type":"Weapon"},{"DisplayType":"Armor","Equippable":true,"Level":39,"DisplayName":"Tikium Mask","Category":"Moai Shores","Recipe":{"TikiumBars":3,"PalmLogs":8},"Experience":31000,"Name":"TikiumHat","EquipSlot":"ArmorHat","EquipLevel":39,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":6,"Fortitude":34,"Defense":86,"Intellect":22},"Type":"Armor"},{"Level":40,"Category":"Elder's Ridge","DiamondsValue":0,"Name":"NordiumBars","Experience":8000,"GoldValue":700,"Recipe":{"NordiumOre":4},"DisplayName":"Nordium Bars","Rarity":3,"Amount":1,"DisplayType":"Material","EquipLevel":40,"AmountMax":20,"Description":"","Type":"Material"},{"DisplayType":"Armor","Equippable":true,"Level":40,"DisplayName":"Tikium Gauntlets","Category":"Moai Shores","Recipe":{"TikiumBars":5,"PalmLogs":8},"Experience":41000,"Name":"TikiumArms","EquipSlot":"ArmorArms","EquipLevel":40,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":28,"Fortitude":34,"Defense":86,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":41,"DisplayName":"Nordium Dagger","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":8,"NordiumBars":3},"Experience":50000,"Name":"NordiumDagger","EquipSlot":"Weapon","EquipLevel":41,"EquipStats":{"AttackDamage":106,"Strength":29,"Accuracy":0,"Fortitude":0,"Agility":29,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Armor","Equippable":true,"Level":41,"DisplayName":"Tikium Greaves","Category":"Moai Shores","Recipe":{"TikiumBars":5,"PalmLogs":12},"Experience":45000,"Name":"TikiumLegs","EquipSlot":"ArmorLegs","EquipLevel":41,"EquipStats":{"Agility":22,"Strength":0,"Accuracy":6,"Fortitude":34,"Defense":100,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":42,"DisplayName":"Nordium Sword","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":12,"NordiumBars":3},"Experience":51500,"Name":"NordiumSword","EquipSlot":"Weapon","EquipLevel":42,"EquipStats":{"AttackDamage":114,"Strength":42,"Accuracy":5,"Fortitude":0,"Agility":15,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Necklace","Equippable":true,"Level":42,"DisplayName":"Tikium Necklace","Category":"Moai Shores","Recipe":{"TikiumBars":3,"PalmLogs":18},"Experience":41500,"Name":"TikiumNecklace","EquipSlot":"AccessoryPrimary","EquipLevel":42,"EquipStats":{"Strength":22,"Accuracy":22,"Fortitude":22,"Agility":22,"Intellect":30},"Type":"Accessory"},{"DisplayType":"Armor","Equippable":true,"Level":42,"DisplayName":"Tikium Chestplate","Category":"Moai Shores","Recipe":{"TikiumBars":8,"PalmLogs":32},"Experience":85000,"Name":"TikiumTop","EquipSlot":"ArmorTop","EquipLevel":42,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":6,"Fortitude":56,"Defense":114,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":43,"DisplayName":"Nordium Polearm","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":20,"NordiumBars":3},"Experience":65000,"Name":"NordiumPolearm","EquipSlot":"Weapon","EquipLevel":43,"EquipStats":{"AttackDamage":132,"Strength":42,"Accuracy":18,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":43,"DisplayName":"Nordium Wand","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":16,"NordiumBars":5},"Experience":66000,"Name":"NordiumWand","EquipSlot":"Weapon","EquipLevel":43,"EquipStats":{"AttackDamage":114,"Strength":0,"Accuracy":0,"Fortitude":0,"Agility":27,"Intellect":42},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":44,"DisplayName":"Nordium Scimitar","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":16,"NordiumBars":5},"Experience":62000,"Name":"NordiumScimitar","EquipSlot":"Weapon","EquipLevel":44,"EquipStats":{"AttackDamage":122,"Strength":42,"Accuracy":0,"Fortitude":0,"Agility":30,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":45,"DisplayName":"Nordium Axe","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":20,"NordiumBars":5},"Experience":74000,"Name":"NordiumAxe","EquipSlot":"Weapon","EquipLevel":45,"EquipStats":{"AttackDamage":140,"Strength":52,"Accuracy":18,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Ring","Equippable":true,"Level":45,"DisplayName":"Nordium Ring","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":12,"NordiumBars":4},"Experience":55000,"Name":"NordiumRing","EquipSlot":"AccessorySecondary","EquipLevel":45,"EquipStats":{"Strength":26,"Accuracy":26,"Fortitude":26,"Agility":26,"Intellect":36},"Type":"Accessory"},{"DisplayType":"Shield","Equippable":true,"Level":46,"DisplayName":"Nordium Shield","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":15,"NordiumBars":4},"Experience":49000,"Name":"NordiumShield","EquipSlot":"Shield","EquipLevel":46,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":58,"Defense":188,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":46,"DisplayName":"Nordium Staff","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":20,"NordiumBars":4},"Experience":90000,"Name":"NordiumStaff","EquipSlot":"Weapon","EquipLevel":46,"EquipStats":{"AttackDamage":140,"Strength":0,"Accuracy":30,"Fortitude":0,"Agility":0,"Intellect":52},"Type":"Weapon"},{"DisplayType":"Armor","Equippable":true,"Level":47,"DisplayName":"Nordium Helmet","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":10,"NordiumBars":4},"Experience":48500,"Name":"NordiumHat","EquipSlot":"ArmorHat","EquipLevel":47,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":8,"Fortitude":58,"Defense":116,"Intellect":40},"Type":"Armor"},{"Level":48,"Category":"Mystic Falls","DiamondsValue":0,"Name":"MystiumBars","Experience":10000,"GoldValue":840,"Recipe":{"MystiumOre":4},"DisplayName":"Mystium Bars","Rarity":4,"Amount":1,"DisplayType":"Material","EquipLevel":48,"AmountMax":20,"Description":"","Type":"Material"},{"DisplayType":"Armor","Equippable":true,"Level":48,"DisplayName":"Nordium Gauntlets","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":15,"NordiumBars":6},"Experience":60500,"Name":"NordiumArms","EquipSlot":"ArmorArms","EquipLevel":48,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":48,"Fortitude":58,"Defense":140,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":49,"DisplayName":"Mystium Dagger","Category":"Mystic Falls","Recipe":{"TwistedLogs":8,"MystiumBars":3},"Experience":50000,"Name":"MystiumDagger","EquipSlot":"Weapon","EquipLevel":49,"EquipStats":{"AttackDamage":168,"Strength":52,"Accuracy":0,"Fortitude":0,"Agility":52,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Armor","Equippable":true,"Level":49,"DisplayName":"Nordium Greaves","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":20,"NordiumBars":6},"Experience":69000,"Name":"NordiumLegs","EquipSlot":"ArmorLegs","EquipLevel":49,"EquipStats":{"Agility":40,"Strength":0,"Accuracy":8,"Fortitude":58,"Defense":164,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":50,"DisplayName":"Mystium Sword","Category":"Mystic Falls","Recipe":{"TwistedLogs":14,"MystiumBars":3},"Experience":69000,"Name":"MystiumSword","EquipSlot":"Weapon","EquipLevel":50,"EquipStats":{"AttackDamage":190,"Strength":70,"Accuracy":10,"Fortitude":0,"Agility":25,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Necklace","Equippable":true,"Level":50,"DisplayName":"Nordium Necklace","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":20,"NordiumBars":5},"Experience":56500,"Name":"NordiumNecklace","EquipSlot":"AccessoryPrimary","EquipLevel":50,"EquipStats":{"Strength":36,"Accuracy":36,"Fortitude":36,"Agility":36,"Intellect":56},"Type":"Accessory"},{"DisplayType":"Armor","Equippable":true,"Level":50,"DisplayName":"Nordium Chestplate","Category":"Elder's Ridge","Recipe":{"ElderwoodLogs":40,"NordiumBars":10},"Experience":111500,"Name":"NordiumTop","EquipSlot":"ArmorTop","EquipLevel":50,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":20,"Fortitude":78,"Defense":204,"Intellect":0},"Type":"Armor"},{"DisplayType":"Weapon","Equippable":true,"Level":51,"DisplayName":"Mystium Polearm","Category":"Mystic Falls","Recipe":{"TwistedLogs":22,"MystiumBars":3},"Experience":94000,"Name":"MystiumPolearm","EquipSlot":"Weapon","EquipLevel":51,"EquipStats":{"AttackDamage":218,"Strength":70,"Accuracy":38,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":51,"DisplayName":"Mystium Wand","Category":"Mystic Falls","Recipe":{"TwistedLogs":21,"MystiumBars":3},"Experience":92000,"Name":"MystiumWand","EquipSlot":"Weapon","EquipLevel":51,"EquipStats":{"AttackDamage":190,"Strength":0,"Accuracy":0,"Fortitude":0,"Agility":47,"Intellect":75},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":52,"DisplayName":"Mystium Scimitar","Category":"Mystic Falls","Recipe":{"TwistedLogs":16,"MystiumBars":5},"Experience":102000,"Name":"MystiumScimitar","EquipSlot":"Weapon","EquipLevel":52,"EquipStats":{"AttackDamage":212,"Strength":70,"Accuracy":0,"Fortitude":0,"Agility":58,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":53,"DisplayName":"Mystium Axe","Category":"Mystic Falls","Recipe":{"TwistedLogs":20,"MystiumBars":5},"Experience":114000,"Name":"MystiumAxe","EquipSlot":"Weapon","EquipLevel":53,"EquipStats":{"AttackDamage":250,"Strength":92,"Accuracy":34,"Fortitude":0,"Agility":0,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Ring","Equippable":true,"Level":53,"DisplayName":"Mystium Ring","Category":"Mystic Falls","Recipe":{"TwistedLogs":14,"MystiumBars":4},"Experience":87000,"Name":"MystiumRing","EquipSlot":"AccessorySecondary","EquipLevel":53,"EquipStats":{"Strength":47,"Accuracy":47,"Fortitude":47,"Agility":47,"Intellect":63},"Type":"Accessory"},{"DisplayType":"Shield","Equippable":true,"Level":54,"DisplayName":"Mystium Shield","Category":"Mystic Falls","Recipe":{"TwistedLogs":18,"MystiumBars":4},"Experience":105000,"Name":"MystiumShield","EquipSlot":"Shield","EquipLevel":54,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":102,"Defense":332,"Intellect":0},"Type":"Weapon"},{"DisplayType":"Weapon","Equippable":true,"Level":54,"DisplayName":"Mystium Staff","Category":"Mystic Falls","Recipe":{"TwistedLogs":22,"MystiumBars":4},"Experience":115000,"Name":"MystiumStaff","EquipSlot":"Weapon","EquipLevel":54,"EquipStats":{"AttackDamage":248,"Strength":0,"Accuracy":52,"Fortitude":0,"Agility":0,"Intellect":92},"Type":"Weapon"},{"DisplayType":"Armor","Equippable":true,"Level":55,"DisplayName":"Mystium Helmet","Category":"Mystic Falls","Recipe":{"TwistedLogs":14,"MystiumBars":4},"Experience":95000,"Name":"MystiumHat","EquipSlot":"ArmorHat","EquipLevel":55,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":14,"Fortitude":102,"Defense":198,"Intellect":70},"Type":"Armor"},{"DisplayType":"Armor","Equippable":true,"Level":56,"DisplayName":"Mystium Gauntlets","Category":"Mystic Falls","Recipe":{"TwistedLogs":16,"MystiumBars":6},"Experience":131000,"Name":"MystiumArms","EquipSlot":"ArmorArms","EquipLevel":56,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":84,"Fortitude":102,"Defense":244,"Intellect":0},"Type":"Armor"},{"DisplayType":"Armor","Equippable":true,"Level":57,"DisplayName":"Mystium Greaves","Category":"Mystic Falls","Recipe":{"TwistedLogs":22,"MystiumBars":6},"Experience":153000,"Name":"MystiumLegs","EquipSlot":"ArmorLegs","EquipLevel":57,"EquipStats":{"Agility":70,"Strength":0,"Accuracy":14,"Fortitude":102,"Defense":290,"Intellect":0},"Type":"Armor"},{"DisplayType":"Necklace","Equippable":true,"Level":58,"DisplayName":"Mystium Necklace","Category":"Mystic Falls","Recipe":{"TwistedLogs":20,"MystiumBars":5},"Experience":130000,"Name":"MystiumNecklace","EquipSlot":"AccessoryPrimary","EquipLevel":58,"EquipStats":{"Strength":64,"Accuracy":64,"Fortitude":64,"Agility":64,"Intellect":98},"Type":"Accessory"},{"DisplayType":"Armor","Equippable":true,"Level":58,"DisplayName":"Mystium Chestplate","Category":"Mystic Falls","Recipe":{"TwistedLogs":40,"MystiumBars":10},"Experience":260000,"Name":"MystiumTop","EquipSlot":"ArmorTop","EquipLevel":58,"EquipStats":{"Agility":0,"Strength":0,"Accuracy":0,"Fortitude":138,"Defense":364,"Intellect":34},"Type":"Armor"}],"Image":"rbxassetid://4631336808","ExperienceMax":500,"StatLevel":"CraftingLevel","CallbackMaxLevel":"GetMaxLevelCrafting","Name":"Crafting","Experience":0,"StatExperience":"CraftingExperience","ImageSize":null,"Enabled":true},"Foraging":{"Level":1,"CallbackExperience":"GetRequiredExperienceForaging","ImageOffset":null,"LevelMax":60,"Items":[],"Image":"rbxassetid://4631336808","ExperienceMax":500,"StatLevel":"ForagingLevel","CallbackMaxLevel":"GetMaxLevelForaging","Name":"Foraging","Experience":0,"StatExperience":"ForagingExperience","ImageSize":null,"Enabled":true},"Woodcutting":{"Level":1,"CallbackExperience":"GetRequiredExperienceWoodcutting","ImageOffset":null,"LevelMax":60,"Items":[],"Image":"rbxassetid://4631336808","ExperienceMax":500,"StatLevel":"WoodcuttingLevel","CallbackMaxLevel":"GetMaxLevelWoodcutting","Name":"Woodcutting","Experience":0,"StatExperience":"WoodcuttingExperience","ImageSize":null,"Enabled":true},"Cooking":{"CallbackExperience":"GetRequiredExperienceCooking","ImageOffset":null,"Image":"rbxassetid://4631336808","Items":[],"StatLevel":"CookingLevel","CallbackMaxLevel":"GetMaxLevelCooking","Name":"Cooking","StatExperience":"CookingExperience","ImageSize":null,"Enabled":false}}}]=]),
		Abilities = game:GetService("HttpService"):JSONDecode([=[{"Magical":{"Passive - Critical Power":{"LevelMax":3,"TreeName":"Magical","Name":"HardHitter","Passive":true,"ImageSize":null,"DisplayName":"Hard Hitter","Image":"rbxassetid://4473956892","TreePosition":null,"PassiveStats":{"CriticalDamage":5},"Description":null,"ImageOffset":null},"Active - Ring of Ice":{"Cooldown":10,"LevelMax":3,"TreeName":"Magical","Name":"RingOfIce","OnServer":null,"ImageSize":null,"DisplayName":"Ring of Ice","Image":"rbxassetid://4473956892","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Passive - Threat Decrease":{"LevelMax":3,"TreeName":"Magical","Name":"Persuasion","Passive":true,"ImageSize":null,"DisplayName":"Persuasion","Image":"rbxassetid://4473956892","TreePosition":null,"Description":null,"ImageOffset":null},"Active - Life Drain":{"Cooldown":12,"LevelMax":3,"TreeName":"Magical","Name":"LifeDrain","OnServer":null,"ImageSize":null,"DisplayName":"Life Drain","Image":"rbxassetid://4473956892","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Passive - Gold Increase":{"TreeName":"Magical","Name":"HandOfMidas","Passive":true,"ImageSize":null,"DisplayName":"Hand of Midas","Image":"rbxassetid://4473956892","TreePosition":null,"LevelMax":3,"PassiveModifiers":{"GainGold":1.020000000000000017763568394},"Description":null,"ImageOffset":null},"Active - Electric Shock":{"Cooldown":10,"LevelMax":2,"TreeName":"Magical","Name":"ElectricShock","OnServer":null,"ImageSize":null,"DisplayName":"Electric Shock","Image":"rbxassetid://4473956892","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Passive - Experience Increase":{"TreeName":"Magical","Name":"Scholar","Passive":true,"ImageSize":null,"DisplayName":"Scholar","Image":"rbxassetid://4473956892","TreePosition":null,"LevelMax":2,"PassiveModifiers":{"GainExperience":1.010000000000000008881784197},"Description":null,"ImageOffset":null},"Active - Ice Barrage":{"Cooldown":6,"LevelMax":3,"TreeName":"Magical","Name":"IceBarrage","OnServer":null,"ImageSize":null,"DisplayName":"Ice Barrage","Image":"rbxassetid://4473956892","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Active - Ring of Chaos":{"Cooldown":8,"LevelMax":3,"TreeName":"Magical","Name":"RingOfChaos","OnServer":null,"ImageSize":null,"DisplayName":"Ring of Chaos","Image":"rbxassetid://4473956892","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Active - Meteor Strike":{"Cooldown":7,"LevelMax":2,"TreeName":"Magical","Name":"MeteorStrike","OnServer":null,"ImageSize":null,"DisplayName":"Meteor Strike","Image":"rbxassetid://4473956892","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Active - Lightning Strike":{"Cooldown":5,"LevelMax":3,"TreeName":"Magical","Name":"LightningStrike","OnServer":null,"ImageSize":null,"DisplayName":"Lightning Strike","Image":"rbxassetid://4473956892","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Passive - Health Regeneration":{"TreeName":"Magical","Name":"Rejuvenation","Passive":true,"ImageSize":null,"DisplayName":"Rejuvenation","Image":"rbxassetid://4473956892","TreePosition":null,"LevelMax":3,"PassiveModifiers":{"HealthRegen":1.05000000000000004440892098501},"Description":null,"ImageOffset":null},"Passive - Stats Increase By Timer":{"LevelMax":2,"TreeName":"Magical","Name":"LastStand","Passive":true,"ImageSize":null,"DisplayName":"Last Stand","Image":"rbxassetid://4473956892","TreePosition":null,"Description":null,"ImageOffset":null},"Passive - Magic Specialist":{"TreeName":"Magical","Name":"MagicSpecialist","Passive":true,"ImageSize":null,"DisplayName":"Magic Specialist","Image":"rbxassetid://4473956892","TreePosition":null,"LevelMax":2,"PassiveModifiers":{"Intellect":1.020000000000000017763568394},"Description":null,"ImageOffset":null},"Active - Fireball":{"Cooldown":3,"LevelMax":3,"TreeName":"Magical","Name":"Fireball","OnServer":null,"ImageSize":null,"DisplayName":"Fireball","Image":"rbxassetid://4473956892","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null}},"Support":{"Active - Heal":{"Cooldown":8,"LevelMax":3,"TreeName":"Support","Name":"Heal","OnServer":null,"ImageSize":null,"DisplayName":"Heal","Image":"rbxassetid://4473957162","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Active - Circle of Life":{"Cooldown":8,"LevelMax":3,"TreeName":"Support","Name":"CircleOfLife","OnServer":null,"ImageSize":null,"DisplayName":"Circle of Life","Image":"rbxassetid://4473957162","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Active - Party Shield":{"Cooldown":12,"LevelMax":3,"TreeName":"Support","Name":"PartyShield","OnServer":null,"ImageSize":null,"DisplayName":"Party Shield","Image":"rbxassetid://4473957162","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Passive - Health Increase":{"TreeName":"Support","Name":"Vitality","Passive":true,"ImageSize":null,"DisplayName":"Vitality","Image":"rbxassetid://4473957162","TreePosition":null,"LevelMax":3,"PassiveModifiers":{"HealthMax":1.020000000000000017763568394},"Description":null,"ImageOffset":null},"Active - Shield":{"Cooldown":8,"LevelMax":3,"TreeName":"Support","Name":"Shield","OnServer":null,"ImageSize":null,"DisplayName":"Shield","Image":"rbxassetid://4473957162","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Active - Battle Shout":{"Cooldown":24,"LevelMax":2,"TreeName":"Support","Name":"BattleShout","OnServer":null,"ImageSize":null,"DisplayName":"Battle Shout","Image":"rbxassetid://4473957162","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Active - Healing Ring":{"Cooldown":6,"LevelMax":3,"TreeName":"Support","Name":"HealingRing","OnServer":null,"ImageSize":null,"DisplayName":"Healing Ring","Image":"rbxassetid://4473957162","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Passive - Threat Increase":{"LevelMax":2,"TreeName":"Support","Name":"Intimidation","Passive":true,"ImageSize":null,"DisplayName":"Intimidation","Image":"rbxassetid://4473957162","TreePosition":null,"Description":null,"ImageOffset":null},"Passive - Gem Drop Rate":{"TreeName":"Support","Name":"GemProsperity","Passive":true,"ImageSize":null,"DisplayName":"Gem Prosperity","Image":"rbxassetid://4473957162","TreePosition":null,"LevelMax":3,"PassiveModifiers":{"LootGemDrop":1.020000000000000017763568394},"Description":null,"ImageOffset":null},"Passive - Healing Done":{"TreeName":"Support","Name":"Vigor","Passive":true,"ImageSize":null,"DisplayName":"Vigor","Image":"rbxassetid://4473957162","TreePosition":null,"LevelMax":3,"PassiveModifiers":{"DoneHealing":1.030000000000000026645352591},"Description":null,"ImageOffset":null},"Passive - Defensive Mastery":{"LevelMax":3,"TreeName":"Support","Name":"DefensiveMastery","Passive":true,"ImageSize":null,"DisplayName":"Defensive Mastery","Image":"rbxassetid://4473957162","TreePosition":null,"Description":null,"ImageOffset":null},"Active - Taunt":{"Cooldown":10,"LevelMax":2,"TreeName":"Support","Name":"Taunt","OnServer":null,"ImageSize":null,"DisplayName":"Taunt","Image":"rbxassetid://4473957162","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Active - Divine Power":{"Cooldown":20,"LevelMax":3,"TreeName":"Support","Name":"DivinePower","OnServer":null,"ImageSize":null,"DisplayName":"Divine Power","Image":"rbxassetid://4473957162","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Passive - Attack Speed":{"TreeName":"Support","Name":"Swiftness","Passive":true,"ImageSize":null,"DisplayName":"Swiftness","Image":"rbxassetid://4473957162","TreePosition":null,"LevelMax":2,"PassiveModifiers":{"AttackRate":1.05000000000000004440892098501},"Description":null,"ImageOffset":null},"Passive - Support Specialist":{"TreeName":"Support","Name":"SupportSpecialist","Passive":true,"ImageSize":null,"DisplayName":"Support Specialist","Image":"rbxassetid://4473957162","TreePosition":null,"LevelMax":2,"PassiveModifiers":{"Fortitude":1.030000000000000026645352591},"Description":null,"ImageOffset":null}},"Physical":{"Passive - Critical Knowledge":{"LevelMax":3,"TreeName":"Physical","Name":"CriticalKnowledge","Passive":true,"ImageSize":null,"DisplayName":"Critical Knowledge","Image":"rbxassetid://4473957046","TreePosition":null,"PassiveStats":{"CriticalHit":1},"Description":null,"ImageOffset":null},"Active - Dash":{"Cooldown":5,"LevelMax":2,"TreeName":"Physical","Name":"Dash","OnServer":null,"ImageSize":null,"DisplayName":"Dash","Image":"rbxassetid://4473957046","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Active - Berserk":{"Cooldown":16,"LevelMax":2,"TreeName":"Physical","Name":"Berserk","OnServer":null,"ImageSize":null,"DisplayName":"Berserk","Image":"rbxassetid://4473957046","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Passive - Increase Dodge":{"TreeName":"Physical","Name":"Quickness","Passive":true,"ImageSize":null,"DisplayName":"Quickness","Image":"rbxassetid://4473957046","TreePosition":null,"LevelMax":3,"PassiveModifiers":{"Dodge":1.030000000000000026645352591},"Description":null,"ImageOffset":null},"Passive - Physical Specialist":{"TreeName":"Physical","Name":"PhysicalSpecialist","Passive":true,"ImageSize":null,"DisplayName":"Physical Specialist","Image":"rbxassetid://4473957046","TreePosition":null,"LevelMax":2,"PassiveModifiers":{"Strength":1.020000000000000017763568394},"Description":null,"ImageOffset":null},"Passive - Lightweight":{"LevelMax":2,"TreeName":"Physical","Name":"Lightweight","Passive":true,"ImageSize":null,"DisplayName":"Lightweight","Image":"rbxassetid://4473957046","TreePosition":null,"PassiveStats":{"WalkSpeed":1},"Description":null,"ImageOffset":null},"Active - Cyclone":{"Cooldown":8,"LevelMax":3,"TreeName":"Physical","Name":"Cyclone","OnServer":null,"ImageSize":null,"DisplayName":"Cyclone","Image":"rbxassetid://4473957046","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Active - Stomp":{"Cooldown":12,"LevelMax":2,"TreeName":"Physical","Name":"Stomp","OnServer":null,"ImageSize":null,"DisplayName":"Stomp","Image":"rbxassetid://4473957046","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Misc - Basic Attack":{"Cooldown":0.125,"OnServer":null,"Name":"BasicAttack","Image":"rbxassetid://4473957046","ImageSize":null,"DisplayName":"Basic Attack","Description":"Basic Attack","Duration":0,"OnClient":null,"ImageOffset":null},"Passive - Rage":{"LevelMax":3,"TreeName":"Physical","Name":"Rage","Passive":true,"ImageSize":null,"DisplayName":"Rage","Image":"rbxassetid://4473957046","TreePosition":null,"Description":null,"ImageOffset":null},"Active - Fire Blade":{"Cooldown":12,"LevelMax":3,"TreeName":"Physical","Name":"FireBlade","OnServer":null,"ImageSize":null,"DisplayName":"Fire Blade","Image":"rbxassetid://4473957046","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Passive - Attack Damage":{"TreeName":"Physical","Name":"Fury","Passive":true,"ImageSize":null,"DisplayName":"Fury","Image":"rbxassetid://4473957046","TreePosition":null,"LevelMax":2,"PassiveModifiers":{"AttackDamage":1.020000000000000017763568394},"Description":null,"ImageOffset":null},"Active - Rock Strike":{"Cooldown":6,"LevelMax":4,"TreeName":"Physical","Name":"RockStrike","OnServer":null,"ImageSize":null,"DisplayName":"Rock Strike","Image":"rbxassetid://4473957046","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Active - Poison Spray":{"Cooldown":9,"LevelMax":3,"TreeName":"Physical","Name":"PoisonSpray","OnServer":null,"ImageSize":null,"DisplayName":"Poison Spray","Image":"rbxassetid://4473957046","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null},"Passive - Increase Hit":{"TreeName":"Physical","Name":"Precision","Passive":true,"ImageSize":null,"DisplayName":"Precision","Image":"rbxassetid://4473957046","TreePosition":null,"LevelMax":3,"PassiveModifiers":{"Hit":1.030000000000000026645352591},"Description":null,"ImageOffset":null},"Misc - Sheathe / Unsheathe":{"Cooldown":1,"OnServer":null,"Name":"SheatheUnsheathe","Image":"rbxassetid://4473957046","ImageSize":null,"DisplayName":"Sheathe / Unsheathe","Description":"Sheathes or unsheathes your weapon.","Duration":0,"OnClient":null,"ImageOffset":null},"Active - Heroic Slam":{"Cooldown":24,"LevelMax":3,"TreeName":"Physical","Name":"HeroicSlam","OnServer":null,"ImageSize":null,"DisplayName":"Heroic Slam","Image":"rbxassetid://4473957046","TreePosition":null,"Description":null,"OnClient":null,"Duration":0,"ImageOffset":null}}}]=]),
		Flora = game:GetService("HttpService"):JSONDecode([=[{"Flora":{"1 - Red Berries":{"Rarity":1,"GoldValue":15,"ResourceExperience":360,"DisplayType":"Material","Amount":1,"Name":"RedBerries","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Red Berries","ResourceLevel":6,"EquipLevel":6,"AmountMax":30,"Description":"Found in Pleasant Valley","Type":"Material"},"6 - Viking Lotus":{"Rarity":3,"GoldValue":140,"ResourceExperience":2250,"DisplayType":"Material","Amount":1,"Name":"VikingLotus","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Viking Lotus","ResourceLevel":40,"EquipLevel":40,"AmountMax":50,"Description":"Found in Elder's Ridge","Type":"Material"},"4 - Ice Thorn":{"Rarity":2,"GoldValue":105,"ResourceExperience":1700,"DisplayType":"Material","Amount":1,"Name":"IceThorn","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Ice Thorn","ResourceLevel":30,"EquipLevel":30,"AmountMax":30,"Description":"Found in Icy Peak","Type":"Material"},"5 - Coconut":{"Rarity":3,"GoldValue":100,"ResourceExperience":2000,"DisplayType":"Material","Amount":1,"Name":"Coconut","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Coconut","ResourceLevel":32,"EquipLevel":32,"AmountMax":50,"Description":"Found in Moai Shores","Type":"Material"},"3 - Bog Stems":{"Rarity":2,"GoldValue":40,"ResourceExperience":1425,"DisplayType":"Material","Amount":1,"Name":"BogStems","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Bog Stems","ResourceLevel":16,"EquipLevel":16,"AmountMax":50,"Description":"Found in Mysterious Marsh","Type":"Material"},"5 - Coral Bits":{"Rarity":3,"GoldValue":150,"ResourceExperience":2000,"DisplayType":"Material","Amount":1,"Name":"CoralBits","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Coral Bits","ResourceLevel":38,"EquipLevel":38,"AmountMax":30,"Description":"Found in Moai Shores","Type":"Material"},"4 - Frosty Root":{"Rarity":2,"GoldValue":70,"ResourceExperience":1700,"DisplayType":"Material","Amount":1,"Name":"FrostyRoot","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Frosty Root","ResourceLevel":24,"EquipLevel":24,"AmountMax":50,"Description":"Found in Icy Peak","Type":"Material"},"6 - Frozen Fungi":{"Rarity":3,"GoldValue":210,"ResourceExperience":2250,"DisplayType":"Material","Amount":1,"Name":"FrozenFungi","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Frozen Fungi","ResourceLevel":46,"EquipLevel":46,"AmountMax":30,"Description":"Found in Elder's Ridge","Type":"Material"},"1 - Valley Flower":{"Rarity":1,"GoldValue":10,"ResourceExperience":360,"DisplayType":"Material","Amount":1,"Name":"ValleyFlower","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Valley Flower","ResourceLevel":1,"EquipLevel":1,"AmountMax":50,"Description":"Found in Pleasant Valley","Type":"Material"},"2 - Runic Stone":{"Rarity":1,"GoldValue":30,"ResourceExperience":870,"DisplayType":"Material","Amount":1,"Name":"RunicStone","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Runic Stone","ResourceLevel":14,"EquipLevel":14,"AmountMax":30,"Description":"Found in Lost Ruins","Type":"Material"},"7 - Golden Mushroom":{"Rarity":4,"GoldValue":200,"ResourceExperience":2550,"DisplayType":"Material","Amount":1,"Name":"GoldenMushroom","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Golden Mushroom","ResourceLevel":48,"EquipLevel":48,"AmountMax":50,"Description":"Found in Mystic Falls","Type":"Material"},"2 - Ancient Sunflower":{"Rarity":1,"GoldValue":20,"ResourceExperience":870,"DisplayType":"Material","Amount":1,"Name":"AncientSunflower","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Ancient Sunflower","ResourceLevel":8,"EquipLevel":8,"AmountMax":50,"Description":"Found in Lost Ruins","Type":"Material"},"3 - Poison Berries":{"Rarity":2,"GoldValue":60,"ResourceExperience":1425,"DisplayType":"Material","Amount":1,"Name":"PoisonBerries","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Poison Berries","ResourceLevel":22,"EquipLevel":22,"AmountMax":30,"Description":"Found in Mysterious Marsh","Type":"Material"},"7 - Magic Berries":{"Rarity":4,"GoldValue":200,"ResourceExperience":2550,"DisplayType":"Material","Amount":1,"Name":"MagicBerries","DiamondsValue":0,"ResourceCooldown":30,"DisplayName":"Magic Berries","ResourceLevel":54,"EquipLevel":54,"AmountMax":50,"Description":"Found in Mystic Falls","Type":"Material"}}}]=]),
	}
	--Data = game.ReplicatedStorage.Resources.Data
	--Abilities = game.ReplicatedStorage.Resources.Abilities?
	--Flora = Recur blabla.Flora without loop
	local Paths = {
		[3214306383] = game:GetService("HttpService"):JSONDecode([=[[{"Pos":[200.969390869140625,68.3841400146484375,32.319347381591796875],"Conn":[2]},{"Pos":[196.4405364990234375,68.49604034423828125,32.286136627197265625],"Conn":[1,3]},{"Pos":[187.0713958740234375,68.97592926025390625,32.313709259033203125],"Conn":[2,4]},{"Pos":[177.362762451171875,69.17858123779296875,32.190601348876953125],"Conn":[3,5]},{"Pos":[166.1270294189453125,69.32366180419921875,31.8927631378173828125],"Conn":[4,6]},{"Pos":[157.0566864013671875,69.2728118896484375,28.6065998077392578125],"Conn":[5,7]},{"Pos":[146.683319091796875,69.26915740966796875,25.1987361907958984375],"Conn":[6,8]},{"Pos":[136.9047088623046875,68.89337921142578125,22.3754634857177734375],"Conn":[7,9]},{"Pos":[127.53983306884765625,69.3817901611328125,19.808353424072265625],"Conn":[8,10]},{"Pos":[117.5728759765625,68.5561370849609375,17.0761871337890625],"Conn":[9,11]},{"Pos":[107.18720245361328125,67.98088836669921875,14.2292938232421875],"Conn":[10,12]},{"Pos":[97.45500946044921875,68.379058837890625,11.5615177154541015625],"Conn":[11,13]},{"Pos":[90.25290679931640625,68.4821624755859375,10.08406829833984375],"Conn":[12,14]},{"Pos":[80.2057037353515625,68.48908233642578125,8.1298007965087890625],"Conn":[13,15]},{"Pos":[69.8052825927734375,67.22112274169921875,5.987522602081298828125],"Conn":[14,16]},{"Pos":[62.962116241455078125,66.7376251220703125,4.577953338623046875],"Conn":[15,17]},{"Pos":[52.17014312744140625,65.839019775390625,2.542366504669189453125],"Conn":[16,18]},{"Pos":[36.4109344482421875,63.31835174560546875,0.16134493052959442138671875],"Conn":[17,19]},{"Pos":[25.5407733917236328125,61.72087860107421875,-3.0845153331756591796875],"Conn":[18,20]},{"Pos":[13.81929302215576171875,61.150959014892578125,-5.00956821441650390625],"Conn":[19,43,38,21]},{"Pos":[-2.5452349185943603515625,58.177570343017578125,-6.894187450408935546875],"Conn":[20,22]},{"Pos":[-17.9445438385009765625,56.527942657470703125,-7.60927677154541015625],"Conn":[21,23]},{"Pos":[-30.892978668212890625,54.710353851318359375,-8.21022129058837890625],"Conn":[22]},{"Pos":[1.162290096282958984375,59.259307861328125,-19.72852325439453125],"Conn":[43,25]},{"Pos":[-6.791117191314697265625,57.81612396240234375,-28.2386837005615234375],"Conn":[24,26]},{"Pos":[-17.620243072509765625,56.53388214111328125,-39.86684417724609375],"Conn":[25,27]},{"Pos":[-24.5026493072509765625,54.304119110107421875,-47.7629241943359375],"Conn":[26,28]},{"Pos":[-32.370632171630859375,53.134735107421875,-56.301849365234375],"Conn":[27,29]},{"Pos":[-42.37908172607421875,51.494327545166015625,-68.3277740478515625],"Conn":[28,30]},{"Pos":[-54.86644744873046875,50.021030426025390625,-81.90891265869140625],"Conn":[29,31]},{"Pos":[-67.7054290771484375,49.854152679443359375,-91.9792327880859375],"Conn":[30,32]},{"Pos":[-79.68950653076171875,49.975627899169921875,-97.54120635986328125],"Conn":[31,33]},{"Pos":[-94.0244140625,49.534107208251953125,-103.81314849853515625],"Conn":[32,34]},{"Pos":[-108.49268341064453125,49.78481292724609375,-109.543853759765625],"Conn":[33,35]},{"Pos":[-121.80037689208984375,49.722583770751953125,-114.8160552978515625],"Conn":[34,36]},{"Pos":[-135.625091552734375,50.068408966064453125,-120.2928314208984375],"Conn":[35,37]},{"Pos":[-150.09405517578125,50.12469482421875,-125.3792572021484375],"Conn":[36,44]},{"Pos":[20.276721954345703125,60.99737548828125,-15.06297016143798828125],"Conn":[20,39]},{"Pos":[20.4902477264404296875,59.6526641845703125,-28.9678955078125],"Conn":[38,40]},{"Pos":[21.225025177001953125,58.20922088623046875,-42.12143707275390625],"Conn":[39,41]},{"Pos":[21.8844242095947265625,57.4725189208984375,-53.924633026123046875],"Conn":[40,42]},{"Pos":[20.4758281707763671875,57.27191162109375,-65.98567962646484375],"Conn":[41]},{"Pos":[8.5700855255126953125,60.312252044677734375,-12.3233890533447265625],"Conn":[20,24]},{"Pos":[-162.94696044921875,50.9455718994140625,-128.577728271484375],"Conn":[37,45]},{"Pos":[-177.39801025390625,51.110027313232421875,-130.7412261962890625],"Conn":[44,46]},{"Pos":[-189.3386688232421875,51.566959381103515625,-131.4970855712890625],"Conn":[45,47]},{"Pos":[-202.970794677734375,51.819091796875,-132.628570556640625],"Conn":[46,49]},{"Pos":[-219.356109619140625,51.90352630615234375,-135.7956695556640625],"Conn":[49,50]},{"Pos":[-212.0682220458984375,52.041263580322265625,-133.2870635986328125],"Conn":[47,48]},{"Pos":[-226.5712432861328125,53.43907928466796875,-130.6341094970703125],"Conn":[48,51]},{"Pos":[-236.32147216796875,54.654788970947265625,-125.29367828369140625],"Conn":[50,52]},{"Pos":[-247.39007568359375,54.996196746826171875,-118.5290985107421875],"Conn":[51,53]},{"Pos":[-257.28167724609375,54.138439178466796875,-114.254302978515625],"Conn":[52,54]},{"Pos":[-265.91070556640625,54.78363037109375,-108.709381103515625],"Conn":[53,55]},{"Pos":[-275.0997314453125,56.045375823974609375,-109.20009613037109375],"Conn":[54,56]},{"Pos":[-285.71136474609375,55.631519317626953125,-110.17276763916015625],"Conn":[55,57]},{"Pos":[-296.211822509765625,56.1127166748046875,-111.65386199951171875],"Conn":[56,58]},{"Pos":[-305.1995849609375,56.311595916748046875,-112.20391845703125],"Conn":[57,59]},{"Pos":[-314.94537353515625,57.149456024169921875,-114.86763763427734375],"Conn":[58,60]},{"Pos":[-326.497650146484375,57.048824310302734375,-118.2885589599609375],"Conn":[59,61]},{"Pos":[-332.891815185546875,56.987735748291015625,-124.5562591552734375],"Conn":[60,62]},{"Pos":[-337.43328857421875,57.031574249267578125,-129.3254852294921875],"Conn":[61,63]},{"Pos":[-341.84619140625,57.918659210205078125,-137.799468994140625],"Conn":[62,64]},{"Pos":[-343.0799560546875,57.78038787841796875,-146.9063720703125],"Conn":[63,65]},{"Pos":[-345.853057861328125,58.267742156982421875,-155.43707275390625],"Conn":[64,66]},{"Pos":[-357.123046875,59.455707550048828125,-161.1351776123046875],"Conn":[65,68,67]},{"Pos":[-366.78814697265625,59.556720733642578125,-162.9506988525390625],"Conn":[66,78]},{"Pos":[-350.01031494140625,58.175537109375,-169.815460205078125],"Conn":[69,66]},{"Pos":[-342.9715576171875,57.38382720947265625,-176.354461669921875],"Conn":[68,70]},{"Pos":[-334.6439208984375,57.137264251708984375,-184.0211029052734375],"Conn":[69,71]},{"Pos":[-324.573150634765625,56.200160980224609375,-190.125152587890625],"Conn":[70,72]},{"Pos":[-313.58404541015625,55.87564849853515625,-195.501739501953125],"Conn":[71,73]},{"Pos":[-304.119140625,55.480892181396484375,-199.2030792236328125],"Conn":[72,74]},{"Pos":[-292.597198486328125,54.44443511962890625,-200.4932708740234375],"Conn":[73,75]},{"Pos":[-280.968902587890625,53.769744873046875,-199.8998565673828125],"Conn":[74,76]},{"Pos":[-268.673736572265625,54.0741729736328125,-198.7664031982421875],"Conn":[75,77]},{"Pos":[-256.621612548828125,53.373706817626953125,-194.525970458984375],"Conn":[76,308]},{"Pos":[-375.318817138671875,60.15874481201171875,-164.49334716796875],"Conn":[67,79]},{"Pos":[-387.5452880859375,60.345333099365234375,-165.921875],"Conn":[78,80]},{"Pos":[-400.6700439453125,60.739482879638671875,-167.3721923828125],"Conn":[79,81]},{"Pos":[-412.909393310546875,61.0198211669921875,-168.72454833984375],"Conn":[80,82]},{"Pos":[-425.12030029296875,61.2523956298828125,-170.0738525390625],"Conn":[81,83]},{"Pos":[-435.761810302734375,61.57509613037109375,-171.2496185302734375],"Conn":[82,84]},{"Pos":[-446.50701904296875,61.250102996826171875,-171.59613037109375],"Conn":[83,85]},{"Pos":[-454.694183349609375,61.0562744140625,-170.250518798828125],"Conn":[84,86]},{"Pos":[-462.735870361328125,60.838886260986328125,-167.013092041015625],"Conn":[85,87]},{"Pos":[-469.37823486328125,60.649814605712890625,-165.2029571533203125],"Conn":[86,88]},{"Pos":[-479.772186279296875,60.60347747802734375,-161.1757965087890625],"Conn":[87,89]},{"Pos":[-487.104400634765625,60.360931396484375,-157.41986083984375],"Conn":[88,90]},{"Pos":[-496.739288330078125,60.896518707275390625,-151.8664703369140625],"Conn":[89,91]},{"Pos":[-505.130462646484375,61.36904144287109375,-146.571563720703125],"Conn":[90,92]},{"Pos":[-513.35565185546875,61.829395294189453125,-141.5255584716796875],"Conn":[91,93]},{"Pos":[-522.455810546875,62.3390655517578125,-135.984893798828125],"Conn":[92,94]},{"Pos":[-531.61865234375,62.884319305419921875,-130.044525146484375],"Conn":[93,95]},{"Pos":[-540.61810302734375,64.13442230224609375,-124.20517730712890625],"Conn":[94,96]},{"Pos":[-544.3480224609375,64.75152587890625,-119.87079620361328125],"Conn":[95,97]},{"Pos":[-549.86529541015625,64.88338470458984375,-112.7625579833984375],"Conn":[96,98]},{"Pos":[-552.29595947265625,65.00731658935546875,-106.6256866455078125],"Conn":[97,99]},{"Pos":[-556.84619140625,65.01567840576171875,-95.0926361083984375],"Conn":[98,100]},{"Pos":[-560.8271484375,65.2392425537109375,-84.99697113037109375],"Conn":[99,101]},{"Pos":[-565.91650390625,65.27690887451171875,-73.239013671875],"Conn":[100,102]},{"Pos":[-569.33538818359375,65.324859619140625,-67.04132080078125],"Conn":[101,103]},{"Pos":[-572.5657958984375,65.49224090576171875,-59.540287017822265625],"Conn":[102,104]},{"Pos":[-574.6710205078125,66.08358001708984375,-51.23079681396484375],"Conn":[103,105]},{"Pos":[-575.44818115234375,65.4608154296875,-41.358341217041015625],"Conn":[104,108,106]},{"Pos":[-572.755615234375,65.244232177734375,-32.088348388671875],"Conn":[105,107]},{"Pos":[-569.11846923828125,65.360992431640625,-23.38097381591796875],"Conn":[106]},{"Pos":[-582.50250244140625,65.76677703857421875,-41.92850494384765625],"Conn":[105,109]},{"Pos":[-592.03692626953125,65.9534759521484375,-40.875011444091796875],"Conn":[108,110]},{"Pos":[-603.9267578125,66.4131622314453125,-37.56504058837890625],"Conn":[109,111]},{"Pos":[-614.77801513671875,67.4580078125,-33.112041473388671875],"Conn":[110,112]},{"Pos":[-626.53094482421875,68.13116455078125,-27.0861759185791015625],"Conn":[111,113]},{"Pos":[-640.02606201171875,68.65380859375,-17.87372589111328125],"Conn":[112,114]},{"Pos":[-646.94317626953125,68.71326446533203125,-9.7650279998779296875],"Conn":[113,115]},{"Pos":[-650.9798583984375,68.1430511474609375,-0.992937743663787841796875],"Conn":[114,116]},{"Pos":[-657.94281005859375,68.20703125,4.930036067962646484375],"Conn":[115,117]},{"Pos":[-668.796875,68.7796630859375,11.54346752166748046875],"Conn":[116,121,118]},{"Pos":[-680.913330078125,68.53363800048828125,16.5283050537109375],"Conn":[117,119]},{"Pos":[-692.64227294921875,67.97173309326171875,20.2216339111328125],"Conn":[118,120]},{"Pos":[-704.04718017578125,67.59314727783203125,23.4755954742431640625],"Conn":[119]},{"Pos":[-669.08544921875,69.05605316162109375,22.431148529052734375],"Conn":[117,122]},{"Pos":[-669.1119384765625,68.9762725830078125,35.691852569580078125],"Conn":[121,123]},{"Pos":[-670.7640380859375,68.87110137939453125,47.977191925048828125],"Conn":[122,124]},{"Pos":[-672.47918701171875,68.95035552978515625,62.11963653564453125],"Conn":[123,125]},{"Pos":[-673.388916015625,68.6905364990234375,75.4729461669921875],"Conn":[124,126]},{"Pos":[-673.81500244140625,68.8120269775390625,88.84905242919921875],"Conn":[125,127]},{"Pos":[-670.11834716796875,69.22557830810546875,100.67140960693359375],"Conn":[126,128]},{"Pos":[-669.07598876953125,69.3360443115234375,110.92394256591796875],"Conn":[127,129]},{"Pos":[-665.88165283203125,69.23220062255859375,117.26332855224609375],"Conn":[128,130]},{"Pos":[-661.85760498046875,69.08991241455078125,122.46360015869140625],"Conn":[129,131]},{"Pos":[-657.113525390625,68.60108184814453125,128.229522705078125],"Conn":[130,132]},{"Pos":[-651.11590576171875,67.93021392822265625,135.0648345947265625],"Conn":[131,133]},{"Pos":[-643.12799072265625,67.19623565673828125,142.9305419921875],"Conn":[132,134]},{"Pos":[-636.39385986328125,66.720123291015625,151.10382080078125],"Conn":[133,135]},{"Pos":[-630.28955078125,65.8999786376953125,154.728363037109375],"Conn":[134,136]},{"Pos":[-620.91571044921875,65.22930908203125,157.674041748046875],"Conn":[135,137]},{"Pos":[-614.07135009765625,65.03975677490234375,159.6596221923828125],"Conn":[136,138]},{"Pos":[-602.379150390625,64.17868804931640625,163.1318206787109375],"Conn":[137,139]},{"Pos":[-594.59814453125,63.846729278564453125,161.091278076171875],"Conn":[138,140]},{"Pos":[-588.730224609375,64.01679229736328125,157.638580322265625],"Conn":[139,141]},{"Pos":[-582.3333740234375,62.568737030029296875,160.4422760009765625],"Conn":[140,142]},{"Pos":[-576.29583740234375,62.25533294677734375,161.71380615234375],"Conn":[141,143]},{"Pos":[-570.575927734375,61.5335235595703125,165.7133636474609375],"Conn":[142,144]},{"Pos":[-565.31866455078125,61.081172943115234375,168.7446441650390625],"Conn":[143,145]},{"Pos":[-562.41961669921875,61.313213348388671875,172.5870361328125],"Conn":[144,146]},{"Pos":[-557.7369384765625,61.208347320556640625,176.5435791015625],"Conn":[145,147]},{"Pos":[-549.15460205078125,60.26740264892578125,177.67120361328125],"Conn":[146,148]},{"Pos":[-542.21820068359375,59.488727569580078125,178.29779052734375],"Conn":[147,149]},{"Pos":[-535.20166015625,59.187740325927734375,180.940887451171875],"Conn":[148,151]},{"Pos":[-517.696533203125,58.22904205322265625,183.4932861328125],"Conn":[151,152]},{"Pos":[-525.23931884765625,58.522369384765625,182.1121978759765625],"Conn":[149,150]},{"Pos":[-509.632110595703125,57.796131134033203125,184.847412109375],"Conn":[150,153]},{"Pos":[-501.925018310546875,57.760524749755859375,185.973785400390625],"Conn":[152,154]},{"Pos":[-493.3262939453125,57.444095611572265625,186.914520263671875],"Conn":[153,155]},{"Pos":[-480.504150390625,57.01507568359375,187.81396484375],"Conn":[154,156]},{"Pos":[-470.909942626953125,56.62003326416015625,188.637451171875],"Conn":[155,157]},{"Pos":[-459.791473388671875,54.793277740478515625,189.5277862548828125],"Conn":[156,158]},{"Pos":[-446.69671630859375,54.142608642578125,190.5830230712890625],"Conn":[157,159]},{"Pos":[-436.934051513671875,54.2139892578125,191.902099609375],"Conn":[158,160]},{"Pos":[-427.428314208984375,54.126316070556640625,192.23272705078125],"Conn":[159,161]},{"Pos":[-419.732574462890625,54.709224700927734375,192.07745361328125],"Conn":[160,162]},{"Pos":[-413.798187255859375,55.033111572265625,193.2175750732421875],"Conn":[161,163]},{"Pos":[-406.8748779296875,55.774013519287109375,194.2105560302734375],"Conn":[162,164]},{"Pos":[-401.2222900390625,56.47499847412109375,196.3375091552734375],"Conn":[163,165]},{"Pos":[-389.80645751953125,57.284656524658203125,199.8372802734375],"Conn":[164,166]},{"Pos":[-384.587432861328125,57.189960479736328125,204.8577423095703125],"Conn":[165,167]},{"Pos":[-383.2171630859375,58.363861083984375,214.9310302734375],"Conn":[166,168]},{"Pos":[-376.850341796875,59.502498626708984375,224.7165985107421875],"Conn":[167,169]},{"Pos":[-370.602447509765625,60.990055084228515625,231.2700653076171875],"Conn":[168,170]},{"Pos":[-364.09588623046875,61.652721405029296875,238.2473907470703125],"Conn":[169,171]},{"Pos":[-358.99041748046875,62.732257843017578125,243.8917236328125],"Conn":[170,172]},{"Pos":[-353.2132568359375,64.993377685546875,250.2044525146484375],"Conn":[171,173]},{"Pos":[-347.613861083984375,66.4870147705078125,255.9644012451171875],"Conn":[172,174]},{"Pos":[-342.5091552734375,68.87554931640625,261.022308349609375],"Conn":[173,175]},{"Pos":[-336.369842529296875,71.20473480224609375,266.723541259765625],"Conn":[174,176]},{"Pos":[-327.092529296875,74.7789154052734375,273.1646728515625],"Conn":[175,177]},{"Pos":[-320.63018798828125,77.88352203369140625,279.022186279296875],"Conn":[176,178]},{"Pos":[-316.635162353515625,80.59161376953125,282.563201904296875],"Conn":[177,179]},{"Pos":[-306.36004638671875,85.13021087646484375,289.34661865234375],"Conn":[178,180]},{"Pos":[-300.31597900390625,88.81887054443359375,296.5235595703125],"Conn":[179,181]},{"Pos":[-291.705780029296875,92.51441192626953125,305.4556884765625],"Conn":[180,182]},{"Pos":[-283.99005126953125,95.96581268310546875,313.495635986328125],"Conn":[181,183]},{"Pos":[-276.0426025390625,98.52239227294921875,321.777099609375],"Conn":[182,184]},{"Pos":[-268.735107421875,100.86928558349609375,329.391448974609375],"Conn":[183,185]},{"Pos":[-261.129791259765625,103.20780181884765625,337.31622314453125],"Conn":[184,186]},{"Pos":[-252.73883056640625,105.2883453369140625,346.05950927734375],"Conn":[185,187]},{"Pos":[-246.8267364501953125,107.190826416015625,352.219879150390625],"Conn":[186,188]},{"Pos":[-239.1444244384765625,109.05657196044921875,360.224945068359375],"Conn":[187,189]},{"Pos":[-233.158599853515625,110.2176666259765625,366.461883544921875],"Conn":[188,191]},{"Pos":[-225.7502899169921875,112.2708587646484375,374.181396484375],"Conn":[191,192]},{"Pos":[-226.389068603515625,111.70046234130859375,368.05218505859375],"Conn":[189,190]},{"Pos":[-217.9078521728515625,114.35080718994140625,378.4521484375],"Conn":[190,193]},{"Pos":[-206.361968994140625,116.47727203369140625,383.130218505859375],"Conn":[192,194]},{"Pos":[-192.2957305908203125,118.96527099609375,386.54730224609375],"Conn":[193,195]},{"Pos":[-178.506805419921875,121.50634002685546875,389.66107177734375],"Conn":[194,196]},{"Pos":[-165.5980377197265625,124.13307952880859375,389.581329345703125],"Conn":[195,197]},{"Pos":[-152.0532073974609375,127.01250457763671875,387.48760986328125],"Conn":[196,198]},{"Pos":[-137.6645050048828125,129.2069854736328125,385.26007080078125],"Conn":[197,199]},{"Pos":[-129.719482421875,131.0023651123046875,383.636962890625],"Conn":[198,200]},{"Pos":[-121.0276336669921875,133.180938720703125,384.79510498046875],"Conn":[199,201]},{"Pos":[-112.13811492919921875,134.55865478515625,389.491912841796875],"Conn":[200,202]},{"Pos":[-97.7421875,136.9066162109375,398.86700439453125],"Conn":[201,203]},{"Pos":[-88.27220916748046875,138.269134521484375,404.851593017578125],"Conn":[202,204]},{"Pos":[-77.0954742431640625,139.801177978515625,411.17462158203125],"Conn":[203,205]},{"Pos":[-67.1145172119140625,142.08538818359375,415.228179931640625],"Conn":[204,206]},{"Pos":[-55.469146728515625,143.729705810546875,414.621978759765625],"Conn":[205,207]},{"Pos":[-42.57265472412109375,145.68408203125,412.112335205078125],"Conn":[206,208]},{"Pos":[-31.7146549224853515625,147.323333740234375,409.74261474609375],"Conn":[207,209]},{"Pos":[-19.6064090728759765625,148.7974395751953125,406.13800048828125],"Conn":[208,210]},{"Pos":[-8.269939422607421875,151.1573944091796875,402.2889404296875],"Conn":[209,211]},{"Pos":[2.029683589935302734375,152.69305419921875,397.67791748046875],"Conn":[210,212]},{"Pos":[6.889957427978515625,152.9146270751953125,393.681488037109375],"Conn":[211,213]},{"Pos":[13.3682003021240234375,153.1124725341796875,390.245574951171875],"Conn":[212,214]},{"Pos":[17.621692657470703125,153.085968017578125,384.037139892578125],"Conn":[213,215]},{"Pos":[23.2631740570068359375,153.388519287109375,377.536895751953125],"Conn":[214,216]},{"Pos":[28.2550830841064453125,153.0785369873046875,372.9339599609375],"Conn":[215,217]},{"Pos":[34.85971832275390625,152.7862091064453125,366.4512939453125],"Conn":[216,218]},{"Pos":[36.74556732177734375,153.2218017578125,361.317718505859375],"Conn":[217,219]},{"Pos":[38.5152740478515625,152.18731689453125,356.14910888671875],"Conn":[218,220]},{"Pos":[40.710521697998046875,151.1198883056640625,351.03814697265625],"Conn":[219,221]},{"Pos":[43.142223358154296875,150.5651092529296875,345.306915283203125],"Conn":[220,222]},{"Pos":[44.549945831298828125,151.25628662109375,340.953857421875],"Conn":[221,223]},{"Pos":[44.834529876708984375,152.15765380859375,339.208343505859375],"Conn":[222,224]},{"Pos":[45.55682373046875,154.4885101318359375,334.691925048828125],"Conn":[223,225]},{"Pos":[46.11190032958984375,154.60528564453125,330.333526611328125],"Conn":[224,226]},{"Pos":[46.35305023193359375,154.9383087158203125,322.5924072265625],"Conn":[225,227]},{"Pos":[45.11856842041015625,156.1108551025390625,320.20343017578125],"Conn":[226,228]},{"Pos":[42.5136871337890625,157.7326202392578125,317.50567626953125],"Conn":[227,229]},{"Pos":[41.166538238525390625,157.35516357421875,313.311431884765625],"Conn":[228,230]},{"Pos":[41.42443084716796875,157.4850921630859375,304.154144287109375],"Conn":[229,231]},{"Pos":[41.509052276611328125,160.10467529296875,297.55078125],"Conn":[230,232]},{"Pos":[39.624721527099609375,163.842437744140625,286.004241943359375],"Conn":[231,233]},{"Pos":[35.753448486328125,164.584228515625,278.53118896484375],"Conn":[232,234]},{"Pos":[29.6700439453125,164.809906005859375,270.87884521484375],"Conn":[233,235]},{"Pos":[20.2850589752197265625,165.5450286865234375,268.194000244140625],"Conn":[234,236]},{"Pos":[12.41485309600830078125,166.8724365234375,268.78192138671875],"Conn":[235,237]},{"Pos":[2.314323902130126953125,168.197021484375,269.798492431640625],"Conn":[236,238]},{"Pos":[-8.996601104736328125,168.80609130859375,270.936737060546875],"Conn":[237,239]},{"Pos":[-19.7622585296630859375,169.066558837890625,272.0198974609375],"Conn":[238,240]},{"Pos":[-26.6681499481201171875,168.940948486328125,275.983062744140625],"Conn":[239,241]},{"Pos":[-28.9435710906982421875,169.8668060302734375,266.670135498046875],"Conn":[240,242]},{"Pos":[-28.693698883056640625,170.5868377685546875,257.40106201171875],"Conn":[241,243]},{"Pos":[-27.996425628662109375,171.47564697265625,249.750152587890625],"Conn":[242,244]},{"Pos":[-27.0262470245361328125,172.2333221435546875,239.0965576171875],"Conn":[243,245]},{"Pos":[-29.7260837554931640625,172.9344635009765625,230.358001708984375],"Conn":[244,246]},{"Pos":[-33.9015045166015625,173.175018310546875,220.49444580078125],"Conn":[245,247]},{"Pos":[-37.858783721923828125,173.4055328369140625,208.8503875732421875],"Conn":[246,248]},{"Pos":[-42.983127593994140625,174.258697509765625,197.7576446533203125],"Conn":[247,249]},{"Pos":[-49.00640106201171875,175.779022216796875,185.4248199462890625],"Conn":[248,250]},{"Pos":[-56.579315185546875,177.213226318359375,174.0472564697265625],"Conn":[249,251]},{"Pos":[-64.1268157958984375,179.02960205078125,166.391448974609375],"Conn":[250,252]},{"Pos":[-71.7398529052734375,181.2567596435546875,157.403656005859375],"Conn":[251,253]},{"Pos":[-78.70619964599609375,182.373046875,153.505218505859375],"Conn":[252,254]},{"Pos":[-95.394561767578125,184.89935302734375,147.6379241943359375],"Conn":[253,255]},{"Pos":[-109.28961181640625,186.4051361083984375,142.676971435546875],"Conn":[254,256]},{"Pos":[-116.7205352783203125,187.2846832275390625,141.2182159423828125],"Conn":[255,257]},{"Pos":[-125.31235504150390625,188.69390869140625,140.8720703125],"Conn":[256,258]},{"Pos":[-135.8894805908203125,190.851531982421875,141.256439208984375],"Conn":[257,259]},{"Pos":[-145.4049072265625,192.4544525146484375,141.606658935546875],"Conn":[258,260]},{"Pos":[-155.2695770263671875,195.2864227294921875,141.9697418212890625],"Conn":[259,261]},{"Pos":[-165.907012939453125,197.81756591796875,142.5772552490234375],"Conn":[260,262]},{"Pos":[-174.765045166015625,199.27520751953125,145.4671630859375],"Conn":[261,263]},{"Pos":[-184.6655120849609375,200.5629425048828125,149.9583892822265625],"Conn":[262,264]},{"Pos":[-193.887298583984375,200.9443511962890625,161.742767333984375],"Conn":[263,265]},{"Pos":[-198.13568115234375,200.85552978515625,171.7420196533203125],"Conn":[264,266]},{"Pos":[-201.3920135498046875,200.999725341796875,179.408935546875],"Conn":[265,267]},{"Pos":[-205.1107025146484375,201.6623992919921875,191.1300811767578125],"Conn":[266,268]},{"Pos":[-208.2088165283203125,200.838775634765625,201.3484649658203125],"Conn":[267,269]},{"Pos":[-206.5198516845703125,200.9997711181640625,205.778076171875],"Conn":[268,270]},{"Pos":[-201.4574432373046875,200.999969482421875,209.492645263671875],"Conn":[269,271]},{"Pos":[-197.9435272216796875,200.6763153076171875,215.4199676513671875],"Conn":[270,272]},{"Pos":[-201.5220794677734375,200.9991455078125,221.421875],"Conn":[271,273,276,277]},{"Pos":[-207.1264801025390625,200.9999542236328125,228.6066131591796875],"Conn":[272,275,274]},{"Pos":[-207.52960205078125,200.994903564453125,239.269439697265625],"Conn":[273]},{"Pos":[-213.7814178466796875,200.9988250732421875,233.4940185546875],"Conn":[273]},{"Pos":[-194.36602783203125,200.71795654296875,236.31939697265625],"Conn":[272]},{"Pos":[-187.4665069580078125,201.0006561279296875,220.3038482666015625],"Conn":[272,278]},{"Pos":[-169.6940460205078125,200.993499755859375,220.3217620849609375],"Conn":[277,279]},{"Pos":[-149.8852996826171875,200.8551483154296875,223.97039794921875],"Conn":[278,280]},{"Pos":[-145.2455902099609375,199.7482757568359375,259.08441162109375],"Conn":[279,281]},{"Pos":[-145.2455902099609375,-53.713977813720703125,259.08441162109375],"Conn":[280,282]},{"Pos":[-146.4425506591796875,-50.8123779296875,303.078033447265625],"Conn":[281,283]},{"Pos":[-143.8684844970703125,-53.20157623291015625,345.270660400390625],"Conn":[282,284]},{"Pos":[-138.51666259765625,-56.87531280517578125,425.9288330078125],"Conn":[283,285]},{"Pos":[-139.0421905517578125,-56.87531280517578125,483.042236328125],"Conn":[284,286]},{"Pos":[-129.1372222900390625,-56.87531280517578125,512.41082763671875],"Conn":[285,287,290,298]},{"Pos":[-128.3197174072265625,-56.87531280517578125,527.04052734375],"Conn":[286,288]},{"Pos":[-127.32085418701171875,-56.87531280517578125,543.488037109375],"Conn":[287,289]},{"Pos":[-123.52789306640625,-56.87531280517578125,568.05535888671875],"Conn":[288,306,307]},{"Pos":[-144.93389892578125,-56.87531280517578125,523.2974853515625],"Conn":[286,291,294]},{"Pos":[-159.899871826171875,-56.87531280517578125,535.4481201171875],"Conn":[290,292,295]},{"Pos":[-174.4185028076171875,-56.87531280517578125,555.02642822265625],"Conn":[291,293,296]},{"Pos":[-178.8488006591796875,-56.87531280517578125,580.486328125],"Conn":[292]},{"Pos":[-143.0761260986328125,-56.875324249267578125,539.56884765625],"Conn":[290]},{"Pos":[-151.980072021484375,-56.87531280517578125,546.252685546875],"Conn":[291,297]},{"Pos":[-153.907745361328125,-56.87531280517578125,561.3492431640625],"Conn":[292]},{"Pos":[-138.919342041015625,-56.87531280517578125,565.5294189453125],"Conn":[295]},{"Pos":[-113.93487548828125,-56.87531280517578125,516.93267822265625],"Conn":[286,299,304]},{"Pos":[-94.354217529296875,-56.87531280517578125,526.95648193359375],"Conn":[298,300,303]},{"Pos":[-74.2275543212890625,-56.87531280517578125,543.1973876953125],"Conn":[299,301,305]},{"Pos":[-66.1677093505859375,-56.87531280517578125,568.22442626953125],"Conn":[300,302]},{"Pos":[-71.8176727294921875,-56.8753204345703125,591.5931396484375],"Conn":[301]},{"Pos":[-105.1467132568359375,-56.87531280517578125,546.5526123046875],"Conn":[299]},{"Pos":[-114.9229888916015625,-56.87531280517578125,537.095458984375],"Conn":[298]},{"Pos":[-91.996734619140625,-56.87531280517578125,556.92449951171875],"Conn":[300]},{"Pos":[-98.54700469970703125,-56.875324249267578125,576.27813720703125],"Conn":[289]},{"Pos":[-138.6716156005859375,-56.875316619873046875,585.2696533203125],"Conn":[289]},{"Pos":[-244.746551513671875,53.462688446044921875,-185.061492919921875],"Conn":[77]}]]=]),
		[3244983644] = game:GetService("HttpService"):JSONDecode([=[[{"Pos":[239.76177978515625,3.500984668731689453125,-26.4090976715087890625],"Conn":[2]},{"Pos":[228.55889892578125,3.500984668731689453125,-27.0272693634033203125],"Conn":[1,3]},{"Pos":[215.627349853515625,3.500984668731689453125,-28.202846527099609375],"Conn":[2,4]},{"Pos":[202.8533782958984375,3.500984668731689453125,-28.9955844879150390625],"Conn":[3,5]},{"Pos":[186.1587677001953125,3.50098419189453125,-28.603923797607421875],"Conn":[4,6]},{"Pos":[157.549346923828125,3.500984668731689453125,-29.7299213409423828125],"Conn":[5,7]},{"Pos":[144.5532379150390625,3.500984668731689453125,-28.3180103302001953125],"Conn":[6,8]},{"Pos":[133.14837646484375,3.500984668731689453125,-27.3149890899658203125],"Conn":[7,9]},{"Pos":[120.4760894775390625,3.500984668731689453125,-27.251789093017578125],"Conn":[8,10]},{"Pos":[106.55065155029296875,3.500984668731689453125,-27.3416919708251953125],"Conn":[9,11]},{"Pos":[93.22922515869140625,3.500984668731689453125,-27.904598236083984375],"Conn":[10,12]},{"Pos":[81.099334716796875,3.500984668731689453125,-27.8452930450439453125],"Conn":[11,13]},{"Pos":[66.6328887939453125,3.500984668731689453125,-27.9208698272705078125],"Conn":[12,14]},{"Pos":[53.33930206298828125,3.500984668731689453125,-27.8751468658447265625],"Conn":[13,15]},{"Pos":[41.550800323486328125,3.500984668731689453125,-28.3179149627685546875],"Conn":[14,16]},{"Pos":[30.269306182861328125,3.500984668731689453125,-27.5803737640380859375],"Conn":[15,17]},{"Pos":[18.7363300323486328125,3.500984668731689453125,-27.61562347412109375],"Conn":[16,18]},{"Pos":[5.230980396270751953125,3.500984668731689453125,-27.69610595703125],"Conn":[17,19]},{"Pos":[-10.3201656341552734375,3.500984668731689453125,-27.6113147735595703125],"Conn":[18,20]},{"Pos":[-28.8269748687744140625,3.500984668731689453125,-26.150135040283203125],"Conn":[19,21]},{"Pos":[-31.0392246246337890625,3.5009844303131103515625,-12.331939697265625],"Conn":[20,22]},{"Pos":[-33.70922088623046875,3.500984668731689453125,3.374611377716064453125],"Conn":[21,23]},{"Pos":[-34.108150482177734375,3.50098514556884765625,36.855037689208984375],"Conn":[22,24]},{"Pos":[-34.595989227294921875,3.50098514556884765625,52.707218170166015625],"Conn":[23,25]},{"Pos":[-34.759998321533203125,3.50098514556884765625,69.23967742919921875],"Conn":[24,26]},{"Pos":[-30.7491130828857421875,3.50098514556884765625,82.1808624267578125],"Conn":[25,27]},{"Pos":[-33.4727783203125,3.50098514556884765625,96.738525390625],"Conn":[26,28]},{"Pos":[-33.531192779541015625,3.50098514556884765625,111.538299560546875],"Conn":[27,29]},{"Pos":[-40.86985015869140625,3.50098514556884765625,126.79404449462890625],"Conn":[28,30]},{"Pos":[-43.30033111572265625,3.50098514556884765625,139.975860595703125],"Conn":[29,31]},{"Pos":[-40.524990081787109375,3.50098514556884765625,151.2330780029296875],"Conn":[30,32]},{"Tp":true,"Pos":[-36.637668609619140625,3.50098514556884765625,162.5462646484375],"Conn":[31,33]},{"Tp":true,"Pos":[-35.795017242431640625,3.50098514556884765625,181.599517822265625],"Conn":[32,34]},{"Pos":[-34.91484832763671875,3.50098514556884765625,196.310302734375],"Conn":[33,35]},{"Pos":[-34.99625396728515625,3.50098514556884765625,210.5648040771484375],"Conn":[34,36]},{"Pos":[-34.274250030517578125,3.50098514556884765625,225.414215087890625],"Conn":[35,37]},{"Pos":[-31.9353122711181640625,3.50098514556884765625,240.8525848388671875],"Conn":[36,38]},{"Pos":[-33.4734649658203125,3.50098514556884765625,254.9052734375],"Conn":[37,39]},{"Pos":[-31.8743076324462890625,3.5009844303131103515625,272.270721435546875],"Conn":[38,40]},{"Pos":[-36.50617218017578125,3.5009844303131103515625,289.7578125],"Conn":[39,41]},{"Pos":[-50.986164093017578125,3.50098419189453125,296.931732177734375],"Conn":[40,42]},{"Pos":[-66.25772857666015625,3.50098514556884765625,301.322723388671875],"Conn":[41,43]},{"Pos":[-81.07857513427734375,3.50098419189453125,304.4677734375],"Conn":[42,44]},{"Pos":[-99.01055145263671875,3.50098514556884765625,305.00274658203125],"Conn":[43,45]},{"Pos":[-111.36597442626953125,3.50098514556884765625,303.071258544921875],"Conn":[44,46]},{"Pos":[-127.753875732421875,3.50098514556884765625,302.558685302734375],"Conn":[45,47]},{"Pos":[-140.887481689453125,3.50098514556884765625,301.743408203125],"Conn":[46,48]},{"Tp":true,"Pos":[-163.4070281982421875,3.50098514556884765625,303.460113525390625],"Conn":[47,49]},{"Tp":true,"Pos":[-182.077972412109375,3.50098514556884765625,302.84991455078125],"Conn":[48,50]},{"Pos":[-196.5777435302734375,3.50098514556884765625,303.525360107421875],"Conn":[49,51]},{"Pos":[-211.1245880126953125,3.50098514556884765625,303.863006591796875],"Conn":[50,52]},{"Tp":true,"Pos":[-226.116058349609375,3.50098514556884765625,305.131195068359375],"Conn":[51,53]},{"Tp":true,"Pos":[-243.104461669921875,3.50098514556884765625,306.030609130859375],"Conn":[52,54]},{"Pos":[-256.46014404296875,3.5009849071502685546875,296.7637939453125],"Conn":[53,55]},{"Pos":[-267.702728271484375,3.5009844303131103515625,288.88861083984375],"Conn":[54,56]},{"Pos":[-279.711212158203125,3.5009844303131103515625,293.23773193359375],"Conn":[55,57]},{"Pos":[-293.691650390625,3.50098514556884765625,297.797332763671875],"Conn":[56,58]},{"Pos":[-314.26519775390625,3.500971317291259765625,303.230712890625],"Conn":[57,59]},{"Pos":[-332.013336181640625,3.50098514556884765625,304.960723876953125],"Conn":[58,60]},{"Pos":[-349.277557373046875,3.50098514556884765625,305.516845703125],"Conn":[59,61]},{"Pos":[-364.3287353515625,3.50098514556884765625,303.899749755859375],"Conn":[60,62]},{"Pos":[-364.585662841796875,3.50098514556884765625,289.522216796875],"Conn":[61,63]},{"Pos":[-365.2930908203125,3.50098514556884765625,273.44781494140625],"Conn":[62,64]},{"Pos":[-367.780487060546875,3.50098514556884765625,256.766632080078125],"Conn":[63,65]},{"Pos":[-368.078125,3.50098514556884765625,246.5990142822265625],"Conn":[64,66]},{"Pos":[-368.661285400390625,3.50098514556884765625,234.2432403564453125],"Conn":[65,67]},{"Pos":[-368.944854736328125,3.5009849071502685546875,219.12060546875],"Conn":[66,68]},{"Pos":[-369.42340087890625,3.50098514556884765625,206.4694671630859375],"Conn":[67,69]},{"Pos":[-353.72021484375,3.50098514556884765625,206.9721221923828125],"Conn":[68,70]},{"Pos":[-334.2427978515625,1.2814776897430419921875,206.9451141357421875],"Conn":[69,71]},{"Pos":[-310.695953369140625,1.7100045680999755859375,201.121856689453125],"Conn":[70,72]},{"Pos":[-297.213043212890625,1.5699498653411865234375,198.3195343017578125],"Conn":[71,73]},{"Pos":[-281.613250732421875,1.4142296314239501953125,195.077484130859375],"Conn":[72,74]},{"Pos":[-270.047271728515625,1.757378101348876953125,187.2014312744140625],"Conn":[73,75]},{"Pos":[-257.725433349609375,1.985395908355712890625,174.005889892578125],"Conn":[74,76]},{"Pos":[-242.54180908203125,1.5793960094451904296875,157.8049774169921875],"Conn":[75,77]},{"Pos":[-230.2630767822265625,1.71306359767913818359375,143.5455474853515625],"Conn":[76,78]},{"Pos":[-211.477813720703125,2.320405483245849609375,128.9892425537109375],"Conn":[77,79]},{"Pos":[-189.6376495361328125,1.7091963291168212890625,116.64977264404296875],"Conn":[78,80]},{"Pos":[-182.4807891845703125,1.7091963291168212890625,98.8047637939453125],"Conn":[79,81]},{"Pos":[-180.438995361328125,1.70919644832611083984375,82.8654632568359375],"Conn":[80,82,85,87]},{"Pos":[-177.8697509765625,2.3691961765289306640625,67.1894378662109375],"Conn":[81,83,84,86]},{"Pos":[-177.6060791015625,1.658178806304931640625,52.458705902099609375],"Conn":[82]},{"Pos":[-160.387939453125,1.7091960906982421875,67.46530914306640625],"Conn":[82]},{"Pos":[-167.4215240478515625,1.70919644832611083984375,82.71120452880859375],"Conn":[81]},{"Pos":[-193.270050048828125,2.368984699249267578125,67.987060546875],"Conn":[82,88]},{"Pos":[-191.5007171630859375,1.97319638729095458984375,82.56299591064453125],"Conn":[81]},{"Pos":[-202.8148193359375,1.70919644832611083984375,50.075756072998046875],"Conn":[86,89]},{"Pos":[-215.5571441650390625,1.7091963291168212890625,33.903934478759765625],"Conn":[88,90]},{"Pos":[-228.4622344970703125,1.7502472400665283203125,18.573871612548828125],"Conn":[89,91]},{"Pos":[-241.500274658203125,1.809551715850830078125,7.63334941864013671875],"Conn":[90,92]},{"Pos":[-256.95281982421875,3.5009844303131103515625,3.68346405029296875],"Conn":[91,93]},{"Pos":[-275.586944580078125,3.50098514556884765625,-0.656637370586395263671875],"Conn":[92,94]},{"Pos":[-295.85546875,3.621447086334228515625,-2.4197251796722412109375],"Conn":[93,95]},{"Pos":[-312.841583251953125,3.621447086334228515625,-2.379915714263916015625],"Conn":[94,96]},{"Pos":[-381.707305908203125,41.544673919677734375,-4.8941326141357421875],"Conn":[95,97]},{"Pos":[-393.6102294921875,48.687000274658203125,-3.91199207305908203125],"Conn":[96,98]},{"Pos":[-405.4041748046875,54.231006622314453125,-4.290344715118408203125],"Conn":[97,99]},{"Pos":[-420.80377197265625,54.23102569580078125,-4.4748439788818359375],"Conn":[98,100]},{"Pos":[-436.4112548828125,54.23102569580078125,-4.2828273773193359375],"Conn":[99,101]},{"Pos":[-452.288787841796875,54.23102569580078125,-2.32388782501220703125],"Conn":[100,102]},{"Pos":[-467.136749267578125,54.23102569580078125,-3.182030200958251953125],"Conn":[101,103]},{"Pos":[-480.903961181640625,54.23102569580078125,-2.63737773895263671875],"Conn":[102,104]},{"Pos":[-499.52984619140625,54.23102569580078125,-2.8269817829132080078125],"Conn":[103,105]},{"Pos":[-516.05084228515625,54.23102569580078125,-3.475478649139404296875],"Conn":[104,106]},{"Pos":[-535.10894775390625,54.23102569580078125,-7.719961643218994140625],"Conn":[105,107]},{"Pos":[-547.8150634765625,54.23102569580078125,-3.35565948486328125],"Conn":[106,108]},{"Pos":[-558.66217041015625,53.517101287841796875,-1.5696890354156494140625],"Conn":[107,109]},{"Pos":[-572.96551513671875,34.782230377197265625,-4.6334743499755859375],"Conn":[108,110]},{"Pos":[-579.47369384765625,11.08579158782958984375,-1.0985639095306396484375],"Conn":[109,111]},{"Pos":[-589.1043701171875,11.04935455322265625,-8.06059169769287109375],"Conn":[110,112]},{"Pos":[-611.765380859375,11.04935455322265625,5.913542270660400390625],"Conn":[111,113]},{"Pos":[-636.46075439453125,11.04935455322265625,8.2922611236572265625],"Conn":[112,114]},{"Pos":[-665.58172607421875,11.04935455322265625,7.30086231231689453125],"Conn":[113,115]},{"Pos":[-680.15777587890625,11.23619556427001953125,-7.210582733154296875],"Conn":[114,116]},{"Pos":[-688.9195556640625,11.04935455322265625,-5.91644191741943359375],"Conn":[115,117]},{"Pos":[-704.0291748046875,-0.590526521205902099609375,-8.66476345062255859375],"Conn":[116,118]},{"Pos":[-722.8453369140625,-12.39895343780517578125,-11.19648838043212890625],"Conn":[117,119]},{"Pos":[-739.7454833984375,-12.39895343780517578125,-11.97967624664306640625],"Conn":[118,120]},{"Pos":[-753.9278564453125,-12.39895725250244140625,-9.311328887939453125],"Conn":[119,121]},{"Pos":[-770.5257568359375,-12.25886249542236328125,-6.7238864898681640625],"Conn":[120,122]},{"Pos":[-785.67413330078125,-12.25886249542236328125,-4.363283634185791015625],"Conn":[121,123]},{"Pos":[-798.466064453125,-12.67273998260498046875,-2.550934314727783203125],"Conn":[122,124]},{"Pos":[-870.39599609375,-55.793758392333984375,-5.040519237518310546875],"Conn":[123,125]},{"Pos":[-884.00848388671875,-62.465373992919921875,-5.434790134429931640625],"Conn":[124,126]},{"Pos":[-901.21435546875,-62.465362548828125,-3.0231354236602783203125],"Conn":[125,127]},{"Pos":[-911.2884521484375,-62.465362548828125,-2.7768647670745849609375],"Conn":[126,128]},{"Pos":[-923.68536376953125,-62.465362548828125,-2.4736988544464111328125],"Conn":[127,129]},{"Pos":[-937.68194580078125,-62.465362548828125,-2.1314151287078857421875],"Conn":[128,130]},{"Pos":[-951.54522705078125,-62.465362548828125,-1.7923896312713623046875],"Conn":[129,131]},{"Pos":[-966.929443359375,-62.465362548828125,3.3228549957275390625],"Conn":[130,132]},{"Pos":[-979.88861083984375,-62.465362548828125,3.639770030975341796875],"Conn":[131,133]},{"Pos":[-995.88470458984375,-62.465362548828125,4.03095149993896484375],"Conn":[132,134]},{"Pos":[-1010.57550048828125,-62.465362548828125,4.390208721160888671875],"Conn":[133,135]},{"Pos":[-1022.72161865234375,-62.465362548828125,3.4791781902313232421875],"Conn":[134,136]},{"Pos":[-1022.0931396484375,-62.465362548828125,-13.01282215118408203125],"Conn":[135,137]},{"Pos":[-1021.86273193359375,-62.465362548828125,-28.7407703399658203125],"Conn":[136,138]},{"Pos":[-1024.572998046875,-62.465362548828125,-45.572124481201171875],"Conn":[137,139]},{"Pos":[-1016.79034423828125,-62.465362548828125,-57.54138946533203125],"Conn":[138,140]},{"Pos":[-1008.29931640625,-62.465362548828125,-68.9576416015625],"Conn":[139,141]},{"Pos":[-999.51123046875,-62.465362548828125,-76.6173248291015625],"Conn":[140,142]},{"Pos":[-990.06768798828125,-61.425384521484375,-83.48444366455078125],"Conn":[141,143,144]},{"Pos":[-973.4228515625,-61.425388336181640625,-88.13568115234375],"Conn":[142]},{"Pos":[-1004.97576904296875,-62.465362548828125,-95.65404510498046875],"Conn":[142,145]},{"Pos":[-1012.92041015625,-62.465362548828125,-105.785064697265625],"Conn":[144,146]},{"Pos":[-1024.8385009765625,-62.465362548828125,-117.4076080322265625],"Conn":[145,147]},{"Pos":[-1035.4112548828125,-62.465362548828125,-128.0172119140625],"Conn":[146,148]},{"Pos":[-1031.599853515625,-62.465362548828125,-141.2267303466796875],"Conn":[147,149]},{"Pos":[-1027.2781982421875,-62.465362548828125,-155.0821380615234375],"Conn":[148,150]},{"Pos":[-1026.2158203125,-62.465362548828125,-165.2642669677734375],"Conn":[149,151,152]},{"Pos":[-1009.15460205078125,-62.465362548828125,-171.950439453125],"Conn":[150]},{"Pos":[-1037.5084228515625,-62.465362548828125,-173.7822265625],"Conn":[150,153]},{"Pos":[-1045.0986328125,-62.465373992919921875,-183.639801025390625],"Conn":[152,154,156]},{"Pos":[-1054.361328125,-61.425384521484375,-192.1991729736328125],"Conn":[153,155]},{"Pos":[-1067.5927734375,-61.425384521484375,-195.301513671875],"Conn":[154]},{"Pos":[-1037.5318603515625,-62.465362548828125,-195.2085723876953125],"Conn":[153,157]},{"Pos":[-1031.932373046875,-62.46546173095703125,-207.795501708984375],"Conn":[156,158]},{"Pos":[-1025.4569091796875,-62.465362548828125,-223.087738037109375],"Conn":[157,159]},{"Pos":[-1024.3353271484375,-62.465362548828125,-237.94915771484375],"Conn":[158,160]},{"Pos":[-1022.55645751953125,-61.3819122314453125,-250.4631805419921875],"Conn":[159,161]},{"Pos":[-1022.2110595703125,-21.7624340057373046875,-316.4903564453125],"Conn":[160,162]},{"Pos":[-1022.68817138671875,-14.38945102691650390625,-328.78399658203125],"Conn":[161,163]},{"Pos":[-1023.19024658203125,-12.36900043487548828125,-339.569305419921875],"Conn":[162,164]},{"Pos":[-1022.349609375,-12.36900043487548828125,-351.8790283203125],"Conn":[163,165]},{"Pos":[-1031.1903076171875,-12.36900234222412109375,-372.06634521484375],"Conn":[164,166]},{"Pos":[-1047.71728515625,-12.36900234222412109375,-381.636688232421875],"Conn":[165,167]},{"Pos":[-1062.50341796875,-12.36900234222412109375,-379.442901611328125],"Conn":[166,168]},{"Pos":[-1078.0125732421875,-12.36900234222412109375,-378.557098388671875],"Conn":[167,169]},{"Pos":[-1093.9095458984375,-12.36900234222412109375,-377.588714599609375],"Conn":[168,170]},{"Tp":true,"Pos":[-1104.1239013671875,-12.36900234222412109375,-377.2635498046875],"Conn":[169,171]},{"Tp":true,"Pos":[-1119.76220703125,-12.36900234222412109375,-375.63720703125],"Conn":[170,172]},{"Pos":[-1135.15087890625,-12.36900234222412109375,-376.456817626953125],"Conn":[171,173]},{"Pos":[-1149.05712890625,-12.36900234222412109375,-376.968658447265625],"Conn":[172,174]},{"Tp":true,"Pos":[-1173.2880859375,-12.24217700958251953125,-377.463348388671875],"Conn":[173,175]},{"Tp":true,"Pos":[-1189.599365234375,-12.36900234222412109375,-375.24102783203125],"Conn":[174,176]},{"Pos":[-1200.4017333984375,-12.36900234222412109375,-376.040069580078125],"Conn":[175,177]},{"Tp":true,"Pos":[-1210.080322265625,-12.36900234222412109375,-376.554656982421875],"Conn":[176,178,180,179]},{"Tp":true,"Pos":[-1221.9923095703125,-12.36900234222412109375,-377.188323974609375],"Conn":[177]},{"Pos":[-1211.3369140625,-12.36900234222412109375,-387.44146728515625],"Conn":[177]},{"Pos":[-1210.4119873046875,-12.36900234222412109375,-363.266265869140625],"Conn":[177]}]]=]),
		[3598232959] = game:GetService("HttpService"):JSONDecode([=[[{"Pos":[-105.56241607666015625,0.800000011920928955078125,178.0918121337890625],"Conn":[2]},{"Pos":[-117.40601348876953125,0.5890979766845703125,179.326507568359375],"Conn":[1,3]},{"Pos":[-135.7861480712890625,0.808024466037750244140625,180.2546539306640625],"Conn":[2,4]},{"Pos":[-156.262939453125,1.19999992847442626953125,181.3402252197265625],"Conn":[3,5]},{"Pos":[-174.9482879638671875,1.19999992847442626953125,182.403594970703125],"Conn":[4,6]},{"Pos":[-187.320220947265625,1.1999952793121337890625,176.563812255859375],"Conn":[5,7]},{"Pos":[-205.0258941650390625,1.19606196880340576171875,175.740509033203125],"Conn":[6,8]},{"Pos":[-219.113433837890625,1.20000016689300537109375,177.83837890625],"Conn":[7,9]},{"Pos":[-234.684783935546875,1.19999980926513671875,177.0526580810546875],"Conn":[8,10]},{"Pos":[-246.6930694580078125,1.6039602756500244140625,176.7359161376953125],"Conn":[9,11]},{"Pos":[-264.9613037109375,2.38244915008544921875,172.350006103515625],"Conn":[10,12]},{"Pos":[-280.01507568359375,2.431502819061279296875,166.0166778564453125],"Conn":[11,13]},{"Pos":[-297.332855224609375,2.9825651645660400390625,159.8009185791015625],"Conn":[12,14]},{"Pos":[-309.657318115234375,3.599999904632568359375,153.4825897216796875],"Conn":[13,15]},{"Pos":[-320.866180419921875,3.5999848842620849609375,147.0221710205078125],"Conn":[14,16]},{"Pos":[-334.43951416015625,3.599998950958251953125,139.199127197265625],"Conn":[15,17]},{"Pos":[-346.57208251953125,4.199998378753662109375,130.851226806640625],"Conn":[16,18]},{"Pos":[-358.68927001953125,5.15857791900634765625,121.90447998046875],"Conn":[17,19]},{"Pos":[-369.917633056640625,6.40526485443115234375,110.21814727783203125],"Conn":[18,20]},{"Pos":[-381.130157470703125,9.0030517578125,101.49094390869140625],"Conn":[19,21]},{"Pos":[-392.90625,12.79725170135498046875,91.505706787109375],"Conn":[20,22]},{"Pos":[-403.33319091796875,14.525440216064453125,82.50030517578125],"Conn":[21,23]},{"Pos":[-412.962158203125,16.1999797821044921875,71.4391326904296875],"Conn":[22,24]},{"Pos":[-422.200836181640625,16.7999935150146484375,59.5130767822265625],"Conn":[23,25,251]},{"Pos":[-436.8565673828125,17.082683563232421875,44.7631988525390625],"Conn":[24,26]},{"Pos":[-453.6290283203125,17.127727508544921875,41.7571258544921875],"Conn":[25,27]},{"Pos":[-473.111358642578125,17.4856281280517578125,31.5389118194580078125],"Conn":[26,28]},{"Pos":[-487.1123046875,17.01470947265625,17.6297168731689453125],"Conn":[27,29]},{"Pos":[-500.068695068359375,16.9995269775390625,4.7574005126953125],"Conn":[28,30,31]},{"Pos":[-507.39312744140625,17.36194610595703125,-5.53946208953857421875],"Conn":[29]},{"Pos":[-492.01397705078125,16.9999942779541015625,-1.8039953708648681640625],"Conn":[29,32]},{"Pos":[-480.40533447265625,17.6000690460205078125,-10.431255340576171875],"Conn":[31,33]},{"Pos":[-467.692962646484375,17.56385040283203125,-23.14835357666015625],"Conn":[32,34,36]},{"Pos":[-456.05401611328125,16.9999942779541015625,-34.794330596923828125],"Conn":[33,35]},{"Pos":[-445.4580078125,17.0026035308837890625,-45.397197723388671875],"Conn":[34]},{"Pos":[-476.364654541015625,17.13101959228515625,-30.5276126861572265625],"Conn":[33,37]},{"Pos":[-491.378082275390625,21.3728618621826171875,-42.3114166259765625],"Conn":[36,38]},{"Pos":[-501.910064697265625,21.37285614013671875,-52.429752349853515625],"Conn":[37,39]},{"Pos":[-511.847198486328125,21.3728618621826171875,-62.984466552734375],"Conn":[38,40]},{"Pos":[-521.91961669921875,21.37285614013671875,-72.71440887451171875],"Conn":[39,41]},{"Pos":[-530.24554443359375,15.35766887664794921875,-80.75572967529296875],"Conn":[40,42]},{"Pos":[-538.7347412109375,12.42168331146240234375,-90.91124725341796875],"Conn":[41,43,174]},{"Pos":[-547.30096435546875,12.3829669952392578125,-102.54840850830078125],"Conn":[42,44]},{"Pos":[-556.55810546875,12.3834667205810546875,-114.089141845703125],"Conn":[43,45]},{"Pos":[-563.05987548828125,12.38390350341796875,-124.99091339111328125],"Conn":[44,47,52]},{"Pos":[-552.1478271484375,18.188358306884765625,-133.722991943359375],"Conn":[47,48]},{"Pos":[-557.4031982421875,12.8257122039794921875,-129.2335662841796875],"Conn":[45,46]},{"Pos":[-546.95758056640625,21.3728618621826171875,-141.04815673828125],"Conn":[46,49]},{"Pos":[-545.8326416015625,21.3728618621826171875,-149.4483489990234375],"Conn":[48,50]},{"Pos":[-544.63970947265625,21.3721523284912109375,-159.917816162109375],"Conn":[49,51]},{"Pos":[-545.71240234375,21.3728580474853515625,-171.455230712890625],"Conn":[50]},{"Pos":[-567.76300048828125,12.38417720794677734375,-131.263458251953125],"Conn":[45,53]},{"Pos":[-580.20733642578125,12.95067119598388671875,-137.79132080078125],"Conn":[52,54,58]},{"Pos":[-588.9471435546875,19.0841083526611328125,-131.74761962890625],"Conn":[53,55]},{"Pos":[-596.712158203125,21.37285614013671875,-123.35439300537109375],"Conn":[54,56]},{"Pos":[-599.7630615234375,21.3727474212646484375,-114.18473052978515625],"Conn":[55,57]},{"Pos":[-596.00421142578125,21.37285614013671875,-103.05931854248046875],"Conn":[56]},{"Pos":[-578.20416259765625,12.38481235504150390625,-147.3467254638671875],"Conn":[53,59]},{"Pos":[-585.39202880859375,12.385211944580078125,-156.1076202392578125],"Conn":[58,60]},{"Pos":[-592.4124755859375,12.84985828399658203125,-164.664154052734375],"Conn":[59,61]},{"Pos":[-600.1937255859375,12.38056278228759765625,-174.148590087890625],"Conn":[60,62]},{"Pos":[-608.01556396484375,12.38097858428955078125,-183.6849212646484375],"Conn":[61,63]},{"Pos":[-616.81341552734375,12.38147068023681640625,-194.4061126708984375],"Conn":[62,64]},{"Pos":[-624.25775146484375,12.3818874359130859375,-203.4778900146484375],"Conn":[63,65]},{"Tp":true,"Pos":[-628.95361328125,12.382152557373046875,-207.8760223388671875],"Conn":[64,66]},{"Tp":true,"Pos":[-637.0538330078125,12.38257884979248046875,-216.2842254638671875],"Conn":[65,67]},{"Pos":[-644.42236328125,12.38301563262939453125,-225.24066162109375],"Conn":[66,68]},{"Pos":[-649.89410400390625,12.38337039947509765625,-231.439453125],"Conn":[67,69]},{"Pos":[-657.45538330078125,12.3832550048828125,-240.005950927734375],"Conn":[68,70]},{"Tp":true,"Pos":[-664.9564208984375,12.3841152191162109375,-248.50494384765625],"Conn":[69,71]},{"Tp":true,"Pos":[-672.8663330078125,12.3845653533935546875,-258.570648193359375],"Conn":[70,72]},{"Pos":[-679.34375,12.38493633270263671875,-266.976715087890625],"Conn":[71,73]},{"Pos":[-685.026611328125,12.3852596282958984375,-274.176055908203125],"Conn":[72,74]},{"Pos":[-691.41265869140625,12.3855991363525390625,-282.26568603515625],"Conn":[73,75]},{"Pos":[-698.85028076171875,12.3860225677490234375,-291.68634033203125],"Conn":[74,76]},{"Pos":[-707.77032470703125,12.38650035858154296875,-299.835968017578125],"Conn":[75,77]},{"Pos":[-717.64599609375,12.3833637237548828125,-312.77947998046875],"Conn":[76,78]},{"Pos":[-708.80712890625,12.38323688507080078125,-323.43701171875],"Conn":[77,79]},{"Pos":[-699.93524169921875,12.38305568695068359375,-331.412353515625],"Conn":[78,80]},{"Pos":[-691.11346435546875,12.38288593292236328125,-339.34326171875],"Conn":[79,81]},{"Pos":[-688.90771484375,12.38297748565673828125,-348.79632568359375],"Conn":[80,82]},{"Pos":[-696.27154541015625,12.382984161376953125,-357.00445556640625],"Conn":[81,83]},{"Pos":[-702.06201171875,12.38310718536376953125,-365.6356201171875],"Conn":[82,84]},{"Pos":[-708.85406494140625,12.38327884674072265625,-374.1634521484375],"Conn":[83,85]},{"Pos":[-716.37030029296875,12.3834781646728515625,-384.205718994140625],"Conn":[84,86]},{"Pos":[-725.11669921875,12.38368320465087890625,-394.08917236328125],"Conn":[85,87]},{"Pos":[-733.380615234375,12.3839092254638671875,-403.419769287109375],"Conn":[86,88]},{"Pos":[-742.306884765625,12.38415241241455078125,-413.498809814453125],"Conn":[87,89]},{"Pos":[-732.51202392578125,12.383544921875,-421.657684326171875],"Conn":[88,90]},{"Pos":[-724.2728271484375,12.38354778289794921875,-427.62713623046875],"Conn":[89,91]},{"Pos":[-714.6064453125,12.383617401123046875,-434.159088134765625],"Conn":[90,92]},{"Pos":[-711.26373291015625,12.38274669647216796875,-444.687042236328125],"Conn":[91,93]},{"Pos":[-718.69549560546875,12.38292789459228515625,-453.906982421875],"Conn":[92,94]},{"Pos":[-724.5633544921875,12.38308811187744140625,-461.067840576171875],"Conn":[93,95]},{"Pos":[-731.54241943359375,12.38326358795166015625,-469.826629638671875],"Conn":[94,96]},{"Pos":[-739.643798828125,12.38346195220947265625,-479.992706298828125],"Conn":[95,97]},{"Pos":[-747.58270263671875,12.383655548095703125,-489.948394775390625],"Conn":[96,98]},{"Pos":[-755.85296630859375,12.38386440277099609375,-500.3216552734375],"Conn":[97,99]},{"Pos":[-764.372314453125,12.3840923309326171875,-511.00799560546875],"Conn":[98,100]},{"Pos":[-772.01922607421875,12.38427257537841796875,-520.5997314453125],"Conn":[99,101]},{"Pos":[-778.95947265625,12.38291645050048828125,-529.305419921875],"Conn":[100,102]},{"Pos":[-786.87847900390625,12.38309383392333984375,-522.9786376953125],"Conn":[101,103]},{"Pos":[-795.2327880859375,12.38329601287841796875,-517.2703857421875],"Conn":[102,104]},{"Pos":[-801.09722900390625,12.38341045379638671875,-511.57708740234375],"Conn":[103,105]},{"Pos":[-810.619873046875,12.3836002349853515625,-502.3341064453125],"Conn":[104,106]},{"Pos":[-819.53912353515625,12.380657196044921875,-493.676513671875],"Conn":[105,107]},{"Pos":[-815.6226806640625,10.7731494903564453125,-487.821624755859375],"Conn":[106,108]},{"Pos":[-785.10821533203125,-32.66339874267578125,-451.783050537109375],"Conn":[107,109]},{"Pos":[-767.95111083984375,-32.66432952880859375,-432.207244873046875],"Conn":[108,110]},{"Pos":[-762.712890625,-32.66483306884765625,-413.81793212890625],"Conn":[109,111]},{"Pos":[-759.79736328125,-32.665119171142578125,-399.36602783203125],"Conn":[110,112]},{"Pos":[-756.4091796875,-32.665496826171875,-382.574066162109375],"Conn":[111,113]},{"Pos":[-753.693359375,-32.6658935546875,-369.1142578125],"Conn":[112,114]},{"Pos":[-751.0302734375,-32.666210174560546875,-355.913330078125],"Conn":[113,115,117,124,119]},{"Pos":[-747.87939453125,-32.666263580322265625,-340.29705810546875],"Conn":[114,116,120]},{"Pos":[-747.48162841796875,-32.666839599609375,-326.48052978515625],"Conn":[115,122]},{"Pos":[-744.606689453125,-32.666393280029296875,-359.198760986328125],"Conn":[114,118,176]},{"Pos":[-729.26226806640625,-32.668376922607421875,-363.28802490234375],"Conn":[117]},{"Pos":[-735.5006103515625,-32.66689300537109375,-348.64111328125],"Conn":[123,177,114]},{"Pos":[-756.3382568359375,-32.666259765625,-341.4290771484375],"Conn":[115,121]},{"Pos":[-769.290771484375,-32.666271209716796875,-338.835723876953125],"Conn":[120]},{"Pos":[-748.09112548828125,-32.667011260986328125,-314.062225341796875],"Conn":[116]},{"Pos":[-720.75164794921875,-32.667522430419921875,-341.880157470703125],"Conn":[119]},{"Pos":[-767.39337158203125,-32.66567230224609375,-352.980804443359375],"Conn":[114,125]},{"Pos":[-787.3450927734375,-32.665897369384765625,-363.382965087890625],"Conn":[124,126]},{"Pos":[-829.51409912109375,-32.662933349609375,-384.40325927734375],"Conn":[125,127]},{"Pos":[-826.8831787109375,-32.1825103759765625,-409.49884033203125],"Conn":[126,128]},{"Pos":[-826.4156494140625,-32.662151336669921875,-438.357147216796875],"Conn":[127,129]},{"Pos":[-854.20184326171875,-32.6605224609375,-475.9573974609375],"Conn":[128,130]},{"Pos":[-864.8931884765625,-27.404773712158203125,-488.790679931640625],"Conn":[129,131]},{"Pos":[-869.52093505859375,-32.975650787353515625,-498.500152587890625],"Conn":[130,132]},{"Pos":[-877.70806884765625,-32.9752197265625,-507.6588134765625],"Conn":[131,133,137]},{"Pos":[-885.3787841796875,-32.97478485107421875,-516.591552734375],"Conn":[132,134]},{"Pos":[-895.10186767578125,-32.974277496337890625,-526.00360107421875],"Conn":[133,135]},{"Pos":[-903.8668212890625,-32.97382354736328125,-534.48834228515625],"Conn":[134,136]},{"Pos":[-913.89715576171875,-32.974590301513671875,-544.19842529296875],"Conn":[135]},{"Pos":[-866.8232421875,-32.97544097900390625,-516.79296875],"Conn":[132,138]},{"Pos":[-858.00701904296875,-32.97547149658203125,-524.5960693359375],"Conn":[137,139]},{"Pos":[-846.87335205078125,-32.97547149658203125,-534.4503173828125],"Conn":[138,140]},{"Pos":[-836.83807373046875,-32.976043701171875,-543.3323974609375],"Conn":[139,141]},{"Pos":[-827.95111083984375,-32.976043701171875,-551.1981201171875],"Conn":[140,142]},{"Pos":[-818.541748046875,-30.7323970794677734375,-559.3365478515625],"Conn":[141,143]},{"Pos":[-813.52581787109375,-23.8471279144287109375,-564.0546875],"Conn":[142,144]},{"Pos":[-805.49566650390625,-22.5745830535888671875,-567.79571533203125],"Conn":[143,145]},{"Pos":[-794.42633056640625,-22.5748691558837890625,-574.63787841796875],"Conn":[144,146]},{"Pos":[-785.90582275390625,-22.5750789642333984375,-580.0081787109375],"Conn":[145,147]},{"Pos":[-776.42987060546875,-22.5752716064453125,-588.531005859375],"Conn":[146,258]},{"Pos":[-827.7056884765625,-22.57293701171875,-618.818603515625],"Conn":[]},{"Pos":[-759.616943359375,-22.575420379638671875,-607.5726318359375],"Conn":[150,259]},{"Pos":[-761.3797607421875,-22.5753192901611328125,-617.88311767578125],"Conn":[149,151]},{"Pos":[-769.11651611328125,-22.57483673095703125,-631.8804931640625],"Conn":[150,152]},{"Pos":[-776.44482421875,-22.5744228363037109375,-641.00653076171875],"Conn":[151,153]},{"Pos":[-784.23394775390625,-22.5739955902099609375,-649.86517333984375],"Conn":[152,154]},{"Pos":[-790.52685546875,-22.5736236572265625,-657.02496337890625],"Conn":[153,155]},{"Pos":[-804.23980712890625,-22.57306671142578125,-662.77093505859375],"Conn":[154,156]},{"Pos":[-810.4342041015625,-22.3826808929443359375,-669.43206787109375],"Conn":[155,157]},{"Pos":[-825.6778564453125,4.896076202392578125,-692.0291748046875],"Conn":[156,158]},{"Pos":[-831.1207275390625,13.25846004486083984375,-698.39385986328125],"Conn":[157,159]},{"Pos":[-836.67071533203125,13.82585906982421875,-707.15850830078125],"Conn":[158,160]},{"Pos":[-845.7918701171875,13.99022579193115234375,-716.43658447265625],"Conn":[159,161]},{"Pos":[-866.2725830078125,46.048187255859375,-741.09600830078125],"Conn":[160,162]},{"Pos":[-872.90142822265625,50.257709503173828125,-748.90594482421875],"Conn":[161,163]},{"Pos":[-881.87701416015625,50.257720947265625,-759.48065185546875],"Conn":[162,164]},{"Pos":[-889.7928466796875,50.257720947265625,-762.434326171875],"Conn":[163,165]},{"Pos":[-896.6314697265625,50.257720947265625,-757.8609619140625],"Conn":[164,166,178]},{"Pos":[-905.56756591796875,50.257720947265625,-750.45477294921875],"Conn":[165,167]},{"Pos":[-916.5819091796875,50.257720947265625,-742.9937744140625],"Conn":[166]},{"Pos":[-826.49249267578125,-22.5729274749755859375,-621.97845458984375],"Conn":[]},{"Pos":[-751.8643798828125,-22.583766937255859375,-578.45758056640625],"Conn":[170,258,259]},{"Pos":[-744.03082275390625,-22.5728778839111328125,-569.1143798828125],"Conn":[169,171]},{"Pos":[-738.3646240234375,-22.57318115234375,-563.05194091796875],"Conn":[170,172]},{"Pos":[-731.49627685546875,-22.5735569000244140625,-552.0985107421875],"Conn":[171,173]},{"Pos":[-723.95318603515625,-22.574069976806640625,-540.0703125],"Conn":[172]},{"Pos":[-547.17791748046875,12.38262844085693359375,-82.52440643310546875],"Conn":[42,175]},{"Pos":[-557.61907958984375,12.3828639984130859375,-74.39109039306640625],"Conn":[174]},{"Pos":[-737.8265380859375,-32.66641998291015625,-371.338409423828125],"Conn":[117]},{"Pos":[-734.48529052734375,-32.667144775390625,-335.519073486328125],"Conn":[119]},{"Pos":[-903.71514892578125,50.257720947265625,-765.5159912109375],"Conn":[165,179]},{"Pos":[-915.82135009765625,50.2576141357421875,-777.45599365234375],"Conn":[178,180]},{"Pos":[-922.16033935546875,50.257720947265625,-782.93475341796875],"Conn":[179,181]},{"Pos":[-929.57806396484375,50.257720947265625,-791.01336669921875],"Conn":[180,182]},{"Pos":[-936.92919921875,50.257724761962890625,-798.7974853515625],"Conn":[181,183]},{"Pos":[-944.300048828125,50.257724761962890625,-808.181396484375],"Conn":[182,184]},{"Pos":[-949.98211669921875,51.746494293212890625,-817.703857421875],"Conn":[183,185]},{"Pos":[-988.27166748046875,51.746494293212890625,-861.6436767578125],"Conn":[184,186]},{"Pos":[-997.20269775390625,50.25771331787109375,-872.93243408203125],"Conn":[185,187]},{"Pos":[-1007.0953369140625,50.257724761962890625,-884.000244140625],"Conn":[186,188]},{"Pos":[-1014.9049072265625,50.257564544677734375,-894.3956298828125],"Conn":[187,189]},{"Pos":[-1023.46881103515625,50.257709503173828125,-904.0079345703125],"Conn":[188,190]},{"Pos":[-1031.31689453125,50.9151611328125,-912.82122802734375],"Conn":[189,191]},{"Pos":[-1037.8311767578125,50.257720947265625,-920.45550537109375],"Conn":[190,192]},{"Pos":[-1045.3446044921875,51.12186431884765625,-928.909423828125],"Conn":[191,193]},{"Pos":[-1053.5865478515625,50.221515655517578125,-938.17413330078125],"Conn":[192,194,196]},{"Pos":[-1061.0277099609375,50.257720947265625,-946.54974365234375],"Conn":[193,195]},{"Pos":[-1069.845703125,50.257720947265625,-956.4730224609375],"Conn":[194]},{"Pos":[-1080.1934814453125,50.257720947265625,-921.24627685546875],"Conn":[193,197]},{"Pos":[-1090.3199462890625,51.08467864990234375,-915.80657958984375],"Conn":[196,198]},{"Pos":[-1097.914794921875,50.26654052734375,-908.04638671875],"Conn":[197,199]},{"Pos":[-1103.796875,50.26670074462890625,-915.3140869140625],"Conn":[198,200]},{"Pos":[-1109.5924072265625,50.266788482666015625,-920.9169921875],"Conn":[199,201]},{"Pos":[-1117.5013427734375,50.2670440673828125,-931.69451904296875],"Conn":[200,202]},{"Pos":[-1131.1488037109375,50.2666015625,-925.33392333984375],"Conn":[201,203]},{"Pos":[-1140.7535400390625,48.7292022705078125,-920.4990234375],"Conn":[202,204]},{"Pos":[-1153.485107421875,51.471435546875,-909.69500732421875],"Conn":[203,205]},{"Pos":[-1166.303955078125,54.132232666015625,-901.20770263671875],"Conn":[204,206]},{"Pos":[-1177.760986328125,56.8645172119140625,-889.37677001953125],"Conn":[205,207]},{"Pos":[-1187.41455078125,59.996410369873046875,-881.85089111328125],"Conn":[206,208]},{"Pos":[-1188.0411376953125,59.996410369873046875,-871.67742919921875],"Conn":[207,209]},{"Pos":[-1192.834228515625,59.996410369873046875,-863.70953369140625],"Conn":[208,210]},{"Pos":[-1200.770751953125,59.996410369873046875,-855.42657470703125],"Conn":[209,211,214]},{"Pos":[-1208.19970703125,59.996410369873046875,-847.67333984375],"Conn":[210,212]},{"Pos":[-1215.990966796875,59.996410369873046875,-839.5347900390625],"Conn":[211,213]},{"Pos":[-1224.4716796875,59.996410369873046875,-830.6739501953125],"Conn":[212]},{"Pos":[-1208.528564453125,59.996410369873046875,-864.50445556640625],"Conn":[210,215]},{"Pos":[-1216.138671875,59.996410369873046875,-874.57623291015625],"Conn":[214,216]},{"Pos":[-1217.8702392578125,58.1010589599609375,-890.83502197265625],"Conn":[215,217]},{"Pos":[-1226.5179443359375,61.2847900390625,-904.2952880859375],"Conn":[216,218]},{"Pos":[-1237.0531005859375,65.1665802001953125,-916.78076171875],"Conn":[217,219]},{"Pos":[-1248.1455078125,69.90478515625,-929.6553955078125],"Conn":[218,220]},{"Pos":[-1260.97607421875,74.47399139404296875,-941.726318359375],"Conn":[219,221]},{"Pos":[-1267.7474365234375,78.96709442138671875,-950.122802734375],"Conn":[220,222]},{"Pos":[-1278.242919921875,78.78167724609375,-948.34185791015625],"Conn":[221,223]},{"Pos":[-1284.499267578125,78.78167724609375,-945.92681884765625],"Conn":[222,224]},{"Pos":[-1293.69091796875,78.78167724609375,-941.914794921875],"Conn":[223,225,226]},{"Pos":[-1304.750732421875,78.78167724609375,-937.63427734375],"Conn":[224]},{"Pos":[-1298.9615478515625,78.78167724609375,-950.735595703125],"Conn":[224,227]},{"Pos":[-1311.9617919921875,79.69567108154296875,-966.67425537109375],"Conn":[226,228]},{"Pos":[-1336.705810546875,79.69567108154296875,-997.9114990234375],"Conn":[227,229]},{"Pos":[-1358.34423828125,79.69567108154296875,-1024.7052001953125],"Conn":[228,230,243]},{"Pos":[-1369.470703125,79.69567108154296875,-1038.856201171875],"Conn":[229,238,231]},{"Pos":[-1379.4853515625,81.09508514404296875,-1050.5748291015625],"Conn":[230,232]},{"Pos":[-1389.2845458984375,81.09508514404296875,-1063.811279296875],"Conn":[231,233]},{"Pos":[-1398.05908203125,81.09508514404296875,-1073.1270751953125],"Conn":[232,234,236,252]},{"Pos":[-1405.67626953125,81.09508514404296875,-1083.4161376953125],"Conn":[233,235]},{"Pos":[-1411.8013916015625,81.09508514404296875,-1091.6898193359375],"Conn":[234]},{"Pos":[-1387.1812744140625,81.09508514404296875,-1080.6370849609375],"Conn":[233,237]},{"Pos":[-1376.54833984375,81.09508514404296875,-1088.7034912109375],"Conn":[236]},{"Pos":[-1362.346923828125,79.69567108154296875,-1045.1568603515625],"Conn":[230,239]},{"Pos":[-1349.49072265625,79.69567108154296875,-1048.04736328125],"Conn":[238,267]},{"Pos":[-1333.1365966796875,79.69567108154296875,-1054.3482666015625],"Conn":[269,268]},{"Pos":[-1333.9615478515625,79.69567108154296875,-1069.8062744140625],"Conn":[242,270]},{"Pos":[-1337.137451171875,80.8466339111328125,-1077.199462890625],"Conn":[247,241]},{"Pos":[-1366.9554443359375,79.69567108154296875,-1018.01202392578125],"Conn":[229,244]},{"Pos":[-1388.0020751953125,79.69567108154296875,-1013.79669189453125],"Conn":[243,260]},{"Pos":[-1392.3594970703125,79.69567108154296875,-1003.85296630859375],"Conn":[260,261]},{"Pos":[-1405.0633544921875,80.459259033203125,-1005.01519775390625],"Conn":[261,262]},{"Pos":[-1342.587158203125,81.095062255859375,-1094.1046142578125],"Conn":[242,248]},{"Pos":[-1360.2230224609375,81.09508514404296875,-1108.1856689453125],"Conn":[247,271]},{"Pos":[-1374.6287841796875,81.09508514404296875,-1121.4808349609375],"Conn":[273,274]},{"Pos":[-1388.9456787109375,81.095062255859375,-1131.8433837890625],"Conn":[275]},{"Pos":[-410.989013671875,16.9802265167236328125,53.412639617919921875],"Conn":[24]},{"Pos":[-1415.008056640625,81.095062255859375,-1074.1746826171875],"Conn":[233]},{"Pos":[-1512.596435546875,81.095062255859375,-1070.757080078125],"Conn":[]},{"Pos":[-1450.056884765625,81.095062255859375,-1068.7366943359375],"Conn":[255]},{"Pos":[-1451.4537353515625,81.09508514404296875,-1063.4571533203125],"Conn":[256,254]},{"Pos":[-1451.00732421875,81.09508514404296875,-1057.786376953125],"Conn":[266,255]},{"Pos":[-1439.569580078125,81.09506988525390625,-1047.1611328125],"Conn":[264,265]},{"Pos":[-769.1539306640625,-22.57568359375,-579.45880126953125],"Conn":[147,169]},{"Pos":[-754.761962890625,-22.575958251953125,-593.655517578125],"Conn":[169,149]},{"Pos":[-1388.9600830078125,79.69567108154296875,-1008.0255126953125],"Conn":[244,245]},{"Pos":[-1400.7393798828125,80.14653778076171875,-1003.3060302734375],"Conn":[245,246]},{"Pos":[-1416.6568603515625,82.08029937744140625,-1010.7821044921875],"Conn":[246,263]},{"Pos":[-1428.410400390625,81.1713104248046875,-1018.74993896484375],"Conn":[262,264]},{"Pos":[-1435.10986328125,81.09508514404296875,-1031.2685546875],"Conn":[263,257]},{"Pos":[-1440.480712890625,81.095062255859375,-1053.944091796875],"Conn":[257,266]},{"Pos":[-1446.9456787109375,81.09508514404296875,-1055.48486328125],"Conn":[265,256]},{"Pos":[-1342.8717041015625,79.69567108154296875,-1053.6668701171875],"Conn":[268,239]},{"Pos":[-1337.418212890625,79.69567108154296875,-1052.904296875],"Conn":[240,267]},{"Pos":[-1331.321533203125,79.695648193359375,-1059.1162109375],"Conn":[270,240]},{"Pos":[-1331.2659912109375,79.695648193359375,-1064.4384765625],"Conn":[241,269]},{"Pos":[-1373.703125,81.09508514404296875,-1110.37646484375],"Conn":[248,272]},{"Pos":[-1374.0328369140625,81.09508514404296875,-1114.4461669921875],"Conn":[271,273]},{"Pos":[-1374.140869140625,81.09508514404296875,-1118.8162841796875],"Conn":[272,249]},{"Pos":[-1378.6492919921875,81.09508514404296875,-1122.4656982421875],"Conn":[249,275]},{"Pos":[-1382.65625,81.09508514404296875,-1123.0106201171875],"Conn":[274,250]}]]=]),
		[3300980249] = game:GetService("HttpService"):JSONDecode([=[[{"Pos":[87.15892791748046875,25.0753803253173828125,102.81990814208984375],"Conn":[2]},{"Pos":[78.733062744140625,25.0975322723388671875,100.04622650146484375],"Conn":[1,3]},{"Pos":[67.4302215576171875,25.0006122589111328125,95.49983978271484375],"Conn":[2,4]},{"Pos":[55.253078460693359375,25.1715908050537109375,98.12210845947265625],"Conn":[3,5]},{"Pos":[44.225460052490234375,25.2070598602294921875,100.6054534912109375],"Conn":[4,6]},{"Pos":[34.5032806396484375,25.3614749908447265625,103.30333709716796875],"Conn":[5,7]},{"Pos":[22.0884799957275390625,25.1262073516845703125,104.31418609619140625],"Conn":[6,8]},{"Pos":[8.25652027130126953125,25.0035228729248046875,106.21898651123046875],"Conn":[7,9]},{"Pos":[-5.52076053619384765625,25.5484981536865234375,106.94690704345703125],"Conn":[8,10]},{"Pos":[-18.589290618896484375,26.40441131591796875,107.59496307373046875],"Conn":[9,11]},{"Pos":[-31.0048198699951171875,25.2360095977783203125,107.41315460205078125],"Conn":[10,12]},{"Pos":[-42.72245025634765625,24.8676166534423828125,109.56488800048828125],"Conn":[11,13]},{"Pos":[-56.853473663330078125,25.6207065582275390625,113.3653717041015625],"Conn":[12,14]},{"Pos":[-68.7164306640625,25.6317138671875,116.21831512451171875],"Conn":[13,15]},{"Pos":[-79.76790618896484375,25.4303493499755859375,118.67505645751953125],"Conn":[14,16]},{"Pos":[-91.68341827392578125,26.589199066162109375,121.32382965087890625],"Conn":[15,17]},{"Pos":[-102.66648101806640625,28.565456390380859375,118.34151458740234375],"Conn":[16,18]},{"Pos":[-113.77510833740234375,31.40152740478515625,115.6393280029296875],"Conn":[17,19]},{"Pos":[-124.797821044921875,34.410495758056640625,110.7560577392578125],"Conn":[18,20]},{"Pos":[-133.9787139892578125,37.296108245849609375,103.57762908935546875],"Conn":[19,21]},{"Pos":[-144.2547149658203125,39.573089599609375,95.30977630615234375],"Conn":[20,22]},{"Pos":[-152.6535491943359375,42.245716094970703125,88.63979339599609375],"Conn":[21,23]},{"Pos":[-154.442840576171875,44.60688018798828125,79.33019256591796875],"Conn":[22,24]},{"Pos":[-167.6046600341796875,44.701175689697265625,84.80230712890625],"Conn":[23,25]},{"Pos":[-170.3194732666015625,46.770843505859375,75.86737823486328125],"Conn":[24,26]},{"Pos":[-179.12335205078125,49.022403717041015625,67.4386138916015625],"Conn":[25,27]},{"Pos":[-192.977996826171875,49.4539642333984375,59.50684356689453125],"Conn":[26,28]},{"Pos":[-205.5538330078125,49.62136077880859375,62.014865875244140625],"Conn":[27,29]},{"Pos":[-216.2531585693359375,49.799953460693359375,64.5610504150390625],"Conn":[28,30]},{"Pos":[-227.6653594970703125,49.97492218017578125,67.27696990966796875],"Conn":[29,31]},{"Pos":[-239.0540924072265625,50.167324066162109375,69.9871978759765625],"Conn":[30,32]},{"Pos":[-246.3800201416015625,49.698986053466796875,77.5919342041015625],"Conn":[31,33]},{"Pos":[-257.871795654296875,50.0951995849609375,83.654998779296875],"Conn":[32,34]},{"Pos":[-268.190521240234375,49.488922119140625,92.89325714111328125],"Conn":[33,35]},{"Pos":[-276.338104248046875,49.473720550537109375,100.66516876220703125],"Conn":[34,36]},{"Pos":[-285.2574462890625,49.3510589599609375,109.17368316650390625],"Conn":[35,37]},{"Pos":[-294.5731201171875,50.040004730224609375,118.06026458740234375],"Conn":[36,38]},{"Pos":[-304.99053955078125,51.808208465576171875,127.99765777587890625],"Conn":[37,39]},{"Pos":[-318.190032958984375,55.60182952880859375,135.6616363525390625],"Conn":[38,40]},{"Pos":[-328.945709228515625,57.511554718017578125,139.265411376953125],"Conn":[39,41]},{"Pos":[-337.83758544921875,57.449077606201171875,144.844146728515625],"Conn":[40,42]},{"Pos":[-346.918243408203125,56.9730072021484375,150.5407562255859375],"Conn":[41,43]},{"Pos":[-353.94293212890625,58.558559417724609375,152.4312744140625],"Conn":[42,44]},{"Pos":[-365.90948486328125,61.717998504638671875,157.5848388671875],"Conn":[43,45]},{"Pos":[-376.753387451171875,64.50496673583984375,163.019287109375],"Conn":[44,46]},{"Pos":[-389.438323974609375,64.8405303955078125,168.155303955078125],"Conn":[45,47]},{"Pos":[-401.446197509765625,65.78836822509765625,173.2049407958984375],"Conn":[46,48]},{"Pos":[-413.10076904296875,67.17577362060546875,178.1061248779296875],"Conn":[47,49]},{"Pos":[-428.858673095703125,68.4247894287109375,181.82220458984375],"Conn":[48,50]},{"Pos":[-441.341705322265625,70.5966949462890625,182.3480072021484375],"Conn":[49,51]},{"Pos":[-454.63128662109375,74.3361053466796875,182.811737060546875],"Conn":[50,52]},{"Pos":[-468.215728759765625,77.73751068115234375,181.607574462890625],"Conn":[51,53]},{"Pos":[-481.517852783203125,80.92151641845703125,181.3804473876953125],"Conn":[52,54]},{"Pos":[-496.52459716796875,84.08899688720703125,180.839630126953125],"Conn":[53,55]},{"Pos":[-509.315704345703125,86.5659027099609375,179.6712799072265625],"Conn":[54,56]},{"Pos":[-523.8699951171875,89.52236175537109375,177.8604888916015625],"Conn":[55,57]},{"Pos":[-541.61578369140625,93.40966796875,173.3858489990234375],"Conn":[56,58]},{"Pos":[-552.0625,95.70372772216796875,165.6433258056640625],"Conn":[57,59]},{"Pos":[-559.9344482421875,96.96825408935546875,158.738189697265625],"Conn":[58,60]},{"Pos":[-567.90509033203125,98.6960601806640625,151.747802734375],"Conn":[59,61]},{"Pos":[-572.4356689453125,99.00911712646484375,147.7743682861328125],"Conn":[60,62]},{"Pos":[-579.2646484375,104.1042022705078125,141.783538818359375],"Conn":[61,63]},{"Pos":[-589.83819580078125,104.1170196533203125,132.50787353515625],"Conn":[62,64,65]},{"Pos":[-598.25030517578125,104.1170196533203125,124.82724761962890625],"Conn":[63]},{"Pos":[-598.62493896484375,104.1170196533203125,142.4817047119140625],"Conn":[63,66]},{"Pos":[-603.6966552734375,100.07335662841796875,149.132293701171875],"Conn":[65,67]},{"Pos":[-610.28741455078125,100.3795318603515625,154.15814208984375],"Conn":[66,68]},{"Pos":[-621.09954833984375,100.67327117919921875,160.8842926025390625],"Conn":[67,69]},{"Pos":[-631.482177734375,101.001739501953125,168.105804443359375],"Conn":[68,70]},{"Pos":[-641.51556396484375,100.9259490966796875,177.03741455078125],"Conn":[69,71]},{"Pos":[-649.244873046875,101.24446868896484375,168.424591064453125],"Conn":[70,72]},{"Pos":[-659.3287353515625,101.182647705078125,164.419647216796875],"Conn":[71,73]},{"Pos":[-669.82476806640625,101.55603790283203125,162.5587615966796875],"Conn":[72,74]},{"Pos":[-682.68487548828125,101.83115386962890625,160.2777099609375],"Conn":[73,75,78]},{"Pos":[-691.13336181640625,105.03733062744140625,162.4289703369140625],"Conn":[74,76]},{"Pos":[-699.51385498046875,107.1770782470703125,162.7827606201171875],"Conn":[75,77]},{"Pos":[-709.91888427734375,107.1770782470703125,166.9956207275390625],"Conn":[76]},{"Pos":[-685.18017578125,101.58986663818359375,147.621734619140625],"Conn":[74,79]},{"Pos":[-688.7286376953125,101.8104248046875,135.0441436767578125],"Conn":[78,80]},{"Pos":[-693.09686279296875,102.3450775146484375,124.038238525390625],"Conn":[79,81]},{"Pos":[-698.23675537109375,101.39766693115234375,111.0874481201171875],"Conn":[80,82]},{"Pos":[-694.268798828125,101.5012664794921875,104.01052093505859375],"Conn":[81,83]},{"Pos":[-686.8162841796875,101.66204071044921875,90.850372314453125],"Conn":[82,84]},{"Pos":[-694.27496337890625,100.98783111572265625,79.6243133544921875],"Conn":[83,85]},{"Pos":[-703.97021484375,101.47476959228515625,70.1122283935546875],"Conn":[84,86]},{"Pos":[-710.77923583984375,101.8656005859375,60.346881866455078125],"Conn":[85,87]},{"Pos":[-717.447265625,102.1062164306640625,50.7843170166015625],"Conn":[86,88]},{"Pos":[-722.983642578125,102.2689971923828125,40.875087738037109375],"Conn":[87,89]},{"Pos":[-728.5399169921875,103.67021942138671875,30.451519012451171875],"Conn":[88,90]},{"Pos":[-735.12567138671875,103.0726165771484375,17.8751220703125],"Conn":[89,91]},{"Pos":[-741.5616455078125,103.94242095947265625,6.256547451019287109375],"Conn":[90,92]},{"Pos":[-747.3858642578125,104.05699920654296875,-4.678125858306884765625],"Conn":[91,93]},{"Pos":[-751.84918212890625,104.757232666015625,-15.999027252197265625],"Conn":[92,94]},{"Pos":[-756.22320556640625,105.6915130615234375,-29.8878002166748046875],"Conn":[93,95]},{"Pos":[-757.1416015625,106.25262451171875,-43.0044403076171875],"Conn":[94,96]},{"Pos":[-757.04864501953125,107.132537841796875,-55.971813201904296875],"Conn":[95,97]},{"Pos":[-756.43157958984375,107.8408660888671875,-71.46185302734375],"Conn":[96,98]},{"Pos":[-759.2596435546875,108.700927734375,-81.44354248046875],"Conn":[97,99]},{"Pos":[-760.7183837890625,108.7237548828125,-92.12641143798828125],"Conn":[98,100]},{"Pos":[-762.3216552734375,109.27347564697265625,-103.8562164306640625],"Conn":[99,101]},{"Pos":[-760.53826904296875,108.95391082763671875,-117.927764892578125],"Conn":[100,102]},{"Pos":[-761.75146484375,109.08779144287109375,-126.80666351318359375],"Conn":[101,103]},{"Pos":[-765.47662353515625,109.0711822509765625,-138.04119873046875],"Conn":[102,104]},{"Pos":[-770.57281494140625,109.06632232666015625,-146.5465087890625],"Conn":[103,105]},{"Pos":[-776.6368408203125,108.9060821533203125,-156.831451416015625],"Conn":[104,106]},{"Pos":[-784.189208984375,108.1543731689453125,-168.0383453369140625],"Conn":[105,107]},{"Pos":[-793.7957763671875,104.27240753173828125,-183.120269775390625],"Conn":[106,108]},{"Pos":[-802.4326171875,100.53029632568359375,-192.07904052734375],"Conn":[107,109]},{"Pos":[-808.0277099609375,97.71204376220703125,-199.3998565673828125],"Conn":[108,110]},{"Pos":[-816.84259033203125,94.00653076171875,-210.934783935546875],"Conn":[109,111]},{"Pos":[-825.41448974609375,91.6283416748046875,-222.1518707275390625],"Conn":[110,112]},{"Pos":[-833.00091552734375,89.58324432373046875,-233.8510284423828125],"Conn":[111,113]},{"Pos":[-840.6976318359375,88.103790283203125,-243.922271728515625],"Conn":[112,114]},{"Pos":[-848.687255859375,87.56021881103515625,-254.3765716552734375],"Conn":[113,115]},{"Pos":[-859.76727294921875,87.1356658935546875,-246.811676025390625],"Conn":[114,116]},{"Pos":[-873.8836669921875,86.08997344970703125,-244.6701202392578125],"Conn":[115,117]},{"Pos":[-887.58331298828125,85.9168243408203125,-245.400054931640625],"Conn":[116,118]},{"Pos":[-903.3289794921875,85.84677886962890625,-247.3356781005859375],"Conn":[117,119]},{"Pos":[-904.46435546875,86.01555633544921875,-261.48358154296875],"Conn":[118,120]},{"Pos":[-907.0716552734375,85.6390380859375,-274.14447021484375],"Conn":[119,121]},{"Pos":[-909.6522216796875,85.89482879638671875,-286.671783447265625],"Conn":[120,122]},{"Pos":[-917.24139404296875,86.02233123779296875,-296.791351318359375],"Conn":[121,123]},{"Pos":[-925.0242919921875,86.822662353515625,-307.2318115234375],"Conn":[122,124]},{"Pos":[-933.4141845703125,86.33307647705078125,-315.901580810546875],"Conn":[123,125]},{"Pos":[-941.8970947265625,86.38257598876953125,-325.30535888671875],"Conn":[124,126]},{"Pos":[-949.83477783203125,85.84267425537109375,-334.7657470703125],"Conn":[125,127]},{"Pos":[-957.19232177734375,85.48711395263671875,-345.872833251953125],"Conn":[126,128]},{"Pos":[-963.037353515625,85.43230438232421875,-357.344390869140625],"Conn":[127,129]},{"Pos":[-964.76434326171875,84.87749481201171875,-368.731109619140625],"Conn":[128,130]},{"Pos":[-965.8436279296875,83.92069244384765625,-381.376068115234375],"Conn":[129,131]},{"Pos":[-966.94085693359375,83.3567962646484375,-394.2359619140625],"Conn":[130,132]},{"Pos":[-962.62060546875,82.77880096435546875,-404.046844482421875],"Conn":[131,133]},{"Pos":[-954.326416015625,81.86154937744140625,-411.64190673828125],"Conn":[132,134]},{"Pos":[-945.485595703125,81.7835693359375,-418.636962890625],"Conn":[133,135]},{"Pos":[-935.42169189453125,81.33579254150390625,-428.901031494140625],"Conn":[134,136]},{"Pos":[-925.4744873046875,81.09990692138671875,-440.421173095703125],"Conn":[135,137]},{"Pos":[-915.099609375,80.50115203857421875,-449.68682861328125],"Conn":[136,138]},{"Pos":[-903.36041259765625,80.16988372802734375,-457.70916748046875],"Conn":[137,139]},{"Pos":[-894.28521728515625,80.1537933349609375,-463.356842041015625],"Conn":[138,140]},{"Pos":[-882.39154052734375,80.3670806884765625,-471.984283447265625],"Conn":[139,141]},{"Pos":[-873.29718017578125,78.8329010009765625,-477.591827392578125],"Conn":[140,142]},{"Pos":[-863.42620849609375,79.48715972900390625,-483.365692138671875],"Conn":[141,143]},{"Pos":[-856.635986328125,80.81098175048828125,-488.02862548828125],"Conn":[142,144]},{"Pos":[-848.75872802734375,82.3719024658203125,-494.282257080078125],"Conn":[143,145]},{"Pos":[-838.32989501953125,84.9680633544921875,-501.203765869140625],"Conn":[144,146]},{"Pos":[-826.4696044921875,88.41854095458984375,-508.29693603515625],"Conn":[145,147]},{"Pos":[-813.7774658203125,92.13692474365234375,-516.28570556640625],"Conn":[146,148]},{"Pos":[-806.2410888671875,94.99640655517578125,-524.0413818359375],"Conn":[147,149]},{"Pos":[-798.41796875,97.7086029052734375,-530.849365234375],"Conn":[148,150]},{"Pos":[-789.49853515625,100.8574981689453125,-539.72222900390625],"Conn":[149,151]},{"Pos":[-780.857421875,103.9064178466796875,-546.3922119140625],"Conn":[150,152]},{"Pos":[-767.66864013671875,107.29491424560546875,-550.64453125],"Conn":[151,153,222]},{"Pos":[-753.3638916015625,109.314788818359375,-555.293212890625],"Conn":[152,154]},{"Pos":[-743.32501220703125,110.44748687744140625,-561.630615234375],"Conn":[153,155]},{"Pos":[-737.1971435546875,111.30802154541015625,-566.673095703125],"Conn":[154,156]},{"Pos":[-728.00201416015625,112.5736541748046875,-573.8060302734375],"Conn":[155,157]},{"Pos":[-719.55841064453125,114.06162261962890625,-582.11309814453125],"Conn":[156,158]},{"Pos":[-709.0252685546875,114.8442535400390625,-589.99658203125],"Conn":[157,159]},{"Pos":[-695.6160888671875,115.90184783935546875,-592.7266845703125],"Conn":[158,160]},{"Pos":[-685.1072998046875,116.0104217529296875,-593.9661865234375],"Conn":[159,161]},{"Pos":[-675.1148681640625,116.60665130615234375,-596.226318359375],"Conn":[160,162]},{"Pos":[-665.0924072265625,116.83826446533203125,-598.747314453125],"Conn":[161,163]},{"Pos":[-653.49212646484375,117.0820465087890625,-603.68426513671875],"Conn":[162,164]},{"Pos":[-645.368896484375,116.84588623046875,-606.615478515625],"Conn":[163,165]},{"Pos":[-635.76055908203125,116.47100830078125,-610.99822998046875],"Conn":[164,166]},{"Pos":[-626.35516357421875,116.79538726806640625,-616.39996337890625],"Conn":[165,167]},{"Pos":[-614.24774169921875,120.28624725341796875,-623.5272216796875],"Conn":[166,168]},{"Pos":[-602.0028076171875,118.03379058837890625,-627.04119873046875],"Conn":[167,169]},{"Pos":[-579.73675537109375,103.99092864990234375,-638.3958740234375],"Conn":[168,170]},{"Pos":[-547.364990234375,90.9732208251953125,-645.9058837890625],"Conn":[169,172]},{"Pos":[-517.968994140625,81.11785888671875,-662.43634033203125],"Conn":[172,173]},{"Pos":[-529.80462646484375,89.1787872314453125,-660.48931884765625],"Conn":[170,171]},{"Pos":[-508.88653564453125,77.1651611328125,-668.5411376953125],"Conn":[171,174]},{"Pos":[-502.92767333984375,79.37746429443359375,-671.50360107421875],"Conn":[173,175]},{"Pos":[-493.19921875,79.6793212890625,-676.33868408203125],"Conn":[174,176]},{"Pos":[-480.265411376953125,78.80448150634765625,-682.07958984375],"Conn":[175,177]},{"Pos":[-464.8857421875,77.772430419921875,-696.4715576171875],"Conn":[176,178]},{"Pos":[-444.93768310546875,78.883026123046875,-712.91546630859375],"Conn":[177,179]},{"Pos":[-430.572723388671875,79.3484344482421875,-722.314208984375],"Conn":[178,180]},{"Pos":[-415.728424072265625,80.5076446533203125,-732.5521240234375],"Conn":[179,181]},{"Pos":[-401.306610107421875,81.5549774169921875,-740.94757080078125],"Conn":[180,182]},{"Pos":[-390.480010986328125,82.8321533203125,-752.93408203125],"Conn":[181,183]},{"Pos":[-385.492950439453125,83.7417144775390625,-764.67071533203125],"Conn":[182,184]},{"Pos":[-378.8236083984375,84.071929931640625,-779.20147705078125],"Conn":[183,185]},{"Pos":[-370.614105224609375,84.2535247802734375,-789.435791015625],"Conn":[184,186]},{"Pos":[-361.681854248046875,82.5418243408203125,-803.40106201171875],"Conn":[185,187]},{"Pos":[-353.629302978515625,80.6804351806640625,-815.32244873046875],"Conn":[186,188]},{"Pos":[-331.726654052734375,72.93978118896484375,-835.3941650390625],"Conn":[187,189]},{"Pos":[-310.556976318359375,66.1022186279296875,-852.35467529296875],"Conn":[188,190]},{"Pos":[-287.914215087890625,61.949260711669921875,-867.839111328125],"Conn":[189,191]},{"Pos":[-271.252777099609375,59.961177825927734375,-877.74114990234375],"Conn":[190,192]},{"Pos":[-258.997222900390625,58.859233856201171875,-886.59259033203125],"Conn":[191,193]},{"Pos":[-242.5629425048828125,58.45824432373046875,-897.795166015625],"Conn":[192,194]},{"Pos":[-227.0150146484375,57.79108428955078125,-906.02978515625],"Conn":[193,195,199]},{"Pos":[-211.6155242919921875,58.56311798095703125,-903.20587158203125],"Conn":[194,196]},{"Pos":[-195.1375885009765625,57.638683319091796875,-904.49542236328125],"Conn":[195,197]},{"Pos":[-179.06103515625,58.915409088134765625,-904.3502197265625],"Conn":[196,198]},{"Pos":[-162.7440185546875,59.37331390380859375,-905.2235107421875],"Conn":[197]},{"Pos":[-225.72540283203125,58.4539337158203125,-923.29022216796875],"Conn":[194,200]},{"Pos":[-220.640716552734375,57.514209747314453125,-940.332763671875],"Conn":[199,201]},{"Pos":[-210.51959228515625,57.521099090576171875,-952.856689453125],"Conn":[200,202]},{"Pos":[-198.5386962890625,57.00739288330078125,-967.09539794921875],"Conn":[201,203]},{"Pos":[-180.3709259033203125,57.166423797607421875,-969.680908203125],"Conn":[202,204]},{"Pos":[-165.80120849609375,57.55709075927734375,-970.96875],"Conn":[203,205]},{"Pos":[-147.2270050048828125,57.888439178466796875,-969.3291015625],"Conn":[204,206]},{"Pos":[-129.3563079833984375,59.40468597412109375,-969.1661376953125],"Conn":[205,207]},{"Pos":[-114.09351348876953125,62.278656005859375,-977.700927734375],"Conn":[206,208]},{"Pos":[-101.0814971923828125,64.75545501708984375,-983.09375],"Conn":[207,209]},{"Pos":[-74.20928192138671875,72.469940185546875,-994.641357421875],"Conn":[208,210]},{"Pos":[-43.43535614013671875,80.78583526611328125,-1010.55035400390625],"Conn":[209,211]},{"Pos":[24.2816829681396484375,80.1080780029296875,-1038.447998046875],"Conn":[210,212]},{"Pos":[61.6698760986328125,80.3939971923828125,-1054.9273681640625],"Conn":[211,213]},{"Pos":[82.4783935546875,80.56966400146484375,-1064.9456787109375],"Conn":[212,214]},{"Pos":[101.4952392578125,88.06565093994140625,-1068.3040771484375],"Conn":[213,215]},{"Pos":[115.931182861328125,89.2041778564453125,-1080.2086181640625],"Conn":[214,216]},{"Pos":[131.93280029296875,89.31990814208984375,-1086.635498046875],"Conn":[215,217]},{"Pos":[147.3840789794921875,89.42315673828125,-1092.397705078125],"Conn":[216,218,220,221]},{"Pos":[157.9366912841796875,89.51386260986328125,-1097.560791015625],"Conn":[217,219]},{"Pos":[168.1164093017578125,89.61473846435546875,-1104.1368408203125],"Conn":[218]},{"Pos":[141.344573974609375,89.573699951171875,-1105.72216796875],"Conn":[217]},{"Pos":[153.45660400390625,89.28790283203125,-1079.80712890625],"Conn":[217]},{"Pos":[-761.35772705078125,107.6012115478515625,-540.10919189453125],"Conn":[152,223]},{"Pos":[-756.038330078125,108.45368194580078125,-531.99951171875],"Conn":[222,224]},{"Pos":[-749.654541015625,109.0113372802734375,-522.3135986328125],"Conn":[223]}]]=]),
		[4142858848] = game:GetService("HttpService"):JSONDecode([=[[{"Pos":[187.7531280517578125,3.766029834747314453125,87.243072509765625],"Conn":[2]},{"Pos":[172.1430816650390625,3.9589636325836181640625,75.7160186767578125],"Conn":[1,3]},{"Pos":[153.71392822265625,3.9570891857147216796875,69.6192626953125],"Conn":[2,4]},{"Pos":[135.167816162109375,4.799998760223388671875,70.77606201171875],"Conn":[3,5]},{"Pos":[122.0991668701171875,14.68788814544677734375,74.78502655029296875],"Conn":[4,6]},{"Pos":[100.85152435302734375,15.6841335296630859375,78.60688018798828125],"Conn":[5,7]},{"Pos":[77.524261474609375,17.1999950408935546875,62.63616180419921875],"Conn":[6,8]},{"Pos":[74.46826171875,19,41.975063323974609375],"Conn":[7,9]},{"Pos":[70.285369873046875,20.1998958587646484375,26.830257415771484375],"Conn":[8,10]},{"Pos":[66.908905029296875,21.2127704620361328125,13.5385894775390625],"Conn":[9,11]},{"Pos":[58.26406097412109375,24.25646209716796875,-3.3895184993743896484375],"Conn":[10,12]},{"Pos":[55.914371490478515625,25.705108642578125,-11.54624271392822265625],"Conn":[11,13]},{"Pos":[52.218875885009765625,30.2213993072509765625,-27.200420379638671875],"Conn":[12,14]},{"Pos":[45.970165252685546875,30.2213993072509765625,-43.980960845947265625],"Conn":[13,15]},{"Pos":[41.576663970947265625,30.2554931640625,-54.377185821533203125],"Conn":[14,16]},{"Pos":[36.13713836669921875,31.00356292724609375,-67.24859619140625],"Conn":[15,17]},{"Pos":[28.988307952880859375,31.599994659423828125,-84.1647796630859375],"Conn":[16,18]},{"Pos":[21.6137638092041015625,31.5544223785400390625,-100.1492767333984375],"Conn":[17,19]},{"Pos":[17.92810821533203125,38.446994781494140625,-111.55313873291015625],"Conn":[18,20]},{"Pos":[12.49525928497314453125,42.644313812255859375,-121.982635498046875],"Conn":[19,21]},{"Pos":[6.877940654754638671875,43.450565338134765625,-134.9195709228515625],"Conn":[20,237]},{"Pos":[-1.05332219600677490234375,45.076580047607421875,-150.42529296875],"Conn":[237,238]},{"Pos":[-10.696014404296875,44.628326416015625,-168.5434112548828125],"Conn":[24,238]},{"Pos":[-16.081813812255859375,45.008007049560546875,-182.58807373046875],"Conn":[23,25]},{"Pos":[-23.7348346710205078125,44.070110321044921875,-196.9220123291015625],"Conn":[24,239]},{"Pos":[-34.98395538330078125,45.3692169189453125,-219.231231689453125],"Conn":[239,240]},{"Pos":[-44.40782928466796875,44.819614410400390625,-239.1355743408203125],"Conn":[240,241]},{"Pos":[-50.50653839111328125,44.967128753662109375,-264.380126953125],"Conn":[241,242]},{"Pos":[-68.28322601318359375,46.133876800537109375,-294.24505615234375],"Conn":[243,244]},{"Pos":[-77.83404541015625,45.285213470458984375,-333.051513671875],"Conn":[245,246]},{"Pos":[-95.34401702880859375,44.915103912353515625,-368.00079345703125],"Conn":[247,248]},{"Pos":[-111.69060516357421875,44.710895538330078125,-404.295989990234375],"Conn":[33,250]},{"Pos":[-113.8956298828125,30.4938640594482421875,-412.131622314453125],"Conn":[32,34]},{"Pos":[-118.15068817138671875,29.8000011444091796875,-423.958892822265625],"Conn":[33,35]},{"Pos":[-124.44419097900390625,30.0215282440185546875,-441.963287353515625],"Conn":[34,36]},{"Pos":[-131.359161376953125,30.3999996185302734375,-459.016998291015625],"Conn":[35,37]},{"Pos":[-138.444793701171875,31.7414398193359375,-475.84381103515625],"Conn":[36,38]},{"Pos":[-148.473114013671875,38.90625,-491.152862548828125],"Conn":[37,39]},{"Pos":[-154.9950408935546875,42.414707183837890625,-504.443511962890625],"Conn":[38,40]},{"Pos":[-159.5127716064453125,47.3753662109375,-516.40167236328125],"Conn":[39,41]},{"Pos":[-164.16473388671875,50.606990814208984375,-531.98797607421875],"Conn":[40,42]},{"Pos":[-169.236724853515625,52.0346527099609375,-548.512939453125],"Conn":[41,43]},{"Pos":[-174.5053863525390625,53.200000762939453125,-567.11737060546875],"Conn":[42,44]},{"Pos":[-183.019744873046875,53.480010986328125,-582.84130859375],"Conn":[43,45,48]},{"Pos":[-175.3330230712890625,53.480007171630859375,-594.29248046875],"Conn":[44,46]},{"Pos":[-161.5562286376953125,54.14473724365234375,-597.68157958984375],"Conn":[45,47]},{"Pos":[-147.8583221435546875,54.376209259033203125,-597.82598876953125],"Conn":[46]},{"Pos":[-203.2677001953125,54.4150543212890625,-584.4532470703125],"Conn":[44,49]},{"Pos":[-224.2793426513671875,54.976451873779296875,-585.1058349609375],"Conn":[48,50]},{"Pos":[-242.2703094482421875,55,-584.020751953125],"Conn":[49,51]},{"Pos":[-262.3955078125,54.6372222900390625,-580.7078857421875],"Conn":[50,52]},{"Pos":[-279.2833251953125,52.799999237060546875,-578.767822265625],"Conn":[51,53]},{"Pos":[-296.871124267578125,48.180126190185546875,-577.3861083984375],"Conn":[52,54]},{"Pos":[-311.0230712890625,45.023006439208984375,-573.42620849609375],"Conn":[53,55]},{"Pos":[-324.152435302734375,41.882175445556640625,-575.166015625],"Conn":[54,56]},{"Pos":[-342.5577392578125,38.45101165771484375,-581.10223388671875],"Conn":[55,57]},{"Pos":[-361.0849609375,34.83663177490234375,-585.98907470703125],"Conn":[56,58]},{"Pos":[-379.3995361328125,30.9831676483154296875,-593.0225830078125],"Conn":[57,59]},{"Pos":[-401.740936279296875,22.9377899169921875,-604.8336181640625],"Conn":[58,60]},{"Pos":[-428.467742919921875,16.4329586029052734375,-617.64434814453125],"Conn":[59,61]},{"Pos":[-448.603240966796875,9.84051609039306640625,-631.87469482421875],"Conn":[60,62]},{"Pos":[-462.6414794921875,7.0130481719970703125,-642.7198486328125],"Conn":[61,63]},{"Pos":[-472.114227294921875,4.13802051544189453125,-652.02410888671875],"Conn":[62,64]},{"Pos":[-483.057708740234375,-0.0787971913814544677734375,-662.1290283203125],"Conn":[63,65]},{"Pos":[-495.645294189453125,-3.5747926235198974609375,-674.96893310546875],"Conn":[64,66]},{"Pos":[-503.180023193359375,-6.45458889007568359375,-686.73175048828125],"Conn":[65,67]},{"Pos":[-512.196044921875,-9.00007534027099609375,-698.48602294921875],"Conn":[66,68]},{"Pos":[-519.9464111328125,-9.07230854034423828125,-708.590576171875],"Conn":[67,69]},{"Pos":[-526.5765380859375,-9.727710723876953125,-720.9881591796875],"Conn":[68,70]},{"Pos":[-532.4429931640625,-10.2004070281982421875,-737.4925537109375],"Conn":[69,71]},{"Pos":[-542.38726806640625,-10.520412445068359375,-759.73956298828125],"Conn":[70,72]},{"Pos":[-545.66632080078125,-10.8000030517578125,-775.91064453125],"Conn":[71,73]},{"Pos":[-548.807373046875,-4.29982852935791015625,-791.44439697265625],"Conn":[72,74]},{"Pos":[-552.845947265625,-1.87539768218994140625,-805.4659423828125],"Conn":[73,75]},{"Pos":[-542.9893798828125,-1.1869037151336669921875,-822.07916259765625],"Conn":[74,76]},{"Pos":[-532.76727294921875,-0.9728152751922607421875,-837.0731201171875],"Conn":[75,77]},{"Pos":[-516.36285400390625,-7.393383026123046875,-846.91156005859375],"Conn":[76,78]},{"Pos":[-496.302215576171875,-9.9530124664306640625,-858.17486572265625],"Conn":[77,79]},{"Pos":[-479.12640380859375,-10.4533538818359375,-862.50775146484375],"Conn":[78,80]},{"Pos":[-468.805267333984375,-11.1456241607666015625,-868.50311279296875],"Conn":[79,81]},{"Pos":[-459.79071044921875,-6.30387783050537109375,-882.8729248046875],"Conn":[80,82]},{"Pos":[-434.71142578125,-2.593875885009765625,-891.02667236328125],"Conn":[81,83]},{"Pos":[-426.5101318359375,-2.6740207672119140625,-902.3370361328125],"Conn":[82,84]},{"Pos":[-424.653594970703125,3.184774875640869140625,-923.39337158203125],"Conn":[83,85]},{"Pos":[-420.69805908203125,3.520987987518310546875,-933.1697998046875],"Conn":[84,86]},{"Pos":[-408.64794921875,6.64487552642822265625,-939.577392578125],"Conn":[85,87]},{"Pos":[-398.811614990234375,6.4301319122314453125,-948.2862548828125],"Conn":[86,88]},{"Pos":[-388.7015380859375,8.30365085601806640625,-962.30706787109375],"Conn":[87,89]},{"Pos":[-382.911529541015625,9.5324306488037109375,-971.51910400390625],"Conn":[88,90]},{"Pos":[-378.28973388671875,9.53302860260009765625,-978.21380615234375],"Conn":[89,91]},{"Pos":[-368.106719970703125,7.98172092437744140625,-992.96484375],"Conn":[90,92]},{"Pos":[-360.812255859375,9.61032867431640625,-1006.87939453125],"Conn":[91,93]},{"Pos":[-347.347625732421875,10.13242053985595703125,-1021.1910400390625],"Conn":[92,94]},{"Pos":[-337.806182861328125,14.674945831298828125,-1027.5902099609375],"Conn":[93,95]},{"Pos":[-327.659210205078125,19.9316883087158203125,-1034.3846435546875],"Conn":[94,96]},{"Pos":[-312.05059814453125,26.603038787841796875,-1044.833984375],"Conn":[95,97]},{"Pos":[-300.05816650390625,31.6327838897705078125,-1050.1107177734375],"Conn":[96,98]},{"Pos":[-289.709747314453125,36.10546112060546875,-1055.3564453125],"Conn":[97,99]},{"Pos":[-278.59228515625,39.0355987548828125,-1060.2119140625],"Conn":[98,100]},{"Pos":[-265.40234375,44.1689453125,-1069.1021728515625],"Conn":[99,101]},{"Pos":[-247.7011871337890625,46.569698333740234375,-1076.695068359375],"Conn":[100,102]},{"Pos":[-234.11663818359375,49.132450103759765625,-1081.7667236328125],"Conn":[101,103]},{"Pos":[-219.25714111328125,49.25055694580078125,-1079.688232421875],"Conn":[102,104]},{"Pos":[-203.14093017578125,49.851726531982421875,-1080.9658203125],"Conn":[103,105]},{"Pos":[-185.432403564453125,49.7999725341796875,-1083.656982421875],"Conn":[104,106]},{"Pos":[-166.590911865234375,49.200000762939453125,-1087.9952392578125],"Conn":[105,107]},{"Pos":[-154.9319610595703125,49.200000762939453125,-1088.4217529296875],"Conn":[106,108]},{"Pos":[-141.69415283203125,49.632266998291015625,-1072.1441650390625],"Conn":[107,109]},{"Pos":[-124.15465545654296875,50.177303314208984375,-1056.335693359375],"Conn":[108,110]},{"Pos":[-109.52974700927734375,52.442783355712890625,-1049.890625],"Conn":[109,111]},{"Pos":[-97.11474609375,55.924434661865234375,-1055.117431640625],"Conn":[110,112]},{"Pos":[-88.602783203125,58.221218109130859375,-1062.7347412109375],"Conn":[111,113]},{"Pos":[-86.96250152587890625,62.331615447998046875,-1077.2532958984375],"Conn":[112,114]},{"Pos":[-89.11154937744140625,65.75540924072265625,-1091.8988037109375],"Conn":[113,115]},{"Pos":[-95.10910797119140625,69.23900604248046875,-1105.9029541015625],"Conn":[114,116]},{"Pos":[-98.29033660888671875,74.74063873291015625,-1122.3763427734375],"Conn":[115,117]},{"Pos":[-101.528167724609375,77.458160400390625,-1128.462646484375],"Conn":[116,118]},{"Pos":[-109.47354888916015625,80.170867919921875,-1136.8587646484375],"Conn":[117,119]},{"Pos":[-119.30165863037109375,82.77989959716796875,-1135.482177734375],"Conn":[118,120]},{"Pos":[-139.349029541015625,97.1660614013671875,-1123.4757080078125],"Conn":[119,121]},{"Pos":[-143.3468017578125,99.78293609619140625,-1117.47265625],"Conn":[120,122]},{"Pos":[-145.949188232421875,100.9278106689453125,-1107.8394775390625],"Conn":[121,123]},{"Pos":[-147.3043060302734375,102.59018707275390625,-1097.16455078125],"Conn":[122,124]},{"Pos":[-146.20709228515625,104.2166748046875,-1082.0218505859375],"Conn":[123,125]},{"Pos":[-143.1240234375,105.1996612548828125,-1066.7083740234375],"Conn":[124,126]},{"Pos":[-141.39947509765625,104.275543212890625,-1051.104248046875],"Conn":[125,127]},{"Pos":[-134.6790313720703125,103.91689300537109375,-1048.3751220703125],"Conn":[126,128]},{"Pos":[-123.05718994140625,104.74662017822265625,-1047.1636962890625],"Conn":[127,129]},{"Pos":[-110.84615325927734375,106.37990570068359375,-1052.9735107421875],"Conn":[128,130]},{"Pos":[-101.86284637451171875,107.71726226806640625,-1057.7740478515625],"Conn":[129,131]},{"Pos":[-91.57709503173828125,109.17645263671875,-1062.4241943359375],"Conn":[130,132]},{"Pos":[-84.904388427734375,110.6044921875,-1068.75927734375],"Conn":[131,133]},{"Pos":[-84.3567657470703125,113.08792877197265625,-1081.3660888671875],"Conn":[132,134]},{"Pos":[-87.49651336669921875,116.0794830322265625,-1096.24560546875],"Conn":[133,135]},{"Pos":[-96.2219390869140625,120.5445709228515625,-1107.2821044921875],"Conn":[134,136]},{"Pos":[-99.2011871337890625,122.63010406494140625,-1117.56396484375],"Conn":[135,137]},{"Pos":[-101.69651031494140625,124.40505218505859375,-1130.6834716796875],"Conn":[136,138]},{"Pos":[-88.526641845703125,125.40036773681640625,-1137.1727294921875],"Conn":[137,139]},{"Pos":[-73.91464996337890625,125.8000030517578125,-1142.2403564453125],"Conn":[138,140]},{"Pos":[-58.0152587890625,125.199981689453125,-1148.3507080078125],"Conn":[139,141]},{"Pos":[-41.133148193359375,126.230010986328125,-1154.8331298828125],"Conn":[140,142]},{"Pos":[-34.69925689697265625,126.4123687744140625,-1163.9595947265625],"Conn":[141,143]},{"Pos":[-23.8184661865234375,126.44809722900390625,-1164.320556640625],"Conn":[142,144]},{"Pos":[-16.1302127838134765625,126.99993133544921875,-1168.8397216796875],"Conn":[143,145]},{"Pos":[-7.700660228729248046875,126.97229766845703125,-1172.07177734375],"Conn":[144,146]},{"Pos":[2.6065981388092041015625,126.0146484375,-1177.1422119140625],"Conn":[145,147]},{"Pos":[16.84668731689453125,125.79998016357421875,-1182.6153564453125],"Conn":[146,148]},{"Pos":[31.4819183349609375,124.97649383544921875,-1189.63671875],"Conn":[147,149]},{"Pos":[48.023128509521484375,121.90091705322265625,-1196.8602294921875],"Conn":[148,150]},{"Pos":[59.050228118896484375,120.242431640625,-1201.4884033203125],"Conn":[149,151]},{"Pos":[69.78424072265625,119.244903564453125,-1207.311279296875],"Conn":[150,152]},{"Pos":[80.796142578125,118.6773223876953125,-1211.9996337890625],"Conn":[151,153]},{"Pos":[92.97086334228515625,119.2919464111328125,-1218.6036376953125],"Conn":[152,154]},{"Pos":[104.4275665283203125,120.5477142333984375,-1222.031982421875],"Conn":[153,155]},{"Pos":[116.05988311767578125,122.65280914306640625,-1228.5228271484375],"Conn":[154,156]},{"Pos":[128.588623046875,124.19122314453125,-1233.8173828125],"Conn":[155,157]},{"Pos":[141.5728607177734375,124.20000457763671875,-1239.7547607421875],"Conn":[156,158]},{"Pos":[150.303497314453125,123.59991455078125,-1245.265380859375],"Conn":[157,159]},{"Pos":[158.2516021728515625,123.02909088134765625,-1256.61572265625],"Conn":[158,160]},{"Pos":[170.7852630615234375,122.3999786376953125,-1265.8095703125],"Conn":[159,161]},{"Pos":[184.37322998046875,121.20680999755859375,-1272.62451171875],"Conn":[160,162]},{"Pos":[195.2471160888671875,120.79421234130859375,-1285.0179443359375],"Conn":[161,163]},{"Pos":[203.8707427978515625,121.81529998779296875,-1295.3348388671875],"Conn":[162,164]},{"Pos":[207.47137451171875,124.09856414794921875,-1307.88134765625],"Conn":[163,165]},{"Pos":[207.9066162109375,128.0937957763671875,-1320.0869140625],"Conn":[164,166]},{"Pos":[207.8955841064453125,131.350189208984375,-1337.95263671875],"Conn":[165,167]},{"Pos":[212.1068878173828125,132.74102783203125,-1350.9947509765625],"Conn":[166,168]},{"Pos":[212.41357421875,132.604278564453125,-1374.6954345703125],"Conn":[167,169]},{"Pos":[208.8317108154296875,132.799957275390625,-1391.049072265625],"Conn":[168,170]},{"Pos":[204.909210205078125,133.1992950439453125,-1402.9453125],"Conn":[169,171]},{"Pos":[199.53863525390625,132.7999420166015625,-1415.49853515625],"Conn":[170,172]},{"Pos":[194.0691070556640625,131.912506103515625,-1432.4803466796875],"Conn":[171,173]},{"Pos":[184.65850830078125,130.504608154296875,-1445.3743896484375],"Conn":[172,174]},{"Pos":[179.59320068359375,129.20001220703125,-1454.515625],"Conn":[173,175]},{"Pos":[171.89691162109375,128.9590911865234375,-1464.7789306640625],"Conn":[174,176]},{"Pos":[157.8074798583984375,128.3302459716796875,-1472.7718505859375],"Conn":[175,177]},{"Pos":[144.692962646484375,126.83917236328125,-1478.5218505859375],"Conn":[176,178]},{"Pos":[129.3840789794921875,125.79087066650390625,-1483.99169921875],"Conn":[177,179]},{"Pos":[114.9569244384765625,125.155792236328125,-1486.81982421875],"Conn":[178,180]},{"Pos":[100.42218017578125,124.2703399658203125,-1489.4764404296875],"Conn":[179,181]},{"Pos":[84.7866363525390625,123.1179962158203125,-1491.93408203125],"Conn":[180,182]},{"Pos":[69.8016815185546875,121.16512298583984375,-1492.8294677734375],"Conn":[181,183]},{"Pos":[43.552722930908203125,117.21053314208984375,-1494.441162109375],"Conn":[182,184]},{"Pos":[21.1903476715087890625,114.57855224609375,-1494.0863037109375],"Conn":[183,185]},{"Pos":[7.602270603179931640625,112.53973388671875,-1488.64404296875],"Conn":[184,186]},{"Pos":[-3.66188716888427734375,109.31244659423828125,-1483.003173828125],"Conn":[185,187]},{"Pos":[-15.53938770294189453125,106.21041107177734375,-1478.2188720703125],"Conn":[186,188]},{"Pos":[-30.3699626922607421875,105.19333648681640625,-1470.833740234375],"Conn":[187,189]},{"Pos":[-47.141902923583984375,104.89144134521484375,-1462.6593017578125],"Conn":[188,190]},{"Pos":[-62.68634033203125,105.20000457763671875,-1457.5010986328125],"Conn":[189,191]},{"Pos":[-80.76667022705078125,106.47949981689453125,-1452.2374267578125],"Conn":[190,192]},{"Pos":[-103.71019744873046875,109.6631927490234375,-1448.37158203125],"Conn":[191,193]},{"Pos":[-120.6220550537109375,114.342926025390625,-1448.9732666015625],"Conn":[192,194]},{"Pos":[-136.292572021484375,117.25682830810546875,-1449.4798583984375],"Conn":[193,195]},{"Pos":[-148.985748291015625,119.85713958740234375,-1449.7720947265625],"Conn":[194,196]},{"Pos":[-159.8366851806640625,121.20000457763671875,-1453.46142578125],"Conn":[195,197]},{"Pos":[-166.8068695068359375,121.69850921630859375,-1463.3233642578125],"Conn":[196,198]},{"Pos":[-170.3381500244140625,121.5279541015625,-1472.841064453125],"Conn":[197,199]},{"Pos":[-171.1690673828125,121.3161163330078125,-1482.6981201171875],"Conn":[198,200,201]},{"Pos":[-173.05120849609375,121.64781951904296875,-1495.014892578125],"Conn":[199]},{"Pos":[-188.140594482421875,122.39520263671875,-1479.3619384765625],"Conn":[199,202]},{"Pos":[-203.672607421875,121.83986663818359375,-1475.217529296875],"Conn":[201,203]},{"Pos":[-223.1474609375,125.84358978271484375,-1470.83251953125],"Conn":[202,204]},{"Pos":[-234.91290283203125,131.4197998046875,-1467.251953125],"Conn":[203,205]},{"Pos":[-254.57403564453125,133.29083251953125,-1464.55029296875],"Conn":[204,206]},{"Pos":[-269.589324951171875,133.1611480712890625,-1461.0048828125],"Conn":[205,207]},{"Pos":[-288.471893310546875,133.261199951171875,-1458.6129150390625],"Conn":[206,208]},{"Pos":[-309.19622802734375,133.4683837890625,-1454.943115234375],"Conn":[207,209]},{"Pos":[-325.314971923828125,134.38690185546875,-1451.7779541015625],"Conn":[208,210]},{"Pos":[-341.79290771484375,136.4391021728515625,-1446.4425048828125],"Conn":[209,211,223]},{"Pos":[-350.03106689453125,136.2587432861328125,-1462.1573486328125],"Conn":[210,212]},{"Pos":[-367.856597900390625,135.94781494140625,-1465.5263671875],"Conn":[211,213,214]},{"Pos":[-383.6131591796875,136.0629730224609375,-1473.2744140625],"Conn":[212]},{"Pos":[-401.1466064453125,135.3173828125,-1482.7310791015625],"Conn":[212,215]},{"Pos":[-411.43194580078125,135.05072021484375,-1496.261962890625],"Conn":[214,216]},{"Pos":[-431.7239990234375,135.7195587158203125,-1508.6273193359375],"Conn":[215,217]},{"Pos":[-457.97784423828125,134.51788330078125,-1519.334716796875],"Conn":[216,218]},{"Pos":[-487.4095458984375,132.8328857421875,-1524.698974609375],"Conn":[217,219]},{"Pos":[-509.59906005859375,132.7999725341796875,-1526.406982421875],"Conn":[218,220]},{"Pos":[-507.53546142578125,132.99810791015625,-1500.1810302734375],"Conn":[219,221]},{"Pos":[-525.053466796875,132.5949554443359375,-1499.246826171875],"Conn":[220,222]},{"Pos":[-540.240478515625,132.00335693359375,-1499.848388671875],"Conn":[221]},{"Pos":[-346.100067138671875,135.948150634765625,-1419.9942626953125],"Conn":[210,224]},{"Pos":[-360.711517333984375,135.9480743408203125,-1409.450439453125],"Conn":[223,225]},{"Pos":[-379.512908935546875,137.3259124755859375,-1404.489013671875],"Conn":[224,226,229]},{"Pos":[-396.25640869140625,136.54779052734375,-1410.860107421875],"Conn":[225,227]},{"Pos":[-412.612335205078125,135.9478607177734375,-1418.374755859375],"Conn":[226,228]},{"Pos":[-419.49334716796875,135.9475250244140625,-1436.732421875],"Conn":[227]},{"Pos":[-386.500579833984375,132.0423431396484375,-1378.743408203125],"Conn":[225,230]},{"Pos":[-391.988311767578125,136.0764007568359375,-1349.796630859375],"Conn":[229,231]},{"Pos":[-411.904296875,134.627838134765625,-1330.0631103515625],"Conn":[230,232]},{"Pos":[-437.821807861328125,132.6840667724609375,-1316.7725830078125],"Conn":[231,233]},{"Pos":[-454.108062744140625,132.8000030517578125,-1305.9466552734375],"Conn":[232,234]},{"Pos":[-465.467742919921875,132.97198486328125,-1290.9609375],"Conn":[233,235]},{"Pos":[-486.08209228515625,132.97930908203125,-1282.859619140625],"Conn":[234,236]},{"Pos":[-504.176177978515625,132.841796875,-1298.461669921875],"Conn":[235]},{"Pos":[2.0741527080535888671875,46.16790771484375,-144.2267608642578125],"Conn":[21,22]},{"Pos":[-5.1196117401123046875,44.77249908447265625,-159.340789794921875],"Conn":[22,23]},{"Pos":[-29.3910083770751953125,42.8328399658203125,-208.04998779296875],"Conn":[25,26]},{"Pos":[-39.67992401123046875,46.39159393310546875,-229.996063232421875],"Conn":[26,27]},{"Pos":[-46.690715789794921875,45.49687957763671875,-254.743621826171875],"Conn":[27,28]},{"Pos":[-57.43630218505859375,44.78907012939453125,-276.80780029296875],"Conn":[28,243]},{"Pos":[-61.593875885009765625,44.980792999267578125,-286.554229736328125],"Conn":[242,29]},{"Pos":[-71.72637176513671875,48.863948822021484375,-309.263031005859375],"Conn":[29,245]},{"Pos":[-73.41329193115234375,48.8562774658203125,-321.27862548828125],"Conn":[244,30]},{"Pos":[-82.14644622802734375,44.84980010986328125,-347.3001708984375],"Conn":[30,247]},{"Pos":[-89.1425933837890625,44.980945587158203125,-357.926910400390625],"Conn":[246,31]},{"Pos":[-99.57169342041015625,44.19979095458984375,-381.635406494140625],"Conn":[31,249]},{"Pos":[-102.9106597900390625,45.838527679443359375,-390.666961669921875],"Conn":[248,250]},{"Pos":[-105.72708892822265625,45.73419952392578125,-396.740753173828125],"Conn":[249,32]}]]=]),
	}
	
	local LobbyId = 3194820651
	
	local Network
	local Events = require(game:GetService("ReplicatedStorage"):WaitForChild(KH_CONSTANT("Framework"))).Events
	--local StatsChanged = Events:WaitForChild("Stats"):FindFirstChild("Changed")
	
	local CurrentTarget,GetTarget,WalkTo,TweenTo,PathTo,AutoSellFunc,Framework
	
	local Abilities = {}
	
	local CollisionObjs
	local function NoCollisions(bool)
		if not CollisionObjs then
			CollisionObjs = {}
			for i,v in pairs({
				--[[workspace:FindFirstChild("Assets"),
				workspace:FindFirstChild("Woodcutting"),
				workspace:FindFirstChild("Mining")]]
				workspace
			}) do
				for i,v in pairs(v:GetDescendants()) do
					if v:IsA("BasePart") then
						CollisionObjs[#CollisionObjs + 1] = {Part = v, CanCollide = v.CanCollide}
					end
				end
			end
		end
		
		if Settings.NoCollisionsInternal == bool or (bool and not Settings.NoCollisions) then
			return
		end
		Settings.NoCollisionsInternal = bool
		for i,v in pairs(CollisionObjs) do
			if bool then
				v.Part.CanCollide = false
			else
				v.Part.CanCollide = v.CanCollide
			end
		end
	end

	local function FakeTeleport(tbl)
		local func
		for i,v in pairs(getgc()) do
			if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
				local c = getconstants(v)
				if FIT(c, "GameTeleporting") and FIT(c, "table") then
					func = v
					break
				end
			end
		end
		func(tbl)

		local tp = require(game.ReplicatedFirst.ClientLoader.LoadScreen.Loading)
		tp:SetHint("Teleporting")
		tp:FadeIn()
		game:GetService("TeleportService"):SetTeleportGui(tp:GetContainer())

		local audio = require(game:GetService("ReplicatedFirst"):WaitForChild("ClientModules"):WaitForChild("Audio"))
		audio.Interface:Play("MatchFound")

		--prevent the game from calling the functions--
		tp.SetHint = function()
			return wait(9e9)
		end
		tp.FadeIn = function()
			return wait(9e9)
		end
		audio.Interface.Play = function()
			return wait(9e9)
		end
		Framework.Events.Send = function()
			return wait(9e9)
		end
	end
	
	local UiTbl = {}
	UiTbl.gameTab = NewUI:Tab("Game")
	UiTbl.combatGroup = UiTbl.gameTab:Group("Combat")
	UiTbl.miscGameGroup = UiTbl.gameTab:Group("Misc")
	
	UiTbl.killauraCb = UiTbl.combatGroup:CheckBox("Killaura", function(bool)
		Settings.Killaura = bool
		
		if game.PlaceId == LobbyId then
			return
		end
		
		while Settings.Killaura do
			if not Settings.Autofarm and GetTarget then
				CurrentTarget = GetTarget()
			end
			if CurrentTarget and CurrentTarget.Distance and CurrentTarget.Distance <= Settings.KillauraRange then
				for i,v in pairs(Abilities) do
					Network:Send("Abilities/Use",v)
				end
			end
			--for i=1,4 do
				--Network:Send("Abilities/Use","BasicAttack")
			--end
			wait(0.1)
		end
	end, "Killaura")
	UiTbl.combatGroup:Slider({
		Min = 1,
		Max = 50,
		Default = 50,
		Parent = UiTbl.killauraCb,
	}, function(val)
		Settings.KillauraRange = val
		return "Range: " .. val
	end, "KillauraRange")
	
	local DungeonStarted = false
	local IgnoreEntity
	--local BodyPos,BodyGyro
	UiTbl.autofarmCb = UiTbl.combatGroup:CheckBox("Autofarm", function(bool, autoLoad)
		Settings.Autofarm = bool
		
		while not Network do
			Events:Send("Notifications/Notify", "[Autofarm] Waiting for modules...")
			wait()
		end
		
		if bool then
			--3214306383
			if not DungeonStarted then
				Events:Send("Notifications/Notify", "[Autofarm] Checking for dungeon...")
			end
			local isDungeon = game.PlaceId ~= LobbyId --workspace:WaitForChild("BossMechanics", 3)
			if isDungeon and not DungeonStarted then
				Events:Send("Notifications/Notify", "[Autofarm] Is dungeon: true")
				wait(2)
				DungeonStarted = true
				if workspace:FindFirstChild("BossMechanics") and Network:Invoke("Timer/GetTimer") == -1 then
					Events:Send("Notifications/Notify", "[Autofarm] Starting the timer...")
					Network:Send("Timer/Start")
					wait(5)
				end
			elseif not isDungeon then
				Events:Send("Notifications/Notify", "[Autofarm] Is dungeon: false")
				
				wait(1)
				
				if not GetTPSetting("wallygay") and autoLoad then
					SetTPSetting("wallygay", true)
					return
				end

				local DungeonId = Settings.DungeonTransl[Settings.Dungeon]
				local Difficulty = Settings.DifficultyTransl[Settings.Difficulty]
				Events:Send("Notifications/Notify", "[Autofarm] Teleporting to " .. Settings.Dungeon .. "...")

				--sneaky teleport to portal--
				local dungeonPlaceId = Resources.Data.Dungeons[tostring(DungeonId)].PlaceId
				FakeTeleport({PlaceId = dungeonPlaceId})
				wait(0.1)
				Network:Send("Dungeons/Teleport")
				
				debugprint"waiting"
				wait(math.random(5,10)) --lol
				debugprint"done"
				
				Network:Send("Parties/Create",DungeonId,Difficulty,4) --Dungeon Id, Difficulty, Mode
				
				Settings.RetryTeleport = function()
					return Network:Send("Parties/Create",DungeonId,Difficulty,4)
				end
				return
			end
		end
		
		SetTPSetting("wallygay", true)
		
		local platform = Instance.new("Part")
		platform.Anchored = true
		platform.CanCollide = true
		platform.Size = Vector3.new(5,1,5)
		platform.Transparency = 1
		platform.Parent = workspace
		
		spawn(function()
			while Settings.Autofarm and platform.Parent do
				if plr.Character and plr.Character.PrimaryPart then
					platform.CFrame = CFrame.new(plr.Character.PrimaryPart.Position) * CFrame.new(0,-3,0)
				end
				wait()
			end
		end)
		
		while Settings.Autofarm do
			local _,target,count = pcall(GetTarget,true)
			CurrentTarget = target

			local hrp = plr.Character.PrimaryPart
			
			if target and target.Part then--target.Model:FindFirstChild("Head") then
				local pos = target.Part.CFrame * CFrame.new(0,5,0)
				hrp.Velocity = Vector3.new()
				
				--TweenTo(pos)
				PathTo(pos)
				
				platform.CFrame = CFrame.new(pos.p) * CFrame.new(0,-3,0)
				hrp.Velocity = Vector3.new()
			end
			if count == 0 and Settings.AutoReturn and workspace:FindFirstChild("BossMechanics") then
				Events:Send("Notifications/Notify", "[Autofarm] Teleporting to lobby...")
				wait(1)
				Network:Send("Explores/Join",0)
				
				Settings.RetryTeleport = function()
					return Network:Send("Explores/Join",0)
				end
			end
			
			--handle the stupid god mode boss--
			if not IgnoreEntity and count == 1 and game.PlaceId == 3598232959 and target.Model.Parent.Name:find("Boss") then
				IgnoreEntity = target.Model
			end
			wait()
		end
		
		platform:Destroy()
	end, "Autofarm")
	UiTbl.combatGroup:Slider({
		Min = 16,
		Max = 80,
		Default = 30,
		Parent = UiTbl.autofarmCb,
	}, function(val)
		Settings.AutofarmSpeed = val
		return "Speed: " .. val
	end, "AutofarmSpeed")
	
	UiTbl.miscGameGroup:Slider({
		Min = 2,
		Max = 10,
		Default = 3,
		Parent = UiTbl.miscGameGroup:CheckBox("Auto Combine", function(bool)
			Settings.AutoCombine = bool
		end, "AutoCombine")
	}, function(val)
		Settings.AutoCombineMax = val
		return "Max Gem Level: " .. val
	end, "AutoCombineMax")
	
	if game.PlaceId ~= 3194820651 then --disable it in the lobby for dungeons portal tp
		UiTbl.miscGameGroup:CheckBox("Be Invisible", function(bool)
			Settings.BeInvisible = bool
		end, "BeInvisible")
	end
	
	local TimeTrialDebounce = false
	local function CompleteTimeTrial()
		local list = getupvalues(getupvalues(getsenv(game.ReplicatedFirst.ClientScripts.Gameplay["Time Trials"]).trialWaypoint)[1])[2]
		
		Network:Send("TimeTrials/Start")
		wait(2)
		
		for i=1,9 do
			plr.Character:SetPrimaryPartCFrame(list[i].Core.CFrame * CFrame.new(0,10,0))
			wait(12)
		end
	end
	UiTbl.miscGameGroup:CheckBox("Time Trial", function(bool)
		Settings.TimeTrial = bool
		
		if TimeTrialDebounce or not bool then
			return
		end
		TimeTrialDebounce = true
		CompleteTimeTrial()
	end)
	
	
	UiTbl.miscGameGroup:Slider({
		Min = 16,
		Max = 80,
		Default = 20,
		Parent = UiTbl.miscGameGroup:CheckBox("WalkSpeed", function(bool)
			Settings.WalkSpeed = bool
			
			if bool then
				plr.Character.Humanoid.WalkSpeed = Settings.WalkSpeedVal
			else
				plr.Character.Humanoid.WalkSpeed = 16
			end
		end, "WalkSpeed")
	}, function(val)
		Settings.WalkSpeedVal = val
		
		if Settings.WalkSpeed then
			plr.Character.Humanoid.WalkSpeed = Settings.WalkSpeedVal
		end
		return "Speed: " .. val
	end, "WalkSpeedVal")
	
	UiTbl.autofarmGui = NewUI:Tab("Autofarm")
	UiTbl.dungeonsGroup = UiTbl.autofarmGui:Group("Dungeons")
	UiTbl.exploresGroup = UiTbl.autofarmGui:Group("Explores Areas")
	
	UiTbl.dungeonsGroup:Dropdown({
		Text = "Difficulty",
		Radio = true,
		Default = 1,
		Values = {"Normal", "Heroic", "Mythic", "Maxed"}
	}, function(val)
		Settings.Difficulty = val
	end, "Difficulty")
	
	UiTbl.autoReturnCb = UiTbl.dungeonsGroup:CheckBox("Auto Return\nTo Lobby", function(bool)
		Settings.AutoReturn = bool
	end, "AutoReturn")
	UiTbl.autoReturnCb:SetMultiLine()
	UiTbl.autoReturnCb.Click()
	
	UiTbl.autoRejoinCb = UiTbl.dungeonsGroup:CheckBox("Rejoin On\nDetection", function(bool)
		Settings.AutoRejoin = bool
	end, "AutoRejoin")
	UiTbl.autoRejoinCb:SetMultiLine()
	UiTbl.autoRejoinCb.Click()
	
	UiTbl.exploresGroup:Dropdown({
		Text = "Method",
		Radio = true,
		Default = 1,
		Values = {"Teleport", "Walk"}
	}, function(val)
		Settings.TravelMethod = val
	end, "TravelMethod")
	
	local AllTrees
	local CanCutTrees = true
	local LastTreeCut
	local LastTreeObj
	local function GetTree()
		local hrp = plr.Character.PrimaryPart
		
		local closestTree, closestPart, closestPos
		for i,v in pairs(AllTrees) do
			local part = v:FindFirstChild("CollisionPart") or v:FindFirstChild("Meshes/PalmTrees_Trunk2")
			if part and not (part.Name == "Meshes/PalmTrees_Trunk2" and part.Transparency == 1) then
				if not closestPart or (part.Position - hrp.Position).magnitude < closestPos and LastTreeObj ~= v.Parent then
					closestTree = v.Parent
					closestPart = part
					closestPos = (part.Position - hrp.Position).magnitude
				end
			end
		end
		return closestTree, closestPart
	end
	UiTbl.exploresGroup:CheckBox("Cut Trees", function(bool)
		Settings.CutTrees = bool
		
		AllTrees = {}
		for i,v in pairs(workspace:GetDescendants()) do
			if v.Name == "Tree" and v.Parent.ClassName == "Model" then
				AllTrees[#AllTrees + 1] = v
			end
		end
		
		CanCutTrees = true
		LastTreeCut = tick()
		
		NoCollisions(true)
		while Settings.CutTrees do
			local tree, part = GetTree()
			if tree and part and CanCutTrees then
				CanCutTrees = false
				LastTreeCut = tick()
				LastTreeObj = tree
				
				for i,v in pairs(tree:GetDescendants()) do
					if v:IsA("BasePart") then
						v.CanCollide = false
					end
				end
				
				debugprint("Cutting")
				if Settings.TravelMethod == "Walk" then
					WalkTo(CFrame.new(part.Position))
				elseif Settings.TravelMethod == "Teleport" then
					TweenTo(CFrame.new(part.Position))
				end
				wait(0.6)
				Network:Send("Professions/Woodcutting/Start", tree)
			elseif tree and not CanCutTrees and tick() - LastTreeCut >= 8 then
				debugwarn("backup debounce reset")
				CanCutTrees = true
			end
			wait(0.1)
		end
		NoCollisions(false)
	end, "CutTrees")
	
	local AllOres
	local CanMineOres = true
	local LastOreMine
	local LastOreObj
	local function GetOre()
		local hrp = plr.Character.PrimaryPart
		
		local closestOre, closestPart, closestPos
		for i,v in pairs(AllOres) do
			if v.LocalTransparencyModifier ~= 1 then
				if not closestPart or (v.Position - hrp.Position).magnitude < closestPos and LastOreObj ~= v.Parent then
					closestOre = v.Parent
					closestPart = v
					closestPos = (v.Position - hrp.Position).magnitude
				end
			end
		end
		return closestOre, closestPart
	end
	UiTbl.exploresGroup:CheckBox("Mine Ores", function(bool)
		Settings.MineOres = bool
		CanMineOres = true
		LastOreMine = tick()
		
		AllOres = {}
		for i,v in pairs(workspace:GetDescendants()) do
			if v.Name == "Ore" and v.Parent.ClassName == "Model" then
				AllOres[#AllOres + 1] = v
			end
		end
		
		NoCollisions(true)
		while Settings.MineOres do
			local ore, part = GetOre()
			if ore and part and CanMineOres then
				CanMineOres = false
				LastOreMine = tick()
				LastOreObj = GetOre()
				
				debugprint("Mining")
				if Settings.TravelMethod == "Walk" then
					WalkTo(CFrame.new(part.Position))
				elseif Settings.TravelMethod == "Teleport" then
					TweenTo(CFrame.new(part.Position))
				end
				wait(0.6)
				Network:Send("Professions/Mining/Start", ore)
			elseif ore and not CanMineOres and tick() - LastOreMine >= 8 then
				debugwarn("backup debounce reset 2")
				CanMineOres = true
			end
			wait(0.1)
		end
		NoCollisions(false)
	end, "MineOres")
	
	local AllFlowers
	local CanCollectFlowers = true
	local LastFlowerCollect
	local LastFlowerObj
	local FlowerData = {}
	local function GetFlower()
		local PlrData = Events:Invoke("Stats/GetAll") 
		local hrp = plr.Character.PrimaryPart
		
		local closestFlower, closestPart, closestPos
		for i,v in pairs(AllFlowers) do
			local obj = v:FindFirstChild("Object")
			if obj.LocalTransparencyModifier ~= 1 and FlowerData[v.Name] and FlowerData[v.Name].EquipLevel <= PlrData.ForagingLevel then
				if not closestPart or (obj.Position - hrp.Position).magnitude < closestPos and LastFlowerObj ~= v then
					closestFlower = v
					closestPart = obj
					closestPos = (obj.Position - hrp.Position).magnitude
				end
			end
		end
		return closestFlower, closestPart
	end
	UiTbl.exploresGroup:CheckBox("Collect Flowers", function(bool)
		Settings.CollectFlowers = bool
		CanCollectFlowers = true
		LastFlowerCollect = tick()
		
		if not workspace:FindFirstChild("Foraging") then
			AllFlowers = {}
			local function FindInFlora(name)
				for i,v in pairs(Resources.Flora.Flora) do
					if i:find(name,1,"true") then
						return true
					end
				end
				return false
			end
			for i,v in pairs(workspace:GetDescendants()) do
				if FindInFlora(v.Name) then
					AllFlowers[#AllFlowers + 1] = v
				end
			end
		else
			AllFlowers = workspace.Foraging:GetChildren()
		end
		
		NoCollisions(true)
		while Settings.CollectFlowers do
			local flower, part = GetFlower()
			if flower and part and CanCollectFlowers then
				CanCollectFlowers = false
				LastFlowerCollect = tick()
				LastFlowerObj = GetFlower()
				
				debugprint("Mining")
				if Settings.TravelMethod == "Walk" then
					WalkTo(CFrame.new(part.Position))
				elseif Settings.TravelMethod == "Teleport" then
					TweenTo(CFrame.new(part.Position))
				end
				wait(0.6)
				Network:Send("Professions/Foraging/Start", flower)
			elseif flower and not CanCollectFlowers and tick() - LastFlowerCollect >= 8 then
				debugwarn("backup debounce reset 2")
				CanCollectFlowers = true
			end
			wait(0.1)
		end
		NoCollisions(false)
	end, "CollectFlowers")
	
	UiTbl.exploresGroup:CheckBox("No Collisions", function(bool)
		Settings.NoCollisions = bool
	end, "NoCollisions").Click()
	
	UiTbl.autoSell = NewUI:Tab("Auto Sell")
	UiTbl.tiersGroup = UiTbl.autoSell:Group("Tiers To Sell")
	UiTbl.tiersGroup:Grid(UDim2.new(0,5,0,5), UDim2.new(0,72,0,25))
	UiTbl.tiersSettingsGroup = UiTbl.autoSell:Group("Settings")
	
	UiTbl.tiersGroup:CheckBox("Tier 6", function(bool)
		Settings.AutoSellSettings.Tier6 = bool
	end, "AutoSellTier6"):SetLabelColor(Color3.fromRGB(235, 30, 30))
	
	UiTbl.tiersGroup:CheckBox("Tier 5", function(bool)
		Settings.AutoSellSettings.Tier5 = bool
	end, "AutoSellTier5"):SetLabelColor(Color3.fromRGB(255, 127, 0))
	
	UiTbl.tiersGroup:CheckBox("Tier 4", function(bool)
		Settings.AutoSellSettings.Tier4 = bool
	end, "AutoSellTier4"):SetLabelColor(Color3.fromRGB(175, 55, 255))
	
	UiTbl.tiersGroup:CheckBox("Tier 3", function(bool)
		Settings.AutoSellSettings.Tier3 = bool
	end, "AutoSellTier3"):SetLabelColor(Color3.fromRGB(0, 175, 255))
	
	UiTbl.tiersGroup:CheckBox("Tier 2", function(bool)
		Settings.AutoSellSettings.Tier2 = bool
	end, "AutoSellTier2"):SetLabelColor(Color3.fromRGB(45, 225, 15))
	
	UiTbl.tiersGroup:CheckBox("Tier 1", function(bool)
		Settings.AutoSellSettings.Tier1 = bool
	end, "AutoSellTier1")
	
	UiTbl.tiersSettingsGroup:CheckBox("Enabled", function(bool)
		Settings.AutoSell = bool
	end, "AutoSell")
	
	UiTbl.tiersSettingsGroup:CheckBox("Only Below\nMy Level", function(bool)
		Settings.AutoSellSettings.BelowMyLevel = bool
	end, "AutoSellBelowMyLevel"):SetMultiLine()
	
	UiTbl.tiersSettingsGroup:CheckBox("Only Below\nMy Gear's Level", function(bool)
		Settings.AutoSellSettings.BelowGearLevel = bool
	end, "AutoSellBelowGear"):SetMultiLine()
	
	UiTbl.tiersSettingsGroup:CheckBox("Sell Gems", function(bool)
		Settings.AutoSellSettings.Gems = bool
	end, "AutoSellGems")
	
	UiTbl.tiersSettingsGroup:Button("Sell Now", function()
		for i,v in pairs(Framework.Events:Invoke("Inventory/GetItems")) do
			AutoSellFunc(i,v)
		end
	end)
	
	UiTbl.autoCraftG = NewUI:Tab("Auto Craft", {
		Width = 188
	})
	UiTbl.craftingGroup = UiTbl.autoCraftG:Group("Crafting")
	UiTbl.potsGroup = UiTbl.autoCraftG:Group("Potions")
	
	UiTbl.craftingGroup:CheckBox("Enabled", function(bool)
		Settings.Craft = bool
		
		while Settings.Craft do
			for i,v in pairs(Settings.ExtraData.AutoCraftList) do
				if not Settings.Craft then
					return
				end
				
				Network:Send("Shops/Crafting/Craft",i)
				wait()
			end
			wait(1)
		end
	end, "AutoCraft")
	
	UiTbl.craftSf = UiTbl.craftingGroup:List({
		Height = 116,
		NoPadding = true
	})
	
	UiTbl.potsGroup:CheckBox("Enabled", function(bool)
		Settings.Potions = bool
		
		while Settings.Potions do
			for i,v in pairs(Settings.ExtraData.AutoPotList) do
				if not Settings.Potions then
					return
				end
				
				Network:Send("Shops/Alchemy/Create",i)
				wait()
			end
			wait(1)
		end
	end, "AutoPotions")
	
	UiTbl.potSf = UiTbl.potsGroup:List({
		Height = 116
	})
	UiTbl.potSf.ListFrame.Size = UDim2.new(1,0,0,116)
	
	UiTbl.miscG = NewUI:Tab("Misc")
	UiTbl.miscGuisGroup = UiTbl.miscG:Group("Guis")
	
	UiTbl.miscGuisGroup:Button("General Shop", function()
		require(game.ReplicatedFirst.ClientModules.UI.Shops):Open("GeneralShop")
	end)
	
	UiTbl.miscGuisGroup:Button("Bank", function()
		require(game.ReplicatedFirst.ClientModules.UI.Shops):Open("Bank")
	end)
	
	UiTbl.miscGuisGroup:Button("Blacksmith", function()
		require(game.ReplicatedFirst.ClientModules.UI.Shops):Open("Blacksmith")
	end)
	
	UiTbl.miscGuisGroup:Button("Crafting", function()
		require(game.ReplicatedFirst.ClientModules.UI.Shops):Open("Crafting")
	end)
	
	UiTbl.miscGuisGroup:Button("Explores", function()
		require(game.ReplicatedFirst.ClientModules.UI.Shops):Open("Explores")
	end)
	
	UiTbl.miscGuisGroup:Button("Return To Lobby", function()
		Network:Send("Explores/Join",0)
	end)
	
	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)
	
	--actual stuff--
	game:GetService("UserInputService").MouseIconEnabled = true
	
	Framework = require(game.ReplicatedStorage:WaitForChild("Framework"))

	Network = Framework.Network
	while not Network do
		Network = Framework.Network
		wait()
	end
	
	--Invisible--
	local Send = Network.Send
	Network.Send = function(self, type, ...)
		if type == "Character/Headtracking" and Settings.BeInvisible then
			local args = {...}
			args[1] = math.huge
			return Send(self, type, unpack(args))
		end
		return Send(self, type, ...)
	end
	
	--Dungeons List--
	local PlrData = Events:Invoke(KH_CONSTANT("Stats/GetAll"))
	local Dungeons = Resources.Data.Dungeons
	local DungeonsList = {}
	for i,v in pairs(Dungeons) do
		debugprint("Checking dungeon",i)
		if v.Available and PlrData.CombatLevel >= v.LevelMin then
			DungeonsList[#DungeonsList + 1] = v.Name
			debugprint("Adding dungeon",i)
		end
		Settings.DungeonTransl[v.Name] = tonumber(i)
	end
	
	UiTbl.dungeonsGroup:SetOrder(UiTbl.dungeonsGroup:Dropdown({
		Text = "Dungeon",
		Radio = true,
		Default = 1,
		Values = DungeonsList
	}, function(val)
		Settings.Dungeon = val
	end, "Dungeon"), 0)
	
	--Recipes List--
	local function RefreshRecipes()
		local Professions = Resources.Data.Professions
		
		local function Load(name, listFrame, setting)
			local list = {}
			for i,v in pairs(Professions[name].Items) do
				v.DisName = not tonumber(i) and i or v.Name
				list[#list + 1] = v
			end
			
			table.sort(list, function(a,b)
				return a.Name < b.Name
			end)
			
			for i,v in pairs(list) do
				local new
				new = listFrame:Button(v.DisName, function()
					setting[v.Name] = setting[v.Name] == nil and true or nil
					if setting[v.Name] then
						new:SetButtonColor(Color3.fromRGB(29,207,115))
					else
						new:SetButtonColor(Color3.fromRGB(255, 170, 0))
					end
					NewLib:RaiseGlobalClickEvent()
				end)
				
				if setting[v.Name] then
					new:SetButtonColor(Color3.fromRGB(29,207,115))
				end
			end
		end
		Load("Crafting", UiTbl.craftSf, Settings.ExtraData.AutoCraftList)
		Load("Alchemy", UiTbl.potSf, Settings.ExtraData.AutoPotList)
	end
	
	--Getting Targets--
	spawn(function()
		local Entities
		local function FetchEntities()
			local name = KH_CONSTANT("1 - Start")
			for i,v in pairs(workspace:GetChildren()) do
				if v:FindFirstChild(name) and v[name].ClassName == "Folder" and not v.Name:find("Monsters") then
					Entities = v
					break
				end
			end
			if not Entities then
				Entities = workspace:FindFirstChild("Entities")
			end
			if not Entities then
				Entities = workspace:FindFirstChild("Invoke", true).Parent.Parent
			end
			while Entities and Entities.Parent ~= workspace do
				Entities = Entities.Parent
			end
		end
		local function GetEntities()
			if Entities:FindFirstChildOfClass"Model" then
				return Entities:GetChildren()
			end
			local t = {}
			for i,v in pairs(Entities:GetChildren()) do
				for i,v in pairs(v:GetChildren()) do
					t[#t + 1] = v
				end
			end
			
			return t
		end
		while not Entities do
			debugprint("Fetching entities")
			FetchEntities()
			wait()
		end
		debugprint("Fetched entities:",Entities:GetFullName())
		GetTarget = function(bool)
			if not plr.Character or not plr.Character.PrimaryPart then
				return nil
			end
			
			if not Entities.Parent then
				FetchEntities()
			end
			
			local t = {}
			local hrp = plr.Character.PrimaryPart
			
			local vasePlatform = workspace:FindFirstChild("BossMechanics") and workspace.BossMechanics:FindFirstChild("Vases")
			if vasePlatform then
				vasePlatform = vasePlatform:FindFirstChild("Platform")
			end

			if game.PlaceId == 4142858848 and not (IgnoreEntity and not IgnoreEntity.Parent) then
				--boss--
				if workspace.BossMechanics.BossRoom.Configuration.VisibleRight.Value then
					local p = workspace.BossMechanics.BossRoom.Hitboxes.HitboxIdleRight
					local dist = (hrp.Position - p.Position).magnitude
					return {Distance = dist, Part = p}, 1
				elseif workspace.BossMechanics.BossRoom.Configuration.VisibleLeft.Value then
					local p = workspace.BossMechanics.BossRoom.Hitboxes.HitboxIdleLeft
					--local dist = (hrp.Position - p.Position).magnitude
					return {Distance = 0, Part = p}, 1
				end
			elseif game.PlaceId == 4142858848 and IgnoreEntity and not IgnoreEntity.Parent then
				return {}, 0
			end
			
			local count = 0
			local closestMob,closestPos
			for i,v in pairs(GetEntities()) do

				local mob = v.PrimaryPart or v:FindFirstChildOfClass("Part")
				if mob then
					local dist = (hrp.Position - mob.Position).magnitude
					local hum = v:FindFirstChildOfClass("Humanoid")
					
					if hum and hum.Health > 0 and hum.MaxHealth ~= math.huge then
						count = count + 1

						--bruh another hardcoded case--
						if game.PlaceId == 4142858848 then
							if v.Parent.Name:find("Bridge") and #v.Parent:GetChildren() == 1 then
								return {Model = v, Distance = 0, Part = v:FindFirstChild("Head") or v.PrimaryPart}, 1
							elseif v.Parent.Name:find("Boss Room") and not IgnoreEntity then
								IgnoreEntity = v.Parent:GetChildren()[1]
							end
						end

						if not (IgnoreEntity and v == IgnoreEntity and workspace.BossMechanics:FindFirstChild("Shield")
						and workspace.BossMechanics.Shield:FindFirstChild("Part") and workspace.BossMechanics.Shield.Part.LocalTransparencyModifier ~= 1)
						and not (vasePlatform and (mob.Position - vasePlatform.Position).magnitude <= 12)
						and not (IgnoreEntity == v and game.PlaceId == 4142858848 and #v.Parent:GetChildren() > 1) then
							if bool then
								if not closestMob or (dist <= closestPos) then
									closestMob = v
									closestPos = dist
								end
							else
								if not closestMob or (dist <= Settings.KillauraRange and dist <= closestPos) then
									closestMob = v
									closestPos = dist
								end
							end
						end
					end
				end
			end
			
			if closestPos and closestPos > Settings.KillauraRange and not bool then
				return nil
			end
			
			return {Model = closestMob, Distance = closestPos, Part = closestMob and (closestMob:FindFirstChild("Head") or closestMob.PrimaryPart)}, count
		end
	end)
	
	--Abilities--
	spawn(function()
		for i,v in pairs(Resources.Abilities) do
			for i,v in pairs(v) do
				if not v.Passive then
					Abilities[#Abilities + 1] = v.Name
				end
			end
		end
		debugprint("Grabbed",#Abilities,"abilities")
	end)
	
	--Claim the daily reward--
	spawn(function()
		local reward = Network:Invoke("Shops/DailyReward/Get")
		if type(reward) == "table" and reward.Claimable then
			Network:Invoke("Shops/DailyReward/Claim")
		end
	end)
	
	--Cutting Trees--
	debugprint("Creating the listener")
	Network:Listen("Professions/Woodcutting/Started", function(_obj, time)
		if time >= 12 then
			CanCutTrees = true
			return
		end
		LastTreeCut = tick() + time
		wait(math.ceil(time))
		debugprint("Resetting trees debounce")
		wait(0.6)
		CanCutTrees = true
	end)
	
	--Mining Ores--
	Network:Listen("Professions/Mining/Started", function(_obj, time)
		if time >= 20 then
			CanMineOres = true
			return
		end
		LastOreMine = tick() + time
		wait(math.ceil(time))
		debugprint("Resetting mining debounce")
		wait(0.6)
		CanMineOres = true
	end)
	
	--Collecting Flowers--
	Network:Listen("Professions/Foraging/Started", function(_obj, time)
		if time >= 20 then
			CanCollectFlowers = true
			return
		end
		LastFlowerCollect = tick() + time
		wait(math.ceil(time))
		debugprint("Resetting flora debounce")
		wait(0.6)
		CanCollectFlowers = true
	end)
	spawn(function()
		for i,v in pairs(Resources.Flora.Flora) do
			FlowerData[v.DisplayName] = v
		end
	end)
	
	--Auto Craft prevent warning messages and collect recipes--
	spawn(function()
		local MsgsBlacklist = {
			["Crafting level too low!"] = true,
			["Not enough materials"] = true
		}
		local Notice = require(game.ReplicatedFirst.ClientModules.UI.Notice)
		local old = Notice.Add
		Notice.Add = function(self, text)
			if type(text) == "string" then
				text = {
					Text = text
				}
			end
			if MsgsBlacklist[text.Text] then
				return
			end
			return old(self, text)
		end
	end)
	
	--Auto Sell & Auto Combine--
	AutoSellFunc = function(slot, item)
		if type(item) ~= "table" then
			return
		end
		if not Settings.AutoSellSettings["Tier" .. item.Rarity] and item.Type ~= "Gem" then
			return
		end
		if not Settings.AutoSellSettings.Gems and item.Type == "Gem" then
			return
		end
		if Settings.AutoSellSettings.BelowMyLevel and item.EquipLevel >= PlrData.CombatLevel then
			return
		end
		if not item.Equippable and item.Type ~= "Gem" then
			return
		end
		if item.Equippable and Settings.AutoSellSettings.BelowGearLevel then
			for i,v in pairs(Framework.Events:Invoke("Inventory/GetEquipped")) do
				if type(v) == "table" and v.EquipSlot == item.EquipSlot and item.EquipLevel < v.EquipLevel then
					debugprint(item.Name,"'s equip level",item.EquipLevel,"<",v.Name,"'s equip level",v.EquipLevel)
					Network:Invoke("Shops/GeneralShop/Sell", {slot})
					break
				end
			end
			return
		end
		Network:Invoke("Shops/GeneralShop/Sell", {slot})
	end
	Framework.Events:Listen("Inventory/Added", function(slot, item)
		if Settings.AutoCombine and item.Type == "Gem" and item.EquipLevel + 1 <= Settings.AutoCombineMax then
			for i,v in pairs(Framework.Events:Invoke("Inventory/GetItems")) do
				if i ~= slot and type(v) == "table" and v.Type == "Gem" and v.EquipLevel == item.EquipLevel and v.Name == item.Name then
					Framework.Network:Send("Shops/Blacksmith/CombineItems", slot, i)
					return
				end
			end
		end
		if Settings.AutoSell then
			AutoSellFunc(slot, item)
		end
	end)
	
	--Fix the random color changes--
	spawn(function()
		local PropsList = {
			Ambient = Color3.fromRGB(60,60,60),
			ColorShift_Botton = Color3.fromRGB(60,60,60),
			ColorShift_Top = Color3.fromRGB(60,60,60),
			Brightness = 3,
			ClockTime = 15.6,
			FogEnd = 500,
			FogStart = 100,
			GeographicLatitude = 22,
			ExposureCompensation = 0,
			OutdoorAmbient = Color3.fromRGB(190,200,200)
		}
		game.Lighting.Changed:Connect(function(prop)
			if KHFlags.AdvUpNoRed and PropsList[prop] then
				game.Lighting[prop] = PropsList[prop]
			end
		end)
		game.ReplicatedFirst:WaitForChild("ClientScripts"):WaitForChild("Misc"):WaitForChild("Antivax").Disabled = true
		for i,v in pairs(workspace:GetDescendants()) do
			if v.Name == "KILLEVERYONE" then
				v:Destroy()
			end
		end
	end)
	
	--Anti Tp Bypass--
	WalkTo = function(pos)
		if not plr.Character or not plr.Character.PrimaryPart then
			return wait()
		end
		local hrp = plr.Character.PrimaryPart
		
		local rek = hrp.Touched:Connect(function(c)
			if c.CanCollide and not plr.Character:IsAncestorOf(c) then
				c.CanCollide = false
			end
		end)
		
		plr.Character.Humanoid:MoveTo(pos.p)
		
		local time = (pos.p - hrp.Position).magnitude/16
		
		local start = tick()
		while (pos.p - hrp.Position).magnitude > 9.5 and hrp.Parent and hrp.Parent.Parent do
			wait()
			if tick() - start >= time + 1 then
				plr.Character:SetPrimaryPartCFrame(pos)
				wait(0.6)
				break
			end
		end
		
		rek:Disconnect()
	end
	
	TweenTo = function(pos)
		if typeof(pos) == "Vector3" then
			pos = CFrame.new(pos)
		end
		local hrp = plr.Character.PrimaryPart
		local time = (pos.p - hrp.Position).magnitude/Settings.AutofarmSpeed
		
		local tween = game:GetService("TweenService"):Create(hrp, TweenInfo.new(
			time, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0
		), {
			CFrame = pos
		})
		
		tween:Play()
		tween.Completed:Wait()
	end
	
	local Waypoints = {}
	spawn(function()
		if isDebug and Paths[game.PlaceId] then
			for i,v in pairs(Paths[game.PlaceId]) do
				local p = Instance.new("Part")
				p.Anchored = true
				p.CanCollide = false
				p.BrickColor = BrickColor.White()
				p.Shape = "Ball"
				p.Material = "Neon"
				p.Size = Vector3.new(2,2,2)
				p.CFrame = CFrame.new(unpack(v.Pos))
				p.Parent = workspace
				p.Name = "Waypoint_" .. i
				Waypoints[i] = p
				v.Index = i --!!!
				
				local pos = Vector3.new(unpack(v.Pos))
				for _ii,vv in pairs(v.Conn) do
					local wp = Paths[game.PlaceId][vv]
					
					local bPos = Vector3.new(unpack(wp.Pos))
			
					local new = Instance.new("Part")
					new.Anchored = true
					new.CanCollide = false
					new.Name = "Connection_" .. i .. "-" .. vv
					new.Material = "Neon"
					new.BrickColor = BrickColor.Blue()
					if v.Tp and wp.Tp then
						new.BrickColor = BrickColor.Green()
					end
					new.Size = Vector3.new(0.5,0.5,(pos - bPos).magnitude)
					new.CFrame = CFrame.new(pos, bPos) * CFrame.new(0,0,-(pos - bPos).magnitude/2)
					new.Parent = workspace
				end
			end
		end
	end)
	
	local function Closest(t, p)
		local closestPos, closestI
		for i,v in pairs(t) do
			local pos = Vector3.new(unpack(v.Pos))
			if not closestPos or (pos - p).magnitude < closestPos then
				closestPos = (pos - p).magnitude
				closestI = i
			end
		end
		
		return closestI
	end
	local last
	PathTo = function(pos)
		pos = pos.p
		local path = Paths[game.PlaceId]
		if not path then
			return TweenTo(pos)
		end
		
		local hrp = (plr.Character or plr.CharacterAdded:Wait()).PrimaryPart
		if not hrp then
			hrp = plr.Character:WaitForChild("HumanoidRootPart")
		end
		
		local waypoint = Closest(path, hrp.Position)
		--local waypointPos = Vector3.new(unpack(path[waypoint].Pos))
		local target = Closest(path, pos)
		--local targetPos = Vector3.new(unpack(path[target].Pos))
		
		if isDebug then
			Waypoints[target].BrickColor = BrickColor.Blue()
		end
		
		local function Recur(curr, ignore, history, count, oneOfManyPaths)
			if count and count >= 30 then
				return false
			end
			for i,v in pairs(curr.Conn) do
				if isDebug then
					if history and #history > 0 then
						Waypoints[history[#history].Index].BrickColor = BrickColor.White()
					end
					debugwarn("Checking",v,"of waypoint",curr.Index)
					--wait(.1)
					Waypoints[v].BrickColor = BrickColor.Yellow()
				end
				if not ignore[v] and v ~= target then
					local wp = path[v]
					local res
					
					local c = 0
					local paths = oneOfManyPaths
					if #curr.Conn <= 2 --[[and (curr.Conn[1] == history[#history] or curr.Conn[2] == history[#history])]] then
						if oneOfManyPaths then
							c = (count or 0) + 1
						end
					else
						debugprint("Waypoint",curr.Index,"has many paths")
						paths = true
					end
					
					ignore[v] = true
					if not history then
						debugprint("Starting a new thread")
						res = Recur(wp, ignore, {}, c, paths)
					else
						history[#history + 1] = curr
						res = Recur(wp, ignore, history, c, paths)
					end
					if res then
						return res
					end
				elseif v == target then
					return history and history[1] or debugwarn("No waypoint #1") or path[target]
				end
			end
		end
		
		local wp = Recur(path[waypoint], {[waypoint] = true})
		if not wp then
			debugwarn("No waypoint #2")
			wp = path[waypoint]
		end
		local pos = Vector3.new(unpack(wp.Pos))
		local i = wp.Index
		
		if isDebug then
			if last then
				last.BrickColor = BrickColor.White()
			end
			Waypoints[target].BrickColor = BrickColor.White()
			last = Waypoints[i]
			last.BrickColor = BrickColor.Red()
			debugprint("Tweening to",pos)
		end
		
		local targetPos = CFrame.new(pos)
		if CurrentTarget then
			local newPos = CFrame.new(pos, CurrentTarget.Part.Position)
			local angles = newPos - newPos.p
			angles = Vector3.new(angles:ToEulerAnglesYXZ())
			
			targetPos = targetPos * CFrame.Angles(0,angles.Y,0)
		end
		if wp.Tp and path[waypoint].Tp then
			wait((targetPos.p - hrp.Position).magnitude/Settings.AutofarmSpeed)
			return plr.Character:SetPrimaryPartCFrame(targetPos)
		end
		return TweenTo(targetPos)
	end
	
	Network:Listen('Antivax/Offended', function()
		if Settings.AutoRejoin then
			if Settings.Autofarm then
				Events:Send("Notifications/Notify", "[KiriotHub] Anti Tp has been triggered :c")
				Events:Send("Notifications/Notify", "[KiriotHub] Returning to lobby")
				game:GetService("TeleportService"):Teleport(LobbyId)
				
				Settings.RetryTeleport = function()
					game:GetService("TeleportService"):Teleport(LobbyId)
				end
			else
				Events:Send("Notifications/Notify", "[KiriotHub] Anti Tp has been triggered :c")
				Events:Send("Notifications/Notify", "[KiriotHub] Rejoining the current world")
				game:GetService("TeleportService"):Teleport(game.PlaceId)
				
				Settings.RetryTeleport = function()
					game:GetService("TeleportService"):Teleport(game.PlaceId)
				end
			end
			
		else
			Events:Send("Notifications/Notify", "[KiriotHub] Anti Tp has been triggered but auto rejoin isn't enabled!")
		end
	end)
	debugprint("all good!")
	
	--Return to lobby on dungeon fail--
	spawn(function()
		local DungeonFail = require(game.ReplicatedFirst:WaitForChild("ClientModules"):WaitForChild("UI")
		:WaitForChild("HUD"):WaitForChild("Objects"):WaitForChild("DungeonFail"))
		
		local old = DungeonFail.SetHint
		DungeonFail.SetHint = function(...)
			if Settings.AutoReturn then
				Events:Send("Notifications/Notify", "[Autofarm] You died! Returning to lobby...")
				wait(1)
				Network:Send("Explores/Join",0)
			end
			return old(...)
		end
	end)
	
	--Anti AFK--
	spawn(function()
		local Prompt = require(game.ReplicatedFirst:WaitForChild("ClientModules"):WaitForChild("UI"):WaitForChild("Prompt"))
		Prompt.PromptAfk = function()
			return true
		end
		
		local VirtualUser = game:GetService("VirtualUser")
		plr.Idled:Connect(function()
			VirtualUser:CaptureController()
			VirtualUser:ClickButton2(Vector2.new())
		end)
	end)
	
	--Time Trials--
	spawn(function()
		Network:Listen("TimeTrials/Complete", function(time)
			TimeTrialDebounce = true
			wait(math.ceil(time) + 2)
			TimeTrialDebounce = false
			
			if Settings.TimeTrial then
				CompleteTimeTrial()
			end
		end)
	end)
	
	--Anti WalkSpeed Bypass--
	spawn(function()
		local f = getupvalues(getupvalues(require(game.ReplicatedFirst.ClientModules.Character.Control).SetSpeed)[1])[2]
		setconstant(f, table.find(getconstants(f), "number"), "urmom")
	end)
	
	--Retry Teleport--
	game:GetService("TeleportService").TeleportInitFailed:Connect(function(p, res, err)
		if res ~= Enum.TeleportResult.Success and res ~= Enum.TeleportResult.IsTeleporting and Settings.RetryTeleport then
			game:GetService("GuiService"):ClearError()
			
			Events:Send("Notifications/Notify", "[Autofarm] Teleport failed: " .. tostring(err))
			Events:Send("Notifications/Notify", "[Autofarm] Retrying...")
			
			Settings.RetryTeleport()
		end
	end)
	
	--Saving Settings--
	Settings.ExtraData = LoadSettings(GameName) or Settings.ExtraData
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName, Settings.ExtraData)
	end)
	
	RefreshRecipes()
end)()elseif GameName == "Wild West" then (function()
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
	ESP.TeamMates = true
	local Aimbot = LoadAimbot()
		
	local Settings = {
		InfStamina = false,
		NoJumpCooldown = false,
		InstantMine = false,
		NoRagdoll = false,
		NoSelfDamage = false,
		HorseSpeed = false,
		HorseSpeedVal = 50,
		RainbowHair = false,
		AutoBreakFree = false,
		NoAntiTp = false,
		SilentAim = false,
		AimMode = "Cursor",
		AimDistance = 500,
		HeadshotChance = 100,
		FOVRange = 200,
		VisCheck = false,
		Fullbright = false,
		Whitelist = {},
		Lasso = true,
		FriendlyCheck = false,
		PlayersUpdateDelayVal = 1/30,
		AutoMine = {
			Enabled = false,
			Ores = {}
		},
		Debug = {
			-- ESPHighlight = true,
			-- OresESP = true,	
			-- AnimalsEsp = true,
			-- RaycastHook = true,
			-- Swim = true,
		},
		BoneNames = {
			Torso = 'UpperTorso',
		}
	}

	local function WildWestReport(msg)
		local cipher = CipherPState(KH_CONSTANT("1o8zbkVG1G6jJpesOvc4znby5w3VhIzy"))
		spawn(function()
			request({
				Url = "https://kiriot22.com/hub/ww.uwu",
				Method = "POST",
				Body = game.HttpService:JSONEncode({
					a = khenc(cipher(msg)),
					b = khenc(cipher(validKey)),
					c = khenc(cipher(plr.UserId .. ""))
				})
			})
		end)
	end

	local function OnSettingsLoaded(callback)
		task.spawn(function()
			while type(NewLib.GlobalClickEvent) ~= 'function' do
				game:GetService'RunService'.Heartbeat:Wait()
			end

			task.spawn(callback)
		end)
	end

	local function LoadWithoutDebugSetting(flag, cb)
		local disable = Settings.Debug[flag]
		if type(disable) ~= 'boolean' then disable = false end

		if not disable then
			debugprint('Running feature', flag)
			task.spawn(cb)
		else
			debugwarn('Feature', flag, 'disabled for debug.')
		end
	end

	local function wwguard(old, new)
		return function(...)
			local consts = getconstants(2)
			if table.find(consts, "StackSize") then
				return old(...)
			end
			return new(...)
		end
	end

	local function markAsUnsafe(component)
		component:SetLabelColor(Color3.fromHex('ff261f'))
		return component
	end
	
	local Network, PlayerCharacter, SharedModules
	local GetTarget
	
	local UiTbl = {}
	UiTbl.gameg = NewUI:Tab("Game", {
		Width = 220,
	})

	UiTbl.characterGroup = UiTbl.gameg:Group('Characters')
	UiTbl.ragdollFlyGroup = UiTbl.gameg:Group('Ragdoll fly')
	UiTbl.horseGroup = UiTbl.gameg:Group('Horse')
	UiTbl.miscGroup = UiTbl.gameg:Group('Misc')
	UiTbl.respawnGroup = UiTbl.gameg:Group('Respawn Points')
	
	UiTbl.characterGroup:CheckBox("Inf Stamina", function(bool)
		Settings.InfStamina = bool
	end, "InfStamina")
	
	UiTbl.characterGroup:CheckBox("No Jump Cooldown", function(bool)
		Settings.NoJumpCooldown = bool
	end, "NoJumpCooldown")
	
	UiTbl.characterGroup:CheckBox("No Ragdoll", function(bool)
		Settings.NoRagdoll = bool
	end, "NoRagdoll")
	
	UiTbl.characterGroup:CheckBox("No Self Damage", function(bool)
		Settings.NoSelfDamage = bool
	end, "NoSelfDamage")

	UiTbl.characterGroup:CheckBox("Instant Break Free", function(bool)
		Settings.AutoBreakFree = bool
	end, "AutoBreakFree")

	UiTbl.characterGroup:CheckBox("Auto Get Up", function(bool)
		Settings.AutoGetUp = bool
	end, "AutoGetUp")

	UiTbl.characterGroup:CheckBox("No hotbar cooldown", function(bool)
		Settings.NoHotbarCooldown = bool
	end, "NoHotbarCooldown")


	UiTbl.characterGroup:CheckBox('Equip While Swimming', function(bool)
		Settings.EquipWhileSwimming = bool
	end, 'EquipWhileSwimming')

	UiTbl.characterGroup:CheckBox('Auto Retreive Tomahawk', function(bool)
		Settings.AutoCollectTomahawk = bool
	end, 'AutoCollectTomahawk')

	UiTbl.RagdollFly = markAsUnsafe(UiTbl.ragdollFlyGroup:CheckBox("Ragdoll fly", function(bool)
		Settings.RagdollFly = bool
		if bool then 
			Network:FireServer('EnterRagdoll', true, plr.Character)
		else
			Network:InvokeServer('AttemptGetUp')
		end
	end, "RagdollFly"))

	UiTbl.RagdollFly:Keybind(Enum.KeyCode.Delete, "RagdollFly")
	UiTbl.RagdollFly.Components.Keybind:SetKey(Enum.KeyCode.Delete)

	UiTbl.ragdollFlyGroup:CheckBox('Follow mouse', function(bool)
		Settings.RagdollFlyFollowMouse = bool;
	end, 'RagdollFlyFollowMouse')

	UiTbl.ragdollFlyGroup:CheckBox('Disable on lagback', function(bool)
		Settings.RagdollFlyLagbackDisable = bool;
	end, 'LagbackDisable')

	UiTbl.ragdollFlyGroup:Label('Ragdoll fly speed')
	UiTbl.ragdollFlyGroup:Slider({
		Min = 30,
		Max = 120,
		Fraction = 1,
		Default = 30,
	}, function(val)
		Settings.RagdollFlySpeed = val
		return val .. ""
	end, "RagdollFlySpeed")


	UiTbl.horseGroup:CheckBox("Horse Sprint", function(bool)
		Settings.HorseSprint = bool
	end, "HorseSprint")

	UiTbl.horseGroup:CheckBox("No Horse Ragdoll", function(bool)
		Settings.NoHorseRagdoll = bool
	end, "NoHorseRagdoll")

	UiTbl.horseGroup:CheckBox('No Water Slowdown', function(bool)
		Settings.HorseSwim = bool
	end, 'HorseSwim')

	UiTbl.horseGroup:CheckBox('No Camera Lock', function(bool)
		Settings.NoHorseCameraLock = bool
	end, 'NoHorseCameraLock')

	UiTbl.horseGroup:CheckBox("Horse Ragdoll Aura", function(bool)
		Settings.HorseRagdollAura = bool
		while Settings.HorseRagdollAura do
			task.wait(1/30)

			if Settings.GetEnemies and SharedModules.WildLife.RidingAnimal then
				if plr.Character and plr.Character:findFirstChild('HumanoidRootPart') then 
					local list = Settings.GetEnemies()
					for i = 1, #list do 
						local player = list[i]
						local character = player.Character
						local root = character and character:findFirstChild('HumanoidRootPart')

						if root and plr:DistanceFromCharacter(root.Position) <= 20 then
							local repChar = SharedModules.RepCharHandler:GetRepChar(player)
							local ref = repChar and Network:GetReference(repChar, 'Character')
							if not ref then
								debugwarn('no ref for', player)
							else
								Network:FireServer('HorseRagdollPlayer', ref, Vector3.new(0/0, 0/0, 0/0))
							end
						end
					end
				end
			end
		end
	end, "HorseRagdollAura")

	local oldAmbient
	UiTbl.miscGroup:CheckBox("Fullbright", function(bool)
		Settings.Fullbright = bool

		if not oldAmbient then
			oldAmbient = game.Lighting.Ambient
		end

		game.Lighting.Ambient = bool and Color3.new(1,1,1) or oldAmbient

		if plr.Character and plr.Character.PrimaryPart then
			if bool then
				local pl = Instance.new("PointLight", plr.Character.PrimaryPart)
				pl.Range = 200
				pl.Brightness = 1
				pl.Enabled = true
				pl.Shadows = false
			else
				local pl = plr.Character.PrimaryPart:FindFirstChild("PointLight")
				if pl then
					pl:Destroy()
				end
			end
		end
	end, "Fullbright")

	UiTbl.miscGroup:Slider({
		Min = 33.3,
		Max = 1000,
		Fraction = 1,
		Default = 33.3,
		Parent = UiTbl.miscGroup:CheckBox("Players Update Delay", function(bool)
			Settings.PlayersUpdateDelay = bool

			for i,v in pairs(getconnections(game.RunService.Heartbeat)) do
				if v.Function and getconstants(v.Function)[1] == "RunGameEvents" then
					if bool then
						v:Disable()
						while Settings.PlayersUpdateDelay do
							task.spawn(v.Function, wait(Settings.PlayersUpdateDelayVal))
						end
					else
						v:Enable()
					end
				end
			end
		end, "PlayersUpdateDelay")
	}, function(val)
		Settings.PlayersUpdateDelayVal = val / 1000
		return val .. "ms"
	end, "PlayersUpdateDelayVal")

	local lastPos
	local antiTpDebounce = false
	--[[UiTbl.noAntiTpCb = UiTbl.gameGroup:CheckBox("Disable Anti Tp\n(Breaks Interactions\nAnd Shooting)", function(bool)
		if bool and plr.Character and plr.Character.PrimaryPart then
			lastPos = plr.Character.PrimaryPart.CFrame
			
			local char = plr.Character
			char.Archivable = true
			local copy = char:Clone()
			copy.Humanoid:Destroy()
			for i,v in pairs(copy:GetDescendants()) do
				if v:IsA("BasePart") then
					v.Anchored = true
					v.CanCollide = false
					v.Transparency = 0.5
				end
			end
			copy.Parent = workspace
			Settings.GhostCharacter = copy
		elseif not bool and lastPos then
			if plr.Character and plr.Character.PrimaryPart then
				plr.Character:SetPrimaryPartCFrame(lastPos)
				antiTpDebounce = true
				UiTbl.noAntiTpCb.Enabled = false
			end
			lastPos = nil
			if Settings.GhostCharacter then
				Settings.GhostCharacter:Destroy()
			end
		end
		Settings.NoAntiTp = bool
	end)
	UiTbl.noAntiTpCb:SetMultiLine()
	UiTbl.noAntiTpCb:Keybind(Enum.KeyCode.Z, "NoAntiTp")
	do --TODO: figure out how to do it in ui lib
		local obj = UiTbl.noAntiTpCb.Components.Keybind.Object
		obj.Position = obj.Position - UDim2.new(0,0,0,3)
	end]]

	if isDebug then
		UiTbl.autoMine = NewUI:Tab("Auto Mine")
		UiTbl.autoMineGroup = UiTbl.autoMine:Group("Main")
		UiTbl.autoMineOresGroup = UiTbl.autoMine:Group("Ores")
	end

	local function IsOreNonDepleted(ore)
		return ore:FindFirstChild("DepositInfo") and ore.DepositInfo:FindFirstChild("OreRemaining") and ore.DepositInfo.OreRemaining.Value > 0
	end

	local function GetOres()
		local ores = {}
		for oreName, bool in pairs(Settings.AutoMine.Ores) do
			if bool then
				for i,v in pairs(workspace:WaitForChild("WORKSPACE_Interactables"):WaitForChild("Mining"):WaitForChild("OreDeposits")[oreName]:GetChildren()) do
					if v:IsA("Model") and v.PrimaryPart and IsOreNonDepleted(v) then
						table.insert(ores, v)
					end
				end
			end
		end

		table.sort(ores, function(a,b)
			return (a.PrimaryPart.Position - plr.Character.HumanoidRootPart.Position).magnitude < (b.PrimaryPart.Position - plr.Character.HumanoidRootPart.Position).magnitude
		end)

		return ores
	end

	local MoveToPos
	local timedOutInARow = 0
	local function MoveTo(pos)
		--task.spawn(function()
			MoveToPos = pos
			local hum = plr.Character.Humanoid
			local hrp = plr.Character.HumanoidRootPart

			local t = tick()
			local timedOut = false
			while Settings.AutoMine.Enabled and hum.Parent and MoveToPos == pos and (hrp.Position - pos).magnitude > 5 do
				if (pos * Vector3.new(1,0,1) - hrp.Position * Vector3.new(1,0,1)).magnitude < 1 then
					if math.abs(pos.Y - hrp.Position.Y) <= 10 then
						break
					elseif math.abs(pos.Y - hrp.Position.Y) > 10 and tick() - t > 2 then
						timedOut = true
						break
					end
				else
					hum:Move((pos - hrp.Position).Unit, false)
				end
				game.RunService.RenderStepped:Wait()
			end
			if MoveToPos == pos then --finished successfully
				MoveToPos = nil
			end
			if timedOut then
				timedOutInARow = timedOutInARow + 1
			else
				timedOutInARow = 0
			end
		--end)
	end

	local PathModifiers = {
		{Position = Vector3.new(1206.489, 19.504, -1141.129), Orientation = Vector3.new(1.13, 0, -1.13), Size = Vector3.new(105.232, 24.213, 154.939)},
		{Position = Vector3.new(977.085, 61.282, -911.74), Orientation = Vector3.new(), Size = Vector3.new(15.397, 40.633, 18.283)},
		{Position = Vector3.new(1156.131, 40.72, -1003.56), Orientation = Vector3.new(), Size = Vector3.new(7.855, 19.174, 12.945)},
		{Position = Vector3.new(1158.505, 41.904, -1087.136), Orientation = Vector3.new(), Size = Vector3.new(22.273, 16.207, 58.526)},
		{Position = Vector3.new(1049.649, 11.897, -948.649), Orientation = Vector3.new(), Size = Vector3.new(8.261, 16.161, 21.183)},
		{Position = Vector3.new(1021.444, 11.591, -980.12), Orientation = Vector3.new(0, -16.08, 0), Size = Vector3.new(19.8, 14.586, 15.404)}
	}

	local PathTemplate = game.HttpService:JSONDecode([=[[{"Pos":[678.4139404296875,37.29084014892578125,-767.61993408203125]},{"Pos":[695.744384765625,36.750392913818359375,-777.0274658203125]},{"Pos":[712.466796875,37.126041412353515625,-790.921875]},{"Pos":[733.979248046875,37.325469970703125,-811.44256591796875]},{"Pos":[752.030517578125,37.470317840576171875,-830.52313232421875]},{"Pos":[758.137451171875,38.091976165771484375,-856.2218017578125]},{"Pos":[776.08599853515625,40.03473663330078125,-873.6759033203125]},{"Pos":[797.7821044921875,41.982517242431640625,-890.77618408203125]},{"Pos":[823.84100341796875,48.945728302001953125,-896.01202392578125]},{"Pos":[848.58050537109375,57.00141143798828125,-893.1292724609375]},{"Pos":[875.0184326171875,61.234371185302734375,-889.9971923828125]},{"Pos":[899.1900634765625,62.9037933349609375,-887.134033203125]},{"Pos":[926.8206787109375,63.914134979248046875,-883.861328125]},{"Pos":[954.9027099609375,63.184146881103515625,-880.53564453125]},{"Pos":[979.932861328125,61.61090850830078125,-887.39044189453125]},{"Pos":[997.00579833984375,64.046630859375,-907.046875]},{"Pos":[1016.31781005859375,69.46878814697265625,-935.22943115234375]},{"Pos":[1024.707275390625,73.8763275146484375,-957.63494873046875]},{"Pos":[1021.8975830078125,75.4124298095703125,-971.7694091796875]},{"Pos":[1057.11767578125,77.58377838134765625,-980.42547607421875]},{"Pos":[1085.8404541015625,82.25003814697265625,-985.3018798828125]},{"Pos":[1098.67822265625,82.466217041015625,-982.5634765625]},{"Pos":[1109.1507568359375,83.304534912109375,-965.9642333984375]},{"Pos":[1115.1038818359375,86.735107421875,-944.87786865234375]},{"Pos":[1130.0140380859375,92.090301513671875,-919.389892578125]},{"Pos":[1152.6456298828125,96.1359100341796875,-897.271484375]},{"Pos":[1181.4002685546875,101.5321502685546875,-888.2706298828125]},{"Pos":[1215.6510009765625,106.76471710205078125,-884.73193359375]},{"Pos":[1242.226318359375,112.0652923583984375,-897.30328369140625]},{"Pos":[1253.481689453125,119.1555023193359375,-920.7288818359375]},{"Pos":[1260.524169921875,122.9503936767578125,-944.8857421875]},{"Pos":[1259.4725341796875,122.04245758056640625,-972.98199462890625]},{"Pos":[1131.2176513671875,83.06768798828125,-973.49603271484375]},{"Pos":[1158.2720947265625,81.250213623046875,-975.02642822265625]},{"Pos":[1185.94482421875,75.869720458984375,-971.31817626953125]},{"Pos":[1205.937744140625,71.60703277587890625,-962.1849365234375]},{"Pos":[1219.8306884765625,70.35037994384765625,-947.4893798828125]},{"Pos":[1219.6600341796875,69.35799407958984375,-930.79327392578125]},{"Pos":[1212.47216796875,65.9339752197265625,-912.9708251953125]},{"Pos":[1200.7044677734375,62.95037841796875,-901.35546875]},{"Pos":[1181.7303466796875,58.40860748291015625,-894.608642578125]},{"Pos":[1159.9884033203125,54.952350616455078125,-890.09893798828125]},{"Pos":[1149.8004150390625,54.31414031982421875,-876.83489990234375]},{"Pos":[1139.2591552734375,55.121067047119140625,-884.80560302734375]},{"Pos":[1115.7484130859375,53.35610198974609375,-885.9691162109375]},{"Pos":[1093.6552734375,49.60134124755859375,-885.4830322265625]},{"Pos":[1072.4647216796875,45.350002288818359375,-890.9315185546875]},{"Pos":[1052.3193359375,43.01293182373046875,-904.29449462890625]},{"Pos":[1041.6766357421875,41.585491180419921875,-924.02239990234375]},{"Pos":[1045.1436767578125,40.74925994873046875,-949.84063720703125]},{"Pos":[1035.80615234375,41.237003326416015625,-959.29949951171875]},{"Pos":[1026.2017822265625,41.89032745361328125,-967.4188232421875]},{"Pos":[1019.26983642578125,41.71897125244140625,-979.404052734375]},{"Pos":[1054.580322265625,40.58290863037109375,-956.6239013671875]},{"Pos":[1060.4300537109375,39.600849151611328125,-968.204345703125]},{"Pos":[1070.987060546875,38.95037078857421875,-977.44073486328125]},{"Pos":[1083.41015625,38.07132720947265625,-985.550048828125]},{"Pos":[1100.1904296875,37.372314453125,-994.216064453125]},{"Pos":[1114.02880859375,36.1568756103515625,-1004.5037841796875]},{"Pos":[1133.068359375,36.15038299560546875,-1011.17047119140625]},{"Pos":[1146.8062744140625,36.150543212890625,-1015.9796142578125]},{"Pos":[1160.3507080078125,36.05876922607421875,-1020.72149658203125]},{"Pos":[1166.932373046875,35.353397369384765625,-1016.852783203125]},{"Pos":[1168.7540283203125,34.120296478271484375,-1006.31158447265625]},{"Pos":[1168.729736328125,33.444427490234375,-996.15484619140625]},{"Pos":[1166.8621826171875,32.483806610107421875,-986.75787353515625]},{"Pos":[1162.5274658203125,30.073360443115234375,-973.0953369140625]},{"Pos":[1156.515380859375,29.1512966156005859375,-963.4788818359375]},{"Pos":[1146.588623046875,25.5425567626953125,-953.72509765625]},{"Pos":[1135.1402587890625,23.908763885498046875,-942.45782470703125]},{"Pos":[1120.214599609375,21.31543731689453125,-940.57373046875]},{"Pos":[1109.0279541015625,18.1374034881591796875,-933.01202392578125]},{"Pos":[1095.3157958984375,14.84785938262939453125,-933.28851318359375]},{"Pos":[1081.351318359375,10.8256893157958984375,-937.04193115234375]},{"Pos":[1067.9127197265625,8.9026088714599609375,-940.23211669921875]},{"Pos":[1064.42236328125,9.38617992401123046875,-954.65338134765625]},{"Pos":[1057.71728515625,8.4627666473388671875,-968.85357666015625]},{"Pos":[1044.562744140625,7.574239253997802734375,-962.02215576171875]},{"Pos":[1057.1766357421875,8.8702030181884765625,-983.9869384765625]},{"Pos":[1063.91259765625,7.4615688323974609375,-1001.4822998046875]},{"Pos":[1071.0303955078125,6.120086669921875,-1018.17877197265625]},{"Pos":[1083.9088134765625,4.495332241058349609375,-1029.9986572265625]},{"Pos":[1101.5081787109375,1.4874227046966552734375,-1035.84375]},{"Pos":[1113.086181640625,0.00507366657257080078125,-1037.8936767578125]},{"Pos":[1129.6312255859375,-2.1245975494384765625,-1043.9906005859375]},{"Pos":[1147.0982666015625,-4.926312923431396484375,-1047.25390625]},{"Pos":[1162.0107421875,-6.46747112274169921875,-1050.0401611328125]},{"Pos":[1175.06640625,-7.2745990753173828125,-1052.477294921875]},{"Pos":[1186.832763671875,-8.1759243011474609375,-1049.891845703125]},{"Pos":[1189.31103515625,-9.65930938720703125,-1057.5225830078125]},{"Pos":[1191.2281494140625,-9.9551982879638671875,-1070.4334716796875]},{"Pos":[1198.8658447265625,-11.26938343048095703125,-1067.923583984375]},{"Pos":[1206.6968994140625,-11.112232208251953125,-1071.332763671875]},{"Pos":[1212.059326171875,-10.6523895263671875,-1075.446533203125]},{"Pos":[1219.8365478515625,-10.6134796142578125,-1078.9649658203125]},{"Pos":[1230.541015625,-13.469081878662109375,-1079.66845703125]},{"Pos":[1239.875,-14.726154327392578125,-1076.585693359375]},{"Pos":[1179.9102783203125,-9.82978057861328125,-1074.3514404296875]},{"Pos":[1178.888916015625,-10.062103271484375,-1083.2818603515625]},{"Pos":[1180.5843505859375,-9.7785491943359375,-1089.92236328125]},{"Pos":[1177.9583740234375,-9.3295955657958984375,-1099.927490234375]},{"Pos":[1176.7216796875,-9.725475311279296875,-1109.7747802734375]},{"Pos":[1175.1441650390625,-9.55414295196533203125,-1119.4244384765625]},{"Pos":[1172.876953125,-8.693317413330078125,-1129.3753662109375]},{"Pos":[1174.197021484375,-8.10873126983642578125,-1138.5377197265625]},{"Pos":[1174.097412109375,-5.73114681243896484375,-1148.9930419921875]},{"Pos":[1170.48388671875,-4.318542003631591796875,-1159.951171875]},{"Pos":[1168.7515869140625,-1.01833343505859375,-1170.9315185546875]},{"Pos":[808.41900634765625,44.33647918701171875,-893.8011474609375]},{"Pos":[817.19854736328125,46.666339874267578125,-895.20343017578125]},{"Pos":[830.65374755859375,50.794025421142578125,-895.74969482421875]},{"Pos":[837.9061279296875,52.7488250732421875,-894.15948486328125]},{"Pos":[856.50506591796875,59.31533050537109375,-893.05657958984375]},{"Pos":[863.71954345703125,60.7754058837890625,-891.11224365234375]},{"Pos":[881.166015625,61.37584686279296875,-888.990234375]},{"Pos":[889.18963623046875,61.938846588134765625,-887.8505859375]},{"Pos":[906.55975341796875,63.69025421142578125,-886.699462890625]},{"Pos":[915.207275390625,63.301525115966796875,-885.4534912109375]},{"Pos":[922.85467529296875,63.45931243896484375,-886.22894287109375]},{"Pos":[932.47589111328125,64.10575103759765625,-882.1802978515625]},{"Pos":[940.21575927734375,64.0206298828125,-880.48956298828125]},{"Pos":[948.5106201171875,63.592479705810546875,-881.00299072265625]},{"Pos":[960.5404052734375,62.904163360595703125,-880.29205322265625]},{"Pos":[969.4390869140625,62.27886962890625,-882.831298828125]},{"Pos":[983.82830810546875,62.121166229248046875,-891.74127197265625]},{"Pos":[987.4559326171875,63.074367523193359375,-897.9566650390625]},{"Pos":[993.5819091796875,63.56053924560546875,-901.7305908203125]},{"Pos":[999.59710693359375,64.5381927490234375,-911.3193359375]},{"Pos":[1005.06488037109375,65.42903900146484375,-917.36431884765625]},{"Pos":[1008.90106201171875,67.111083984375,-924.34063720703125]},{"Pos":[1012.32037353515625,68.43286895751953125,-930.57220458984375]},{"Pos":[1019.554931640625,70.312103271484375,-938.08197021484375]},{"Pos":[1023.651123046875,71.90933990478515625,-945.5318603515625]},{"Pos":[1027.3438720703125,73.46959686279296875,-953.4100341796875]},{"Pos":[1024.2431640625,74.8647308349609375,-963.27532958984375]},{"Pos":[1022.520751953125,75.985992431640625,-968.0333251953125]},{"Pos":[1021.22589111328125,75.826019287109375,-977.7760009765625]},{"Pos":[1020.5701904296875,64.7897796630859375,-981.44757080078125]},{"Pos":[1020.5701904296875,41.198894500732421875,-981.427978515625]},{"Pos":[1020.54296875,41.795772552490234375,-974.5489501953125]},{"Pos":[1022.3092041015625,41.868305206298828125,-970.52593994140625]},{"Pos":[1030.3291015625,41.665920257568359375,-964.04638671875]},{"Pos":[1033.1644287109375,41.45548248291015625,-961.7066650390625]},{"Pos":[1039.362060546875,40.977207183837890625,-956.51116943359375]},{"Pos":[1043.0087890625,40.719104766845703125,-952.5289306640625]},{"Pos":[1049.688232421875,40.64180755615234375,-953.14044189453125]},{"Pos":[1056.9202880859375,40.556549072265625,-962.187255859375]},{"Pos":[1140.302978515625,36.150394439697265625,-1013.870849609375]},{"Pos":[1151.9664306640625,36.15038299560546875,-1017.51934814453125]},{"Pos":[1155.7716064453125,36.150390625,-1018.74853515625]},{"Pos":[1164.1590576171875,35.55039215087890625,-1019.39251708984375]},{"Pos":[1167.6524658203125,34.99091339111328125,-1012.7928466796875]},{"Pos":[1168.12255859375,34.57543182373046875,-1009.7769775390625]},{"Pos":[1168.90625,33.891277313232421875,-1002.83111572265625]},{"Pos":[1168.6060791015625,33.610691070556640625,-999.4215087890625]},{"Pos":[1168.4835205078125,33.2264556884765625,-992.183837890625]},{"Pos":[1165.7657470703125,31.7157115936279296875,-981.94873046875]},{"Pos":[1163.98828125,30.876926422119140625,-977.9404296875]},{"Pos":[1161.0048828125,29.628261566162109375,-969.43975830078125]},{"Pos":[1158.8681640625,29.3795719146728515625,-966.395751953125]},{"Pos":[1153.723388671875,28.6888675689697265625,-961.0902099609375]},{"Pos":[1150.326904296875,27.3338184356689453125,-958.10845947265625]},{"Pos":[1144.2684326171875,25.5088100433349609375,-951.0809326171875]},{"Pos":[1141.9710693359375,25.2532501220703125,-948.82080078125]},{"Pos":[1138.911865234375,24.60028839111328125,-945.54052734375]},{"Pos":[1131.155029296875,23.1468830108642578125,-941.2332763671875]},{"Pos":[1127.4775390625,21.8604564666748046875,-940.86114501953125]},{"Pos":[1123.823974609375,21.5391216278076171875,-940.44085693359375]},{"Pos":[1117.9415283203125,20.946125030517578125,-938.73956298828125]},{"Pos":[1114.8262939453125,20.2468624114990234375,-936.81524658203125]},{"Pos":[1111.794921875,19.3181705474853515625,-935.1025390625]},{"Pos":[1106.4322509765625,17.515377044677734375,-932.8199462890625]},{"Pos":[1103.093017578125,17.2356719970703125,-932.96319580078125]},{"Pos":[1099.42919921875,16.4960422515869140625,-932.82745361328125]},{"Pos":[1091.7012939453125,13.14619159698486328125,-934.8585205078125]},{"Pos":[1088.9075927734375,12.29616641998291015625,-936.03265380859375]},{"Pos":[1085.2701416015625,11.46599864959716796875,-937.31768798828125]},{"Pos":[1077.8092041015625,10.2102031707763671875,-938.02032470703125]},{"Pos":[1074.90966796875,9.572460174560546875,-939.22735595703125]},{"Pos":[1071.463134765625,8.9193210601806640625,-939.88470458984375]},{"Pos":[1066.767822265625,8.92127132415771484375,-943.58349609375]},{"Pos":[1066.34375,9.05749034881591796875,-947.2027587890625]},{"Pos":[1065.172607421875,9.3040313720703125,-950.77362060546875]},{"Pos":[1062.7449951171875,9.29520511627197265625,-958.17193603515625]},{"Pos":[1060.8599853515625,9.03893375396728515625,-961.31622314453125]},{"Pos":[1059.574951171875,8.75251483917236328125,-965.1158447265625]},{"Pos":[1056.9052734375,8.347179412841796875,-972.6683349609375]},{"Pos":[1056.93896484375,8.20335865020751953125,-975.85107421875]},{"Pos":[1056.879638671875,8.20769023895263671875,-980.6231689453125]},{"Pos":[1053.8375244140625,8.25549411773681640625,-966.53704833984375]},{"Pos":[1050.5164794921875,8.1004009246826171875,-964.82958984375]},{"Pos":[1047.0850830078125,7.8102283477783203125,-963.535888671875]},{"Pos":[1040.7042236328125,7.46768283843994140625,-961.59490966796875]},{"Pos":[1037.5343017578125,7.52647304534912109375,-962.39141845703125]},{"Pos":[1033.0849609375,7.712458133697509765625,-963.880859375]},{"Pos":[1029.870361328125,8.14809131622314453125,-965.2393798828125]},{"Pos":[1026.515380859375,8.2272281646728515625,-966.65802001953125]},{"Pos":[1023.370361328125,7.834770679473876953125,-967.98638916015625]},{"Pos":[1019.9075927734375,7.727566242218017578125,-969.4501953125]},{"Pos":[1016.2698974609375,7.3761081695556640625,-970.98907470703125]},{"Pos":[1012.8861083984375,7.365779876708984375,-972.41949462890625]},{"Pos":[1009.5291748046875,7.477801799774169921875,-973.83856201171875]},{"Pos":[1006.1212158203125,7.442379474639892578125,-975.2794189453125]},{"Pos":[1003.0970458984375,7.575438976287841796875,-976.55718994140625]},{"Pos":[1000.2015380859375,7.936963558197021484375,-977.78082275390625]},{"Pos":[999.69647216796875,7.6243133544921875,-981.412841796875]},{"Pos":[995.88397216796875,8.1347942352294921875,-977.48931884765625]},{"Pos":[991.30120849609375,8.0019054412841796875,-976.97412109375]},{"Pos":[1015.0107421875,7.494969844818115234375,-966.79443359375]},{"Pos":[1013.76092529296875,7.789839267730712890625,-963.70892333984375]},{"Pos":[1012.28045654296875,7.989983081817626953125,-959.8614501953125]},{"Pos":[1011.01446533203125,8.5615024566650390625,-956.56561279296875]},{"Pos":[1066.1593017578125,9.16228485107421875,-937.3453369140625]},{"Pos":[1058.4141845703125,9.5467243194580078125,-988.5462646484375]},{"Pos":[1059.484375,9.0621776580810546875,-991.41510009765625]},{"Pos":[1061.5921630859375,8.30164623260498046875,-995.9755859375]},{"Pos":[1065.289306640625,7.20876312255859375,-1004.7706298828125]},{"Pos":[1066.6219482421875,6.93354034423828125,-1008.30316162109375]},{"Pos":[1067.9754638671875,6.6407337188720703125,-1011.8895263671875]},{"Pos":[1069.806640625,6.4590606689453125,-1014.99066162109375]},{"Pos":[1073.6920166015625,5.87235736846923828125,-1021.0416259765625]},{"Pos":[1076.162841796875,5.853043079376220703125,-1022.9564208984375]},{"Pos":[1079.8150634765625,5.361815929412841796875,-1024.6226806640625]},{"Pos":[1081.6839599609375,4.99903106689453125,-1027.2032470703125]},{"Pos":[1087.1444091796875,4.10911464691162109375,-1030.6343994140625]},{"Pos":[1090.180908203125,3.8727056980133056640625,-1032.0142822265625]},{"Pos":[1093.873779296875,3.39640045166015625,-1033.679443359375]},{"Pos":[1097.08154296875,2.73522472381591796875,-1035.12548828125]},{"Pos":[1104.3399658203125,1.10549414157867431640625,-1036.350830078125]},{"Pos":[1108.2169189453125,0.5702359676361083984375,-1036.6864013671875]},{"Pos":[1116.0072021484375,-0.31356918811798095703125,-1037.6832275390625]},{"Pos":[1119.7978515625,-0.76465260982513427734375,-1039.374755859375]},{"Pos":[1123.6514892578125,-1.2485411167144775390625,-1041.1160888671875]},{"Pos":[1126.2255859375,-1.619177341461181640625,-1043.2537841796875]},{"Pos":[1133.676025390625,-2.8109581470489501953125,-1044.8868408203125]},{"Pos":[1136.9425048828125,-3.376162052154541015625,-1045.7498779296875]},{"Pos":[1141.2689208984375,-3.9878597259521484375,-1046.3182373046875]},{"Pos":[1144.134765625,-4.16854381561279296875,-1047.034912109375]},{"Pos":[1151.3936767578125,-5.280669689178466796875,-1047.6898193359375]},{"Pos":[1155.1220703125,-5.1027984619140625,-1048.7457275390625]},{"Pos":[1159.04345703125,-5.7859783172607421875,-1049.69287109375]},{"Pos":[1166.6051025390625,-6.4496097564697265625,-1050.58984375]},{"Pos":[1170.3992919921875,-6.581037998199462890625,-1051.6082763671875]},{"Pos":[1179.043701171875,-7.695218563079833984375,-1051.452880859375]},{"Pos":[1182.4554443359375,-7.8641204833984375,-1050.4862060546875]},{"Pos":[1188.183349609375,-9.183734893798828125,-1052.8843994140625]},{"Pos":[1191.3148193359375,-10.0033626556396484375,-1059.5732421875]},{"Pos":[1193.810791015625,-10.6266231536865234375,-1061.7177734375]},{"Pos":[1196.517333984375,-10.9547557830810546875,-1064.746337890625]},{"Pos":[1201.5697021484375,-11.29963970184326171875,-1069.080810546875]},{"Pos":[1204.0904541015625,-11.13423633575439453125,-1070.0692138671875]},{"Pos":[1205.401611328125,-11.1928272247314453125,-1067.9771728515625]},{"Pos":[1197.654296875,-10.79209136962890625,-1070.302978515625]},{"Pos":[1195.338134765625,-10.19498729705810546875,-1073.4066162109375]},{"Pos":[1187.7523193359375,-9.92063426971435546875,-1071.1123046875]},{"Pos":[1184.846923828125,-9.79413604736328125,-1071.163330078125]},{"Pos":[1181.9954833984375,-9.72338104248046875,-1071.6636962890625]},{"Pos":[1178.641845703125,-9.97222995758056640625,-1077.4267578125]},{"Pos":[1178.9935302734375,-10.0766735076904296875,-1080.1375732421875]},{"Pos":[1179.55078125,-9.95277500152587890625,-1085.384521484375]},{"Pos":[1179.7742919921875,-9.38921833038330078125,-1093.750244140625]},{"Pos":[1178.854248046875,-9.27609729766845703125,-1096.62109375]},{"Pos":[1177.660888671875,-9.47092151641845703125,-1102.875732421875]},{"Pos":[1177.1546630859375,-9.6274013519287109375,-1106.0794677734375]},{"Pos":[1176.3153076171875,-9.68860530853271484375,-1112.486328125]},{"Pos":[1175.8936767578125,-9.61155223846435546875,-1115.3377685546875]},{"Pos":[1174.804443359375,-9.2654857635498046875,-1122.4991455078125]},{"Pos":[1174.0574951171875,-9.0097026824951171875,-1125.4029541015625]},{"Pos":[1172.5611572265625,-8.533596038818359375,-1132.408447265625]},{"Pos":[1173.424560546875,-8.48211574554443359375,-1134.893310546875]},{"Pos":[1174.0234375,-7.40042781829833984375,-1141.4053955078125]},{"Pos":[1174.32666015625,-6.39013957977294921875,-1145.2889404296875]},{"Pos":[1173.0892333984375,-5.446883678436279296875,-1151.9833984375]},{"Pos":[1171.882568359375,-5.2377300262451171875,-1155.3428955078125]},{"Pos":[1169.4697265625,-3.4458415508270263671875,-1163.082275390625]},{"Pos":[1168.65869140625,-2.74664783477783203125,-1166.2742919921875]},{"Pos":[1169.154541015625,-1.7098505496978759765625,-1169.205078125]},{"Pos":[1194.3995361328125,-10.1541805267333984375,-1070.3062744140625]},{"Pos":[1209.4366455078125,-10.839252471923828125,-1073.500244140625]},{"Pos":[1214.688720703125,-10.53351497650146484375,-1076.638671875]},{"Pos":[1217.0859375,-10.598697662353515625,-1077.495849609375]},{"Pos":[1223.3465576171875,-11.80687713623046875,-1079.73486328125]},{"Pos":[1227.1593017578125,-13.10635280609130859375,-1079.6927490234375]},{"Pos":[1225.722412109375,-12.273181915283203125,-1083.7158203125]},{"Pos":[1234.3299560546875,-14.8402233123779296875,-1078.5384521484375]},{"Pos":[1236.5069580078125,-14.82780551910400390625,-1077.6392822265625]},{"Pos":[1242.71826171875,-15.7451171875,-1076.3382568359375]},{"Pos":[1246.7747802734375,-16.9475498199462890625,-1076.8341064453125]},{"Pos":[1251.361083984375,-17.2211437225341796875,-1077.3199462890625]},{"Pos":[1255.462890625,-16.8514270782470703125,-1079.42138671875]},{"Pos":[1257.3253173828125,-16.2378082275390625,-1082.2357177734375]},{"Pos":[1259.3189697265625,-15.6821269989013671875,-1085.470458984375]},{"Pos":[1261.4896240234375,-15.67748355865478515625,-1087.9447021484375]},{"Pos":[1263.9154052734375,-15.7871685028076171875,-1090.6611328125]},{"Pos":[1266.108642578125,-15.85834980010986328125,-1093.1158447265625]},{"Pos":[1268.2335205078125,-15.6539707183837890625,-1095.4913330078125]},{"Pos":[1270.32666015625,-14.05170345306396484375,-1097.8251953125]},{"Pos":[1268.149169921875,-14.0217990875244140625,-1100.5543212890625]},{"Pos":[1266.589111328125,-13.70142078399658203125,-1103.1322021484375]},{"Pos":[1266.398681640625,-13.1768245697021484375,-1106.399658203125]},{"Pos":[1266.21435546875,-12.70769500732421875,-1109.7347412109375]},{"Pos":[1267.353515625,-12.3170490264892578125,-1112.41259765625]},{"Pos":[1267.2205810546875,-11.40529537200927734375,-1115.8475341796875]},{"Pos":[1268.884033203125,-10.27731037139892578125,-1118.3968505859375]},{"Pos":[1271.1044921875,-9.65346813201904296875,-1120.875732421875]},{"Pos":[1273.0184326171875,-8.9764232635498046875,-1123.0101318359375]},{"Pos":[1164.125244140625,32.9832916259765625,-991.83831787109375]},{"Pos":[1160.30615234375,32.541900634765625,-990.7471923828125]},{"Pos":[1171.5169677734375,34.57958221435546875,-1011.0306396484375]},{"Pos":[1162.666259765625,35.58013916015625,-1023.94293212890625]},{"Pos":[1164.7000732421875,35.550380706787109375,-1026.6712646484375]},{"Pos":[1167.1314697265625,35.550380706787109375,-1029.96533203125]},{"Pos":[1169.3988037109375,35.550380706787109375,-1033.0350341796875]},{"Pos":[1170.8912353515625,35.573467254638671875,-1036.0823974609375]},{"Pos":[1171.765869140625,36.036876678466796875,-1039.494873046875]},{"Pos":[1171.2666015625,36.536258697509765625,-1042.92138671875]},{"Pos":[1171.9207763671875,36.7573089599609375,-1046.0582275390625]},{"Pos":[1171.4078369140625,36.936893463134765625,-1049.53466796875]},{"Pos":[1171.148193359375,37.355007171630859375,-1052.8505859375]},{"Pos":[1172.375,37.350391387939453125,-1056.1424560546875]},{"Pos":[1172.7059326171875,37.34467315673828125,-1058.94482421875]},{"Pos":[1173.1119384765625,37.35037994384765625,-1062.3717041015625]},{"Pos":[1173.5118408203125,37.35037994384765625,-1065.748779296875]},{"Pos":[1173.8604736328125,37.35037994384765625,-1068.69970703125]},{"Pos":[1174.2467041015625,37.35037994384765625,-1071.9688720703125]},{"Pos":[1174.6090087890625,37.35265350341796875,-1075.0355224609375]},{"Pos":[1174.9644775390625,37.369853973388671875,-1078.0443115234375]},{"Pos":[1175.3677978515625,37.375026702880859375,-1081.4581298828125]},{"Pos":[1175.730712890625,37.363193511962890625,-1084.765380859375]},{"Pos":[1175.4691162109375,37.37717437744140625,-1087.6964111328125]},{"Pos":[1174.546875,37.42693328857421875,-1090.5023193359375]},{"Pos":[1173.67333984375,37.582195281982421875,-1093.3154296875]},{"Pos":[1173.055419921875,37.37703704833984375,-1096.1790771484375]},{"Pos":[1172.58154296875,37.47389984130859375,-1098.86279296875]},{"Pos":[1172.10791015625,37.516872406005859375,-1101.8162841796875]},{"Pos":[1171.33544921875,37.49065399169921875,-1104.4307861328125]},{"Pos":[1170.4088134765625,37.371501922607421875,-1107.23876953125]},{"Pos":[1169.62841796875,37.23027801513671875,-1110.2894287109375]},{"Pos":[1168.995849609375,37.133892059326171875,-1113.1124267578125]},{"Pos":[1168.2325439453125,37.075046539306640625,-1116.020263671875]},{"Pos":[1167.6253662109375,37.107379913330078125,-1118.9080810546875]},{"Pos":[1167.7650146484375,37.202342987060546875,-1122.264404296875]},{"Pos":[1167.974853515625,37.33966064453125,-1125.605224609375]},{"Pos":[1169.90478515625,37.3831939697265625,-1128.0289306640625]},{"Pos":[1171.380615234375,37.412353515625,-1131.15087890625]},{"Pos":[1172.634033203125,37.43189239501953125,-1133.8681640625]},{"Pos":[1173.479736328125,37.455806732177734375,-1136.543701171875]},{"Pos":[1173.705810546875,37.455135345458984375,-1139.42919921875]},{"Pos":[1173.6334228515625,37.367168426513671875,-1142.617431640625]},{"Pos":[1172.6475830078125,37.27594757080078125,-1145.4898681640625]},{"Pos":[1169.884033203125,37.141147613525390625,-1147.690185546875]}]]=])

	local function ApplyModifiers(bool)
		for i,v in pairs(PathModifiers) do
			if v.Instance then
				v.Instance:Destroy()
			end
		end
		for i,v in pairs(PathTemplate) do
			if v.Instance then
				v.Instance:Destroy()
			end
		end

		if bool then
			for i,v in pairs(PathModifiers) do
				local part = Instance.new("Part")
				part.Anchored = true
				part.CanCollide = true
				part.Size = v.Size
				part.Position = v.Position
				part.Orientation = v.Orientation
				--part.Transparency = 1
				part.Parent = workspace
				v.Instance = part
			end
			for i,v in pairs(PathTemplate) do
				local part = Instance.new("Part")
				part.Anchored = true
				part.CanCollide = false
				part.Size = Vector3.new(2,2,2)
				part.Position = Vector3.new(unpack(v.Pos))
				--part.Transparency = 1
				part.Parent = workspace
				part.Material = "Neon"
				v.Instance = part
			end
		end
	end

	local function NavigateTo(pos)
		if not Settings.AutoMine.Enabled or (plr.Character.PrimaryPart.Position - pos).magnitude < 10 then
			return true
		end

		local path = game.PathfindingService:CreatePath({
			WaypointSpacing = 20,
			AgentRadius = 3,
			Costs = {
				Water = math.huge,
				Neon = -999999
			}
		})
		local t = tick()
		debugwarn("computing")
		ApplyModifiers(true)
		local s,e = pcall(path.ComputeAsync, path, plr.Character.PrimaryPart.Position, pos)
		ApplyModifiers(false)
		debugwarn("computed! took", tick() - t)

		if not s then
			debugwarn(e)
			return false
		end

		if path.Status == Enum.PathStatus.Success then
			local nodes = {}
			local waypoints = path:GetWaypoints()

			local badWaypoints = 0
			for i,v in pairs(waypoints) do
				local nextWaypoint = waypoints[i + 1]
				if nextWaypoint then
					local ray = Ray.new(v.Position, (nextWaypoint.Position - v.Position).Unit * (nextWaypoint.Position - v.Position).Magnitude)
					local hit, pos = workspace:FindPartOnRayWithWhitelist(ray, {workspace.Terrain})
					if hit and (pos - v.Position).magnitude > 2 then
						if waypoints[i + 2] and math.abs(pos.Y - waypoints[i + 2].Position.Y) < math.abs(pos.Y - v.Position.Y) then
							waypoints[i + 1] = {
								Position = Vector3.new(nextWaypoint.Position.X, pos.Y, nextWaypoint.Position.Z),
							}
							debugprint("fixed a bad waypoint")
						else
							badWaypoints = badWaypoints + 1
						end
					end
				end
			end

			debugwarn(badWaypoints, "bad waypoints")
			if badWaypoints > 0 then
				--return false
			end

			for i,v in pairs(waypoints) do
				local p = Instance.new("Part")
				p.Anchored = true
				p.CanCollide = false
				p.BrickColor = BrickColor.White()
				p.Shape = "Ball"
				p.Material = "Neon"
				p.Size = Vector3.new(2,2,2)
				p.CFrame = CFrame.new(v.Position)
				p.Parent = workspace
				p.Name = "Waypoint_" .. i
				nodes[i] = p

				if i ~= 1 then
					local new = Instance.new("Part")
					new.Anchored = true
					new.CanCollide = false
					new.Material = "Neon"
					new.BrickColor = BrickColor.Blue()
					new.Size = Vector3.new(0.5,0.5,(v.Position - waypoints[i - 1].Position).magnitude)
					new.CFrame = CFrame.new(v.Position, waypoints[i - 1].Position) * CFrame.new(0,0,-(v.Position - waypoints[i - 1].Position).magnitude/2)
					new.Parent = workspace
					nodes[i .. "-" .. i-1] = new
				end
			end

			for i,v in pairs(waypoints) do
				MoveTo(v.Position)
				nodes[i].BrickColor = BrickColor.Yellow()
				if timedOutInARow >= 4 then
					return true
				end
			end

			for i,v in pairs(nodes) do
				v:Destroy()
			end
			return true
		else
			debugwarn("didn't find", path.Status)
			return false
		end
	end

	--[[
		local t = require(game.ReplicatedStorage:WaitForChild("SharedModules"):WaitForChild("Global")).PlayerCharacter:GetEquippedItem()
		--print(t.SharedData.Tier)

		local a = require(game.ReplicatedStorage:WaitForChild("SharedModules"):WaitForChild("Global")).PlayerData:GetContainer("Inventory")
		table.foreach(a.Items[3], print)
	]]

	if isDebug then
		UiTbl.autoMineGroup:CheckBox("Enabled", function(bool)
			Settings.AutoMine.Enabled = bool

			timedOutInARow = 0
			while Settings.AutoMine.Enabled do
				SharedModules.PlayerCharacter.IsSprintButtonDown = true
				for i,v in pairs(GetOres()) do
					if NavigateTo(v.PrimaryPart.Position) then
						SharedModules.PlayerCharacter:GetEquippedItem().IsActivated = true
						break
					else
						SharedModules.PlayerCharacter:GetEquippedItem().IsActivated = false
					end
				end
				wait()
			end
			SharedModules.PlayerCharacter:GetEquippedItem().IsActivated = false
		end)
	end
	
	UiTbl.weapons = NewUI:Tab("Weapons", {
		Width = 230,
	})

	UiTbl.aimGroup = UiTbl.weapons:Group('Silent aim')
	UiTbl.modsGroup = UiTbl.weapons:Group('Weapon mods')
	UiTbl.wlGroup = UiTbl.weapons:Group('Aim whitelist')

	-- UiTbl.aimGroup = UiTbl.weapons:Group("Silent Aim")
	-- UiTbl.modsGroup = UiTbl.weapons:Group("Weapon Mods")
	-- UiTbl.wlGroup = UiTbl.weapons:Group("Aim Whitelist")

	UiTbl.aimGroup:CheckBox("Silent aim", function(bool)
		Settings.SilentAim = bool
		ESP.HighlightEnabled = bool

		if not bool then
			ESP.Highlighted = nil
		end
	end, "SilentAim"):Keybind(Enum.KeyCode.E, "SilentAim")

	markAsUnsafe(UiTbl.aimGroup:CheckBox('Backtrack', function(bool) Settings.BackTrack = bool end, 'BackTrack'))
	markAsUnsafe(UiTbl.aimGroup:CheckBox('Wallbang', function(bool) Settings.WallBang = bool end, 'WallBang'))
	
	UiTbl.aimGroup:Label('Aimbot settings')

	UiTbl.aimGroup:CheckBox("Visibility check", function(bool)
		Settings.VisCheck = bool
		Aimbot.VisCheck = bool
	end, "VisCheck").Click()

	UiTbl.aimGroup:Dropdown({
		Text = "Aim part",
		Values = { "Head", "Torso" },
		Radio = true,
		Default = 1
	}, function(val)
		Aimbot.AimPart = val
	end, "AimPart")

	UiTbl.aimGroup:CheckBox('Target players', function(bool) Settings.SilentTargetPlayers = bool end, 'SilentTargetPlayers').Click()
	UiTbl.aimGroup:CheckBox('Target animals', function(bool) Settings.SilentTargetAnimals = bool end, 'SilentTargetAnimals')
	UiTbl.aimGroup:CheckBox('Target NPCs', 	function(bool) Settings.SilentTargetNPCs = bool end, 'SilentTargetNPCs')

	UiTbl.aimGroup:Dropdown({
		Text = "Target priority",
		Values = { "Players", "Animals", 'NPCs' },
		Radio = true,
		Default = 1
	}, function(val)
		Settings.TargetPriority = val
	end, "TargetPriority")

	UiTbl.aimGroup:CheckBox("Respect Friendly\nMode", function(bool)
		Settings.FriendlyCheck = bool
	end, "FriendlyCheck"):SetMultiLine()

	UiTbl.aimGroup:CheckBox("Ignore Faction Members", function(bool)
		Settings.FactionCheck = bool
	end, "FactionCheck")

	local FOVCircle = ESP.FOVCircle(Settings.FOVRange)
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = ESP.GetFOV(),
		Default = 200,
		Parent = UiTbl.aimGroup:CheckBox("Show FOV Circle", function(bool)
			Settings.ShowFOVCircle = bool
			if bool then
				FOVCircle.Tbl.Update = FOVCircle.Update
				FOVCircle.Drawing.Visible = true
			else
				FOVCircle.Tbl.Update = nil
				FOVCircle.Drawing.Visible = false
			end
		end, "ShowFOVCircle")
	}, function(val)
		Settings.FOVRange = val
		Settings.UsedFOVRange = val
		if FOVCircle.Drawing then
			FOVCircle.Drawing.Radius = val
		end
		return "FOV Range: " .. val
	end, "FOVRange")

	UiTbl.aimGroup:Label("Max Distance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 1500,
		Default = 500
	}, function(val)
		Settings.AimDistance = val
		return val .. ""
	end, "AimDistance")
	
	UiTbl.aimGroup:Label("Headshot Chance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 100
	}, function(val)
		Settings.HeadshotChance = val
		return val .. "%"
	end, "HeadshotChance")
	

	UiTbl.modsGroup:CheckBox("No Recoil", function(bool)
		Settings.NoRecoil = bool
	end, "NoRecoil")

	UiTbl.modsGroup:CheckBox("No Spread", function(bool)
		Settings.NoSpread = bool
	end, "NoSpread")

	UiTbl.modsGroup:Slider({
		Min = 1,
		Max = 3.5,
		Default = 1,
		Fraction = 1,

		Parent = markAsUnsafe(UiTbl.modsGroup:CheckBox('Fast Reload', function(bool)
			Settings.NoReload = bool
		end, 'NoReload')),
	}, function(value)
		Settings.ReloadScale = value
		
		return 'Reload scale: ' .. string.format('%d%%', 100 * value)
		--return string.format('Reload scale: %s%%', 100 * value)
	end, 'ReloadScale')

	UiTbl.modsGroup:CheckBox('Use headshot sound', function(bool)
		Settings.CustomHeadshotSound = bool
	end, 'UseCustomHeadshotSound')


	UiTbl.modsGroup:Dropdown({
		Text = 'Headshot Sound',
		Values = { 'Rust', 'Skeet', 'Custom' },
		Radio = true,
		Default = 1,
	}, function(val)
		Settings.HeadShotSound = val
	end, 'HeadShotSound')

	UiTbl.modsGroup:TextBox({
		PlaceholderText = "Headshot Sound Id"
	}, function(text, enter, input, autoLoad)
		Settings.CustomHeadshotSoundId = text
	end, 'CustomHeadshotSoundId') 

	UiTbl.wlList = UiTbl.wlGroup:List({
		Height = 90,
		NoPadding = true
	})
	
	local baseUrl = 'https://games.roblox.com/v1/games/%s/servers/public?cursor=%s&limit=100'
	local function findServer(id, history, mode)
		local cursor = ''
		local servers = {}

		while true do
			local s, list = pcall(HttpGet, baseUrl:format(game.PlaceId, cursor))

			while not s do
				wait(0.1)
				s, list = pcall(HttpGet, baseUrl:format(game.PlaceId, cursor))
			end

			local s, decoded = pcall(function() return game:GetService("HttpService"):JSONDecode(list) end)
			if s then
				for k, v in next, decoded.data do
					if type(v.playing) == 'number' and type(v.maxPlayers) == 'number' and type(v.id) == 'string' then -- some weird edge case .. ???????
						if v.playing < v.maxPlayers then 
							if (not table.find(history, v.id)) then
								servers[#servers + 1] = v
							else
								debugprint('ignoring', v.id)
							end
						end
					end
				end
	
				cursor = decoded.nextPageCursor
				if not cursor then break end
			end
			
		end

		local server
		if mode == 'smallest' then
			table.sort(servers, function(a, b) return a.playing < b.playing end)
			server = servers[1]
		else
			server = table.remove(servers, Random.new():NextInteger(1, #servers))
		end

		if mode == 'hop' then
			SetTPSetting('KHFindLegendaryServer', true)
			SetTPSetting('KHServerHop', history)
		end

		if id:len() > 1 then
			debugprint('Id override', id)
			server = { id = id }
		end

		game:GetService('TeleportService'):TeleportToPlaceInstance(game.PlaceId, server.id)
	end

	local function serverHop(id)
		local ignore = GetTPSetting('KHServerHop') or {}
		if not table.find(ignore, game.JobId) then
			table.insert(ignore, game.JobId)
		end
		return findServer(id or '', ignore, 'hop')
	end

	local function beep()
		local sound = Instance.new('Sound')

		sound.Pitch = 1;
		sound.Volume = 10;
		
		sound.SoundId = 'rbxassetid://138081500'

		syn.protect_gui(sound)
		sound.Parent = game:GetService('CoreGui')
	    sound:Play()
	end

	local function SendEmbed(webhookUrl, text, embed)
		return pcall(request, {
			Url = webhookUrl,
			Method = "POST",
			Headers = {
				["Content-Type"] = "application/json"
			},
			Body = game.HttpService:JSONEncode({
				content = text,
				embeds = {embed}
			})
		})
	end

	UiTbl.serverTab = NewUI:Tab("Server", {
		Width = 230,
	})

	UiTbl.finderGroup = UiTbl.serverTab:Group('Server Hop')
	UiTbl.tpFiltersGroup = UiTbl.serverTab:Group('Filters')
	UiTbl.tpOptionsGroup = UiTbl.serverTab:Group('Options')
	UiTbl.serverStatsGroup = UiTbl.serverTab:Group('Server stats')

	UiTbl.legendaryCountLabel = UiTbl.serverStatsGroup:Label('Legendary animals: 0')
	UiTbl.thunderstruckCountLabel = UiTbl.serverStatsGroup:Label('Thunderstruck count: 0')

	local history = GetTPSetting('KHServerHop') or {}
	UiTbl.finderGroup:Button('Rejoin', function()
		game:GetService('TeleportService'):TeleportToPlaceInstance(game.PlaceId, game.JobId)
	end)
	
	UiTbl.finderGroup:Button('Join new server', function()
		findServer('', { game.JobId }, 'new')
	end)

	UiTbl.finderGroup:Button('Join smallest server', function()
		findServer('', { game.JobId }, 'smallest')
	end)

	--[[UiTbl.finderGroup:Button('Join debug server', function()
		serverHop'697c2856-b208-4bf5-aa2a-9331b13d1c8d'
	end)]]

	UiTbl.finderGroup:Button('Server hop', function()
		if (not GetTPSetting('KHThunderstruckObjects')) and (not GetTPSetting('KHLegendaryAnimals')) and (not GetTPSetting('KHFactionFinder')) then
			return messagebox("Please select at least 1 type of item to search for.", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
		end
		serverHop()
	end)

	UiTbl.finderGroup:Button('Clear server history', function()  
		SetTPSetting('KHServerHop', {})
		UiTbl.serverHistoryLabel.LabelObj.Text = 'Server history: 0'
	end)

	local debounce = false
	UiTbl.tpOptionsGroup:TextBox({
		PlaceholderText = "Server Hop Webhook"
	}, function(text, enter, obj, autoLoad)
		debugprint('registred link')
		Settings.WWHopWebhook = text
		if (not autoLoad) and enter and (not debounce) then
			-- stupid hack bc kiriot calls .Callback twice for w/e reason?
			debounce = true
			task.spawn(function() task.wait(0.5) debounce = false end)
			SendEmbed(text, nil, {
				title = "Wild West Server Hop",
				color = 14451283,
				timestamp = os.date("%Y-%m%dT%H:%M:%S", os.time(os.date("!*t"))),
				description = "Your webhook works, wooooooooooooo!",
				footer = {
					icon_url = "https://buy.kiriothub.today/icon.png",
					text = "KiriotHub"
				},
			})
		end
	end, 'WWHopWebhook')

	UiTbl.tpFiltersGroup:CheckBox('Legendary animals', function(bool) SetTPSetting('KHLegendaryAnimals', bool) end, 'KHLegendaryAnimals')
	UiTbl.tpFiltersGroup:CheckBox('Thunderstruck', function(bool) SetTPSetting('KHThunderstruckObjects', bool) end, 'KHThunderstruckObjects')
	UiTbl.tpFiltersGroup:CheckBox('Faction finder', function(bool) SetTPSetting('KHFactionFinder', bool) end, 'KHFactionFinder')
	UiTbl.tpFiltersGroup:TextBox({
		PlaceholderText = 'Name of faction'
	}, function(text, enter, obj, autoload)
		debugprint('faction name', text)
		Settings.WWFactionSearch = text
	end, 'WWFactionSearch')

	UiTbl.tpOptionsGroup:CheckBox('Post to webhook', function(bool) Settings.WWPostToWebhook = bool end, 'WWPostToWebhook')
	UiTbl.tpOptionsGroup:CheckBox('Webhook ping everyone', function(bool) Settings.WWPingEveryone = bool end, 'WWPingEveryone')

	UiTbl.tpOptionsGroup:CheckBox('Play sound', function(bool) 
		Settings.WWPlaySoundOnFound = bool; 
		SetTPSetting('KHPlaySound', bool) 
	end, 'WWPlaySoundOnFound')
	UiTbl.serverHistoryLabel =  UiTbl.finderGroup:Label(string.format('Server history: %d', #history))

	task.spawn(function()
		while true do
			task.wait(0.1)

			local legendaryCount = 0
			for _, animal in next, workspace:WaitForChild("WORKSPACE_Entities"):WaitForChild("Animals"):GetChildren() do
				if animal:GetAttribute('Legendary') then
					legendaryCount = legendaryCount + 1
				end
			end

			UiTbl.legendaryCountLabel.LabelObj.Text = string.format('Legendary animals: %d', legendaryCount)
			UiTbl.thunderstruckCountLabel.LabelObj.Text = string.format('Thunderstruck count: %d', #game:GetService'CollectionService':GetTagged('Thunderstruck'))
		end
	end)

	OnSettingsLoaded(function()
		wait(2)

		local result = GetTPSetting('KHFindLegendaryServer')
		if result then
			debugprint('doing serverhop checks')
			debugprint(type(Settings.WWHopWebhook)) 
			if type(Settings.WWHopWebhook) == 'string' then
				debugprint(Settings.WWHopWebhook:len())
			end

			local legendaryCount = 0
			local thunderstruckCount = #game:GetService('CollectionService'):GetTagged('Thunderstruck')

			for _, animal in next, workspace:WaitForChild("WORKSPACE_Entities"):WaitForChild("Animals"):GetChildren() do
				if animal:GetAttribute('Legendary') then
					legendaryCount = legendaryCount + 1
				end
			end
			
			local factionSearchData = {
				members = {},
				found = false,
			}	

			if GetTPSetting('KHFactionFinder') then
				local factionName = Settings.WWFactionSearch

				for _, player in next, game.Players:GetPlayers() do
					if player ~= game.Players.LocalPlayer then 
						local state = SharedModules.ReplicatedState:GetPlayerState(player)
						while true do
							if state then break end
							if not player.Parent then state = nil; break end

							wait(1)
							state = SharedModules.ReplicatedState:GetPlayerState(player)
						end

						if state then
							local factionId = state.State.CurrentFactionId;
							local faction = factionId and SharedModules.PlayerData:GetFaction(factionId)

							debugprint('search faction name', factionName)
							if faction then
								debugprint('player faction name for', player.Name, 'is', faction.Data.Name)
							else
								debugprint('player not in faction', player.Name)
							end
							debugprint(string.rep('=', 10))


							if faction and faction.Data.Name == factionName then
								table.insert(factionSearchData.members, { player.Name, player.DisplayName })

								factionSearchData.found = true
								factionSearchData.name = faction.Data.Name
							end 
						end
					end
				end
			end

			-- if legendaryCount > 0 or thunderstruckCount > 0 then
			-- 	debugprint('found something')
			-- 	if GetTPSetting('KHPlaySound') then task.spawn(beep) end
			-- 	SetTPSetting('KHFindLegendaryServer', false)
			-- else
			-- 	debugprint('server hopping. found:', #history, 'servers')
			-- 	wait(1)
			-- 	serverHop()
			-- end

			local stopOnLegendary = GetTPSetting('KHLegendaryAnimals')
			local stopOnThunderstruck = GetTPSetting('KHThunderstruckObjects')
			local stopOnFactionMember = GetTPSetting('KHFactionFinder')


			if legendaryCount > 0 and stopOnLegendary and Settings.WWPostToWebhook then
				debugprint('found a legendary animal')

				SendEmbed(Settings.WWHopWebhook, Settings.WWPingEveryone and '@everyone' or nil , {
					title = "Wild West Server Hop",
					color = 14451283,
					timestamp = os.date("%Y-%m%dT%H:%M:%S", os.time(os.date("!*t"))),
					description = string.format("Found %d legendary animal(s)", legendaryCount),
					footer = {
						icon_url = "https://buy.kiriothub.today/icon.png",
						text = "KiriotHub"
					},
				})
			end

			if thunderstruckCount > 0 and stopOnThunderstruck and Settings.WWPostToWebhook then
				debugprint('found a thunderstruck object')

				SendEmbed(Settings.WWHopWebhook, Settings.WWPingEveryone and '@everyone' or nil, {
					title = "Wild West Server Hop",
					color = 14451283,
					timestamp = os.date("%Y-%m%dT%H:%M:%S", os.time(os.date("!*t"))),
					description = string.format("Found %d thunderstruck objects(s)", thunderstruckCount),
					footer = {
						icon_url = "https://buy.kiriothub.today/icon.png",
						text = "KiriotHub"
					},
				})
			end

			if stopOnFactionMember and factionSearchData.found then
				if Settings.WWPostToWebhook then
					local members = {}
					for _, member in next, factionSearchData.members do
						local name, display = member[1], member[2]
						if name == display then
							table.insert(members, name)
						else
							table.insert(members, name .. ' (@' .. display .. ')')
						end
					end

					SendEmbed(Settings.WWHopWebhook, Settings.WWPingEveryone and '@everyone' or nil, {
						title = "Wild West Faction Finder",
						color = 14451283,
						timestamp = os.date("%Y-%m%dT%H:%M:%S", os.time(os.date("!*t"))),
						description = string.format('Found %d member(s) that are in %q! [%s]', #factionSearchData.members, factionSearchData.name, table.concat(members, ',')),
						footer = {
							icon_url = "https://buy.kiriothub.today/icon.png",
							text = "KiriotHub"
						},
					})
				end
			end

			if (legendaryCount > 0 and stopOnLegendary) or (thunderstruckCount > 0 and stopOnThunderstruck) or (factionSearchData.found and stopOnFactionMember) then
				if GetTPSetting('KHPlaySound') then task.spawn(beep) end
				SetTPSetting('KHFindLegendaryServer', false)

				return
			end

			wait(2)
			serverHop()
		end
	end)


	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	UiTbl.oresGroup = UiTbl.espGui:Group("Ores")
	UiTbl.animalsGroup = UiTbl.espGui:Group("Animals")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.G, "ESP")

	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 10000,
		Default = 2000,

		Parent = UiTbl.espGroup:CheckBox("Show Animals", function(bool)
			ESP.Animals = bool
		end, "ESPAnimals")
	}, function(val)
		ESP.AnimalsDistance = val
		return 'Max distance: ' .. val
	end, 'ESPAnimalsDistance')

	UiTbl.espGroup:CheckBox("Only show legendary", function(bool)
		ESP.OnlyShowLegendary = bool
	end, "ESPShowLegendary")
	UiTbl.espGroup:CheckBox("Show Thunderstruck", function(bool)
		ESP.Thunderstruck = bool
	end, "ESPThunderstruck")

	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 10000,
		Default = 2000,

		Parent = UiTbl.espGroup:CheckBox("Show NPCs", function(bool)
			ESP.NPCs = bool
		end, "ESPNPCs")
	}, function(val)
		ESP.NPCDistance = val
		return 'Max distance: ' .. val
	end, 'ESPNPCDistance')

	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 10000,
		Default = 1000,
		Parent = UiTbl.espGroup:CheckBox("Show Dropped Items", function(bool)
			ESP.DroppedItems = bool
		end, "ESPDroppedItems"),
	}, function(val)
		ESP.DroppedItemsDistance = val
		return "Max Distance: " .. val
	end, "ESPDroppedItemsDistance")

	UiTbl.ShowPlayers = UiTbl.espGroup:CheckBox("Show Players", function(bool)
		ESP.Players = bool
	end, "ESPTogglePlayers").Click()

	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 10000,
		Default = 1000,
		Parent = UiTbl.espPlayersCb
	}, function(val)
		ESP.PlayersDistance = val
		return "Max Distance: " .. val
	end, "ESPPlayersDistance")

	UiTbl.espGroup:CheckBox("Show Teammates", function(bool)
		ESP.TeamMates = bool
	end, "ESPToggleTeamMates").Click()
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Team Color", function(bool)
		ESP.TeamColor = bool
	end, "ESPToggleTeamColor").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")
	
	Enter.Visible = false
	KeyTB.Visible = false
	
	--actual stuff--
	
	SharedModules = require(game.ReplicatedStorage:WaitForChild(KH_CONSTANT("SharedModules")):WaitForChild("Global"))
	while not SharedModules.IsInitialized do wait() end
	
	-- Quick respawn list
	do
		local SharedModules = SharedModules or getrenv()._G.Global
		local sharedData = SharedModules.SharedData
		local spawnInfo = rawget(sharedData, 'SpawnInfo')

		local clientState = SharedModules.ReplicatedState

		function Settings.SendNotification(str)
			game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "KiriotHub",
				Text = str,
				Icon = "rbxassetid://4698324000",
				Duration = 3,
			})
		end

		local sendNotification = Settings.SendNotification
		local function canSpawn(index)
			local data = spawnInfo[index]
			local hasBounty = clientState.State.Bounty > 0

			local cooldowns = clientState.State.SpawnCooldowns or {}
			local timestamp = SharedModules.SyncedTime:IsSynced() and SharedModules.SyncedTime:GetTime() or 0 

			local timer = cooldowns[index]
			if type(timer) == 'number' then
				sendNotification(string.format('Can\'t spawn at %q because you are on cooldown!', data.Name))
				return false
			end

		--	debugwarn(index)
		--	debugprint(SharedModules.PlayerData.Data.UnlockedSpawns[index])
		--	debugprint(sharedData.DefaultSpawns[index])

			if (not SharedModules.PlayerData.Data.UnlockedSpawns[index]) then
				if (not sharedData.DefaultSpawns[index]) then
					sendNotification(string.format('Can\'t spawn at %q because it is not unlocked!', data.Name))
					return false
				end
			end

			if data.Type == 'Citizen' and hasBounty then
			--	debugprint('cant spawn at', index, 'because we have a bounty')
				sendNotification(string.format('Can\'t spawn at %q because you have a bounty!', data.Name))
				return false
			end

			return true
		end

		if type(spawnInfo) == 'table' then
			local buttonUpdateList = {}

			local spawnList = {}
			for idx, info in next, spawnInfo do
				if not info.Name:find('Fort') then
					table.insert(spawnList, { info.Name, idx })
				end
			end

			table.sort(spawnList, function(a, b) return a[1] < b[1] end)

			for i = 1, #spawnList do
				local result = spawnList[i]
				local name, index = unpack(result)

				local enabled = true
				local button = UiTbl.respawnGroup:Button(name, function()
					if not enabled then return end

					if (not canSpawn(index)) then
						return
					end

				--	Network:FireServer('RespawnTriggered')
					Network:InvokeServer('Respawn', index)
				end)
			end
		end
	end

	Network = SharedModules.Network

	--stupid anticheat--
	if not isSnitch then
		--[[
			normal ping packet:
			{Client-Tick: tick(), Nonce: blabla} -> JSONEncode -> Global.AES.ECB_256 -> Global.AES.encrypt (parts) -> hex -> fire Polo

			detection packet:
			{Client-IP-Address: blabla} -> JSONEncode -> Global.AES.ECB_256 -> Global.AES.encrypt (parts) -> hex -> fire Polo

			Polo's 5th arg is the hex encoded data, and the 6th arg is that hex encoded data encoded with Global.CRC32.crc32
		]]
		local old
		old = hookfunc(game.HttpService.JSONEncode, function(self, tbl)
			if type(tbl) == "table" and table.find(getconstants(3), "StackSize") and not rawget(tbl, "SESSION") then --is vm and isn't the initial packet
				--[[if not rawget(tbl, "Client-Tick") then
					plr:Kick("[KiriotHub]: Stopped anticheat #1")
					debugwarn("PANIC")
					table.foreach(tbl, debugprint)
					return wait(9e9)
				end]]
				if rawget(tbl, "Client-IP-Address") then
					plr:Kick("[KiriotHub]: Stopped anticheat #1")
					debugwarn("PANIC")
					table.foreach(tbl, debugprint)
					return wait(9e9)
				end
				if not rawget(tbl, "Nonce") then
					plr:Kick("[KiriotHub]: Stopped anticheat #2")
					debugwarn("PANIC")
					table.foreach(tbl, debugprint)
					return wait(9e9)
				end
			end
			return old(self, tbl)
		end)

		local old
		old = hookfunc(math.random, function(...)
			local a, b = ... --math.random(nil, nil) errors
			if type(a) == "number" and type(b) == "number" and table.find(getconstants(3), "StackSize") then
				if a == 0 and b == 127 then
					debugwarn("random called")
					local called = false
					local bxor
					bxor = hookfunc(bit32.bxor, newcclosure(function(...)
						called = true
						hookfunc(bit32.bxor, bxor)
						local num = ...
						if num ~= 8487423 then --ping packet
							WildWestReport(tostring(num))
							plr:Kick("[KiriotHub]: Stopped anticheat #3")
							return wait(9e9)
						end
						return bxor(...)
					end))
					delay(2, function()
						if not called then
							WildWestReport("no call")
						end
					end)
				end
			end
			return old(...)
		end)

		--[[
			The proxied functions invoke at least 4 "check" functions (ScriptContextCheck, FunctionOrigin, VerifyTraceback, SynapseX) which don't return, so I nop those  
		]]
		local count = 0
		while count < 5 do
			for i,v in pairs(getgc(true)) do
				if type(v) == "table" and rawget(v, "Constants") and type(v.Constants) == "table" and table.find(v.Constants, "CharacterReplicate") then
					v.Instructions = {v.Instructions[#v.Instructions]}
					v.NInstructions = 1
					count = count + 1
				end
			end
			wait(2)
		end

		local KnownFlags = {
			LowerStamina = true,
			DamageSelf = true,
			ClientNotification = true,
			CharacterReplicate = true,
			ClientEvent = true
		}
		local RepCharHandler = SharedModules.RepCharHandler

		local FlagsConstant
		do
			local consts = getconstantsnc(RepCharHandler.ReplicateCharacters)
			for i,v in pairs(consts) do
				if v == "SetRootCFrame" then
					FlagsConstant = consts[i + 1]
					debugprint("flag", FlagsConstant)
					break
				end
			end
		end

		if not FlagsConstant or not RepCharHandler[FlagsConstant] then
			return plr:Kick("[KiriotHub]: Failed to load #2")
		end

		local mt = getrawmetatable(RepCharHandler[FlagsConstant])
		local old = mt.__newindex
		mt.__newindex = function(self, i, v)
			if not KnownFlags[i] then
				return plr:Kick("Report this in #bugs: " .. khenc(tostring(i)):reverse())
			end

			if (i == "LowerStamina" and Settings.InfStamina) or (i == "DamageSelf" and Settings.NoSelfDamage) or i == "ClientNotification" or i == "CharacterReplicate" or i == "ClientEvent" then
				return debugwarn("stopped", i, "from", debug.traceback())
			end
			return old(self, i, v)
		end
	end

	local getSpreadVector, getNextProjectileSeed do
		local function randomVector(random, direction, accuracy)
	        local cf = CFrame.new(Vector3.new(), direction) * CFrame.Angles(0, 0, random:NextNumber(0, 2 * math.pi)) * CFrame.Angles(math.acos(random:NextNumber(math.cos(accuracy), 1)), 0, 0)
	        return cf.lookVector
	    end

	    function getSpreadVector(seed, fireDirection, accuracy)
	        local r1 = Random.new(seed)

	        local v1 = randomVector(r1, fireDirection, accuracy) - fireDirection
	        return fireDirection - v1
	    end

	    function getNextProjectileSeed()
			local old = getupvalue(SharedModules.ProjectileHandler.GenerateProjectileSeed, 1)
			local clone = old:Clone()

			setupvalue(SharedModules.ProjectileHandler.GenerateProjectileSeed, 1, clone)
			local result = SharedModules.ProjectileHandler:GenerateProjectileSeed()
			setupvalue(SharedModules.ProjectileHandler.GenerateProjectileSeed, 1, old)

			return result
		end
	end

	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		UiTbl.wlGroup:Expand(false)
		Gui:Destroy()
	end)

	local old = Network.FireServer
	local marked = {}
	local function forceHitTarget(info)
		task.wait(info.time)

		for _, bullet in next, info.bullets do
			local ref = Network:GetReference(info.target, 'CharacterPart')

			debugprint('forceHitTarget-> player=', info.player)
			debugprint('CharacterPart ref-> target=',info.target, ' ref=', ref~=nil)

			if not (info.player and not ref) then
				debugprint('Hitting target', info.target)

				old(
					Network,
					'ProjectileEvent',
					bullet,
					SharedModules.SyncedTime:GetTime(),
					'Final',
					(info.npc and { info.target.Parent.Parent, info.target.Name }) or (info.animal and info.target) or ref,
					info.cframe:PointToObjectSpace(info.hitPos), 
					info.cframe:VectorToObjectSpace(Vector3.FromNormalId(Enum.NormalId.Front)), 
					info.cframe:VectorToObjectSpace(info.velocity.unit),
					info.hitPos, 
					Vector3.FromNormalId(Enum.NormalId.Front), 
					info.target.Material.Name
				)
				
				task.defer(old, Network, 'RemoveProjectile', bullet)
				marked[bullet] = nil
			end
		end
	end

	
	local function markBullets(tb)
		if type(tb) == 'table' then
			for _, bullet in next, tb do
				marked[bullet] = true
			end
		end
	end

	local function isPartVisible(part)
		local cameraPos = workspace.CurrentCamera.CFrame.p

		local ray = Ray.new(cameraPos, (part.Position - cameraPos))
		local ignore = {
			plr.Character,
			part.Parent,
			workspace:FindFirstChild("Ignore")
		}

		local hit = workspace:FindPartOnRayWithIgnoreList(ray, ignore)
		if hit then
			return false
		end

		return true
	end

	local function GetPositionAtTime(origin, velocity, time, gravity)
		return origin + velocity * time + 0.5 * gravity * time ^ 2;
	end

	Network.FireServer = wwguard(old, function(self, action, ...)
		local args = {...}
		
		if action == "LowerStamina" and Settings.InfStamina then
			return
		elseif (action == "DamageSelf" or action == 'TrainSmack') and Settings.NoSelfDamage then
			return
		end
		
		if action == "CharUpdate" then
			if antiTpDebounce then
				spawn(function()
					antiTpDebounce = false
					--UiTbl.noAntiTpCb.Enabled = true
				end)
				args[2] = ""
				return old(self, action, unpack(args))
			end
			if Settings.NoAntiTp then
				args[2] = ""
				return old(self, action, unpack(args))
			end
		end

		if action == 'InitProjectiles' then
			-- hook here to abuse passing projectile arguments by reference

			local gun = SharedModules.PlayerCharacter:GetEquippedItem()
			local projectileData = args[2]

			local sharedData = type(gun) == 'table' and rawget(gun, 'SharedData')
			local foundTarget = false

			-- foundTarget is for No Spread causing silent aim to break if they were both enabled (no spread would shift the direction away after the silent aim corrected it)

			local stack = debug.validlevel(3) and debug.getstack(3) or {}
			local projectileType = stack[2]

			if type(projectileType) ~= 'string' then
				debugwarn('projtype wrong #1', type(projectileType))
			elseif not projectileType:find('Projectile') then
				debugwarn('projtype wrong #2', projectileType)
			end

			debugprint('got it', projectileType)

			if Settings.SilentAim then
				local target = GetTarget(true)
				debugwarn('silent aim-> target=', target)
				
				if target and type(gun) == 'table' and type(sharedData) == 'table' then
					debugwarn('doing the silent aim')
					local speed = (projectileType == 'TomahawkProjectile' and 200) or sharedData.ProjectilePower
					local gravity = (projectileType == 'TomahawkProjectile' and Vector3.new(0, -150, 0)) or sharedData.Gravity or Vector3.new(0, -32, 0)

					if type(sharedData.GravityMultiplier) == 'number' then
						gravity = gravity * sharedData.GravityMultiplier
					end

					if type(projectileData.power) == 'number' and type(projectileData.drawStart) == 'number' then
						local power = math.min(projectileData.power, 1)
						if projectileData.arrowType == 'ExplosiveArrow' then
							speed = NewLib.CalculateValFromPercent(sharedData.MinPowerExplosive, sharedData.MaxPowerExplosive, power)
						else
							speed = NewLib.CalculateValFromPercent(sharedData.MinPower, sharedData.MaxPower, power)
						end
					end

					local tCframe = target.CFrame
					local tPosition = target.Position
					local origin = projectileData.origin

					local trajectory, time = Aimbot:_solveTime(origin, speed, tPosition, math.abs(gravity.Y))
					if trajectory then
						debugwarn('found trajectory')
						local direction = trajectory.Unit

						local pAccuracy = sharedData.ProjectileAccuracy or 1
	                    if projectileData.ammoType == 'ShotgunRound' then
	                        pAccuracy = pAccuracy * (sharedData.ShotgunRoundAccuracy or 1)
	                    end

	                    local radians = (sharedData.NumProjectiles or 1) > 1 and math.rad(10) or math.rad(12.5)
	                    local accuracy = radians * math.clamp(1 - pAccuracy, 0, 1)

						if projectileType ~= 'TomahawkProjectile' then
							projectileData.direction = getSpreadVector(projectileData.seed, direction, accuracy)
							projectileData.accuracy = 1; -- force 1
						else
							projectileData.direction = direction
						end

						if type(projectileData.power) == 'number' and type(projectileData.drawStart) ~= 'number' then
							projectileData.power = 1
						end

						foundTarget = true
						if Settings.BackTrack then
							local pass = isPartVisible(target) 
							if (Settings.WallBang) then 
								pass = true
							end

							debugwarn('backtrack-> pass=', pass)
							if pass then
								local hit, pos = workspace:FindPartOnRayWithWhitelist(Ray.new(origin, tPosition - origin), { target })
								
							--	local pos = GetPositionAtTime(origin, direction*speed, time, gravity)
								debugwarn('backtrack-> pos=', pos)

								old(self, action, unpack(args))
								markBullets(args[3])
								debugwarn('backtrack-> fired & marked bullets')

								task.spawn(forceHitTarget, {
									cframe = tCframe,
									hitPos = pos,

									player = not not game.Players:GetPlayerFromCharacter(target.Parent),
									animal = target:IsDescendantOf(workspace:WaitForChild("WORKSPACE_Entities"):WaitForChild("Animals")),
									npc = target:IsDescendantOf(workspace:WaitForChild("WORKSPACE_Entities"):WaitForChild("NPCs")),

									origin = origin,
									direction = direction,
									speed = speed,
									velocity = direction*speed,
									time = time,

									startTime = SharedModules.SyncedTime:GetTime(),

									target = target,
									bullets = args[3]
								})

								return
							end
						end
					end
				end
			end

			-- we can do no spread here too :3
			if (not foundTarget) and Settings.NoSpread and type(gun) == 'table' and type(sharedData) == 'table' and type(projectileData) == 'table' and projectileType ~= 'TomahawkProjectile' then
				local pAccuracy = sharedData.ProjectileAccuracy or 1
                if projectileData.ammoType == 'ShotgunRound' then
                    pAccuracy = pAccuracy * (sharedData.ShotgunRoundAccuracy or 1)
                end

                local radians = (sharedData.NumProjectiles or 1) > 1 and math.rad(10) or math.rad(12.5)
                local accuracy = radians * math.clamp(1 - pAccuracy, 0, 1)

				projectileData.accuracy = 1
				projectileData.direction = getSpreadVector(projectileData.seed, projectileData.direction, accuracy)
			end
		elseif action == 'ProjectileEvent' or action == 'RemoveProjectile' then
			if marked[args[1]] then
				return
			end

			if args[3] == 'Final' and args[4] == nil then
				debugprint("blocked the error")
				return -- shitty way to hide the wallbang errors
			end
		end

		return old(self, action, unpack(args))
	end)
	
	--Inf Stamina--
	LoadWithoutDebugSetting('InfStamina', function()
		local ReplicatedState = SharedModules.ReplicatedState
		
		local realStamina = ReplicatedState.State.Stamina
		setmetatable(ReplicatedState.State, {
			__index = function(self, i)
				if i == "Stamina" then
					return Settings.InfStamina and 100 or realStamina
				end
				return nil
			end,
			__newindex = function(self,i,v)
				if i == "Stamina" then
					realStamina = v
					return
				end
				return rawset(self,i,v)
			end
		})
		ReplicatedState.State.Stamina = nil
	end)

	--Health Bars--
	LoadWithoutDebugSetting('HealthBars', function()
		ESP:AddGlobalPlayerBar('Health', { Color = Color3.fromRGB(0, 255, 140) }, function(box, bar)
			local state = SharedModules.ReplicatedState:GetPlayerState(box.Player)
			while not state do
				task.wait(1)
				state = SharedModules.ReplicatedState:GetPlayerState(box.Player)
			end

			local function update()
				local health = state.State.Health or 100
				local maxHealth = state.State.MaxHealth or 100

				bar.Value = health / maxHealth
			end

			task.spawn(update)
			state:GetStateChangedSignal('Health'):Connect(update)
			state:GetStateChangedSignal('MaxHealth'):Connect(update)
		end)
	end)

	--No Jump Cooldown--
	LoadWithoutDebugSetting('NoJumpCooldown', function()
		local old = {}
		old[1] = hookmetamethod(game, "__newindex", loadstring([[
			local old, Settings, plr, sss = ...
			
			return function(self,i,v)
				if i == "Jump" and Settings.NoJumpCooldown and self.ClassName == "Humanoid" and not v then
					return
				elseif (i == "Color" or i == "BrickColor") and self == workspace.Terrain and not sss then
					--plr:Kick("uh oh " .. tostring(i == "Color" and (v.r * 255 .. " " .. v.g * 255 .. " " .. v.b * 255) or v) .. "\n" .. debug.traceback())
					if checkcaller() then
						sss = true
						return
					else
						plr:Kick("[KiriotHub]: Stopped detection")
						return Instance.new("BindableEvent").Event:Wait()
					end
				end
				
				return old[1](self,i,v)
			end
		]])(old, Settings, plr, isSnitch))
	end)
		
	--Ragdoll fly
	LoadWithoutDebugSetting('RagdollFly', function()
		local PlrState = SharedModules.ReplicatedState
		local UserInputService = game:GetService('UserInputService')

		game:GetService('RunService').Heartbeat:Connect(function(delta)
			if Settings.RagdollFly and plr.Character and plr.Character:FindFirstChild('HumanoidRootPart') then
				local character = plr.Character
				local root = character.HumanoidRootPart

				if not Settings.FlyCF then
					Settings.FlyCF = CFrame.new(root.CFrame.p)
				end

				local mouse = plr:GetMouse()
				local camCF = Settings.RagdollFlyFollowMouse and mouse.Hit or workspace.CurrentCamera.CFrame
				local speed = Settings.RagdollFlySpeed * delta

				local force = Vector3.new()

				if UserInputService:IsKeyDown(Enum.KeyCode.W) then force = force + (camCF.lookVector   * speed) end
				if UserInputService:IsKeyDown(Enum.KeyCode.S) then force = force + (-camCF.lookVector  * speed) end
				if UserInputService:IsKeyDown(Enum.KeyCode.A) then force = force + (-camCF.rightVector * speed) end
				if UserInputService:IsKeyDown(Enum.KeyCode.D) then force = force + (camCF.rightVector  * speed) end

				if UserInputService:IsKeyDown(Enum.KeyCode.Space) then force = force + (camCF.upVector  * speed) end
				if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then force = force + (-camCF.upVector  * speed) end

				Settings.FlyCF = Settings.FlyCF * CFrame.new(force)

				root.CFrame = CFrame.lookAt(Settings.FlyCF.p, camCF.p + (camCF.lookVector * 10000))
				root.Velocity = Vector3.new()
			else
				Settings.FlyCF = nil;
			end
		end)

		Network:BindEvents({
			ACTrigger = function(...) 
				if Settings.RagdollFly and Settings.RagdollFlyLagbackDisable then
					Settings.SendNotification('Disabled Ragdoll fly because you triggered the anticheat.')
					UiTbl.RagdollFly.Click()
				end
			end,
		})
	end)

	--No Ragdoll--
	LoadWithoutDebugSetting('Ragdoll', function()
		local old = SharedModules.PlayerCharacter.Ragdoll
		SharedModules.PlayerCharacter.Ragdoll = wwguard(old, function(...)
			if Settings.NoRagdoll then
				return
			end
			
			return old(...)
		end)
	end)

	LoadWithoutDebugSetting('RemoveHotbarCooldown', function()
		local hotbar = SharedModules.Hotbar
		local hotbarUpdate = hotbar.Update
		function hotbar.Update(...)
			if Settings.NoHotbarCooldown then
				table.clear(SharedModules.ReplicatedState.State.RecentlyAddedToLoadout)
				table.clear(SharedModules.PlayerData.LocalRecentlyAddedToLoadout)
			end
			return hotbarUpdate(...)
		end
		local getLockedItem = SharedModules.PlayerData.GetLockedItem
		function SharedModules.PlayerData:GetLockedItem(...)
			if Settings.NoHotbarCooldown then
				return nil
			end
			return getLockedItem(self, ...)
		end
		local isItemTypeLocked = SharedModules.PlayerData.IsItemTypeLocked
		function SharedModules.PlayerData:IsItemTypeLocked(...)
			if Settings.NoHotbarCooldown then
				return false
			end
			return isItemTypeLocked(self, ...)
		end
	end)

	
	--Break Free, Auto Get Up--
	LoadWithoutDebugSetting('GetUp', function()
		local BreakFreePerc = SharedModules.PlayerCharacter.BreakFreePerc
		setmetatable(SharedModules.PlayerCharacter, {
			__index = function(self, i)
				if i == "BreakFreePerc" then
					return BreakFreePerc
				end
				return nil
			end,
			__newindex = function(self, i, v)
				if i == "BreakFreePerc" then
					BreakFreePerc = v
					if Settings.AutoBreakFree and v > 0 then
						BreakFreePerc = 1
					end
					return
				end
				return rawset(self, i, v)
			end
		})
		SharedModules.PlayerCharacter.BreakFreePerc = nil

		task.spawn(function()
			while true do
				game:GetService('RunService').Heartbeat:Wait()
				if SharedModules.PlayerCharacter:CanGetUp() and Settings.AutoGetUp then
					Network:InvokeServer('AttemptGetUp')
				end
			end
		end)
	end)

	
	--Horse Boosts, Horse Swim, Camera Lock--
	LoadWithoutDebugSetting('Horse', function()
		local old = SharedModules.Animal.Update
		SharedModules.Animal.Update = function(self, ...)
			if Settings.HorseSprint then
				self.BoostTimer = tick()
			end
			return old(self, ...)
		end

		local old = SharedModules.Animal.Ragdoll
		SharedModules.Animal.Ragdoll = wwguard(old, function(...)
			if Settings.NoHorseRagdoll then
				return
			end
			return old(...)
		end)

		local old = SharedModules.Horse.Update
		SharedModules.Horse.Update = function(self, ...)
			-- if Settings.HorseSprint then
			-- 	self.Boosts = self.MaxBoosts
			-- end
			if Settings.HorseSpeed and game:GetService('UserInputService'):IsKeyDown(Enum.KeyCode.W) then
				self.WalkSpeedGoal = self.MaxSpeed * Settings.HorseSpeedScale
			end
			return old(self, ...)
		end

		local old = SharedModules.Horse.ControlUpdate
		SharedModules.Horse.ControlUpdate = function(self, ...)
			if Settings.HorseSwim then
				self.Swimming = false
			end
			return old(self, ...)
		end

		getfenv(SharedModules.Camera.UpdateCustomCamera)

		local atan2
		atan2 = hookfunction(getrenv().math.atan2, function(...)
			if Settings.NoHorseCameraLock and getinfo(3).name == 'UpdateCustomCamera' then
				local stk = getstack(3)
				if typeof(stk[31]) == 'CFrame' then
					debug.setstack(3, 15, -math.rad(360))
					debug.setstack(3, 16, math.rad(360))
				end
			end
			return atan2(...)
		end)

	end)

	--Headshot sound
	LoadWithoutDebugSetting('HeadshotSound', function()
		local OldGiveDamageNotification = SharedModules.UIHandler.GiveDamageNotification
		local headshotSounds = {
			Rust = 'rbxassetid://5043539486',
			Skeet = 'rbxassetid://5447626464',
		}

		local headShotSound = NewLib.Create('Sound', {
			Volume = 10,
			Pitch = 1,
			SoundId = 'rbxassetid://5043539486',
		})

		syn.protect_gui(headShotSound)
		headShotSound.Parent = game:GetService('CoreGui')

		function SharedModules.UIHandler.GiveDamageNotification(self, ...)
			local args = { ... }
			if type(args[1]) == 'table' and args[1].isHeadshot and Settings.CustomHeadshotSound then
				task.spawn(function() -- this fixed the headshot sounds for whatever reason ik its ugly leave it alone <3
					syn.set_thread_identity(7)
					if Settings.HeadShotSound == 'Custom' then
						if type(Settings.CustomHeadshotSoundId) == 'string' and headShotSound.SoundId ~= Settings.CustomHeadshotSoundId then
							headShotSound.SoundId = Settings.CustomHeadshotSoundId
						end
					else
						headShotSound.SoundId = headshotSounds[Settings.HeadShotSound or 'Skeet']
					end

					headShotSound:Play()
					syn.set_thread_identity(6)
				end)
			end
			return OldGiveDamageNotification(self, unpack(args))
		end
	end)
	
	--Map--
	local GetPlayerColor, PlayerData, Map
	task.spawn(function()
		Map = SharedModules[KH_CONSTANT("Map")]
		local mathf = SharedModules.Mathf
		local Leaderboard = SharedModules.Leaderboard
		
		PlayerData = getupvalues(getupvalues(Leaderboard.UpdatePlayers)[2].new)[7]
		local MarkerData = getupvalue(getupvalue(Map.CreateWorldMarker, 1).new, 1) --the table with Player in it
		
		local template = MarkerData.Player.Marker:Clone()
		local cursor = plr.PlayerGui:WaitForChild("Cursor"):WaitForChild("Cursors"):WaitForChild("Cursor_Image"):WaitForChild("Cursor")
		local oldCursorImage = cursor.Image
		local oldCursorSize = cursor.Size
		
		local mapStart = workspace.Ignore.MapStart.Position
		local mapEnd = workspace.Ignore.MapEnd.Position
		
		local function MapPosToVector3(pos)
			local x = pos.X.Scale
			local z = pos.Y.Scale
		
			local mapStart = workspace.Ignore.MapStart.Position
			local mapEnd = workspace.Ignore.MapEnd.Position
			
			local min,max = mapStart.X, mapEnd.X
			local percent = x
					
			local newX = math.floor(max*percent + (min* (1-percent)))
			
			local min,max = mapStart.Z, mapEnd.Z
			local percent = z
					
			local newZ = math.floor(max*percent + (min* (1-percent)))
		
			return Vector3.new(newX,0,newZ + 30) --fix inaccuracy?
		end
		
		GetPlayerColor = function(p)
			local data = PlayerData[p]
			if not data then
				--[[for i,v in pairs(getupvalues(getupvalues(Leaderboard.UpdatePlayers)[2].new)) do
					if type(v) == "table" and v[p] then
						debugwarn("index",i,"you dumbass")
					end
				end]]
				return Color3.new(0.996078, 0.952941, 0.733333), "Law"
			end
			
			local status = data.StateObject.State

			if status.CriminalStatus then
				local cs = status.CriminalStatus
				if cs == "Menace" then
					return Color3.fromRGB(255, 38, 38), "Outlaw"
				elseif cs == "Wanted" then
					return Color3.fromRGB(191, 100, 26), "Outlaw"
				else
					return Color3.fromRGB(125, 0, 0), "Outlaw"
				end
			end
			
			if status.Role == "Sheriff" then
				return Color3.fromRGB(26, 92, 214), "Law"
			end
			
			if status.Role == "Mayor" then
				return Color3.fromRGB(255, 200, 0), "Law"
			end

			if status.Role == "Citizen" then
				return Color3.fromRGB(18, 21, 29), "Law"
			end

			if status.Role == "Law" then
				return Color3.fromRGB(0, 41, 117), "Law"
			end

			if status.Role == "Outlaw" then
				return Color3.fromRGB(191, 100, 26), "Outlaw"
			end

			if status.Role == "Skulled" then
				return Color3.fromRGB(125, 0, 0), "Outlaw"
			end
			
			if p.Team and p.Team.Name == "Lawmen" then
				return Color3.fromRGB(26, 92, 214), "Law"
			end
	
			--return Color3.new(1,1,1), "Law"
			return Color3.new(0.996078, 0.952941, 0.733333), "Law"
		end
		
		local MapContainer = MarkerData.Player.Parent.Parent
		local tpCover = Instance.new("TextButton", MapContainer)
		tpCover.Text = ""
		tpCover.BackgroundTransparency = 1
		tpCover.Size = UDim2.new(1,0,1,0)
		tpCover.ZIndex = 999
		tpCover.Visible = false
		tpCover.MouseButton1Down:Connect(function(x,y)
			tpCover.Visible = false
			cursor.Image = oldCursorImage
			cursor.AnchorPoint = Vector2.new(0.5,0.5)
			cursor.Rotation = 0
			cursor.Size = oldCursorSize
	
			x = x - tpCover.AbsolutePosition.X
			y = y - tpCover.AbsolutePosition.Y
	
			local scaleX = x/MapContainer.AbsoluteSize.X
			local scaleY = y/MapContainer.AbsoluteSize.Y
	
			local worldPos = MapPosToVector3(UDim2.new(scaleX,0,scaleY,0)) + Vector3.new(0,600,0)
			
			local ray = Ray.new(worldPos, CFrame.new(worldPos, worldPos + Vector3.new(0,-600,0)).LookVector.Unit * 600)
			local part, pos = workspace:FindPartOnRay(ray)
			if part then
				Map:Close()
				plr.Character:MoveTo(pos)
			end
		end)

		--[[local tpButton = Map.ExitButton:Clone()
		tpButton.Parent = Map.ExitButton.Parent
		tpButton.Container.TextLabel.Text = "[KH] Teleport"
		tpButton.Container.BackgroundColor3 = Color3.fromRGB(245, 182, 66)
		tpButton.Container.Gradient:Destroy()
		tpButton.Position = UDim2.new(1,0,0.3,0)
		tpButton.Visible = true
		tpButton.MouseEnter:Connect(function()
			tpButton.UIScale.Scale = 1.1;
		end)
		tpButton.MouseLeave:Connect(function()
			tpButton.UIScale.Scale = 1;
		end)
		tpButton.MouseButton1Down:Connect(function()
			oldCursorImage = cursor.Image
			cursor.Image = "rbxassetid://3519905876"
			cursor.AnchorPoint = Vector2.new(0.5,1)
			cursor.Size = UDim2.new(0,MarkerData.Player.Marker.Icon.AbsoluteSize.X,0,MarkerData.Player.Marker.Icon.AbsoluteSize.Y)
			cursor.Rotation = 90
			tpCover.Visible = true
		end)]]
		
		local old = Map.Update
		Map.Update = loadstring([[
		local old, Map, MarkerData, template, mathf, GetPlayerColor, mapStart, mapEnd = ...

		return function(...)
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				local char = v.Character
			
				if char and char.PrimaryPart and v ~= plr then
					local new = MarkerData.Player.Parent:FindFirstChild("Plr_" .. v.Name)
					if not new then
						new = template:Clone()
						new.Parent = MarkerData.Player.Parent
						new.Name = "Plr_" .. v.Name
						new.ZIndex = 8
						new.Visible = true
						new.Icon.ImageColor3 = Color3.fromRGB(44, 24, 224)
					
						local name = Instance.new("TextLabel", new)
						name.BackgroundTransparency = 1
						name.Size = UDim2.new(1,0,1,0)
						name.TextSize = 14
						name.Font = "SourceSansBold"
						name.TextColor3 = Color3.new(1,1,1)
						name.Position = UDim2.new(0,0,-0.5,0)
						name.Text = v.Name
						name.ZIndex = 9
						name.TextWrapped = false
					end
			
					local hrp = char.PrimaryPart
					local hrpPos = hrp.Position
					local lookVector = hrp.CFrame.lookVector
		
					new.Position = UDim2.new(mathf.PercentBetween(hrpPos.X, mapStart.X, mapEnd.X), 0, mathf.PercentBetween(hrpPos.Z, mapStart.Z, mapEnd.Z), 0)
					new.Rotation = 270 + math.deg((math.atan2(lookVector.Z, lookVector.X)))
					new.Icon.ImageColor3 = GetPlayerColor(v)
					new.Visible = Map.Opened
				end
			end
			return old(...)
		end]])(old, Map, MarkerData, template, mathf, GetPlayerColor, mapStart, mapEnd)

		game:GetService("Players").PlayerRemoving:Connect(function(p)
			local img = MarkerData.Player.Parent:FindFirstChild("Plr_" .. p.Name)
			if img then
				img:Destroy()
			end
		end)
	end)
	
	--Silent Aim--
	local cam = workspace.CurrentCamera


	-- FactionCheck
	local function GetPlayerState(p)
		return SharedModules.ReplicatedState:GetPlayerState(p)
	end


	local function IsAlive(p)
		local state = GetPlayerState(p)
		if state then
			local health = state.State.Health or 0
			return health > 0
		end
		return false 
	end

	local function IsProtected(p)
		local state = GetPlayerState(p)
		if state then
			local status = state.State.ProtectionStatus
			return status == 'Protected' or status == 'OutlawProtected'
		end
		return false
	end

	
	local function GetEnemies()
		local new = {}
		local team = ESP:GetTeam(plr)

		local PlrState = SharedModules.ReplicatedState
		local Friendly = PlrState.State.WeaponSafetyEnabled
		local DuelingPlayer = PlrState.State.DuelingPlayer

		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			if v ~= plr and (not Settings.Whitelist[v.Name]) and IsAlive(v) and (not IsProtected(v)) then
				local pass = true
				local state = GetPlayerState(v)

				if v ~= DuelingPlayer then
					if Settings.FriendlyCheck and (Friendly and ESP:GetTeam(v) == team) then
						pass = false
					end

					local FactionId = PlrState.State.CurrentFactionId
					if Settings.FactionCheck and (FactionId and state.State.CurrentFactionId == FactionId and Settings.FactionCheck) then
						pass = false;
					end
				end

				if pass then
					new[#new + 1] = v
				end
			end
		end
		
		return new
	end

	local function GetAnimals()
		local list = {}

		for _, animal in next, workspace:WaitForChild("WORKSPACE_Entities"):WaitForChild("Animals"):GetChildren() do
			local health = animal:FindFirstChild('Health')
			local isAlive = health and health.Value > 0

			if isAlive then
				list[#list + 1] = animal
			end
		end

		return list
	end

	Settings.GetEnemies = GetEnemies
	Aimbot:Register(GetEnemies, Settings)
	Aimbot:SetValidator(function()
		local gun = SharedModules.PlayerCharacter:GetEquippedItem()
		if not gun.Ammo or not gun.SharedData or not gun.SharedData.ProjectilePower then
			return false
		end
		--[[local power = SharedModules.SharedData.PlayerItems[gun.Name].ProjectilePower
		if not power then
			return false
		end]]
		Aimbot.BulletSpeed = gun.SharedData.ProjectilePower
		Aimbot.Gravity = gun.SharedData.Gravity and gun.SharedData.Gravity.Y or -32
		return true
	end)
	Aimbot.Prediction = true

	local animalsCache = {}
	local npcsCache = {} 

	task.spawn(function()
		local animals = workspace:WaitForChild("WORKSPACE_Entities"):WaitForChild("Animals")
		local npcs = workspace:WaitForChild("WORKSPACE_Entities"):WaitForChild("NPCs")

		local function onNpcAdded(npc)
			local map = {}

			local connections = {}
			local function clean()
				for i = #connections, 1, -1 do
					local con = table.remove(connections, i)
					if con then 
						con:disconnect()
					end
				end
			end

			local function give(con)
				table.insert(connections, con)
			end

			local function died()
				local index = table.find(npcsCache, map)
				if index then
					table.remove(npcsCache, index)
				end
				clean()
			end

			debugwarn('npc added', npc:GetFullName())
			local body = npc:FindFirstChildWhichIsA('Model')
			while not body do
				task.wait(0.1)
				body = npc:FindFirstChildWhichIsA('Model')
			end
			debugwarn('npc loaded', npc:GetFullName())

			give(npc:GetAttributeChangedSignal('Health'):Connect(function()
				local num = npc:GetAttribute('Health')
				map.health = type(num) == 'number' and num or 0
			end))

			map.root = body:WaitForChild('HumanoidRootPart', 10)
			map.head = body:WaitForChild('Head', 10)
			map.health = npc:GetAttribute('Health') or 0 
			map.body = body
			map.name = npc.Name

			table.insert(npcsCache, map)
		end

		local function onAnimalAdded(animal)
			local map = {}

			local connections = {}
			local function clean()
				for i = #connections, 1, -1 do
					local con = table.remove(connections, i)
					if con then 
						con:disconnect()
					end
				end
			end

			local function give(con)
				table.insert(connections, con)
			end

			local function died()
				local index = table.find(animalsCache, map)
				if index then
					table.remove(animalsCache, index)
				end
				clean()
			end

			local head = animal:WaitForChild('Head', 10)
			local root = animal:WaitForChild('HumanoidRootPart', 10)
			local health = animal:WaitForChild('Health', 10)

			if not head or not root or not health then return end

			give(health:GetPropertyChangedSignal('Value'):Connect(function()
				map.health = health.Value
				if health.Value <= 0 then
					task.spawn(died)
				end
			end))

			map.head = head
			map.root = root
			map.health = health.Value
			map.body = animal

			table.insert(animalsCache, map)
		end

		animals.ChildAdded:Connect(onAnimalAdded)
		npcs.ChildAdded:Connect(onNpcAdded)

		for _, animal in next, animals:GetChildren() do
			task.spawn(onAnimalAdded, animal)
		end

		for _, npc in next, npcs:GetChildren() do
			task.spawn(onNpcAdded, npc)
		end
	end)

	function GetTarget(chance, ignoreDist)
		local camPos = cam.CFrame.p
		
		local clPos,clPart,clModel
		local clAnimalPos, clAnimalPart, clAnimalModel
		local clNpcPos, clNpcPart, clNpcModel

		for i,v in pairs(GetEnemies()) do
			if v.Character and v.Character.Parent then
				local part = v.Character:findFirstChild(Settings.BoneNames[Aimbot.AimPart] or Aimbot.AimPart)

				if chance and math.random(1, 100) >= Settings.HeadshotChance and Aimbot.AimPart == 'Head' then
					part = v.Character:FindFirstChild(Settings.BoneNames.Torso)
				end

				if part then
					local p,vis = cam:WorldToViewportPoint(part.Position)
					if vis then
						local startPos = camPos
						
						local workspaceDist = (cam.CFrame.p - part.Position).magnitude
						
						local ray = Ray.new(startPos, CFrame.new(cam.CFrame.p, part.Position).LookVector.Unit * p.Z)
						
						local hit
						if Settings.VisCheck then
							local ignore = {}
							ignore[#ignore + 1] = plr.Character
							ignore[#ignore + 1] = part.Parent
							ignore[#ignore + 1] = workspace:FindFirstChild("Ignore")
							
							hit = workspace:FindPartOnRayWithIgnoreList(ray, ignore)
						end
						if not hit and (workspaceDist <= Settings.AimDistance or ignoreDist) then
							local dist
							local ok = true
							if Settings.AimMode == "Cursor" then
								dist = (Vector3.new(mouse.X,mouse.Y+36,0) - Vector3.new(p.X,p.Y,0)).magnitude
								ok = dist <= Settings.FOVRange
							elseif Settings.AimMode == "Character" then
								dist = (camPos - part.Position).magnitude
							end
							if not clPos and ok then
								clPos = dist
								clPart = part
								clModel = v.Character
							end
							if ok and dist and dist < clPos then
								clPos = dist
								clPart = part
								clModel = v.Character
							end
						end
					end
				end
			end
		end

		
		for i = 1, #animalsCache do
			local animal = animalsCache[i]
			local root = animal.root
			local head = animal.head

			if root and head and ESP[animal.body.Name] then
				local part = head
				local pos, vis = cam:WorldToViewportPoint(part.Position)

				if vis then
					local startPos = camPos
					local workspaceDist = (cam.CFrame.p - part.Position).magnitude
					local ray = Ray.new(startPos, CFrame.new(cam.CFrame.p, part.Position).LookVector.Unit * pos.Z)

					local hit
					if Settings.VisCheck then
						local ignore = {}
						ignore[#ignore + 1] = plr.Character
						ignore[#ignore + 1] = part.Parent
						ignore[#ignore + 1] = workspace:FindFirstChild("Ignore")
						hit = workspace:FindPartOnRayWithIgnoreList(ray, ignore)
					end

					if not hit and (workspaceDist <= Settings.AimDistance or ignoreDist) then
						local dist
						local ok = true
						if Settings.AimMode == "Cursor" then
							dist = (Vector3.new(mouse.X,mouse.Y+36,0) - Vector3.new(pos.X, pos.Y,0)).magnitude
							ok = dist <= Settings.FOVRange
						elseif Settings.AimMode == "Character" then
							dist = (camPos - part.Position).magnitude
						end
						if not clAnimalPos and ok then
							clAnimalPos = dist
							clAnimalPart = part
							clAnimalModel = animal.body
						end
						if ok and dist and dist < clAnimalPos then
							clAnimalPos = dist
							clAnimalPart = part
							clAnimalModel = animal.body
						end
					end
				end
			end
		end

		for i = 1, #npcsCache do
			local npc = npcsCache[i]
			local root = npc.root
			local head = npc.head

			local canAttackNpc = true 
			local bounty = SharedModules.ReplicatedState.State.Bounty or 0

			if npc.name == 'Elf' and bounty <= 0 then
				canAttackNpc = false
			elseif npc.Name == 'EvilSnowman' and bounty >= 0 then
				canAttackNpc = false
			end

			if root and head and canAttackNpc and npc.health > 0 then
				local part = head
				local pos, vis = cam:WorldToViewportPoint(part.Position)

				if vis then
					local startPos = camPos
					local workspaceDist = (cam.CFrame.p - part.Position).magnitude
					local ray = Ray.new(startPos, CFrame.new(cam.CFrame.p, part.Position).LookVector.Unit * pos.Z)

					local hit
					if Settings.VisCheck then
						local ignore = {}
						ignore[#ignore + 1] = plr.Character
						ignore[#ignore + 1] = part.Parent
						ignore[#ignore + 1] = workspace:FindFirstChild("Ignore")
						hit = workspace:FindPartOnRayWithIgnoreList(ray, ignore)
					end

					if not hit and (workspaceDist <= Settings.AimDistance or ignoreDist) then
						local dist
						local ok = true
						if Settings.AimMode == "Cursor" then
							dist = (Vector3.new(mouse.X,mouse.Y+36,0) - Vector3.new(pos.X, pos.Y,0)).magnitude
							ok = dist <= Settings.FOVRange
						elseif Settings.AimMode == "Character" then
							dist = (camPos - part.Position).magnitude
						end
						if not clNpcPos and ok then
							clNpcPos = dist
							clNpcPart = part
							clNpcModel = npc.body
						end
						if ok and dist and dist < clNpcPos then
							clNpcPos = dist
							clNpcPart = part
							clNpcModel = npc.body
						end
					end
				end
			end
		end

		local targetList = {
			{ 'Animals', clAnimalPart, clAnimalModel, Settings.SilentTargetAnimals },
			{ 'Players', clPart, clModel, Settings.SilentTargetPlayers },
			{ 'NPCs', clNpcPart, clNpcModel, Settings.SilentTargetNPCs }
		}

		table.sort(targetList, function(p1, p2)
			return p1[1] == Settings.TargetPriority
		end)

		for i = 1, #targetList do
			local type, part, model, doTarget = unpack(targetList[i])

			if part and model and doTarget then
				return part, model
			end
		end
	end

	LoadWithoutDebugSetting('ESPHighlight', function()
		ESP:RegisterHighlight(GetTarget)
	end)

	spawn(function()
		--Silent Aim--
		local ProjCache = {}

		plr.CharacterAdded:Connect(function()
			if Settings.AimDistance == 99999 then
				Settings.AimDistance = Settings.OldAimDistance or 1000
				Settings.VisCheck = Settings.OldVisCheck
			end
			if Settings.Fullbright then
				local pl = Instance.new("PointLight", plr.Character.PrimaryPart)
				pl.Range = 200
				pl.Brightness = 1
				pl.Enabled = true
				pl.Shadows = false
			end
			lastPos = nil
		end)

		local env = getfenv(SharedModules.ProjectileHandler.GenerateProjectileSeed)
		local Raycast = env.Raycast

		LoadWithoutDebugSetting('RaycastHook', function()
			function env.Raycast(...)
				local args = { ... }
				if type(args[1]) == 'table' and args[1].IsOwner then
					if type(args[4]) == 'table' and Settings.WallBang then
						table.insert(args[4], workspace.Terrain)
		                table.insert(args[4], workspace:FindFirstChild('WORKSPACE_Geometry'))
		                table.insert(args[4], workspace:FindFirstChild('WORKSPACE_Interactables'))
		                table.insert(args[4], workspace:FindFirstChild('Ignore'))
					end
				end
				return Raycast(unpack(args))
			end
		end)
	end)
	
	--No Swim
	do
		-- hook both places so you can keep your item equipped in the water and switch to them in the water, 
		-- a bit crude hack but it works

		LoadWithoutDebugSetting('Swim', function()
			local CanSwitchToItem = SharedModules.PlayerCharacter.CanSwitchToItem
			local Update = SharedModules.PlayerCharacter.Update

			SharedModules.PlayerCharacter.CanSwitchToItem = wwguard(CanSwitchToItem, function(self, ...)
				if Settings.EquipWhileSwimming then
					self.Swimming = false
				end
				return CanSwitchToItem(self, ...)
			end)

			function SharedModules.PlayerCharacter.Update(self, ...)
				if Settings.EquipWhileSwimming then
					self.Swimming = false
				end
				return Update(self, ...)
			end
		end)
	end

	--AutoCollect Tomahawk
	LoadWithoutDebugSetting('AutoCollectTomahawk', function()
		workspace:WaitForChild('Ignore').ChildAdded:Connect(function(object)
			if object.Name == 'Tomahawk' and Settings.AutoCollectTomahawk then
				local handle = object:WaitForChild('Handle', 10)
				local itemId = handle and handle:WaitForChild('ItemId', 10)

				if itemId then
					if itemId.Value:len() <= 0 then
						itemId:GetPropertyChangedSignal('Value'):Wait()
					end

					Network:FireServer('RetrieveTomahawk', itemId.Value)
				end
			end
		end)
	end)

	--No Recoil, No Reload, No Delay--
	LoadWithoutDebugSetting('GunMods', function()
		local Camera = SharedModules.Camera
		for i,v in pairs({"AddRecoil", "Vibrate"}) do
			local old = Camera[v]
			Camera[v] = wwguard(old, function(...)
				if Settings.NoRecoil then
					return
				end
				return old(...)
			end)
		end
		
		local GunItem = SharedModules.GunItem
		local BowItem = SharedModules.BowItem

		local PlayTrack = GunItem.PlayTrack

		local reloadTracks = { 'LoadStart', 'Load', 'LoadEnd' }
		local bowTracks = { 'Aim', 'Draw', 'Drawn', 'Knock' }

		local function PlayTrackHook(self, track, ...)
			local args = { ... }

		--	debugprint('Playing track', track, 'on gun', self.Name)

			if Settings.NoReload then 
				if table.find(reloadTracks, track) and type(args[#args]) == 'number' then
					args[#args] = args[#args] * (Settings.ReloadScale or 1)
				elseif track == 'LoadStart' then
					-- stupid hack
					PlayTrack(self, track, unpack(args))
					task.spawn(function()
						self:StopTrack(track, 0.05)
					end)
				end
			end

			if Settings.InstantBowCharge then
				if table.find(bowTracks, track) and type(args[#args]) == 'number' then
					args[#args] = args[#args] * 100
				end
			end

			return PlayTrack(self, track, unpack(args))
		end

		GunItem.PlayTrack = PlayTrackHook
		BowItem.PlayTrack = PlayTrackHook

		-- local lastBowFire = 0 

		-- game:GetService('RunService').Heartbeat:Connect(function(dt)
		-- 	lastBowFire = lastBowFire + dt

		-- 	local item = SharedModules.PlayerCharacter:GetEquippedItem()

		-- 	if lastBowFire > (Settings.AutoBowRPM or 1 / 30) and Settings.AutomaticBow and type(item) == 'table' and item.IsBowItem then
		-- 		if game:GetService('UserInputService'):IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
		-- 			lastBowFire = 0

		-- 			item:Activate()
		-- 			task.wait(0.01)
		-- 			item:Deactivate()
		-- 		end
		-- 	end
		-- end)
	end)

	
	--Fullbright--
	do
		local fix3ds = loadstring([[
			local Settings = ...
			
			local lighting = game:GetService("Lighting")
			return function()
				if Settings.Fullbright then
					lighting.TimeOfDay = "10:00:00"
					lighting.Ambient = Color3.new(1,1,1)
				end
			end
		]])(Settings)
		game:GetService("Lighting").Changed:Connect(fix3ds)
	end
	
	--Refreshing Silent Aim Whitelist--
	do
		local function Refresh()
			UiTbl.wlList:Clear()
			
			local list = {}
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v ~= plr then
					list[#list + 1] = v
				end
			end
			
			table.sort(list, function(a,b)
				return a.Name:lower() < b.Name:lower()
			end)
			
			for i,v in pairs(list) do
				local new
				new = UiTbl.wlList:Button(v.Name, function()
				Settings.Whitelist[v.Name] = Settings.Whitelist[v.Name] == nil and true or nil
					if Settings.Whitelist[v.Name] then
						new:SetButtonColor(Color3.fromRGB(29,207,115))
					else
						new:SetButtonColor(Color3.fromRGB(255, 170, 0))
					end
				end, UDim2.new(1,-10,0,22))
				
				if Settings.Whitelist[v.Name] then
					new:SetButtonColor(Color3.fromRGB(29,207,115))
				end
			end
		end
		
		game:GetService("Players").PlayerAdded:Connect(Refresh)
		game:GetService("Players").PlayerRemoving:Connect(Refresh)
		Refresh()
	end
	
	--ESP--
	ESP.Overrides.GetTeam = function(p)
		if not GetPlayerColor then
			return p.Team
		end
		
		local _color, team = GetPlayerColor(p)
		return team
	end
	
	ESP.Overrides.GetColor = function(obj)
		local p = game:GetService("Players"):GetPlayerFromCharacter(obj)
		if not p or not ESP.TeamColor then
			return ESP.Color
		end

		if not GetPlayerColor then
			return p.Team and p.Team.TeamColor.Color or ESP.Color
		end
		
		return (GetPlayerColor(p))
	end
	
	ESP.Overrides.UpdateAllow = function(self)
		if self.Player then
			local distance = self.Distance or math.floor((workspace.CurrentCamera.CFrame.p - self.PrimaryPart.Position).magnitude)
			if distance > ESP.PlayersDistance then
				return false
			end

			local state = SharedModules.ReplicatedState:GetPlayerState(self.Player)
			if state then
				if state.Dead then return false end
				if (state.State.Health or 0) <= 0 then return false end 
			end
		end
		return not Map.Opened
	end

	OnSettingsLoaded(function()
		-- Animals
		wait(1)

		LoadWithoutDebugSetting('AnimalsEsp', function()
			ESP:AddObjectListener(workspace:WaitForChild("WORKSPACE_Entities"):WaitForChild("Animals"), {
				Type = "Model",
				IsEnabled = function(self)
					if (not ESP.Animals) then return false end
					if (not ESP[self.AnimalName]) then return false end

					if ESP.OnlyShowLegendary and (not self.Legendary) then
						return false
					end

					local distance = math.floor((workspace.CurrentCamera.CFrame.p - self.PrimaryPart.Position).magnitude)
					if (not self.Legendary) and distance > ESP.AnimalsDistance then
						return false
					end

					return true
				end,
				Validator = function(self)
					local root = self:WaitForChild('HumanoidRootPart', 10)
					if not root then return false end

					debugwarn('legendary', self:GetAttribute'Legendary', Settings.WWPlaySoundOnFound)
					if self:GetAttribute('Legendary') and Settings.WWPlaySoundOnFound then 
						local result = GetTPSetting('KHFindLegendaryServer')
						debugprint('TeleportFlag', result)
						if not result then 
							task.spawn(beep) 
						end
					end
					return root
				end,
				OnAdded = function(self)
					self.Legendary = self.Object:GetAttribute('Legendary')
					self.AnimalName = self.Object.Name

					self.LegendaryColor = Color3.fromHex('e6e035')
					self.BaseColor = Color3.fromRGB(139,69,19)
				end,
				CustomName = function(self)
					return self.Name .. (self:GetAttribute('Legendary') and ' [Legendary]' or '')
				end,
				ColorDynamic = function(self)
					if self.Legendary then
						return self.LegendaryColor
					end
					return self.BaseColor
				end
			})
		end)

		LoadWithoutDebugSetting('NPCEsp', function()
			local npcs = workspace:WaitForChild("WORKSPACE_Entities"):WaitForChild("NPCs")

			local function addNpc(npc)
				debugprint('npc added', npc:GetFullName())
				local model = npc:FindFirstChildWhichIsA('Model')
				while not model do
					task.wait(0.5)
					model = npc:FindFirstChildWhichIsA('Model')
				end

				local root = model:WaitForChild('HumanoidRootPart', 10)

				debugprint('got model for', npc)

				local box = ESP:Add(model, {
					Type = 'Model',
					Color = Color3.fromRGB(0, 255, 140),
					Name = npc.Name,
					IsEnabled = function(self)
						if (not ESP.NPCs) then return false end

						local distance = math.floor((workspace.CurrentCamera.CFrame.p - self.PrimaryPart.Position).magnitude)
						if distance > ESP.NPCDistance then
							return false
						end

						local health = npc:GetAttribute('Health') or 0
						if health <= 0 then return false end

						return true
					end,
				})
			end

			for _, npc in next, npcs:GetChildren() do
				task.spawn(addNpc, npc)
			end
			npcs.ChildAdded:Connect(addNpc)
		end)

		-- 	ESP:AddObjectListener(, {
		-- 	--	Type = 'Model',
		
		-- 		PrimaryPart = function(self)
		-- 			local model = self:FindFirstChildWhichIsA('Model')
		-- 			while not model do
		-- 				task.wait(0.1)
		-- 				model = self:FindFirstChildWhichIsA('Model')
		-- 			end

		-- 			local part = model:WaitForChild('HumanoidRootPart', 10)
		-- 			debugprint('npc part', part)
		-- 			return part
		-- 			--return 
		-- 		end,
		-- 		OnAdded = function(self)
		-- 			debugwarn('this npc', self, 'was caught in this wicked game...')
		-- 		end,
		-- 		Validator = function(self)
		-- 			print('validating', self:GetFullName(), self.ClassName)

		-- 			local model = self:FindFirstChildWhichIsA('Model')
		-- 			while not model do
		-- 				task.wait(0.1)
		-- 				model = self:FindFirstChildWhichIsA('Model')
		-- 			end

		-- 			local part = model:WaitForChild('HumanoidRootPart', 10)
		-- 			debugprint('npc part', part)
		-- 			return part
		-- 		end,
		-- 	})
		-- end)

		-- other
		local collectionService = game:GetService('CollectionService')
		local thunderBoxes = {}
		local itemBoxes = {}

		-- TODO: move thunderstruck to AddObjectListener and check for tag in the validator function
		local function addThunderstruck(obj)
			thunderBoxes[obj] = ESP:Add(obj, {
				Color = Color3.fromHex('209bba'),
				IsEnabled = 'Thunderstruck',
				Type = 'Model',
				CustomName = function(self)
					if Settings.WWPlaySoundOnFound then 
						local result = GetTPSetting('KHFindLegendaryServer')
						debugprint('TeleportFlag', result)
						if not result then 
							task.spawn(beep) 
						end
					end
					return self.Name
				end
			})
		end

		local function addDroppedItem(item)
			while true do
				task.wait(0.1)
				if item.PrimaryPart then break end
			end

			itemBoxes[item] = ESP:Add(item, {
				Color = Color3.fromHex('7845d1'),
				IsEnabled = function(self)
					local distance = self.Distance or math.floor((workspace.CurrentCamera.CFrame.p - self.PrimaryPart.Position).magnitude)
					if distance > ESP.DroppedItemsDistance then
						return false
					end
					return ESP.DroppedItems
				end,
			})
		end

		for _, object in next, collectionService:GetTagged('Thunderstruck') do
			task.spawn(addThunderstruck, object)
		end

		for _, object in next, collectionService:GetTagged('DroppedItem') do
			task.spawn(addDroppedItem, object)
		end

		collectionService:GetInstanceAddedSignal('DroppedItem'):Connect(addDroppedItem)
		collectionService:GetInstanceRemovedSignal('DroppedItem'):Connect(function(object)
			if itemBoxes[object] then
				itemBoxes[object]:Remove()
				itemBoxes[object] = nil
			end
		end)

		collectionService:GetInstanceAddedSignal('Thunderstruck'):Connect(addThunderstruck)
		collectionService:GetInstanceRemovedSignal('Thunderstruck'):Connect(function(object)
			if thunderBoxes[object] then
				thunderBoxes[object]:Remove()
				thunderBoxes[object] = nil
			end
		end)
	end)

	LoadWithoutDebugSetting('OresESP', function()
		local oresPath = workspace:WaitForChild("WORKSPACE_Interactables"):WaitForChild("Mining"):WaitForChild("OreDeposits")
		local oresLoaded = {}

		local function AddOre(c)
			if oresLoaded[c.Name] then
				return
			end
			oresLoaded[c.Name] = true

			while not c:FindFirstChildOfClass("Model") do
				wait(.1)
			end
			local oreColor = c:FindFirstChildOfClass("Model"):WaitForChild(c.Name .. "Ore").Color

			UiTbl.oresGroup:CheckBox(c.Name, function(bool)
				ESP[c.Name] = bool
			end, "ESP" .. c.Name):SetLabelColor(oreColor)

			if isDebug then
				UiTbl.autoMineOresGroup:CheckBox(c.Name, function(bool)
					Settings.AutoMine.Ores[c.Name] = bool
				end, "AutoMine" .. c.Name):SetLabelColor(oreColor)
			end
			
			ESP:AddObjectListener(c, {
				Type = "Model",
				CustomName = c.Name,
				Color = oreColor,
				IsEnabled = function(box)
					return ESP[c.Name] and IsOreNonDepleted(box.Object)
				end,
			})
		end

		for i,v in pairs(oresPath:GetChildren()) do
			AddOre(v)
		end

		oresPath.ChildAdded:Connect(AddOre)
	end)

	do
		local animalsList = { "Horse", "Gator", "Deer", "Bison", 'Bear', 'Cow', 'Wendigo' }

		for _, animal in next, animalsList do
			UiTbl.animalsGroup:CheckBox(animal, function(bool)
				ESP[animal] = bool
			end, 'ESP' .. animal)
		end
	end
	
	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
end)()elseif GameName == "Apocalypse Rising 2" then (function() IB_INLINING_START(true)
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
	local Aimbot = LoadAimbot()
	
	local Settings = {
		InstantInteract = false,
		Map = false,
		SilentAim = false,
		AimDistance = 500,
		FOVRange = 200,
		AimMode = "Cursor",
		NoRecoil = false,
		NoSpread = false,
		HeadshotChance = 100,
		InstantReload = false,
		InfJump = false,
		LootPreview = false,
		NoImpact = false,
		VehicleFlight = false,
		Squad = {
			Members = {}
		},
		Keys = {
			[Enum.KeyCode.W] = CFrame.new(0,0,-40),
			[Enum.KeyCode.S] = CFrame.new(0,0,40),
			[Enum.KeyCode.A] = CFrame.new(-40,0,0),
			[Enum.KeyCode.D] = CFrame.new(40,0,0),
			[Enum.KeyCode.Q] = CFrame.new(0,-40,0),
			[Enum.KeyCode.E] = CFrame.new(0,40,0),
		}
	}
	local UiTbl = {}
	
	--game stuff--
	local Framework = require(game.ReplicatedFirst:WaitForChild("Framework"))
	while not pcall(Framework.require, "Libraries", "Interface") do
		messagebox("You executed too early. Please wait until the game loads then click OK.", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
	end
	local Interface = Framework.require("Libraries", "Interface")
	local Globals = Framework.require("Configs", "Globals")

	local loadCount = 0
	local interactionsCallback
	while not interactionsCallback do
		for i,v in pairs(getgc()) do
			if interactionsCallback then
				break
			end
			if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
				local consts = getconstants(v)
				
				if FIT(consts, "Nodes") and FIT(consts, "Secondary Interact") then --Heartbeat callback in game.ReplicatedStorage.Client.Abstracts.Interface.Interact
					interactionsCallback = v
				end
			end
		end
		if not interactionsCallback then
			loadCount = loadCount + 1
			KeyTB.Text = "Waiting for modules (" .. loadCount .. ")..."
			wait(1)
		else
			break
		end
	end

	--_G.b = Interface --Interface.Modules.Vehicle:GetVehicle()
	--Framework.Classes.VehicleControler
	
	--Bypassing AntiCheat--
	local Network = Framework.Libraries.Network
	local deathActions = Framework.Libraries.Interface:Get("DeathActions")
	do
		local DetectionStrings = {"Character Humanoid Update", "Character Root Update", "Get Player Stance Speed",
		"Get Player Stance Speed", "Force Charcter Save", "Update Character State", "Sync Near Chunk Loot", "Zombie State Resync Attempt",
		"Update Character Position", "Resync Character Physics", "Resync Leaderboard", "Sync Debug Info", "Statistic Report", "Animator State Desync Check"}
		
		do
			local tbl = DetectionStrings
			DetectionStrings = {}
			for i,v in pairs(tbl) do
				DetectionStrings[v] = true
			end
		end
		
		local old = Network.Send
		Network.Send = function(...)
			local args = {...}
			for i,v in pairs(args) do
				if DetectionStrings[v] then
					return Instance.new("BindableEvent").Event:Wait()
				end
			end

			--No fall damage & No resource drain--
			if args[2] == 'Set Character State' then
				local MoveState = args[3]

				local RunningStates = {
					Running = 'Walking',
					SprintSwimming = 'Swimming',
				}

				if Settings.NoFallDamage and MoveState == 'Falling' then
					debugwarn('Removing falling state')
					args[3] = "Walking"
				elseif Settings.NoResourceDrain and RunningStates[MoveState] then
					debugwarn('Spoofing running states')
					args[3] = RunningStates[MoveState]
				end

				return old(unpack(args))
			--Instant Reload--
			elseif args[2] == "Character Reload Firearm Initiated" then
				local caller = debug.getinfo(2).func
				local upvals = getupvalues(caller)
				local animatedReload = upvals[#upvals]
				
				if not is_synapse_function(animatedReload) then
					local function new(...)
						if Settings.InstantReload then
							args[1].Reloading = false
							return
						end
						
						return animatedReload(...)
					end
					setupvalue(caller, #upvals, new)
				end
				
				if Settings.InstantReload then
					spawn(function()
						old(Network, "Character Reload Firearm Committed", args[3], args[4])
						for i=1,2 do
							old(Network, "Character Reload Firearm Clear", args[3], args[4])
						end
					end)
				end
				return old(...)
			--Vehicles Memes--
			elseif args[2] == "Vehicle Sit In" and Settings.VehicleFlight then
				spawn(function()
					wait(1)

					local vehicle = args[3].PrimaryPart
					Settings.CurrentVehicle = vehicle
					local bp = vehicle:FindFirstChild("BodyPosition") or Instance.new("BodyPosition", vehicle)
					bp.Position = vehicle.Position
					bp.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
					local bg = vehicle:FindFirstChild("BodyGyro") or Instance.new("BodyGyro", vehicle)
					bg.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)

					while Settings.CurrentVehicle == vehicle and Settings.VehicleFlight do
						wait()
						local newPos = workspace.CurrentCamera.CFrame
						local head = plr.Character.Head.Position
						local dist = (newPos.p - head).magnitude
						newPos = newPos * CFrame.new(0,0,-dist)

						for i,v in pairs(Settings.Keys) do
							if game:GetService("UserInputService"):IsKeyDown(i) then
								newPos = newPos * v
							end
						end
						bp.Position = newPos.p
						bg.CFrame = workspace.CurrentCamera.CFrame
					end
					bp:Destroy()
					bg:Destroy()
				end)
			elseif args[2] == "Vehicle Bumper Impact" and args[7] ~= "Flesh" and Settings.NoImpact then --allow it to hit zombies and players
				return
			end

			return old(...)
		end
		
		local old = Network.Fetch
		Network.Fetch = function(...)
			local args = {...}
			for i,v in pairs(args) do
				if DetectionStrings[v] then
					return Instance.new("BindableEvent").Event:Wait()
				end
			end

			return old(...)
		end
	end
	
	--Instant Interact--
	do		
		if interactionsCallback then
			for i,v in pairs(getupvalues(interactionsCallback)) do --the upvalues are affected by luau function inlining (InteractCast is inlined, originally in a function called getWorldInfo)
				if type(v) == "function" and islclosure(v) and debug.getinfo(v).name == "findItemData" then
					debugwarn("found findItemData at idx", i)
					setupvalue(interactionsCallback, i, function(...)
						if not Settings.InstantInteract then
							return v(...)
						end
						
						local ret = {v(...)}
						ret[4] = 0
						return unpack(ret)
					end)
					break
				end
			end
		end
	end

	--Map--
	spawn(function()
		local Map = Interface:Get("Map")
		local marker = Framework.require("Libraries", "Resources"):FindFrom(Map.Gui, "ClipBin.DragBin.LocalMarker")
		local Base = marker.Parent
		
		local function getMapPos(pos) --i hate inlining
			local u2 = getupvalue(Map.Center, 2)
			local u3 = getupvalue(Map.Center, 3)
			local v25 = u2:pointToObjectSpace(pos) / u3
			return Vector2.new(v25.X, v25.Z)
		end

		game:GetService("Players").PlayerRemoving:Connect(function(p)
			local img = Base:FindFirstChild("Plr_" .. p.Name)
			if img then
				img:Destroy()
			end
		end)
		
		while true do
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				local img = Base:FindFirstChild("Plr_" .. v.Name)
				if not img then
					img = marker:Clone()
					img.Name = "Plr_" .. v.Name
					img.Parent = Base
					img.MarkerCenter.Tooltip.Visible = true
					img.MarkerCenter.Tooltip.TextLabel.Text = v.Name
				end
				if Settings.Map and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
					img.Visible = true
					local pos = getMapPos(v.Character.HumanoidRootPart.Position)
					img.Position = UDim2.fromScale(pos.X, pos.Y)
				else
					img.Visible = false
				end
			end
			wait()
		end
	end)
	
	--Always Day--
	do
		local fix3ds = loadstring([[
			local Settings = ...
			
			local lighting = game:GetService("Lighting")
			return function()
				if Settings.AlwaysDay then
					lighting.TimeOfDay = "10:00:00"
				end
			end
		]])(Settings)
		game:GetService("Lighting").Changed:Connect(fix3ds)
	end

	--Zombie Aura--
	spawn(function()
		while not Framework.Classes or not Framework.Classes.Players do
			wait()
		end
		local Player = Framework.Classes.Players.get()
		while not Player do
			wait()
			Player = Framework.Classes.Players.get()
		end
		Settings.PlayerObj = Player;
	end)

	--Loot Bins Preview--
	local LootBinsCache = {}
	local LootBinsQueue = {} --key = esp box table, value = position
	spawn(function()
		--[[
			Ignore names: Pockets, Ground
			Framework.Libraries.Network:Fetch("Inventory Container Group Connect", workspace.Map.Shared.LootBins["18_23"].Group) causes it to fire the event and thus AddContainer
		]]

		local function ReplaceFunc(f)
			local upvals = getupvalues(f)
			local setContainerInventory = upvals[#upvals]
			debugprint("weeeee", setContainerInventory, debug.getinfo(setContainerInventory).name)

			setupvalue(f, #upvals, function(self, container, newContents)
				local items = {}
				for i,v in pairs(newContents) do
					if type(v) == "table" then
						items[#items + 1] = v.Name
					end
				end
				if #items > 0 then
					local sBin = LootBinsCache[container.Id] and ESP.Objects[LootBinsCache[container.Id]]
					if not sBin then
						local containerPos = container.WorldPosition
						local sPos
						for i,v in pairs(LootBinsQueue) do
							local dist = (v-containerPos).magnitude
							if not sPos or dist < sPos then
								sBin = i
								sPos = dist
							end
						end
					end
					if sBin then
						LootBinsCache[container.Id] = sBin
						LootBinsQueue[sBin] = nil
						sBin.Name = table.concat(items, "\n")
					end
				end

				return setContainerInventory(self, container, newContents)
			end)
		end

		local oldSquadUpdate
		local function SquadUpdate(list)
			Settings.Squad = list or Settings.Squad or {Members = {}}
			debugwarn("got squad list", list)
			return oldSquadUpdate(list)
		end

		local funcs = getupvalue(Network.Add, 1)

		do
			local handler = funcs[KH_CONSTANT("Inventory Container Added")]
			if handler then
				ReplaceFunc(handler)
			end

			local handler = funcs["Squad Update"]
			if handler then
				oldSquadUpdate = funcs["Squad Update"]
				funcs["Squad Update"] = SquadUpdate
				debugprint("hooked squadupdate #1")
			end
		end

		local old = Network.Add
		Network.Add = function(self, name, func)
			if name == KH_CONSTANT("Inventory Container Added") then
				ReplaceFunc(func)
			elseif name == "Squad Update" then
				oldSquadUpdate = func
				debugprint("hooked squadupdate #2")
				return SquadUpdate
			end

			return old(self, name, func)
		end

		--Refresh Loop--
		while true do
			wait(1)
			if not Settings.ContainerDebounce and Settings.LootPreview then
				for i,v in pairs(LootBinsQueue) do
					if (workspace.CurrentCamera.CFrame.p - v).magnitude < 45 then
						Framework.Libraries.Network:Fetch("Inventory Container Group Connect", i.Object.Parent)
					end
				end
			end
		end
	end)
	
	while not Framework.Libraries.Bullets do
		wait()
	end
	
	--Silent Aim--
	local function GetEnemies()
		local squad = Settings.Squad
		
		local t = {}
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			if (not squad or not squad.Members[v.Name]) and v.Character then
				t[#t + 1] = v.Character
			end
		end
		for i,v in pairs(workspace.Zombies.Mobs:GetChildren()) do
			t[#t + 1] = v
		end
		return t
	end
	
	local function GetTarget(chance)
		local camPos = workspace.CurrentCamera.CFrame.p
		local clPos,clPart,clModel
		for i,v in pairs(GetEnemies()) do
			if v.Parent then
				local part = v:FindFirstChild("Head")
				if chance and math.random(1, 100) >= Settings.HeadshotChance then
					part = v:FindFirstChild("HumanoidRootPart")
				end
				if part then
					local p,vis = workspace.CurrentCamera:WorldToViewportPoint(part.Position)
					if vis then
						local startPos = camPos
						
						local workspaceDist = (workspace.CurrentCamera.CFrame.p - part.Position).magnitude
						
						local ray = Ray.new(startPos, CFrame.new(workspace.CurrentCamera.CFrame.p, part.Position).LookVector.Unit * p.Z)
						
						local hit
						if not Settings.Wallbang and Settings.VisCheck then
							local ignore = Settings.IgnoreList or {}
							ignore[#ignore + 1] = plr.Character
							ignore[#ignore + 1] = part.Parent
							
							hit = workspace:FindPartOnRayWithIgnoreList(ray, ignore)
						end
						if not hit and workspaceDist <= Settings.AimDistance then
							local dist
							local ok = true
							if Settings.AimMode == "Cursor" then
								dist = (Vector3.new(mouse.X,mouse.Y+36,0) - Vector3.new(p.X,p.Y,0)).magnitude
								ok = dist <= Settings.FOVRange
							elseif Settings.AimMode == "Character" then
								dist = (camPos - part.Position).magnitude
							end
							if not clPos and ok then
								clPos = dist
								clPart = part
								clModel = v
							end
							if ok and dist and dist < clPos then
								clPos = dist
								clPart = part
								clModel = v
							end
						end
					end
				end
			end
		end
		return clPart,clModel
	end
	ESP:RegisterHighlight(GetTarget)
	local FOVCircle = ESP.FOVCircle(Settings.FOVRange)
	
	--Spoofing aim dir--
	local BulletsFire = Framework.Libraries.Bullets.Fire
	do
		local getSpreadVector = debug.getupvalue(BulletsFire, 3)
		local castLocalBullet = debug.getupvalue(BulletsFire, 4)

		local function AdjustFireDirection(random, direction, angle)
			local offset = getSpreadVector(random, direction, angle) - direction
			return direction - offset
		end

		local OldRandom
		OldRandom = hookfunc(getrenv().Random.new, function(...)
			local Result = OldRandom(...)
			if debug.info(3, 'f') == BulletsFire then
				local Stack = debug.getstack(3)

				local Origin = Stack[5]
				local Direction = Stack[6]
				local Angle = Stack[7]
				local Cloned = Result:Clone()

				local SpoofDirection = nil
				local FoundTarget = false;

				local Gravity = debug.getupvalue(castLocalBullet, 5)

				if Settings.SilentAim then
					local target = GetTarget(true)
					local canHit = (Settings.HitChance or 0) >= math.random(1, 100) 
						
					local equippedItem = Settings.PlayerObj.Character.EquippedItem
					local fireConfig = equippedItem and equippedItem.FireConfig

					if target and canHit and type(fireConfig) == 'table' and type(rawget(fireConfig, 'MuzzleVelocity')) == 'number' then
						local tRoot = target.Parent:findFirstChild('HumanoidRootPart')
						if tRoot then
							FoundTarget = true

							local trajectory = Aimbot:_solveTime(Origin, fireConfig.MuzzleVelocity, target.Position, math.abs(Gravity.Y))
							if trajectory then
								SpoofDirection = trajectory.Unit
							else
								SpoofDirection = (target.Position - Origin).Unit
							end
						end
					end
				end

				if Settings.NoSpread and (not FoundTarget) then
					SpoofDirection = Direction
				end

				if SpoofDirection then
					debug.setstack(3, 6, AdjustFireDirection(Cloned, SpoofDirection, Angle)) --TODO: check if this still works
				end
			end
			return Result
		end)
	end
	
	--Inf Jump--
	game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
		if not gp and iobj.KeyCode == Enum.KeyCode.Space then
			Settings.CurrentVehicle = nil --lazy

			if Settings.InfJump then
				local hum = plr.Character.Humanoid
				hum:ChangeState("Seated")
				wait()
				hum:ChangeState("Jumping")
			end
		end
	end)
	
	--ESP--
	ESP:AddObjectListener(workspace.Zombies.Mobs, {
		Type = "Model",
		CustomName = "Zombie",
		Color = Color3.new(1,1,0),
		IsEnabled = "NPCs",
		PrimaryPart = "HumanoidRootPart"
	})
	ESP:AddObjectListener(workspace.Loot, {
		Type = "Model",
		Color = Color3.fromRGB(182, 7, 218),
		IsEnabled = "DroppedLoot",
		Recursive = true,
		Validator = function(obj)
			if obj.Parent.ClassName == "CFrameValue" then
				wait()
				return true
			end
		end
	})

	--random events (i hate these stupid cframevalues)--
	do
		local function AddRandomEvent(obj)
			if not obj:IsA("CFrameValue") then
				return
			end

			local p = Instance.new("Part")
			p.Name = "KHRandomEventDummy"
			p.Anchored = true
			p.CFrame = obj.Value
			local box = ESP:Add(p, {
				Name = obj.Name:gsub("(%l)(%L)", "%1 %2"):gsub("%d", ""),
				Color = Color3.fromRGB(182, 7, 218),
				RenderInNil = true,
				IsEnabled = "RandomEvents"
			})

			local lootbins = workspace.Map.Shared.LootBins:FindFirstChild(obj.Name)
			if not lootbins then
				return debugwarn("NO LOOTBINS FOUND FOR", obj:GetFullName())
			end

			local anyHasLoot = false
			local function CheckForLoot()
				anyHasLoot = false
				for i,v in pairs(lootbins:GetChildren()) do
					if v:GetAttribute("LootGroupState") ~= "Empty" then
						anyHasLoot = true
					end
				end
			end
			for i,v in pairs(lootbins:GetChildren()) do
				v:GetAttributeChangedSignal("LootGroupState"):Connect(CheckForLoot)
			end
			CheckForLoot()

			box.IsEnabled = function()
				return ESP.RandomEvents and (not Settings.HideEmptyRandomEvents or anyHasLoot)
			end
		end

		workspace.Map.Shared.Randoms.ChildAdded:Connect(AddRandomEvent)
		for i,v in pairs(workspace.Map.Shared.Randoms:GetChildren()) do
			task.spawn(AddRandomEvent, v)
		end
	end

	ESP:AddObjectListener(workspace.Vehicles.Spawned, {
		Color = Color3.fromRGB(0, 223, 56),
		IsEnabled = "Vehicles",
		Validator = function(obj)
			local onFire = obj:FindFirstChild("Collision") and obj.Collision:FindFirstChild("Fire Damage")
			return not onFire
		end
	})
		
	ESP.Overrides.UpdateAllow = loadstring([[
		local ESP, Settings = ...

		return function(box)
			local p = box.Player
			if p then
				local stats = p:FindFirstChild('Stats')
		
				local primary = stats and stats:findFirstChild('Primary')
				local secondary = stats and stats:findFirstChild('Secondary')

				if ESP.ShowWeapons and primary and secondary then
					local results = {}

					local primaryWeapon = primary.Value
					local secondaryWeapon = secondary.Value 

					if primaryWeapon   ~= ''  then table.insert(results, primaryWeapon) end
					if secondaryWeapon ~= ''  then table.insert(results, secondaryWeapon) end

					box.Name = p.Name .. ' [' .. table.concat(results, ', ') .. ']'
				else
					box.Name = p.Name
				end

				if not ESP.SquadMembers then
					local squad = Settings.Squad
					if squad and squad.Members[p] then
						return false
					end
				end

				local dist = box.Distance or (workspace.CurrentCamera.CFrame.p - box.PrimaryPart.Position).magnitude
				if dist > ESP.PlayersDistance then
					return false
				end
			end
			
			if not p then
				local char = box.Object
				if ESP.NPCs and char.Parent == workspace.Zombies.Mobs then
					local hrp = char.PrimaryPart or char:FindFirstChildWhichIsA"BasePart"
					if hrp then
						local dist = box.Distance or (workspace.CurrentCamera.CFrame.p - hrp.Position).magnitude
						if dist > ESP.NPCsDistance then
							return false
						end
					end
				elseif ESP.Vehicles and char.Parent == workspace.Vehicles.Spawned then
					local body = char.PrimaryPart or char:FindFirstChildWhichIsA"BasePart"
					if body then
						local dist = box.Distance or (workspace.CurrentCamera.CFrame.p - body.Position).magnitude
						if dist > ESP.VehiclesDistance then
							return false
						end
					end
				elseif ESP.DroppedLoot and workspace.Loot:IsAncestorOf(char) then
					local base = char.PrimaryPart
					if base then
						local dist = box.Distance or (workspace.CurrentCamera.CFrame.p - base.Position).magnitude
						if dist > ESP.DroppedLootDistance then
							return false
						end
					end
				elseif ESP.RandomEvents and char.Name == "KHRandomEventDummy" then
					local dist = box.Distance or (workspace.CurrentCamera.CFrame.p - char.Position).magnitude
					if dist > ESP.RandomEventsDistance then
						return false
					end
				end
			end
			return true
		end
	]])(ESP, Settings)
	
	ESP.Overrides.GetColor = function(char) --doesn't print
		if not ESP.SquadMembers then
			return nil
		end
		--debugprint("color update for",p)
		local p = game.Players:GetPlayerFromCharacter(char)
		local squad = Settings.Squad
		if p and squad and squad.Members[p] then
			return Color3.fromRGB(255, 0, 157)
		end
		return nil
	end

	
	ESP:AddGlobalPlayerBar("HP", {
		Color = Color3.fromRGB(0,255,102)
	}, function(box, bar)
		local stats = box.Player.Character:WaitForChild('Stats')
		local health = stats:WaitForChild('Health')
		local base = health:WaitForChild('Base')

		local function update()
			bar.Value = base.Value / 100
		end

		base:GetPropertyChangedSignal('Value'):Connect(update)
		task.spawn(update)
	end)

	--ui stuff--
	UiTbl.weaponsTab = NewUI:Tab("Weapons")
	UiTbl.gunsGroup = UiTbl.weaponsTab:Group("Guns")
	UiTbl.aimGroup = UiTbl.weaponsTab:Group("Silent Aim")
	
	local FireImpulseIdx
	UiTbl.gunsGroup:CheckBox("No Recoil", function(bool)
		Settings.NoRecoil = bool
		if not FireImpulseIdx then
			FireImpulseIdx = FIT(getconstants(BulletsFire), "FireImpulse")
		end
		
		setconstant(BulletsFire, FireImpulseIdx, bool and "your mom" or "FireImpulse") --make it fire a nonexistent callback
	end, "NoRecoil")
		
	UiTbl.gunsGroup:CheckBox("No Spread", function(bool)
		Settings.NoSpread = bool
	end, "NoSpread")
		
	UiTbl.gunsGroup:CheckBox("Instant Reload", function(bool)
		Settings.InstantReload = bool
	end, "InstantReload")
	
	UiTbl.aimGroup:CheckBox("Silent Aim", function(bool)
		Settings.SilentAim = bool
		ESP.HighlightEnabled = bool
		if not bool then
			ESP.Highlighted = nil
		end
	end, "SilentAim"):Keybind(Enum.KeyCode.E, "SilentAim")

	UiTbl.aimGroup:Dropdown({
		Text = "Aim Mode",
		Radio = true,
		Default = 1,
		Values = {"Cursor", "Character"}
	}, function(val)
		Settings.AimMode = val
	end, "AimMode")
		
	UiTbl.aimGroup:Label("Max Distance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 1000,
		Default = 500
	}, function(val)
		Settings.AimDistance = val
		return val .. ""
	end, "AimDistance")
	
	UiTbl.aimGroup:Label("Headshot Chance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 100
	}, function(val)
		Settings.HeadshotChance = val
		return val .. "%"
	end, "HeadshotChance")

	UiTbl.aimGroup:Label("Hit Chance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 100
	}, function(val)
		Settings.HitChance = val
		return val .. "%"
	end, "HitChance")
		
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = ESP.GetFOV(),
		Default = 200,
		Parent = UiTbl.aimGroup:CheckBox("Show FOV Circle", function(bool)
			Settings.ShowFOVCircle = bool
			if bool then
				FOVCircle.Tbl.Update = FOVCircle.Update
				FOVCircle.Drawing.Visible = true
			else
				FOVCircle.Tbl.Update = nil
				FOVCircle.Drawing.Visible = false
			end
		end, "ShowFOVCircle")
	}, function(val)
		Settings.FOVRange = val
		Settings.UsedFOVRange = val
		if FOVCircle.Drawing then
			FOVCircle.Drawing.Radius = val
		end
		return "FOV Range: " .. val
	end, "FOVRange")

	UiTbl.aimGroup:CheckBox("Visibility Check", function(bool)
		Settings.VisCheck = bool
	end, "VisCheck").Click()
	
	UiTbl.movementTab = NewUI:Tab("Movement", {
		Width = 180
	})
	UiTbl.characterGroup = UiTbl.movementTab:Group("Character")
	UiTbl.vehiclesGroup = UiTbl.movementTab:Group("Vehicles")
	
	UiTbl.characterGroup:CheckBox("Infinite Jump", function(bool)
		Settings.InfJump = bool
	end, "InfJump")
		
	UiTbl.characterGroup:CheckBox("No Fall Damage", function(bool)
		Settings.NoFallDamage = bool
	end, "NoFallDamage")

	UiTbl.characterGroup:CheckBox('No Sprint Drain', function(bool)
		Settings.NoResourceDrain = bool
	end, 'NoResourceDrain')

	UiTbl.noImpactCb = UiTbl.vehiclesGroup:CheckBox("No Impact Damage", function(bool)
		Settings.NoImpact = bool
		if not bool and Settings.VehicleFlight then
			UiTbl.vehicleFlightCb.Click()
		end
	end, "NoImpact")

	UiTbl.vehicleFlightCb = UiTbl.vehiclesGroup:CheckBox("Vehicle Flight", function(bool)
		Settings.VehicleFlight = bool
		if bool and not Settings.NoImpact then
			UiTbl.noImpactCb.Click()
		end
	end, "VehicleFlight")
	UiTbl.vehiclesGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 40,
		Parent = UiTbl.vehicleFlightCb
	}, function(val)
		Settings.Keys = {
			[Enum.KeyCode.W] = CFrame.new(0,0,-val),
			[Enum.KeyCode.S] = CFrame.new(0,0,val),
			[Enum.KeyCode.A] = CFrame.new(-val,0,0),
			[Enum.KeyCode.D] = CFrame.new(val,0,0),
			[Enum.KeyCode.Q] = CFrame.new(0,-val,0),
			[Enum.KeyCode.E] = CFrame.new(0,val,0),
		}

		return "Speed: " .. val
	end, "VehicleFlightSpeed")
	
	UiTbl.miscTab = NewUI:Tab("Misc", {
		Width = 195
	})

	UiTbl.miscGroup = UiTbl.miscTab:Group("Misc")
	UiTbl.miscGroup:CheckBox("Instant Interactions", function(bool)
		Settings.InstantInteract = bool
	end, "InstantInteract")
	UiTbl.miscGroup:CheckBox("Map Show Everyone", function(bool)
		Settings.Map = bool
	end, "Map")
	UiTbl.miscGroup:CheckBox("Always Day", function(bool)
		Settings.AlwaysDay = bool
	end, "AlwaysDay")
	
	UiTbl.zombieAuraCb = UiTbl.miscGroup:CheckBox("Zombie Aura", function(bool)
		Settings.ZombieAura = bool
		while Settings.ZombieAura do
			wait(0.25)

			local Character = Settings.PlayerObj and Settings.PlayerObj.Character;
			local Inventory = Character and Character.Inventory; 
			local Equipment = Inventory and Inventory.Equipment
			
			if Equipment and Equipment.Melee then
				local closestZombie, closestDist

				for i, v in pairs(workspace.Zombies.Mobs:GetChildren()) do
					local hrp = plr.Character.PrimaryPart
					local zombie = v.PrimaryPart

					if hrp and zombie then
						local dist = (hrp.Position - zombie.Position).magnitude
						if (not closestZombie or dist < closestDist) and dist < 15 then
							closestZombie = zombie
							closestDist = dist
						end
					end
				end
			
				if closestZombie then
					Network:Send("Character Equip Item", Equipment.Melee.Id, {})

					debugprint("hitting", closestZombie:GetFullName())

					for ctr = 1, #Equipment.Melee.AttackConfig do
						Network:Send("Melee Swing", Equipment.Melee.Id, ctr)
						Network:Send("Melee Hit Register", Equipment.Melee.Id, closestZombie, "Flesh")
					end

					Network:Send("Character Unequip Item", Equipment.Melee.Id)
				end
			end
		end
	end, "ZombieAura")
	UiTbl.zombieAuraCb:Keybind(Enum.KeyCode.Delete, "ZombieAura")
	UiTbl.zombieAuraCb.Components.Keybind:SetKey(Enum.KeyCode.Delete)
	
	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	UiTbl.espToggleCb = UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
		if bool then
			if ESP.Loot then
				Settings.ContainerDebounce = true
				LootBinsQueue = {}
				for i,v in pairs(workspace.Map.Shared.LootBins:GetChildren()) do
					for i,v in pairs(v:GetChildren()) do
						if v.Name == "Group" then
							local p = v:FindFirstChild("Part")
							local state = v:GetAttribute("LootGroupState")
							if p and state and state ~= "Empty" and (workspace.CurrentCamera.CFrame.p - p.Position).magnitude <= ESP.LootDistance then
								LootBinsQueue[ESP:Add(p, {
									Name = state,
									Color = Color3.fromRGB(45, 158, 214),
									PrimaryPart = p,
									Temporary = true,
									IsEnabled = function(box)
										local obj = box.Object
										if Settings.HideSearched and obj.Parent:GetAttribute("LootGroupState") == "Searched" then
											return false
										end
										return true
									end
								})] = p.Position
								v:GetAttributeChangedSignal("LootGroupState"):Connect(function()
									if ESP.Enabled and ESP.Loot then
										local objBox
										for char,box in pairs(ESP.Objects) do
											if box.Type == "Box" and v == char.Parent then
												objBox = box
												break
											end
										end
										if not objBox then
											return
										end
										local val = v:GetAttribute("LootGroupState")
										if val == "Empty" then
											objBox:Remove()
										elseif objBox.Name == "Fresh" then
											objBox.Name = val
										end
									end
								end)
							end
						end
					end
				end
				Settings.ContainerDebounce = false
			end
		end
	end, "ESPEnabled")
	UiTbl.espToggleCb:Keybind(Enum.KeyCode.G, "ESP")
	UiTbl.espPlayersCb = UiTbl.espGroup:CheckBox("Show Players", function(bool)
		ESP.Players = bool
	end, "ESPTogglePlayers")
	UiTbl.espPlayersCb.Click()
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 10000,
		Default = 1000,
		Parent = UiTbl.espPlayersCb
	}, function(val)
		ESP.PlayersDistance = val
		return "Max Distance: " .. val
	end, "ESPPlayersDistance")
	UiTbl.espGroup:CheckBox("Show Player Weapons", function(bool)
		ESP.ShowWeapons = bool
	end, "ESPShowWeapons").Click()
	UiTbl.espGroup:CheckBox("Show Squad Members", function(bool)
		ESP.SquadMembers = bool
	end, "ESPToggleSquadMembers").Click()
	UiTbl.zombieESPCb = UiTbl.espGroup:CheckBox("Show Zombie NPCs", function(bool)
		ESP.NPCs = bool
	end, "ESPZombieNPCs")
	UiTbl.zombieESPCb.Click()
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 10000,
		Default = 1000,
		Parent = UiTbl.zombieESPCb
	}, function(val)
		ESP.NPCsDistance = val
		return "Max Distance: " .. val
	end, "ESPNPCsDistance")
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 10000,
		Default = 1000,
		Parent = UiTbl.espGroup:CheckBox("Show Vehicles", function(bool)
			ESP.Vehicles = bool
		end, "ESPVehicles")
	}, function(val)
		ESP.VehiclesDistance = val
		return "Max Distance: " .. val
	end, "ESPVehiclesDistance")
	UiTbl.lootESPCb = UiTbl.espGroup:CheckBox("Show Loot Objects", function(bool)
		ESP.Loot = bool
		if ESP.Enabled and bool then
			Settings.ContainerDebounce = true
			LootBinsQueue = {}
			for i,v in pairs(workspace.Map.Shared.LootBins:GetChildren()) do
				for i,v in pairs(v:GetChildren()) do
					if v.Name == "Group" then
						local p = v:FindFirstChild("Part")
						local state = v:GetAttribute("LootGroupState")
						if p and state and state ~= "Empty" and (workspace.CurrentCamera.CFrame.p - p.Position).magnitude <= ESP.LootDistance then
							LootBinsQueue[ESP:Add(p, {
								Name = state,
								Color = Color3.fromRGB(45, 158, 214),
								PrimaryPart = p,
								Temporary = true,
								IsEnabled = function(box)
									local obj = box.Object
									if Settings.HideSearched and obj.Parent:GetAttribute("LootGroupState") == "Searched" then
										return false
									end
									return true
								end
							})] = p.Position
							v:GetAttributeChangedSignal("LootGroupState"):Connect(function()
								if ESP.Enabled and ESP.Loot then
									local objBox
									for char,box in pairs(ESP.Objects) do
										if box.Type == "Box" and v == char.Parent then
											objBox = box
											break
										end
									end
									if not objBox then
										return
									end
									local val = v:GetAttribute("LootGroupState")
									if val == "Empty" then
										objBox:Remove()
									elseif objBox.Name == "Fresh" then
										objBox.Name = val
									end
								end
							end)
						end
					end
				end
			end
			Settings.ContainerDebounce = false
		elseif not bool then
			for char,box in pairs(ESP.Objects) do
				if box.Type == "Box" and char.ClassName == "Part" and char.Name == "Part" then --name check necessary to prevent removing other esp objects
					box:Remove()
				end
			end
		end
	end, "ESPLootNPCs")
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 1000,
		Default = 300,
		Parent = UiTbl.lootESPCb
	}, function(val)
		ESP.LootDistance = val
		return "Max Distance: " .. val
	end, "ESPLootDistance")
	UiTbl.espHideSearchedCb = UiTbl.espGroup:CheckBox("Hide Searched ^", function(bool)
		Settings.HideSearched = bool
	end, "ESPHideSearched")
	UiTbl.espLootPreviewCb = UiTbl.espGroup:CheckBox("Loot Preview", function(bool)
		if bool and Settings.HideSearched then
			UiTbl.espHideSearchedCb.Click()
		end
		Settings.LootPreview = bool
	end, "ESPLootPreview")
	UiTbl.espLootPreviewCb.Click()
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 1000,
		Default = 300,
		Parent = UiTbl.espGroup:CheckBox("Show Dropped Loot", function(bool)
			ESP.DroppedLoot = bool
		end, "ESPDroppedLoot")
	}, function(val)
		ESP.DroppedLootDistance = val
		return "Max Distance: " .. val
	end, "ESPDroppedLootDistance")
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 20000,
		Default = 300,
		Parent = UiTbl.espGroup:CheckBox("Show Random Events", function(bool)
			ESP.RandomEvents = bool
		end, "ESPRandomEvents")
	}, function(val)
		ESP.RandomEventsDistance = val
		return "Max Distance: " .. val
	end, "ESPRandomEventsDistance")
	UiTbl.espGroup:CheckBox("Hide Looted ^", function(bool)
		Settings.HideEmptyRandomEvents = bool
	end, "HideEmptyRandomEvents")
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")
	
	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,176,0,125), UDim2.new(0,88,0,62.5),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game:GetService("CoreGui")
		Gui:Destroy()
	end)

	game:GetService("ContextActionService"):BindAction("KHHideUI", function(name, state, iobj)
		if state == Enum.UserInputState.Begin then
			NewUI.Gui.Enabled = not NewUI.Gui.Enabled
		end
	end, false, Enum.KeyCode.RightShift)
		
	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
end)()elseif GameName == "Murder Mystery 2" then
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
	
	local Settings = {
		PickupGun = false,
		PickupGunWait = 0,
		KnifeAim = false,
		GunAim = false,
		AimMode = "Cursor",
		ShowFOVCircle = false,
		FOVRange = 200,
		AimDistance = 400,
		DontHitInnocents = false,
		CoinsFarmDelay = 1,
		CoinsFarmMode = "Teleport",
		NoKnifeDelay = false,
		WalkSpeed = false,
		WalkSpeedVal = 50,
		Gameplay = {
			Murderer = nil,
			Sheriff = nil
		},
		GameplayMap = {},
		RoleColors = {
			Murderer = Color3.fromRGB(199, 14, 14),
			Sheriff = Color3.fromRGB(14, 63, 199)
		},
		HeadshotChance = 0
	}

	local MiniGui
	local lobbyPos = Vector3.new(-109.01158905029297, 139.2955780029297, 27.413909912109375)

	local function PickupGun(doWait)
		local gun = workspace:FindFirstChild("GunDrop")
		if gun then
			local hrp = plr.Character.HumanoidRootPart

			if Settings.Gameplay.Murderer == plr then
				return
			end
			if (hrp.Position - lobbyPos).magnitude <= 110 then
				return
			end

			if doWait and Settings.PickupGunWait > 0 then
				wait(Settings.PickupGunWait)
			end
			
			local origin = hrp.CFrame
			local start = tick()
			hrp.CFrame = gun.CFrame
			while tick() - start < 3 and gun.Parent do
				wait()
				plr.Character.Humanoid.Jump = true
			end
			hrp.CFrame = origin
		end
	end

	local UiTbl = {}
	UiTbl.weapons = NewUI:Tab("Weapons", {
		Width = 195
	})
	UiTbl.aimGroup = UiTbl.weapons:Group("Silent Aim")

	UiTbl.aimGroup:CheckBox("Knife Throw Aim", function(bool)
		Settings.KnifeAim = bool
		if bool or Settings.GunAim then
			ESP.HighlightEnabled = true
		else
			ESP.HighlightEnabled = false
		end
	end, "KnifeAim"):Keybind(Enum.KeyCode.R, "KnifeAim")

	UiTbl.aimGroup:CheckBox("Gun Aim", function(bool)
		Settings.GunAim = bool
		if bool or Settings.KnifeAim then
			ESP.HighlightEnabled = true
		else
			ESP.HighlightEnabled = false
		end
	end, "GunAim"):Keybind(Enum.KeyCode.T, "GunAim")

	UiTbl.aimGroup:Dropdown({
		Text = "Aim Mode",
		Radio = true,
		Default = 1,
		Values = {"Cursor", "Character"}
	}, function(val)
		Settings.AimMode = val
	end, "AimMode")
		
	UiTbl.aimGroup:Label("Max Distance")
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = 1000,
		Default = 400
	}, function(val)
		Settings.AimDistance = val
		return val .. ""
	end, "AimDistance")
		
	local FOVCircle = ESP.FOVCircle(Settings.FOVRange)
	UiTbl.aimGroup:Slider({
		Min = 0,
		Max = ESP.GetFOV(),
		Default = 200,
		Parent = UiTbl.aimGroup:CheckBox("Show FOV Circle", function(bool)
			Settings.ShowFOVCircle = bool
			if bool then
				FOVCircle.Tbl.Update = FOVCircle.Update
				FOVCircle.Drawing.Visible = true
			else
				FOVCircle.Tbl.Update = nil
				FOVCircle.Drawing.Visible = false
			end
		end, "ShowFOVCircle")
	}, function(val)
		Settings.FOVRange = val
		if FOVCircle then
			FOVCircle.Drawing.Radius = val
		end
		return "FOV Range: " .. val
	end, "FOVRange")
	
	UiTbl.aimGroup:CheckBox("Visibility Check", function(bool)
		Settings.VisCheck = bool
	end, "VisCheck").Click()

	UiTbl.miscGroup = UiTbl.weapons:Group("Misc")
	UiTbl.miscGroup:Slider({
		Min = 0,
		Max = 10,
		Default = 0,
		Parent = UiTbl.miscGroup:CheckBox("Auto Pickup Gun", function(bool)
			Settings.PickupGun = bool
			if bool then
				PickupGun(true)
			end
		end, "PickupGun")
	}, function(val)
		Settings.PickupGunWait = val
		return "Wait " .. val .. "s"
	end, "PickupGunWait")

	UiTbl.miscGroup:Button("Pickup Gun", function(bool)
		PickupGun()
	end)

	UiTbl.miscGroup:CheckBox("Don't Hit Innocents", function(bool)
		Settings.DontHitInnocents = bool
	end, "DontHitInnocents")

	local function GetClosestCoin()
		local closestPos, closestObj
		
		local hrp = plr.Character.HumanoidRootPart
		for i,v in pairs(workspace:FindFirstChild("CoinContainer", true):GetChildren()) do
			if v.Name == "Coin_Server" then
				local dist = (hrp.Position - v.Position).magnitude
				if not closestPos or dist < closestPos then
					closestPos = dist
					closestObj = v
				end
			end
		end
		return closestObj
	end

	UiTbl.gameTab = NewUI:Tab("Game")
	UiTbl.movementGroup = UiTbl.gameTab:Group("Movement")
	UiTbl.coinsFarmGroup = UiTbl.gameTab:Group("Coins Farm")
	UiTbl.godModeGroup = UiTbl.gameTab:Group("God Mode")
	UiTbl.miscGameGroup = UiTbl.gameTab:Group("Misc")

	UiTbl.movementGroup:Slider({
		Min = 16,
		Max = 100,
		Default = 50,
		Parent = UiTbl.movementGroup:CheckBox("WalkSpeed", function(bool)
			Settings.WalkSpeed = bool
	
			if plr.Character then
				local hum = plr.Character:FindFirstChildOfClass("Humanoid")
				if hum then
					hum.WalkSpeed = bool and Settings.WalkSpeedVal or 16
				end
			end
		end, "WalkSpeed")
	}, function(val)
		Settings.WalkSpeedVal = val

		if Settings.WalkSpeed and plr.Character then
			local hum = plr.Character:FindFirstChildOfClass("Humanoid")
			if hum then
				hum.WalkSpeed = val
			end
		end
		return val .. ""
	end, "WalkSpeedVal")

	UiTbl.movementGroup:CheckBox("Infinite Jump", function(bool)
		Settings.InfJump = bool
	end, "InfJump")

	UiTbl.movementGroup:CheckBox("Noclip", function(bool)
		Settings.Noclip = bool

		if not bool then
			local hum = plr.Character:FindFirstChildOfClass("Humanoid")
			if hum then
				hum:ChangeState(Enum.HumanoidStateType.Running)
			end
		end
	end, "Noclip"):Keybind(Enum.KeyCode.H, "Noclip")

	UiTbl.movementGroup:Dropdown({
		Text = "Teleports",
		Radio = false,
		Values = {"To Murderer", "To Sheriff", "To Lobby", "To Map"}
	}, function(val)
		if val == "To Murderer" and Settings.Gameplay.Murderer then
			plr.Character:SetPrimaryPartCFrame(Settings.Gameplay.Murderer.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,-2))
		elseif val == "To Sheriff" and Settings.Gameplay.Sheriff then
			plr.Character:SetPrimaryPartCFrame(Settings.Gameplay.Sheriff.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,-2))
		elseif val == "To Lobby" then
			plr.Character:MoveTo(workspace.Lobby.Spawns.Spawn.Position)
		elseif val == "To Map" then
			for i,v in pairs(workspace:GetChildren()) do
				if v.ClassName == "Model" and v.Name ~= "Lobby" then
					local spawn = v:FindFirstChild("Spawn", true)
					if spawn then
						plr.Character:MoveTo(spawn.Position)
						break
					end
				end
			end
		end
	end)

	UiTbl.coinsFarmCb = UiTbl.coinsFarmGroup:CheckBox("Enabled", function(bool)
		Settings.CoinsFarm = bool

		if bool then
			local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
			if not hrp then
				return UiTbl.coinsFarmCb.Click()
			end

			if (hrp.Position - lobbyPos).magnitude <= 110 then
				return UiTbl.coinsFarmCb.Click()
			end
		end

		local PathfindingService = game:GetService("PathfindingService")

		local sameCoin = 0
		local lastCoin
		while Settings.CoinsFarm and not getrenv()._G.CoinBagFull do
			pcall(function()
				local coin = GetClosestCoin()
				if coin then
					if Settings.CoinsFarmMode == "Walk" then
						local path = PathfindingService:CreatePath()
						local pathWp = {}
						local blocked = false

						local ev
						ev = path.Blocked:Connect(function(i)
							ev:Disconnect()
							blocked = true

							local dummy = pathWp[i]
							if dummy then
								dummy:Fire(true)
							end
						end)
						path:ComputeAsync(plr.Character.HumanoidRootPart.Position, coin.Position)

						if not blocked then
							for i,v in pairs(path:GetWaypoints()) do
								if blocked then
									break
								end
								plr.Character.Humanoid:MoveTo(v.Position)

								local dummy = Instance.new("BindableEvent")
								pathWp[i] = dummy
								local ev
								ev = plr.Character.Humanoid.MoveToFinished:Connect(function()
									ev:Disconnect()
									dummy:Fire()
								end)
								coroutine.wrap(function()
									wait(5)
								end)()

								if dummy.Event:Wait() == true then
									break
								end
							end
						end
					else
						plr.Character.HumanoidRootPart.CFrame = CFrame.new(coin.Position)
					end

					if lastCoin == coin then
						sameCoin = sameCoin + 1
					else
						sameCoin = 0
					end
					if sameCoin >= 4/Settings.CoinsFarmDelay and Settings.CoinsFarmMode == "Teleport" then
						coin:Destroy()
					end
					lastCoin = coin
				end
			end)
			wait(Settings.CoinsFarmMode == "Walk" and 0 or Settings.CoinsFarmDelay)
		end
	end)
	UiTbl.coinsFarmGroup:Slider({
		Min = 1.5,
		Max = 4,
		Default = 2,
		Fraction = 1,
		Parent = UiTbl.coinsFarmCb
	}, function(val)
		Settings.CoinsFarmDelay = val
		return "Delay: " .. val .. "s"
	end, "CoinsFarmDelay")

	UiTbl.coinsFarmGroup:Dropdown({
		Text = "Coins Farm Mode",
		Radio = true,
		Default = 1,
		Values = {"Teleport", "Walk"}
	}, function(val)
		Settings.CoinsFarmMode = val
	end, "CoinsFarmMode")

	UiTbl.coinsFarmGroup:CheckBox("Auto Enable", function(bool)
		Settings.AutoCoinsFarm = bool
	end, "AutoCoinsFarm")

	UiTbl.godModeBtn = UiTbl.godModeGroup:Button("Enable", function()
		local char = plr.Character
		local hum = char.Humanoid
		local copy = hum:Clone()
		hum:Destroy()
		copy.Parent = char

		char.Animate.Disabled = true
		char.Animate.Disabled = false
	end)

	UiTbl.godModeGroup:CheckBox("Auto Enable", function(bool)
		Settings.AutoGodMode = bool
	end, "AutoGodMode")

	UiTbl.miscGameGroup:CheckBox("Optimize FPS", function(bool)
		Settings.OptimizeInteractions = bool

		if bool then
			for i,p in pairs(game.Players:GetPlayers()) do
				if p.Character then
					for i,v in pairs(p.Character:GetChildren()) do
						if v:FindFirstChild("Chroma") then
							if p == plr then
								messagebox("[Optimize FPS]: You have a chroma weapon which causes fps drops. You should unequip it.", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
								break
							end
							v.Chroma:Destroy()
						end
					end
				end
			end
		end
	end, "OptimizeInteractions")

	UiTbl.miscGameGroup:CheckBox("Players HUD", function(bool)
		MiniGui.Enabled = bool
	end, "PlayersHUD")

	UiTbl.funTab = NewUI:Tab("Fun", {
		Width = 200
	})
	UiTbl.actionsGroup = UiTbl.funTab:Group("Actions")
	UiTbl.perksGroup = UiTbl.funTab:Group("Perks")

	--plr.Backpack.Knife.Throw:FireServer(target.Character.Head.CFrame, target.Character.Head.Position + Vector3.new(0,2,0))
	UiTbl.actionsGroup:Button("Kill All (Murderer)", function()
		local knife = plr.Character:FindFirstChild("Knife") or plr.Backpack:FindFirstChild("Knife")
		if not knife then
			return
		end
		if knife.Parent ~= plr.Character then
			plr.Character.Humanoid:EquipTool(knife)
			wait(.5)
		end

		local targets = {}
		local data = game.ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Extras"):WaitForChild(KH_CONSTANT("GetPlayerData")):InvokeServer()
		for i,v in pairs(data) do
			i = game.Players:FindFirstChild(i)
			if i and i ~= plr and i.Character and i.Character:FindFirstChild("Head") and not v.Dead then
				table.insert(targets, i.Character:FindFirstChild("Head"))
			end
		end
		table.sort(targets, function(a,b)
			return plr:DistanceFromCharacter(a.Position) < plr:DistanceFromCharacter(b.Position)
		end)

		for i,v in pairs(targets) do
			SecureFireServer(knife.Stab, "Down")
			firetouchinterest(knife.Handle, v, 0)
			firetouchinterest(knife.Handle, v, 1)
		end
	end)

	UiTbl.actionsGroup:Button("Shoot Murderer", function()
		local gun = plr.Character:FindFirstChild("Gun") or plr.Backpack:FindFirstChild("Gun")
		if not gun then
			return
		end
		if gun.Parent ~= plr.Character then
			plr.Character.Humanoid:EquipTool(gun)
			wait(0.1)
		end

		local murderer = Settings.Gameplay.Murderer
		if murderer.Character then
			plr.Character.HumanoidRootPart.CFrame = murderer.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,2)
			wait(0.5)
			SecureInvokeServer(gun.KnifeServer.ShootGun, 1, murderer.Character.HumanoidRootPart.Position, "AH")
		end
	end)

	UiTbl.breakGunBtn = UiTbl.actionsGroup:Button("Break Sheriff's Gun", function()
		local sheriff = Settings.Gameplay.Sheriff
		if sheriff and sheriff.Character then
			local gun = sheriff.Backpack:FindFirstChild("Gun") or sheriff.Character:FindFirstChild("Gun")
			if gun then
				local s,e = pcall(SecureInvokeServer, gun.KnifeServer.ShootGun, 1, game, "AH")
				if not s and e:find("attempt to perform arithmetic") then
					UiTbl.breakGunBtn.Label.Text = "Done!"
					wait(1)
					UiTbl.breakGunBtn.Label.Text = "Break Sheriff's Gun"
					return
				elseif not s then
					debugwarn("diff err:", e)
				end
			end
		end
		UiTbl.breakGunBtn.Label.Text = "Something went wrong!"
		wait(1)
		UiTbl.breakGunBtn.Label.Text = "Break Sheriff's Gun"
	end)

	UiTbl.perksGroup:Label("You can use multiple")
	UiTbl.perksGroup:Label("perks at once as long")
	UiTbl.perksGroup:Label("as you own them!")
	UiTbl.perksGroup:Label("You don't even have")
	UiTbl.perksGroup:Label("to be the murderer!")

	UiTbl.perksGroup:Button("Toggle Ghost", function()
		if plr.Character then
			SecureFireServer(game.ReplicatedStorage.Remotes.Gameplay.Stealth, not plr.Character:FindFirstChild("face"))
		end
	end)

	UiTbl.perksGroup:Button("Toggle Fake Gun", function(bool)
		if plr.Character then
			SecureFireServer(game.ReplicatedStorage.Remotes.Gameplay.FakeGun, not (plr.Character:FindFirstChild("Gun") or plr.Backpack:FindFirstChild("Gun")))
		end
	end)

	UiTbl.perksGroup:Button("Trap Players", function()
		local gui = NewUI:Popup("Whom to trap?")
		local sf = gui:Group("Players"):List({
			Height = 195
		})

		local list = game:GetService("Players"):GetPlayers()
		table.sort(list, function(a,b)
			return a.Name:lower() < b.Name:lower()
		end)
		for i,v in pairs(list) do
			if v ~= plr then
				local btn = sf:Button(v.Name, function()
					if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
						local hrp = v.Character.HumanoidRootPart
						local pos = hrp.Position + hrp.Velocity * 0.4
						SecureInvokeServer(game.ReplicatedStorage.TrapSystem.PlaceTrap, CFrame.new(pos))
					end
				end)
				if Settings.GameplayMap[v.Name] == "Murderer" then
					btn:SetButtonColor(Color3.fromRGB(199, 14, 14))
				elseif Settings.GameplayMap[v.Name] == "Sheriff" then
					btn:SetButtonColor(Color3.fromRGB(14, 63, 199))
				end
			end
		end

		gui:Button("Close", function()
			gui:Toggle()
			game.Debris:AddItem(gui.PrimaryFrame, 1)
		end)
		gui:Toggle()
	end)

	UiTbl.perksGroup:Button("Trap All", function()
		for i,v in pairs(game.Players:GetPlayers()) do
			if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
				local hrp = v.Character.HumanoidRootPart
				local pos = hrp.Position + hrp.Velocity * 0.4
				SecureInvokeServer(game.ReplicatedStorage.TrapSystem.PlaceTrap, CFrame.new(pos))
			end
		end
	end)

	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.G, "ESP")

	UiTbl.Murderer = UiTbl.espGroup:CheckBox("Show Murderer", function(bool)
		ESP.Murderer = bool
	end, "ESPMurderer")
	UiTbl.Murderer:SetLabelColor(Color3.fromRGB(199, 14, 14))
	UiTbl.Murderer.Click()

	UiTbl.Sheriff = UiTbl.espGroup:CheckBox("Show Sheriff", function(bool)
		ESP.Sheriff = bool
	end, "ESPSheriff")
	UiTbl.Sheriff:SetLabelColor(Color3.fromRGB(14, 63, 199))
	UiTbl.Sheriff.Click()

	UiTbl.Innocents = UiTbl.espGroup:CheckBox("Show Innocents", function(bool)
		ESP.Innocents = bool
	end, "ESPInnocents")
	UiTbl.Innocents.Click()

	UiTbl.espGroup:CheckBox("Show Dropped Gun", function(bool)
		ESP.DroppedGun = bool
	end, "ESPDroppedGun")

	UiTbl.espGroup:CheckBox("Show Lobby Players", function(bool)
		ESP.ShowLobby = bool
	end, "ESPShowLobby")

	UiTbl.espGroup:CheckBox("Hide Colors", function(bool)
		ESP.HideColors = bool
	end, "ESPHideColors")

	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")

	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,176,0,125), UDim2.new(0,88,0,62.5),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game:GetService("CoreGui")
		Gui:Destroy()
	end)

	--actual stuff--
	local ToolMap = {
		Knife = "Murderer",
		Gun = "Sheriff"
	}

	local function SetRole(p, role)
		local old = Settings.Gameplay[role]
		if old then
			if p == old then
				return
			end

			local old = Settings.Gameplay[role]
			Settings.GameplayMap[old.Name] = nil
		end

		Settings.Gameplay[role] = p
		Settings.GameplayMap[p.Name] = role
	end
	local function GetRolesFromRemote()
		local data = game.ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Extras"):WaitForChild(KH_CONSTANT("GetPlayerData")):InvokeServer()
		for i,v in pairs(data) do
			if v.Role ~= "Innocent" then
				local p = game.Players:FindFirstChild(i)
				if p then
					SetRole(p, v.Role)
				end
			end
		end
	end
	local function CheckTool(tool)
		local p = tool:FindFirstAncestorOfClass("Player") or game.Players:GetPlayerFromCharacter(tool:FindFirstAncestorOfClass("Model"))
		if p then
			SetRole(p, ToolMap[tool.Name])
		end
	end

	--ESP Overrides--
	ESP.Overrides.UpdateAllow = function(box)
		local role = Settings.GameplayMap[box.Object.Name]
		if (not role and not ESP.Innocents and box.Player) or (role == "Murderer" and not ESP.Murderer) or (role == "Sheriff" and not ESP.Sheriff) then
			return false
		end
		if not ESP.ShowLobby and (box.PrimaryPart.Position - lobbyPos).magnitude < 110 then
			return false
		end
		return true
	end

	ESP.Overrides.GetColor = function(p)
		if ESP.HideColors then
			return ESP.Color
		end
		local role = Settings.GameplayMap[p.Name]
		if role then
			return Settings.RoleColors[role]
		end
		return ESP.Color
	end

	--Handle running mid game--
	do
		for i,v in pairs({workspace, game.Players}) do
			for i,v in pairs(v:GetDescendants()) do
				if v.ClassName == "Tool" and (v.Name == "Knife" or v.Name == "Gun") then
					CheckTool(v)
				end
			end
		end
		if not Settings.Gameplay.Murderer or not Settings.Gameplay.Sheriff then
			GetRolesFromRemote()
		end
	end

	--Gun Drop--
	ESP:AddObjectListener(workspace, {
		Name = "GunDrop",
		CustomName = "Gun",
		Color = Color3.fromRGB(0,124,0),
		IsEnabled = "DroppedGun",
		OnAdded = function(box)
			if Settings.PickupGun then
				if Settings.PickupGunWait > 0 then
					wait(Settings.PickupGunWait)
				end
				PickupGun()
			end
		end
	})

	--Roles Handling--
	game.DescendantAdded:Connect(function(c)
		if c.ClassName == "Tool" then
			if (c.Name == "Knife" and not Settings.Gameplay.Murderer) or (c.Name == "Gun" and c:WaitForChild("KnifeServer", 3)) then
				CheckTool(c)
			end
		elseif c.Name == "Chroma" and c.ClassName == "Decal" and Settings.OptimizeInteractions and not (plr.Character and plr.Character:IsAncestorOf(c)) then
			wait()
			c:Destroy()
		end
	end)

	game.ReplicatedStorage:WaitForChild(KH_CONSTANT("RoleSelect")).OnClientEvent:Connect(function(_role)
		Settings.Gameplay = {}
		Settings.GameplayMap = {}
		GetRolesFromRemote()

		if Settings.AutoCoinsFarm then
			spawn(UiTbl.coinsFarmCb.Click)
		end
		if Settings.AutoGodMode then
			spawn(UiTbl.godModeBtn.Callback)
		end
	end)

	--Silent Aim--
	local function GetEnemies()
		local t = {}

		local isSheriff = Settings.Gameplay.Sheriff == plr --sheriff should only target the murderer
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			if v ~= plr and v.Character and not (isSheriff and Settings.Gameplay.Murderer ~= v) then
				t[#t + 1] = v
			end
		end
		return t
	end
	
	local GetTarget = ESP.GetTarget(Settings, GetEnemies)
	Settings.GetTarget = GetTarget
	ESP:RegisterHighlight(GetTarget)

	local old = {}
	old[1] = hookmetamethod(game, "__namecall", loadstring([[
		local old, Settings, level, FIT, mouse, plr = ...

		return function(self, ...)
			local method = getnamecallmethod()
			if method == "FireServer" then
				if self.Name == "Throw" and Settings.KnifeAim then
					local args = {...}
					
					local target = Settings.GetTarget(true)
					if target then
						args[1] = CFrame.new(target.Position + target.AssemblyLinearVelocity * 0.1)
					end

					setnamecallmethod(method)
					return old[1](self, unpack(args))
				end
			elseif method == "InvokeServer" and self.Name == "ShootGun" and not checkcaller() then
				local args = {...}
				
				if Settings.GunAim then
					local target = Settings.GetTarget(true)
					if target then
						args[2] = target.Position + target.AssemblyLinearVelocity * 0.1

						setnamecallmethod(method)
						return old[1](self, unpack(args))
					end
				end
				if Settings.DontHitInnocents then
					local unitRay = workspace.CurrentCamera:ScreenPointToRay(mouse.X, mouse.Y, 0)
					local ray = Ray.new(unitRay.Origin, unitRay.Direction * 200)

					local allPlayers = {}
					for i,v in pairs(game.Players:GetPlayers()) do
						allPlayers[#allPlayers + 1] = v.Character
					end

					local hit = workspace:FindPartOnRayWithWhitelist(ray, allPlayers)
					if hit then
						local p = game.Players:GetPlayerFromCharacter(hit:FindFirstAncestorOfClass("Model"))
						if p then
							local role = Settings.GameplayMap[p.Name]
							if not role then
								game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
									Text = "[KiriotHub]: Prevented you from shooting innocent " .. p.Name,
									Color = Color3.fromRGB(255, 170, 0),
								})
								return
							end
						end
					end
				end

				setnamecallmethod(method)
				return old[1](self, unpack(args))
			end

			setnamecallmethod(method)
			return old[1](self, ...)
		end
	]])(old, Settings, 3, FIT, mouse, plr))

	--Disable Coins Farm on reset, WalkSpeed--
	plr.CharacterAdded:Connect(function(char)
		if Settings.CoinsFarm then
			UiTbl.coinsFarmCb.Click()
		end
		if Settings.WalkSpeed then
			char:WaitForChild("Humanoid").WalkSpeed = Settings.WalkSpeedVal
		end
	end)

	--WalkSpeed--
	do
		old[2] = hookmetamethod(game, "__newindex", loadstring([[
			local old, Settings, plr, checkcaller = ...

			return function(self, i, v)
				if i == "WalkSpeed" and Settings.WalkSpeed and self.ClassName == "Humanoid" and self.Parent == plr.Character and not checkcaller() then
					v = Settings.WalkSpeedVal
				end
				return old[2](self, i, v)
			end
		]])(old, Settings, plr, checkcaller))
	end

	game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
		if not gp and iobj.KeyCode == Enum.KeyCode.Space and plr.Character then
			local hum = plr.Character:FindFirstChild("Humanoid")
			if hum then
				hum.Jump = true
			end
			if Settings.InfJump then
				local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
				if hrp then
					local vel = hrp.Velocity
					hrp.Velocity = Vector3.new(vel.X, 50, vel.Z)
				end
			end
		end
	end)

	local toUndo = {}
	game:GetService("RunService").Stepped:Connect(function()
		if Settings.Noclip and plr.Character then
			for i,v in pairs(plr.Character:GetDescendants()) do
				if v:IsA("BasePart") and v.CanCollide then
					v.CanCollide = false
					toUndo[v] = true
				end
			end
		else
			for i,v in pairs(toUndo) do
				toUndo[i] = nil
				i.CanCollide = true
			end
		end
	end)

	--fixing lag--
	spawn(function()
		local boxes = {}
		local function BoxAdded(c)
			if c.Name == "InteractiveBox" then
				boxes[#boxes + 1] = c
			end
		end
		workspace.DescendantAdded:Connect(BoxAdded)
		for i,v in pairs(workspace:GetDescendants()) do
			BoxAdded(v)
		end
		workspace.DescendantRemoving:Connect(function(c)
			local i = table.find(boxes, c)
			if i then
				table.remove(boxes, i)
			end
		end)

		local gui = plr.PlayerGui:WaitForChild("InteractGUI"):WaitForChild("Keyboard")
		gui.Visible = true
		local poop = false
		local lastBox

		local debounce = tick()
		game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
			if lastBox and iobj.KeyCode == Enum.KeyCode.F and tick() - debounce >= 0.1 and not (lastBox:FindFirstChild("KnifeBox") and lastBox.KnifeBox.Value) then
				lastBox.Interact:FireServer()
				debounce = tick()
			end
		end)

		while true do
			wait(.2)

			if Settings.OptimizeInteractions then
				plr:WaitForChild("PlayerScripts"):WaitForChild("InteractiveScript").Disabled = true

				local box, boxDist
				if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
					for i,v in pairs(boxes) do
						local dist = plr:DistanceFromCharacter(v.Position)
						if dist <= 6 then
							local knifeBox =  v:FindFirstChild("KnifeBox")
							if knifeBox and (v.KnifeBox.Value == false or Settings.Gameplay.Murderer == plr) or not knifeBox then
								if v:FindFirstChild("RequireVision") and v.RequireVision.Value then
									if workspace:FindPartOnRay(Ray.new(plr.Character.HumanoidRootPart.CFrame.p, (v.CFrame.p - plr.Character.HumanoidRootPart.CFrame.p).unit * dist), plr.Character) == v then
										box = v
										boxDist = dist
										break
									end
								else
									box = v
									boxDist = dist
									break
								end
							end
						end
					end
				end

				if box then
					debugprint("closest box", box:GetFullName())
					gui.Parent.Adornee = box
					lastBox = box
					for i,v in pairs(gui:GetChildren()) do
						v.Visible = false
					end

					local isKnife = box:FindFirstChild("KnifeBox") and box.KnifeBox.Value
					local use = gui.Use
					local cooldown = gui.Cooldown

					if isKnife then
						use = gui.KnifeUse
						cooldown = gui.KnifeCooldown
					end
					use.Visible = not box.InUse.Value
					cooldown.Visible = box.InUse.Value

					if not isKnife then
						if box:FindFirstChild("UseName") then
							use.UseText.Text = box.UseName.Value
						else
							use.UseText.Text = "Activate"
						end
					end

					if not poop then
						gui.Parent.Enabled = true
						gui.Parent.Size = UDim2.new(1.2, 0, 1.3, 0)
					end
				else
					lastBox = nil
					if poop then
						gui.Parent.Enabled = false
						gui.Parent.Size = UDim2.new(0,0,0,0)
					end
				end
				poop = gui.Parent.Enabled
			else
				plr.PlayerScripts:WaitForChild("InteractiveScript").Disabled = false
			end
		end
	end)

	--the neat icons menu--
	task.spawn(function()
		local icons = require(game.ReplicatedStorage:WaitForChild("RankIconsEmpty"))
		local roman = {"I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X"}
		roman[0] = "-"

		local screenHeight = workspace.CurrentCamera.ViewportSize.Y

		MiniGui = Instance.new("ScreenGui")
		syn.protect_gui(MiniGui)
		MiniGui.Name = math.random()
		MiniGui.Parent = game.CoreGui
		MiniGui.Enabled = false
		local frame = Instance.new("Frame", MiniGui)
		frame.BackgroundTransparency = 1
		frame.Position = UDim2.new(0, 10, 0.5, 230)
		frame.Size = UDim2.new(1, -15, 0.14, 0)

		local neededHeight = screenHeight * 0.14 + screenHeight * frame.Size.Y.Scale * 0.25
		if screenHeight * 0.5 + 230 + neededHeight > screenHeight then --small ass screen
			frame.Position = UDim2.new(0, 142, 0.9, -neededHeight)
		end

		local lobbyFrame = Instance.new("Frame", frame)
		lobbyFrame.BackgroundTransparency = 1
		lobbyFrame.Position = UDim2.new(0, 90, 0, 0)
		lobbyFrame.Size = UDim2.new(1, -90, 0.43, 0)
		local uiList = Instance.new("UIListLayout", lobbyFrame)
		uiList.SortOrder = "LayoutOrder"
		uiList.FillDirection = "Horizontal"
		uiList.Padding = UDim.new(0, (screenHeight * frame.Size.Y.Scale * lobbyFrame.Size.Y.Scale)/3)

		local gameFrame = lobbyFrame:Clone()
		gameFrame.Parent = frame
		gameFrame.Position = UDim2.new(0,90,0.57,0)

		local lobbyLbl = Instance.new("TextLabel", frame)
		lobbyLbl.Position = UDim2.new(0,0,0.11,0)
		lobbyLbl.Size = UDim2.new(1,0,0.22,0)
		lobbyLbl.BackgroundTransparency = 1
		lobbyLbl.Font = "SourceSansBold"
		lobbyLbl.TextSize = 30
		lobbyLbl.TextColor3 = Color3.new(1,1,1)
		lobbyLbl.Text = "Lobby:"
		lobbyLbl.TextXAlignment = "Left"
		local gameLbl = lobbyLbl:Clone()
		gameLbl.Parent = frame
		gameLbl.Text = "Game:"
		gameLbl.Position = UDim2.new(0,0,0.66,0)

		local textGap = lobbyLbl.TextBounds.X + 10
		lobbyFrame.Position = UDim2.new(0, textGap, 0, 0)
		lobbyFrame.Size = UDim2.new(1, -textGap, 0.43, 0)
		gameFrame.Position = UDim2.new(0, textGap, 0.57, 0)
		gameFrame.Size = UDim2.new(1, -textGap, 0.43, 0)

		local function CreateIcon(data)
			local main = Instance.new("ImageLabel")
			main.BackgroundTransparency = 1
			main.Size = UDim2.new(1,0,1,0)
			main.Image = icons[data.Level]
			
			Instance.new("UIAspectRatioConstraint", main).DominantAxis = "Height"

			local sub = Instance.new("ImageLabel", main)
			sub.Size = UDim2.new(1,0,1,0)
			sub.BackgroundTransparency = 1
			sub.Image = "rbxthumb://type=AvatarHeadShot&id=" .. data.Player.UserId .. "&w=150&h=150"

			Instance.new("UICorner", sub).CornerRadius = UDim.new(0,30)

			local nameLbl = Instance.new("TextLabel", sub)
			nameLbl.BackgroundTransparency = 1
			nameLbl.Position = UDim2.new(0,0,1,0)
			nameLbl.Size = UDim2.new(1,0,0.25,0)
			nameLbl.Text = data.Player.Name
			nameLbl.TextColor3 = Settings.RoleColors[Settings.GameplayMap[data.Player.Name]] or Color3.new(1,1,1)
			nameLbl.TextSize = screenHeight * frame.Size.Y.Scale * lobbyFrame.Size.Y.Scale * nameLbl.Size.Y.Scale
			nameLbl.Font = "SourceSansBold"
			nameLbl.TextYAlignment = "Bottom"
			nameLbl.TextStrokeTransparency = 0.3
			nameLbl.TextTruncate = "AtEnd"

			local levelLbl = Instance.new("TextLabel", sub)
			levelLbl.BackgroundTransparency = 1
			levelLbl.Size = UDim2.new(1,0,1,0)
			levelLbl.Font = "SourceSansSemibold"
			levelLbl.Text = roman[data.Prestige]
			levelLbl.TextScaled = true
			levelLbl.TextColor3 = Color3.new(1,1,1)
			levelLbl.TextStrokeTransparency = 0.3

			return main
		end

		local function GetPlayersData()
			local data = {}
			for i,v in pairs(game.Players:GetPlayers()) do
				local prestige = v:GetAttribute("Prestige")
				local level = v:GetAttribute("Level")
				if prestige and level then
					table.insert(data, {
						Prestige = prestige,
						Level = level,
						Player = v
					})
				end
			end

			table.sort(data, function(a,b)
				return a.Prestige > b.Prestige
			end)
			return data
		end

		local lbData = GetPlayersData()
		local function Refresh()
			for i,v in pairs(gameFrame:GetChildren()) do
				if v:IsA("ImageLabel") then
					v:Destroy()
				end
			end
			for i,v in pairs(lobbyFrame:GetChildren()) do
				if v:IsA("ImageLabel") then
					v:Destroy()
				end
			end

			for i,v in pairs(lbData) do
				local icon = CreateIcon(v)
				
				if not v.Player.Character or not v.Player.Character:FindFirstChild("HumanoidRootPart") or (lobbyPos - v.Player.Character.HumanoidRootPart.Position).magnitude < 110 then
					icon.Parent = lobbyFrame
				else
					icon.Parent = gameFrame
				end
			end
		end

		game.ReplicatedStorage.Remotes.Misc.UpdateLeaderboard.OnClientEvent:Connect(function(_oldData)
			lbData = GetPlayersData()
		end)

		spawn(function()
			while wait(1) do
				Refresh()
			end
		end)
	end)

	--anti afk--
	local VirtualUser = game:GetService("VirtualUser")
	plr.Idled:Connect(function()
		VirtualUser:CaptureController()
		VirtualUser:ClickButton2(Vector2.new())
	end)

	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
elseif GameName == "World of Magic" then
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP.lua"))()

	local Settings = {
		InfSprint = false,
		GodMode = false,
		Killaura = {
			Enabled = false,
			PositiveNPCs = false,
			NegativeNPCs = false,
			PositivePlayers = false,
			NegativePlayers = false,
			Range = 30,
			Damage = 50,
			WaitForNPCsToLoad = false
		},
		DamageMultiplier = false,
		DeflectDamage = false,
		SeeOwnTag = false,
		HideNameTag = false,
		HideNameInChat = false,
		QuestsRepPereference = "Positive",
		Autofarm = false,
		TeleportBack = false,
		MapClickTp = false,
		ChestsFarm = false,
		PrivateChests = false,
		Whitelist = {},
		AutofarmTargetFilter = false,
		MobsSearchWaitTime = 0.5
	}

	local QuickQuest, GetTarget, safeSpot

	local UiTbl = {}
	UiTbl.game = NewUI:Tab("World Of Magic", {
		Width = 208
	})
	UiTbl.killauraGroup = UiTbl.game:Group("Killaura")
	UiTbl.wlGroup = UiTbl.game:Group("Killaura Whitelist")
	UiTbl.miscGroup = UiTbl.game:Group("Misc")

	UiTbl.killauraCb = UiTbl.killauraGroup:CheckBox("Enabled", function(bool)
		Settings.Killaura.Enabled = bool

		while Settings.Killaura.Enabled do
			local target, dist
			if Settings.AutofarmTargetFilter and Settings.Autofarm then
				if Settings.TargetFilter then
					target = Settings.TargetFilter.Parent
					dist = plr:DistanceFromCharacter(Settings.TargetFilter.Position)
				end
			else
				target, dist = GetTarget()
			end
			if target and ((Settings.Killaura.WaitForNPCsToLoad == true and target:FindFirstChildOfClass("Humanoid")) or Settings.Killaura.WaitForNPCsToLoad == false) then
				if dist > 40 then
					SecureFireServer(game.ReplicatedStorage.RS.Remotes.Combat.DealWeaponDamage, plr.Character, target, [[{"Level":]] .. Settings.Killaura.Damage .. [[,"Name":"Old Dagger"}]], KH_CONSTANT("Throw"))
					wait(.5)
				else
					SecureFireServer(game.ReplicatedStorage.RS.Remotes.Combat.DealWeaponDamage, plr.Character, target, [[{"Level":]] .. Settings.Killaura.Damage .. [[,"Name":"Old Shortsword"}]], KH_CONSTANT("Heavy Slash"))
					wait()
				end
				debugprint("damaging", target:GetFullName())
			else
				wait(.4)
			end
		end
	end, "Killaura")
	UiTbl.killauraCb:Keybind(Enum.KeyCode.F, "Killaura")
	UiTbl.killauraGroup:Slider({
		Min = 0,
		Max = 300,
		Default = 30,
		Parent = UiTbl.killauraCb
	}, function(val)
		Settings.Killaura.Range = val
		return "Range: " .. val
	end, "KillauraRange")
	UiTbl.killauraGroup:Slider({
		Min = 0,
		Max = 7,
		Default = 2,
		Parent = UiTbl.killauraCb
	}, function(val)
		val = 10^val
		Settings.Killaura.Damage = val
		return "Damage: " .. val
	end, "KillauraDamage")

	UiTbl.killauraGroup:CheckBox("Wait For NPCs To Load", function(bool)
		Settings.Killaura.WaitForNPCsToLoad = bool
	end, "WaitForNPCsToLoad")

	UiTbl.goodNpcsCb = UiTbl.killauraGroup:CheckBox("Target Good NPCs", function(bool)
		Settings.Killaura.PositiveNPCs = bool
	end, "KillauraPositiveNPCs")

	UiTbl.badNpcsCb = UiTbl.killauraGroup:CheckBox("Target Bad NPCs", function(bool)
		Settings.Killaura.NegativeNPCs = bool
	end, "KillauraNegativeNPCs")

	UiTbl.killauraGroup:CheckBox("Target Good Players", function(bool)
		Settings.Killaura.PositivePlayers = bool
	end, "KillauraPositivePlayers")

	UiTbl.killauraGroup:CheckBox("Target Bad Players", function(bool)
		Settings.Killaura.NegativePlayers = bool
	end, "KillauraNegativePlayers")

	local function GetHealth(model)
		if game.Players:GetPlayerFromCharacter(model) then
			local hum = model:FindFirstChildOfClass("Humanoid")
			if hum then
				return hum.Health
			end
		end
		if not model:FindFirstChildOfClass("Humanoid") then
			if Settings.Killaura.WaitForNPCsToLoad then
				return 100
			end
		end
		local attrib = model:FindFirstChild("Attributes")
		if attrib then
			local health = attrib:FindFirstChild("Health")
			if health then
				return health.Value
			end
		end
		return 0
	end
	UiTbl.autoFarmCb = UiTbl.killauraGroup:CheckBox("Autofarm", function(bool)
		Settings.Autofarm = bool

		if not bool then
			UiTbl.autoFarmCb.Enabled = false
			return
		end

		local pos = plr.Character.HumanoidRootPart.CFrame
   	 	local first = true
		while Settings.Autofarm do
			if not Settings.Killaura.PositiveNPCs and not Settings.Killaura.NegativeNPCs and not Settings.Killaura.PositivePlayers and not Settings.Killaura.NegativePlayers then
				UiTbl.goodNpcsCb.Click()
			end
			local target = GetTarget(true)
			if target and plr.Character and target:FindFirstChild("HumanoidRootPart") then
				local hrp = target.HumanoidRootPart
				Settings.TargetFilter = hrp

				if not first then
					local dist = plr:DistanceFromCharacter(hrp.Position)
					local delay = math.ceil(dist/40)

					if Settings.AutofarmSafeSpot then
						if not safeSpot then
							safeSpot = Instance.new("Part")
							safeSpot.Anchored = true
							safeSpot.Size = Vector3.new(7,1,7)
							safeSpot.Parent = workspace
							local sg = Instance.new("SurfaceGui", safeSpot)
							sg.Adornee = safeSpot
							sg.Face = 1
							sg.CanvasSize = Vector2.new(500, 500)
							local tlb = Instance.new("TextLabel", sg)
							tlb.Size = UDim2.new(1,0,1,0)
							tlb.Text = "wally is\ngay"
							tlb.TextSize = 100
						end
						local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
						if hrp then
							safeSpot.CFrame = CFrame.new(hrp.Position + Vector3.new(0,1000,0))
							plr.Character:MoveTo(safeSpot.Position)
						end
					end

					for i=delay,1,-1 do
						if not Settings.Autofarm then
							UiTbl.autoFarmCb.Components.Label.Object.Text = "Autofarm"
							UiTbl.autoFarmCb.Enabled = true
							return
						end
						UiTbl.autoFarmCb.Components.Label.Object.Text = "Autofarm (" .. i .. ")"
						wait(1)
					end
				end
				first = false
				repeat
					if plr.Character and plr.Character.PrimaryPart then
						plr.Character:SetPrimaryPartCFrame(CFrame.new(hrp.Position))
					end
					if not Settings.Killaura.WaitForNPCsToLoad and not target:FindFirstChildOfClass("Humanoid") then
						wait(1)
					else
						wait()
					end
				until not (GetHealth(target) > 0 and Settings.Autofarm and workspace:IsAncestorOf(target))
			end
			wait()
		end

		Settings.TargetFilter = nil
		UiTbl.autoFarmCb.Components.Label.Object.Text = "Autofarm"
		UiTbl.autoFarmCb.Enabled = true
		if safeSpot and plr:DistanceFromCharacter(safeSpot.Position) <= 30 then
			plr.Character:SetPrimaryPartCFrame(pos)
		end
	end)

	UiTbl.killauraGroup:CheckBox("Safe Waiting Spot", function(bool)
		Settings.AutofarmSafeSpot = bool
	end, "AutofarmSafeSpot")

	UiTbl.killauraGroup:CheckBox("Only Kill\nAutofarm Target", function(bool)
		Settings.AutofarmTargetFilter = bool
	end, "AutofarmTargetFilter"):SetMultiLine()

	UiTbl.wlList = UiTbl.wlGroup:List({
		Height = 90,
		NoPadding = true
	})

	UiTbl.miscGroup:CheckBox("Map Click Tp", function(bool)
		Settings.MapClickTp = bool
	end, "MapClickTp")

	UiTbl.plr = NewUI:Tab("Player", {
		Width = 188
	})
	UiTbl.charGroup = UiTbl.plr:Group("Character")
	UiTbl.staffGroup = UiTbl.plr:Group("Staff Detection")

	local isSprinting = {plr:WaitForChild("bin"):WaitForChild("Sprinting").Value}
	UiTbl.charGroup:CheckBox("Infinite Sprint", function(bool)
		Settings.InfSprint = bool

		if bool and plr.bin.Sprinting.Value then
			game.ReplicatedStorage.RS.Remotes.Misc.SprintingToggle:FireServer() --unsprint on the server

			isSprinting[1] = true
			if plr.Character then
				plr.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Wait() --server sets it back to 16
				plr.Character.Humanoid.WalkSpeed = 36
			end
		elseif not bool and isSprinting[1] then
			isSprinting[1] = false
			game.ReplicatedStorage.RS.Remotes.Misc.SprintingToggle:FireServer()
		end
	end, "InfSprint")

	UiTbl.charGroup:CheckBox("God Mode (NPCs)", function(bool)
		Settings.GodMode = bool
	end, "GodMode")

	UiTbl.charGroup:CheckBox("Damage Multiplier", function(bool)
		Settings.DamageMultiplier = bool
	end, "DamageMultiplier")

	UiTbl.charGroup:CheckBox("Deflect Weapons", function(bool)
		Settings.DeflectDamage = bool
	end, "DeflectDamage")

	local ToggleTag
	UiTbl.charGroup:CheckBox("See Own Tag", function(bool)
		Settings.SeeOwnTag = bool

		ToggleTag(bool)
	end, "SeeOwnTag")

	local HideName
	UiTbl.charGroup:CheckBox("Hide Name Tag", function(bool)
		Settings.HideNameTag = bool

		if bool then
			HideName("Tag")
		end
	end, "HideNameTag")

	UiTbl.hideNameInChatCb = UiTbl.charGroup:CheckBox("Hide Name In Chat", function(bool)
		if bool then
			if messagebox("This will hide your name in chat messages, however players will still see your name if you kill them, and your 'Killed NPCs' statistic won't go up while this is enabled.\nAre you sure you want to continue?", "[KiriotHub]", 0x00000004 + 0x00040000 + 0x00001000 + 0x00010000) == 7 then
				return UiTbl.hideNameInChatCb.Click()
			end
		end
		Settings.HideNameInChat = bool

		if bool then
			HideName("Tag") --removing the tag beforehand prevents the kick lmao
			HideName("Chat")
		end
	end)

	UiTbl.breakHandcuffsBtn = UiTbl.charGroup:Button("Break Handcuffs", function()
		local jailed = plr.Character:FindFirstChild("Jailed")
		if jailed then
			jailed:Destroy()
		end
	end)

	UiTbl.charGroup:Button("Reset Damage Stat", function()
		if Settings.Killaura.Enabled then
			UiTbl.killauraCb.Click()
		end
		UiTbl.killauraCb.Enabled = false

		if plr.bin.MagicEnergy.Value <= 70 then
			local remote = game.ReplicatedStorage.RS.Remotes.Misc.ChargingToggle
			remote:FireServer(true)
			wait(2)
			remote:FireServer(false)
			wait(1)
		end

		local pos = plr.Character.HumanoidRootPart.CFrame
		game.ReplicatedStorage.RS.Remotes.Magic.UseSkill:FireServer(1,1)
		local npc
		local plrRepType = plr.Character.Data.RepType.Value
		for i,v in pairs(workspace.NPCs:GetChildren()) do
			local attrib = v:FindFirstChild("Attributes")
			local data = v:FindFirstChild("Data")
			if attrib and attrib:FindFirstChild("Health") and attrib.Health.Value > 0 and data then
				local repType = data:FindFirstChild("RepType")
				if repType and ((plrRepType == "Positive" or plrRepType == "Neutral") and repType.Value == "Negative" or plrRepType == "Negative" and repType.Value == "Positive") then
					npc = v
					break
				end
			end
		end
		plr.Character:SetPrimaryPartCFrame(npc.HumanoidRootPart.CFrame)
		wait(1)
		SecureFireServer(game.ReplicatedStorage.RS.Remotes.Magic:WaitForChild(KH_CONSTANT("DealAttackDamage")), plr.Character, npc, "Fire Magic", "1", [=[["Blast Attack",1,100,100,false,"Two Hands","(None)","Blast","Fire","Fire"]]=], 0/0)
		wait(7)
		plr.Character:SetPrimaryPartCFrame(pos)
		UiTbl.killauraCb.Enabled = true
	end)

	UiTbl.staffGroup:Label("Alert On Join:")
	UiTbl.staffGroup:CheckBox("Tester", function(bool)
		Settings.TesterAlert = bool
	end, "TesterAlert").Click()
	UiTbl.staffGroup:CheckBox("Staff", function(bool)
		Settings.StaffAlert = bool
	end, "StaffAlert").Click()

	UiTbl.staffGroup:Label("Kick On Join:")
	UiTbl.staffGroup:CheckBox("Tester", function(bool)
		Settings.TesterKick = bool
	end, "TesterKick")
	UiTbl.staffGroup:CheckBox("Staff", function(bool)
		Settings.StaffKick = bool
	end, "StaffKick")

	UiTbl.game = NewUI:Tab("Game")
	UiTbl.questsGroup = UiTbl.game:Group("Quests")
	UiTbl.npcsGroup = UiTbl.game:Group("NPCs")
	UiTbl.fishingGroup = UiTbl.game:Group("Fishing")
	UiTbl.bossesGroup = UiTbl.game:Group("Bosses")

	--[[UiTbl.questsGroup:Dropdown({
		Text = "Rep Preference",
		Radio = true,
		Default = 1,
		Values = {"Positive", "Negative"}
	}, function(val)
		Settings.QuestsRepPereference = val
	end, "QuestsRepPereference")

	UiTbl.quickQuestBtn = UiTbl.questsGroup:Button("Quick Quest", function()
		if plr.bin.QuestGiver.Value ~= nil then
			return
		end

		if Settings.LastQuickQuest and tick() - Settings.LastQuickQuest < 40 then
			if isProto then
				if ask_prompt("[KiriotHub]", "Using Quick Quest too often can get you quest-banned for 20 minutes. Are you sure you want to continue?", "Yes", "Yesn't") == 2 then
					return
				end
			else
				if messagebox("Using Quick Quest too often can get you quest-banned for 20 minutes. Are you sure you want to continue?", "[KiriotHub]", 0x00000004 + 0x00040000 + 0x00001000 + 0x00010000) == 7 then
					return
				end
			end
		end
		Settings.LastQuickQuest = tick()

		local pos = plr.Character.HumanoidRootPart.CFrame
		QuickQuest()
		wait(.5)
		plr.Character:SetPrimaryPartCFrame(pos)
	end)]]

	UiTbl.questsGroup:Button("TP To Quest Giver", function()
		local giver = plr.bin.QuestGiver.Value
		if giver then
			plr.Character:SetPrimaryPartCFrame(giver.HumanoidRootPart.CFrame)
		end
	end)

	UiTbl.questsGroup:Button("TP To Quest Object", function()
		local obj = plr.bin.QuestItem1.Value
		if obj then
			if obj:IsA("BasePart") then
				plr.Character:SetPrimaryPartCFrame(obj.CFrame)
			else
				local part = obj:FindFirstChildWhichIsA("BasePart")
				if part then
					plr.Character:SetPrimaryPartCFrame(part.CFrame)
				end
			end
		end
	end)

	local Storyline, TrackObjective
	UiTbl.storyObjBtn = UiTbl.questsGroup:Button("TP To Story Object", function()
		local data = getupvalue(TrackObjective, 2)
		local quest = Storyline[data.Path .. "Path"][data.Quest]
		local type, tbl = quest.GetPoints(plr.Character.HumanoidRootPart, math.clamp(quest.GoalNum - data.Progress, 0, quest.GoalNum))

		local obj = tbl[1]
		if not obj then
			return
		end
		if type == "Object" then
			if obj.ClassName == "Model" then
				plr.Character:MoveTo(obj.PrimaryPart.Position)
			else
				plr.Character:MoveTo(obj.Position)
			end
		else
			plr.Character:MoveTo(obj)
		end
	end)
	UiTbl.storyObjBtn:SetButtonColor(Color3.fromRGB(200,0,0))

	local function FindNPC(type)
		local pos = plr.Character.HumanoidRootPart.CFrame

		for i,v in pairs(workspace.NPCs:GetChildren()) do
			if v:FindFirstChild("Attributes") and v.Attributes:FindFirstChild("Job") and v.Attributes.Job.Value == type then
				plr.Character:SetPrimaryPartCFrame(v.HumanoidRootPart.CFrame)
				wait(.5)
				local a = game.ReplicatedStorage.RS.UI.ShopGui:Clone()
				a.NPC.Value = v
				a.Parent = plr.PlayerGui

				local loop = true
				a:GetPropertyChangedSignal("Parent"):Connect(function()
					loop = false
					if Settings.TeleportBack then
						plr.Character:SetPrimaryPartCFrame(pos)
					end
				end)

				while loop and plr.Character and plr.Character.Parent do
					plr.Character:SetPrimaryPartCFrame(v.HumanoidRootPart.CFrame)
					wait()
				end
				break
			end
		end
	end
	UiTbl.npcsGroup:Button("Find Metalworker", function()
		FindNPC("Metalworker")
	end)

	UiTbl.npcsGroup:Button("Find Alchemist", function()
		FindNPC("Alchemist")
	end)

	UiTbl.npcsGroup:Button("Find Fishmonger", function()
		FindNPC("Fishmonger")
	end)

	UiTbl.npcsGroup:CheckBox("Teleport Back", function(bool)
		Settings.TeleportBack = bool
	end, "TeleportBack").Click()

	UiTbl.fishingGroup:CheckBox("Autofarm", function(bool)
		Settings.FishingAutofarm = bool
	end, "FishingAutofarm")

	UiTbl.fishingGroup:CheckBox("Return On Death", function(bool)
		Settings.FishingReturnOnDeath = bool
	end, "FishingReturnOnDeath")

	local bossList = {"Minotaur", "The Exiled"}
	UiTbl.bossesGroup:CheckBox("Boss Alert", function(bool)
		Settings.BossAlert = bool
	end, "BossAlert")

	local sounds = {
		["Off"] = 0,
		["Avast Threat Detected"] = 671968646,
		["I play pokemon go"] = 482886779,
		["Kitchen gun"] = 245913129,
		["Rick roll"] = 2672209057,
		["USSR Anthem"] = 1064109642,
		["We are number one"] = 539275200
	}
	local sound = Instance.new("Sound", NewUI.Gui)
	sound.Volume = 10
	local soundDeb = false
	UiTbl.bossesGroup:Dropdown({
		Text = "Alert Sound",
		Radio = true,
		Default = 1,
		Values = {"Off", "Avast Threat Detected", "I play pokemon go", "Kitchen gun", "Rick roll", "USSR Anthem", "We are number one"}
	}, function(val)
		sound.SoundId = "rbxassetid://" .. sounds[val]
		sound.TimePosition = 0
		if not soundDeb then
			soundDeb = true
			return
		end

		if Settings.AlertSound == val then
			return sound:Stop()
		end
		Settings.AlertSound = val
		sound:Play()
	end, "AlertSoundId")

	UiTbl.bossTpBtn = UiTbl.bossesGroup:Button("TP To Boss", function()
		sound:Stop()
		for i,v in pairs(workspace.NPCs:GetChildren()) do
			if v:FindFirstChild("Attributes") and v.Attributes:FindFirstChild("Job") and table.find(bossList, v.Attributes.Job.Value) and v.HumanoidRootPart.Position.Y < 10000 then
				plr.Character:SetPrimaryPartCFrame(v.HumanoidRootPart.CFrame)
				break
			end
		end
	end)
	UiTbl.bossTpBtn:SetButtonColor(Color3.fromRGB(200,0,0))

	local spawnedBosses = {}
	UiTbl.bossesGroup:CheckBox("Boss Farm", function(bool)
		Settings.BossFarm = bool

		--Preparations--
		if not bool then
			return
		end
		if not plr.Character then
			plr.CharacterAdded:Wait()
		end
		if not Settings.BossFarm then
			return
		end
		if not safeSpot then
			safeSpot = Instance.new("Part")
			safeSpot.Anchored = true
			safeSpot.Size = Vector3.new(7,1,7)
			safeSpot.Parent = workspace
			local sg = Instance.new("SurfaceGui", safeSpot)
			sg.Adornee = safeSpot
			sg.Face = 1
			sg.CanvasSize = Vector2.new(500, 500)
			local tlb = Instance.new("TextLabel", sg)
			tlb.Size = UDim2.new(1,0,1,0)
			tlb.Text = "wally is\ngay"
			tlb.TextSize = 100
		end
		local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
		if hrp then
			safeSpot.CFrame = CFrame.new(hrp.Position + Vector3.new(0,1000,0))
			plr.Character:MoveTo(safeSpot.Position)
		end

		if not Settings.Killaura.Enabled then
			coroutine.wrap(UiTbl.killauraCb.Click)()
		end
		if not Settings.Killaura.PositiveNPCs then
			UiTbl.goodNpcsCb.Click()
		end
		if not Settings.Killaura.NegativeNPCs then
			UiTbl.badNpcsCb.Click()
		end

		while Settings.BossFarm do
			if plr.Character then
				local boss = next(spawnedBosses)
				if boss and boss:FindFirstChild("HumanoidRootPart") then
					plr.Character:MoveTo(boss.HumanoidRootPart.Position)
				else
					plr.Character:MoveTo(safeSpot.Position)
				end
			end
			wait(1)
		end
	end)

	local function FindServer(cursor, history)
		local json = game:GetService("HttpService"):JSONDecode(HttpGet("https://games.roblox.com/v1/games/3272915504/servers/public?cursor=" .. cursor .. "&limit=100"))
		local servers = json.data
		local rand = Random.new(tick())
		while #servers > 0 do
			local v = table.remove(servers, rand:NextInteger(1, #servers))
			if v.playing < v.maxPlayers and not table.find(history, v.id) then
				history[#history + 1] = v.id
				SetTPSetting("KHFindBossServer", history)
				game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, v.id)
				return
			end
		end

		if not json.nextPageCursor then
			return --last page?
		end
		FindServer(json.nextPageCursor, history)
	end
	local findBossDeb = false
	UiTbl.findBossBtn = UiTbl.bossesGroup:Button("Serverhop", function()
		if findBossDeb then
			return
		end
		findBossDeb = true
		UiTbl.findBossBtn.ButtonFrame.Button.Label.Text = "Teleporting..."
		FindServer("", {game.JobId})
	end)

	UiTbl.chests = NewUI:Tab("Chests")
	UiTbl.chestsGroup = UiTbl.chests:Group("Chests Farm")

	UiTbl.chestsFarmCb = UiTbl.chestsGroup:CheckBox("Enabled", function(bool)
		Settings.ChestsFarm = bool

		if not bool then
			UiTbl.chestsFarmCb.Enabled = false
			return
		end

		if not Settings.NormalChests and not Settings.PrivateChests then
			UiTbl.normalChestsCb.Click()
		end

		local pos = plr.Character.HumanoidRootPart.CFrame
		local first = true
		while Settings.ChestsFarm do
			for i,v in pairs(workspace.Map:GetDescendants()) do
				if not Settings.ChestsFarm then
					break
				end
				if not Settings.NormalChests and not Settings.PrivateChests then
					UiTbl.chestsFarmCb.Click()
					break
				end
				if (Settings.NormalChests and v.Name == "Chest" or Settings.PrivateChests and v.Name == "PrivateStorage") and not v:FindFirstChild("Open") and v:FindFirstChild("Base") then
					if not first then
						local dist = plr:DistanceFromCharacter(v.Base.Position)
						local delay = math.ceil(dist/50)

						if Settings.ChestsFarmSafeSpot then
							if not safeSpot then
								safeSpot = Instance.new("Part")
								safeSpot.Anchored = true
								safeSpot.Size = Vector3.new(7,1,7)
								safeSpot.Parent = workspace
								local sg = Instance.new("SurfaceGui", safeSpot)
								sg.Adornee = safeSpot
								sg.Face = 1
								sg.CanvasSize = Vector2.new(500, 500)
								local tlb = Instance.new("TextLabel", sg)
								tlb.Size = UDim2.new(1,0,1,0)

								tlb.Text = "wally is\ngay"
								tlb.TextSize = 100
							end
							local hrp = plr.Character.HumanoidRootPart
							safeSpot.CFrame = CFrame.new(hrp.Position + Vector3.new(0,1000,0))
							plr.Character:MoveTo(safeSpot.Position)
						end

						for i=delay,1,-1 do
							if not Settings.ChestsFarm then
								UiTbl.chestsFarmCb.Components.Label.Object.Text = "Enabled"
								UiTbl.chestsFarmCb.Enabled = true
								return
							end
							UiTbl.chestsFarmCb.Components.Label.Object.Text = "Enabled (" .. i .. ")"
							wait(1)
						end
					end
					first = false
					plr.Character:SetPrimaryPartCFrame(v.Base.CFrame * CFrame.new(0,5,0))
					wait(.1)
					game.ReplicatedStorage.RS.Remotes.Misc.OpenChest:FireServer(v)
					local start = tick()
					while not v:FindFirstChild("Open") and tick() - start < 2 do
						game.ReplicatedStorage.RS.Remotes.Misc.OpenChest:FireServer(v)
						wait(.5)
					end
				end
			end
			wait()
		end

		UiTbl.chestsFarmCb.Components.Label.Object.Text = "Enabled"
		UiTbl.chestsFarmCb.Enabled = true
		if safeSpot and plr:DistanceFromCharacter(safeSpot.Position) <= 30 then
			plr.Character:SetPrimaryPartCFrame(pos)
		end
	end)

	UiTbl.normalChestsCb = UiTbl.chestsGroup:CheckBox("Normal Chests", function(bool)
		Settings.NormalChests = bool
	end, "NormalChests")
	UiTbl.normalChestsCb.Click()

	UiTbl.chestsGroup:CheckBox("Private Chests", function(bool)
		Settings.PrivateChests = bool
	end, "PrivateChests")

	UiTbl.chestsGroup:CheckBox("Safe Waiting Spot", function(bool)
		Settings.ChestsFarmSafeSpot = bool
	end, "ChestsFarmSafeSpot")

	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.H, "ESP")
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Rep Color", function(bool)
		ESP.RepColor = bool
	end, "ESPRepColor").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")

	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,176,0,125), UDim2.new(0,88,0,62.5),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)

	--quests--
	do
		local questTypes = {"Deliver Item [+]", "Find Item [+]", "Kill Dark Wizard [+]",
		"Kill Bandit [+]", "Kill Pirate [+]", "Kill Villain [+]", "Deliver Item [-]",
		"Kill Light Wizard [-]", "Kill Bounty Hunter [-]", "Kill MC Scout [-]",
		"Kill Mercenary [-]", "Kill Hero [-]"} --pairs has the aids
		local questMap = {
			["Deliver Item [+]"] = {"DeliverNearbyItem"},
			["Find Item [+]"] = {"GetNearbyMissingItem", "GetNearbyLostItem"},
			["Kill Dark Wizard [+]"] = {"DefeatDarkWizard", "DefeatDarkWizardVS", "DefeatDarkWizardMC", "DefeatDarkWizardGroup", "DefeatDarkWizardGroupVS", "DefeatDarkWizardGroupMC"},
			["Kill Bandit [+]"] = {"DefeatBandit", "DefeatBanditVS", "DefeatBanditMC", "DefeatBanditGroup", "DefeatBanditGroupVS", "DefeatBanditGroupMC", "ClearSmallBanditCamp", "ClearSmallBanditCampLW"},
			["Kill Pirate [+]"] = {"DefeatPirate", "DefeatPirateVS", "ClearSmallPirateShip", "ClearSmallPirateShipVS"},
			["Kill Villain [+]"] = {"DefeatVillain"},
			["Deliver Item [-]"] = {"DeliverNearbyIllegal"},
			["Kill Light Wizard [-]"] = {"KillLightWizard", "KillLightWizardGroup"},
			["Kill Bounty Hunter [-]"] = {"KillBountyHunter", "KillBountyHunterGroup"},
			["Kill MC Scout [-]"] = {"KillMCScout", "KillMCScoutGroup", "DestroySmallMCCamp"},
			["Kill Mercenary [-]"] = {"KillMercenary", "DestroySmallMercenaryShip"},
			["Kill Hero [-]"] = {"KillHero"}
		}
		UiTbl.questsGroup:Dropdown({
			Text = "Find Quest",
			Radio = false,
			Values = questTypes
		}, function(val)
			local ch = workspace.NPCs:GetChildren()
			for i = #ch, 2, -1 do
				local j = math.random(i)
				ch[i], ch[j] = ch[j], ch[i]
			end

			for i,v in pairs(ch) do
				local data = v:FindFirstChild("Data")
				if data then
					local questType = data:FindFirstChild("QuestType")
					local questAccepter = data:FindFirstChild("QuestAccepter")
					if questType and questAccepter and not questAccepter.Value and FIT(questMap[val], questType.Value) then
						debugprint("found", questType.Value)
						plr.Character:SetPrimaryPartCFrame(v.HumanoidRootPart.CFrame)
						break
					end
				end
			end
		end)
	end

	--storyline--
	do
		coroutine.wrap(function()
			wait() --equal to spawn but slightly more recognizable error trace
			Storyline = require(game.ReplicatedStorage:WaitForChild("RS"):WaitForChild("Modules"):WaitForChild("Storyline"))

			TrackObjective = loadstring([[
			local getgc, islclosure, is_synapse_function, getconstants, FIT, debugprint = ...
			while true do
				for i,v in pairs(getgc()) do
					if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
						local consts = getconstants(v)
						if FIT(consts, " Storyl" .. ("i"):reverse() .. "ne Objective") then --sentinel is retarded
							return v
						end
					end
				end
				debugprint("getgc tick")
				wait(5)
			end]])(getgc, islclosure, is_synapse_function, getconstants, FIT, debugprint)

			local data = getupvalue(TrackObjective, 2)
			while true do
				if data.Path then
					local quest = Storyline[data.Path .. "Path"][data.Quest]
					if quest and quest.GetPoints then
						local type, tbl = quest.GetPoints((plr.Character or plr.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart"), math.clamp(quest.GoalNum - data.Progress, 0, quest.GoalNum))
						debugprint("storyline tick")

						local obj = tbl[1]
						if not obj then
							UiTbl.storyObjBtn:SetButtonColor(Color3.fromRGB(200,0,0))
						else
							UiTbl.storyObjBtn:SetButtonColor(Color3.fromRGB(29,207,115))
						end
					end
				else
					UiTbl.storyObjBtn:SetButtonColor(Color3.fromRGB(200,0,0))
				end
				wait(5)
			end
		end)()
	end

	--auto fish--
	game.ReplicatedStorage.RS.Remotes.Misc.FishEvent.OnClientEvent:Connect(function(p, type, item, fish)
		if type == "Bite" and p == plr and Settings.FishingAutofarm then
			debugprint("okay catching",item)
			for i=1,plr.Character:WaitForChild("FishBiteGoal").Value + 1 do
				game.ReplicatedStorage.RS.Remotes.Misc.FishState:FireServer("Reel")
				wait()
			end
			debugprint("now stopping")
			game.ReplicatedStorage.RS.Remotes.Misc.FishState:FireServer("StopClock")
			wait()
			debugprint("now resetting")
			game.ReplicatedStorage.RS.Remotes.Misc.ToolAction:FireServer(plr.Character:FindFirstChildOfClass("Tool"))
			local bobberVal = plr.Character:FindFirstChild("BobberVal")
			if bobberVal then
				bobberVal:GetPropertyChangedSignal("Parent"):Wait()
			else
				wait(3)
			end
			wait(0.5)
			local hrp = plr.Character.HumanoidRootPart
			while (Vector3.new(hrp.Position.X, 0, hrp.Position.Z) - Vector3.new(Settings.FishingSpot.p.X, 0, Settings.FishingSpot.p.Z)).magnitude > 1 and Settings.FishingAutofarm do
				plr.Character.Humanoid:MoveTo(Settings.FishingSpot.p)
				wait(.1)
			end
			debugprint("now casting again")
			game.ReplicatedStorage.RS.Remotes.Misc.ToolAction:FireServer(plr.Character:FindFirstChildOfClass("Tool"))

			--retry after 3 seconds--
			while not plr.Character:WaitForChild("BobberVal", 3) do
				game.ReplicatedStorage.RS.Remotes.Misc.ToolAction:FireServer(plr.Character:FindFirstChildOfClass("Tool"))
			end
		end
	end)

	--inf sprint, god mode--
	do
		local old = {}
		old[1] = hookmetamethod(game, "__namecall", loadstring([[
			local old, Settings, plr, isSprinting = ...

			return function(self, ...)
				local method = getnamecallmethod()
				if Settings.InfSprint and self.Name == "SprintingToggle" and method == "FireServer" and not checkcaller() then
					isSprinting[1] = not isSprinting[1]

					if plr.Character then
						plr.Character.Humanoid.WalkSpeed = isSprinting[1] and 36 or 16
					end
					return
				elseif (self.Name == "DealWeaponDamage" or self.Name == "DealAttackDamage") and method == "FireServer" then
					local args = {...}
					if args[2] == plr.Character then
						if Settings.DeflectDamage then
							args[1], args[2] = args[2], args[1]
							return old[1](self, unpack(args))
						elseif Settings.GodMode then
							return
						end
					elseif Settings.DamageMultiplier then
						for i=1,20 do
							old[1](self, ...)
						end
						--args[6] = 0/0
						--return old[1](self, unpack(args))
					end
				elseif self.Name == "DealBossDamage" and Settings.GodMode and method == "FireServer" then
					local args = {...}
					if args[2] == plr.Character then
						return
					end
				elseif self.Name == "SetMarker" and Settings.MapClickTp and method == "FireServer" then
					local args = {...}
					local x,z = args[1], args[2]
					plr.Character:MoveTo(Vector3.new(x,100,z))
					return
				elseif self.Name == "FishClock" and Settings.FishingAutofarm and not checkcaller() and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and method == "FireServer" then
					Settings.FishingSpot = plr.Character.HumanoidRootPart.CFrame
					Settings.FishingTool = plr.Character:FindFirstChildOfClass("Tool")
				elseif self.Name == "TailorChange" and checkcaller() and method == "InvokeServer" then
					local args = {...}
					if args[3] < 0 then
						return
					end
				end
				setnamecallmethod(method)
				return old[1](self, ...)
			end
		]])(old, Settings, plr, isSprinting))

		local WasFishing = false
		local function CharAdded(char)
			local hum = char:WaitForChild("Humanoid")
			hum:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
				if Settings.InfSprint and isSprinting[1] and hum.WalkSpeed == 16 then
					hum.WalkSpeed = 36
				end
			end)
			hum.Died:Connect(function()
				if Settings.FishingAutofarm and Settings.FishingReturnOnDeath and Settings.FishingTool and plr.Character:FindFirstChild(Settings.FishingTool.Name) then
					WasFishing = true
				end
			end)

			if Settings.FishingAutofarm and Settings.FishingReturnOnDeath and Settings.FishingSpot and Settings.FishingTool and WasFishing then
				local rod = plr.Backpack:WaitForChild(Settings.FishingTool.Name, 10)
				assert(rod, "No fishing rod found")

				local hrp = char:WaitForChild("HumanoidRootPart")
				while (hrp.Position - Settings.FishingSpot.p).magnitude > 30 do
					char:SetPrimaryPartCFrame(Settings.FishingSpot)
					wait()
				end
				UiTbl.breakHandcuffsBtn.Callback()

				rod.Parent = plr.Character
				wait(.1)
				game.ReplicatedStorage.RS.Remotes.Misc.ToolAction:FireServer(rod)
			end
			WasFishing = false
		end

		plr.CharacterAdded:Connect(CharAdded)
		if plr.Character then
			CharAdded(plr.Character)
		end
	end

	--quests--
	--[[do
		local function UpdateQuestButtons(bool)
			if bool then
				UiTbl.quickQuestBtn.Enabled = false
				UiTbl.quickQuestBtn:SetButtonColor(Color3.fromRGB(200,0,0))
			else
				UiTbl.quickQuestBtn.Enabled = true
				UiTbl.quickQuestBtn:SetButtonColor(Color3.fromRGB(255,170,0))
			end
		end
		plr.bin.QuestGiver.Changed:Connect(UpdateQuestButtons)
		UpdateQuestButtons(plr.bin.QuestGiver.Value)
	end]]
	local function NPCDialog(npc, forceCompleteQuest, acceptQuest)
		game.ReplicatedStorage.RS.Remotes.NPC.Dialog:InvokeServer(npc, "Start")
		wait(1)
		if acceptQuest then
			if game.ReplicatedStorage.RS.Remotes.NPC.Quest:InvokeServer("Accept", npc) ~= true then
				return false
			end
			wait(1)
		end
		game.ReplicatedStorage.RS.Remotes.NPC.Dialog:InvokeServer(npc, "End")
		wait(.5)
		while forceCompleteQuest and plr.bin.QuestGiver.Value do
			game.ReplicatedStorage.RS.Remotes.NPC.Dialog:InvokeServer(npc, "Start")
			wait(.5)
			game.ReplicatedStorage.RS.Remotes.NPC.Dialog:InvokeServer(npc, "End")
		end

		return true
	end
	local function CompleteQuest()
		local questType = plr.bin.QuestType.Value

		if (Settings.QuestsRepPereference == "Positive" and questType == "DeliverNearbyItem") or (Settings.QuestsRepPereference == "Negative" and questType == "DeliverNearbyIllegal") then
			debugprint("doing",questType)
			local npc = plr.bin.QuestItem1.Value
			if npc then
				debugprint("talking to npc 1")
				plr.Character:SetPrimaryPartCFrame(npc.HumanoidRootPart.CFrame)
				wait()
				NPCDialog(npc)
				debugprint("done")
				wait(1)
			end

			local giver = plr.bin.QuestGiver.Value
			plr.Character:SetPrimaryPartCFrame(giver.HumanoidRootPart.CFrame)
			wait()
			debugprint("talking to giver npc")
			NPCDialog(giver, true)
			debugprint("done")
		elseif Settings.QuestsRepPereference == "Positive" and (questType == "GetNearbyLostItem" or questType == "GetNearbyMissingItem") then
			debugprint("doing",questType)
			local item = plr.bin.QuestItem1.Value
			if item then
				debugprint("picking up the item")
				plr.Character:SetPrimaryPartCFrame(item.CFrame)
				wait()
				game.ReplicatedStorage.RS.Remotes.UI.ObjectClick:FireServer(item)
				debugprint("done")
				wait(1)
			end

			local giver = plr.bin.QuestGiver.Value
			plr.Character:SetPrimaryPartCFrame(giver.HumanoidRootPart.CFrame)
			wait()
			debugprint("talking to giver npc")
			NPCDialog(giver, true)
			debugprint("done")
		end

		debugwarn("finished")
	end
	
	local FailCount = 0
	local DoableQuests = {
		Positive = {
			DeliverNearbyItem = true,
			GetNearbyLostItem = true,
			GetNearbyMissingItem = true,
		},
		Negative = {
			DeliverNearbyIllegal = true,
		}
	}
	QuickQuest = function()
		FailCount = 0
		for i,v in pairs(workspace.NPCs:GetChildren()) do
			if FailCount >= 10 then
				return
			end
			local data = v:FindFirstChild("Data")
			if data then
				local questType = data:FindFirstChild("QuestType")
				local questAccepter = data:FindFirstChild("QuestAccepter")
				if questType and questAccepter and not questAccepter.Value and DoableQuests[Settings.QuestsRepPereference][questType.Value] then
					plr.Character:SetPrimaryPartCFrame(v.HumanoidRootPart.CFrame)
					wait()
					if NPCDialog(v, false, true) then
						wait(1)
						CompleteQuest()
						return
					else
						FailCount = FailCount + 1
					end
				end
			end
		end
		FailCount = 0
	end

	GetTarget = loadstring([[
	local Settings, plr, bossList = ...
	return function(ignoreLimits)
		local range = ignoreLimits and 9999 or Settings.Killaura.Range
		local closestNPC, closestPart, closestDist

		if Settings.Killaura.PositiveNPCs or Settings.Killaura.NegativeNPCs then
			for i,v in pairs(workspace.NPCs:GetChildren()) do
				local attrib = v:FindFirstChild("Attributes")
				local data = v:FindFirstChild("Data")
				local job = attrib and attrib:FindFirstChild("Job")
				local hum = v:FindFirstChildOfClass("Humanoid")
				if attrib and attrib:FindFirstChild("Health") and attrib.Health.Value > 0 and data and (((Settings.Killaura.WaitForNPCsToLoad == true or job and table.find(bossList, job.Value)) and hum or ignoreLimits) or Settings.Killaura.WaitForNPCsToLoad == false) then
					local repType = data:FindFirstChild("RepType")
					if repType then
						if repType.Value == "Positive" and Settings.Killaura.PositiveNPCs or repType.Value == "Negative" and Settings.Killaura.NegativeNPCs then
							local hrp = v:FindFirstChild("HumanoidRootPart")
							if hrp then
								local dist = plr:DistanceFromCharacter(hrp.Position)
								if (not closestNPC or dist < closestDist) and dist <= range then
									closestNPC = v
									closestPart = hrp
									closestDist = dist
								end
							end
						end
					end
				end
			end
		end

		if Settings.Killaura.PositivePlayers or Settings.Killaura.NegativePlayers then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				local char = v.Character
				if char and v ~= plr and not Settings.Whitelist[v.Name] then
					local data = char:FindFirstChild("Data")
					if data then
						local repType = data:FindFirstChild("RepType")
						if repType then
							if (repType.Value == "Positive" or repType.Value == "Neutral") and Settings.Killaura.PositivePlayers or repType.Value == "Negative" and Settings.Killaura.NegativePlayers then
								local pass = true
								local head = v.Character:FindFirstChild("Head")
								if head then
									local overhead = head:FindFirstChild("Overhead")
									if overhead then
										local level = overhead:FindFirstChild("Level")
										if level then
											local val = level.Text:match("Level (%d+)")
											if tonumber(val) and tonumber(val) < 30 then
												pass = false
											end
										end
									end
								end
								local hrp = v.Character:FindFirstChild("HumanoidRootPart")
								if hrp and pass then
									local dist = plr:DistanceFromCharacter(hrp.Position)
									if (not closestNPC or dist < closestDist) and dist <= range then
										closestNPC = char
										closestPart = hrp
										closestDist = dist
									end
								end
							end
						end
					end
				end
			end
		end

		return closestNPC, closestDist
	end]])(Settings, plr, bossList)

	HideName = function(type)
		if type == "Tag" then
			local tag = plr.Character:WaitForChild("Head"):WaitForChild("Overhead", 5)
			if tag then
				local name = tag:WaitForChild("Player", 5)
				if name then
					name:Destroy()
				end
			end
		elseif type == "Chat" then
			local data = plr.Character:WaitForChild("Data", 5)
			if data then
				local fullName = data:WaitForChild("FullName", 5)
				if fullName then
					fullName:Destroy()
				end
			end
		end
	end

	ToggleTag = function(bool)
		local tag = plr.Character:WaitForChild("Head"):WaitForChild("Overhead", 5)
		if tag then
			tag.PlayerToHideFrom = bool == false and plr or nil
		end
	end

	local function CharAdded(char)
		char.DescendantAdded:Connect(function(c)
			if c.Name == "Overhead" and Settings.SeeOwnTag then
				c.PlayerToHideFrom = nil
			elseif c.Name == "Player" and Settings.HideNameTag or c.Name == "FullName" and Settings.HideNameInChat then
				wait()
				HideName("Tag") --removing the tag beforehand prevents the kick lmao
				c:Destroy()
			end
		end)
	end
	plr.CharacterAdded:Connect(CharAdded)
	if plr.Character then
		CharAdded(plr.Character)
	end

	--bosses--
	local function CheckNewNPC(npc)
		local attrib = npc:WaitForChild("Attributes", 10)
		if attrib then
			local job = attrib:WaitForChild("Job", 10)
			local health = attrib:WaitForChild("Health", 10)
			if job and health and health.Value > 0 and table.find(bossList, job.Value) then
				coroutine.wrap(function()
					local hrp = npc.HumanoidRootPart
					while hrp.Position.Y > 10000 do
						debugprint("waiting for boss")
						wait(1)
					end
					spawnedBosses[npc] = true
					UiTbl.bossTpBtn:SetButtonColor(Color3.fromRGB(29,207,115))
					if Settings.BossAlert then
						sound:Play()
						local cb = Instance.new("BindableFunction")
						cb.OnInvoke = function()
							sound:Stop()
						end
						for i=1,3 do
							game:GetService("StarterGui"):SetCore("SendNotification", {
								Title = "KiriotHub",
								Text = job.Value .. " spawned!!!",
								Icon = "rbxassetid://4698324000",
								Duration = 69,
								Button1 = "did i ask?",
								Callback = cb
							})
						end
					end

					local function BossDied()
						spawnedBosses[npc] = nil
						for i,v in pairs(spawnedBosses) do
							if i.Parent ~= nil then
								return
							end
						end
						UiTbl.bossTpBtn:SetButtonColor(Color3.fromRGB(200,0,0))
					end
					npc:GetPropertyChangedSignal("Parent"):Connect(function()
						BossDied()
					end)
					health.Changed:Connect(function(val)
						if val <= 0 then
							BossDied()
						end
					end)
				end)()
			end
		end
	end
	workspace.NPCs.ChildAdded:Connect(CheckNewNPC)
	for i,v in pairs(workspace.NPCs:GetChildren()) do
		coroutine.wrap(CheckNewNPC)(v)
	end

	--anti afk--
	local VirtualUser = game:GetService("VirtualUser")
	plr.Idled:Connect(function()
		VirtualUser:CaptureController()
		VirtualUser:ClickButton2(Vector2.new())
	end)

	--ESP--
	do
		local Basic = require(game.ReplicatedStorage.RS:WaitForChild("Modules"):WaitForChild("Basic"))
		ESP.Overrides.UpdateColor = function(char)
			if ESP.RepColor then
				local p = game.Players:GetPlayerFromCharacter(char)
				if p then
					local bin = p:FindFirstChild("bin")
					if bin then
						local rep = bin:FindFirstChild("Reputation")
						if rep then
							local _, color = Basic.GetReputation(rep.Value)
							return color
						end
					end
				end
			else
				local data = char:FindFirstChild("Data")
				if data then
					local repType = data:FindFirstChild("RepType")
					if repType then
						if repType.Value == "Positive" or repType.Value == "Neutral" then
							return Color3.fromRGB(81, 255, 0)
						elseif repType.Value == "Negative" then
							return Color3.fromRGB(199, 14, 14)
						end
					end
				end
			end
		end
	end

	ESP.Overrides.UpdateAllow = function(_char, hrp)
		return hrp.Position.Y < 5000
	end

	--Refreshing Killaura Whitelist--
	spawn(function()
		local function Refresh()
			UiTbl.wlList:Clear()
			
			local list = {}
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v ~= plr then
					list[#list + 1] = v
				end
			end
			
			table.sort(list, function(a,b)
				return a.Name:lower() < b.Name:lower()
			end)
			
			for i,v in pairs(list) do
				local new
				new = UiTbl.wlList:Button(v.Name, function()
				Settings.Whitelist[v.Name] = Settings.Whitelist[v.Name] == nil and true or nil
					if Settings.Whitelist[v.Name] then
						new:SetButtonColor(Color3.fromRGB(29,207,115))
					else
						new:SetButtonColor(Color3.fromRGB(255, 170, 0))
					end
				end, UDim2.new(1,-10,0,22))
				
				if Settings.Whitelist[v.Name] then
					new:SetButtonColor(Color3.fromRGB(29,207,115))
				end
			end
		end
		
		game:GetService("Players").PlayerAdded:Connect(Refresh)
		game:GetService("Players").PlayerRemoving:Connect(function(p)
			Settings.Whitelist[p.Name] = nil
			Refresh()
		end)
		Refresh()
	end)

	--mod detector--
	coroutine.wrap(function()
		plr.PlayerGui:WaitForChild("CustomChat"):WaitForChild("ChatHandler")

		local tries = 0
		local NewSystemMessage
		repeat
			for i,v in pairs(getgc()) do
				if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
					local consts = getconstants(v)
					if FIT(consts, "") and FIT(consts, "DesiredY") and debug.getinfo(v).name == "NewSystemMessage" then
						NewSystemMessage = v
						break
					end
				end
			end
			tries = tries + 1
			wait(1)
		until NewSystemMessage or tries > 10

		local function PlrAdded(p)
			local rank = p:GetRankInGroup(3596833)
			if (rank >= 9 and Settings.TesterAlert or rank >= 253 and Settings.StaffAlert) and NewSystemMessage then
				debugprint("alerting about",p)
				NewSystemMessage("[KiriotHub] Game staff joined: " .. p.Name .. " (" .. p:GetRoleInGroup(3596833) .. ")", Color3.fromRGB(255, 170, 0), Enum.Font.SourceSansBold)
			end
			if rank >= 9 and Settings.TesterKick or rank >= 253 and Settings.StaffKick then
				local time = os.date("*t")
				time.min = time.min < 10 and "0" .. time.min or time.min
				plr:Kick("\n[KiriotHub] Game staff joined: " .. p.Name .. "\nRank: " .. p:GetRoleInGroup(3596833) .. "\nAt " .. time.hour .. ":" .. time.min)
			end
		end
		game:GetService("Players").PlayerAdded:Connect(PlrAdded)
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			PlrAdded(v)
		end
	end)()

	--Boss Server Finder--
	spawn(function()
		local data = GetTPSetting("KHFindBossServer")
		if data then
			findBossDeb = true
			UiTbl.findBossBtn.ButtonFrame.Button.Label.Text = "Waiting..."
			local start = tick()
			while tick() - start < 5 do
				if next(spawnedBosses) then
					UiTbl.findBossBtn.ButtonFrame.Button.Label.Text = "Serverhop"
					findBossDeb = false
					return SetTPSetting("KHFindBossServer", false)
				end
				wait()
			end
			UiTbl.findBossBtn.ButtonFrame.Button.Label.Text = "Teleporting..."
			FindServer("", data)
		end
	end)
	plr.OnTeleport:Connect(function(state)
		local data = GetTPSetting("KHFindBossServer")
		if data and state == Enum.TeleportState.Failed then
			FindServer("", data)
		end
	end)

	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
elseif GameName == "Arcane Odyssey" and isDebug then
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP.lua"))()

	local Settings = {}

	local QuickQuest, GetTarget, safeSpot

	local UiTbl = {}
	UiTbl.game = NewUI:Tab("Arcane Odyssey", {
		Width = 208
	})
	UiTbl.killauraGroup = UiTbl.game:Group("Killaura")
	UiTbl.wlGroup = UiTbl.game:Group("Killaura Whitelist")
	UiTbl.miscGroup = UiTbl.game:Group("Misc")

	UiTbl.miscGroup:CheckBox("Map Click Tp", function(bool)
		Settings.MapClickTp = bool
	end, "MapClickTp")

	UiTbl.plr = NewUI:Tab("Player", {
		Width = 188
	})
	UiTbl.charGroup = UiTbl.plr:Group("Character")
	UiTbl.staffGroup = UiTbl.plr:Group("Staff Detection")

	UiTbl.charGroup:CheckBox("God Mode (NPCs)", function(bool)
		Settings.GodMode = bool
	end, "GodMode")

	local ToggleTag
	UiTbl.charGroup:CheckBox("See Own Tag", function(bool)
		Settings.SeeOwnTag = bool

		ToggleTag(bool)
	end, "SeeOwnTag")

	UiTbl.staffGroup:Label("Alert On Join:")
	UiTbl.staffGroup:CheckBox("Tester", function(bool)
		Settings.TesterAlert = bool
	end, "TesterAlert").Click()
	UiTbl.staffGroup:CheckBox("Staff", function(bool)
		Settings.StaffAlert = bool
	end, "StaffAlert").Click()

	UiTbl.staffGroup:Label("Kick On Join:")
	UiTbl.staffGroup:CheckBox("Tester", function(bool)
		Settings.TesterKick = bool
	end, "TesterKick")
	UiTbl.staffGroup:CheckBox("Staff", function(bool)
		Settings.StaffKick = bool
	end, "StaffKick")

	UiTbl.game = NewUI:Tab("Game")
	UiTbl.questsGroup = UiTbl.game:Group("Quests")
	UiTbl.npcsGroup = UiTbl.game:Group("NPCs")
	UiTbl.fishingGroup = UiTbl.game:Group("Fishing")
	UiTbl.bossesGroup = UiTbl.game:Group("Bosses")

	local TrackObjective, TrackQuest
	UiTbl.questsGroup:Button("TP To Objective Giver", function()
		local giver = plr.bin.QuestGiver.Value
		if giver then
			plr.Character:SetPrimaryPartCFrame(giver.HumanoidRootPart.CFrame)
		end
	end)

	UiTbl.questsGroup:Button("TP To Objective Object", function()
		local data = getupvalue(TrackObjective, 2)
		local quest = getupvalue(TrackObjective, 3).Info[data.Quest]

		local type, tbl = quest.GetPoints(plr.Character.HumanoidRootPart, math.clamp(quest.GoalNum - data.Progress, 0, quest.GoalNum))
		plr.Character:MoveTo(tbl[1])
	end)

	UiTbl.questsGroup:Button("TP To Quest Giver", function()
		local data = getupvalue(TrackObjective, 2)
		local quest = getupvalue(TrackQuest, 4).List[getupvalue(TrackQuest, 3)[plr.bin.TrackedQuest.Value][1]]

		plr.Character:MoveTo(workspace.NPCs[quest.QuestGiver].CF.Value.p)
	end)
	
	UiTbl.storyObjBtn = UiTbl.questsGroup:Button("TP To Quest Object", function()
		local data = getupvalue(TrackObjective, 2)
		local quest = getupvalue(TrackQuest, 4).List[getupvalue(TrackQuest, 3)[plr.bin.TrackedQuest.Value][1]]
		local type, tbl = quest.GetPoints(plr.Character.HumanoidRootPart, math.clamp(quest.GoalNum - data.Progress, 0, quest.GoalNum))

		local obj = tbl[1]
		if not obj then
			return
		end
		plr.Character:MoveTo(obj)
	end)
	UiTbl.storyObjBtn:SetButtonColor(Color3.fromRGB(200,0,0))

	local function FindNPC(type)
		local pos = plr.Character.HumanoidRootPart.CFrame

		for i,v in pairs(workspace.NPCs:GetChildren()) do
			local model = v:FindFirstChild("Model") and v.Model.Value
			local cf = v:FindFirstChild("CF") and v.CF.Value

			if model and model:FindFirstChild("Attributes") and model.Attributes:FindFirstChild("Job") and model.Attributes.Job.Value == type then
				plr.Character:SetPrimaryPartCFrame(cf)
				wait(.5)
				local a = game.ReplicatedStorage.RS.UI.ShopGui:Clone()
				a.NPC.Value = v
				a.Parent = plr.PlayerGui

				local loop = true
				a:GetPropertyChangedSignal("Parent"):Connect(function()
					loop = false
					if Settings.TeleportBack then
						plr.Character:SetPrimaryPartCFrame(pos)
					end
				end)

				while loop and plr.Character and plr.Character.Parent do
					plr.Character:SetPrimaryPartCFrame(cf)
					wait()
				end
				break
			end
		end
	end
	UiTbl.npcsGroup:Button("Find Metalworker", function()
		FindNPC("Metalworker")
	end)

	UiTbl.npcsGroup:Button("Find Alchemist", function()
		FindNPC("Alchemist")
	end)

	UiTbl.npcsGroup:Button("Find Fishmonger", function()
		FindNPC("Fishmonger")
	end)

	UiTbl.npcsGroup:CheckBox("Teleport Back", function(bool)
		Settings.TeleportBack = bool
	end, "TeleportBack").Click()

	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.H, "ESP")
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Rep Color", function(bool)
		ESP.RepColor = bool
	end, "ESPRepColor").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")

	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,176,0,125), UDim2.new(0,88,0,62.5),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)

	--actual stuff--

	do
		task.spawn(function()
			while not TrackObjective and not TrackObjective do
				for i,v in pairs(getgc()) do
					if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
						if debug.getinfo(v).name == "TrackObjective" then
							TrackObjective = v
						elseif debug.getinfo(v).name == "TrackQuest" and debug.getinfo(v).nups > 10 then
							TrackQuest = v
						end
					end
				end
				debugprint("getgc tick")
				wait(5)
			end

			local data = getupvalue(TrackObjective, 2)
			while true do
				if plr.bin.TrackedQuest.Value ~= 0 then
					local quest = getupvalue(TrackQuest, 4).List[getupvalue(TrackQuest, 3)[plr.bin.TrackedQuest.Value][1]]
					if quest and quest.GetPoints then
						local type, tbl = quest.GetPoints((plr.Character or plr.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart"), math.clamp(quest.GoalNum - data.Progress, 0, quest.GoalNum))
						debugprint("storyline tick")

						local obj = tbl[1]
						if not obj then
							UiTbl.storyObjBtn:SetButtonColor(Color3.fromRGB(200,0,0))
						else
							UiTbl.storyObjBtn:SetButtonColor(Color3.fromRGB(29,207,115))
						end
					end
				else
					UiTbl.storyObjBtn:SetButtonColor(Color3.fromRGB(200,0,0))
				end
				wait(5)
			end
		end)
	end

	ToggleTag = function(bool)
		local tag = plr.Character:WaitForChild("Head"):WaitForChild("Overhead", 5)
		if tag then
			tag.PlayerToHideFrom = bool == false and plr or nil
		end
	end

	local function CharAdded(char)
		char.DescendantAdded:Connect(function(c)
			if c.Name == "Overhead" and Settings.SeeOwnTag then
				c.PlayerToHideFrom = nil
			end
		end)
	end
	plr.CharacterAdded:Connect(CharAdded)
	if plr.Character then
		CharAdded(plr.Character)
	end

	--anti afk--
	for i,v in pairs(getconnections(plr.Idled)) do --TODO: check if works
		v:Disable()
	end

	--mod detector--
	coroutine.wrap(function()
		plr.PlayerGui:WaitForChild("CustomChat"):WaitForChild("ChatHandler")

		local tries = 0
		local NewSystemMessage
		repeat
			for i,v in pairs(getgc()) do
				if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
					local consts = getconstants(v)
					if FIT(consts, "") and FIT(consts, "DesiredY") and debug.getinfo(v).name == "NewSystemMessage" then
						NewSystemMessage = v
						break
					end
				end
			end
			tries = tries + 1
			wait(1)
		until NewSystemMessage or tries > 10

		local function PlrAdded(p)
			local rank = p:GetRankInGroup(3596833)
			if (rank >= 9 and Settings.TesterAlert or rank >= 253 and Settings.StaffAlert) and NewSystemMessage then
				debugprint("alerting about",p)
				NewSystemMessage("[KiriotHub] Game staff joined: " .. p.Name .. " (" .. p:GetRoleInGroup(3596833) .. ")", Color3.fromRGB(255, 170, 0), Enum.Font.SourceSansBold)
			end
			if rank >= 9 and Settings.TesterKick or rank >= 253 and Settings.StaffKick then
				local time = os.date("*t")
				time.min = time.min < 10 and "0" .. time.min or time.min
				plr:Kick("\n[KiriotHub] Game staff joined: " .. p.Name .. "\nRank: " .. p:GetRoleInGroup(3596833) .. "\nAt " .. time.hour .. ":" .. time.min)
			end
		end
		game:GetService("Players").PlayerAdded:Connect(PlrAdded)
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			PlrAdded(v)
		end
	end)()

	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
elseif GameName == "Shinobi Life 2" then (function()
	NewUI = NewLib.BoxUiBase("Shinob- I mean Shindo Life 2 (Press Right Shift to hide the UI)")

	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
	ESP.FaceCamera = true

	local Settings = {
		Autofarm = false,
		Killaura = false,
		KillauraRange = 30,
		GodMode = false,
		SilentCommands = false,
		NoFreeze = false,
		ChakraRegen = false,
		ChakraMin = 80,
		CtrlTp = false,
		TpMode = "Accurate",
		LeaveLog = false,
		QuestMap = {
			["Find Cat"] = "cat",
			["Pick Weeds"] = "weeds",
			["Deliver Envelope"] = "envelope",
			["Clean Office"] = "dirt",
			["Clean Graffiti"] = "graffiti",
			["Deliver Groceries"] = "grocerybag",
			["Defeat NPCs"] = "defeat",
			["Defeat Boss"] = "boss",
			["Halloween Event"] = "halloweenevent"
		},
		QuestTypes = {"Find Cat", "Pick Weeds", "Deliver Envelope", "Clean Office", "Clean Graffiti", "Deliver Groceries", "Defeat NPCs", "Defeat Boss", "Halloween Event"},
		Extra = {
			Quests = {
				cat = false,
				weeds = false,
				envelope = false,
				dirt = false,
				graffiti = false,
				grocerybag = false,
				defeat = false,
				boss = true
			},
			KGs = {},
			Elements = {},
			Kenjutsu = {}
		},
		AutofarmTpDelay = 4,
		ServerHopMaxPlayers = plr.Parent.MaxPlayers-1,
		KGLastChanged = {},
		PrestigeRanks = setmetatable({"F 0", "D 1", "D 2", "D 3", "C 1", "C 2", "C 3", "B 1", "B 2", "B 3", "A 1", "A 2", "A 3", "S 1", "S 2", "S 3", "V 1", "V 2", "V 3", "X 1", "X 2", "X 3", "Y 1", "Y 2", "Y 3", "Z 1", "Z 2", "Z 3", "No Limit"}, {
			__index = function()
				return "wtf"
			end
		}),
		ScrollsLocationMap = {
			["Ember"] = 4601350214,
			["Obelisk "] = 4601350809, --yes they put a fucking space in the name, dumbasses
			["Nimbus"] = 4601350656,
			["Haze"] = 4601350760,
			["Dunes"] = 4601350394,
			["Storm"] = 5084678830,
			["Training"] = 5431071837,
			["Forest of Embers"] = 5447073001,
			["Dawn Hideout"] = 5431069982,
			["Tempest"] = 6901575446
		},
		ScrollsTrackerTeleportMode = "Public"
	}

	local CheckScroll, CheckStaff, PSHop, FindServer
	local WarMobs = {}

	local function IsBoss(name)
		local GlobalFunctions = require(game.ReplicatedStorage:WaitForChild("GlobalFunctions"))
		for i,v in pairs(GlobalFunctions.getnpctypes()[2]) do
			if v == name then
				return true
			end
		end
		return false
	end
	local function CheckLevel(npc)
		local GlobalFunctions = require(game.ReplicatedStorage:WaitForChild("GlobalFunctions"))
		local lvlreq = GlobalFunctions.lvlrequirement()

		return lvlreq[npc.Talk.mobname.Value] <= plr.statz.lvl.lvl.Value
	end
	local function CheckNPC(npc, quests, ignoreLevel)
		if type(quests) == "string" then
			quests = {[quests] = true}
		end
		
		if npc.ClassName == "Model" and npc:FindFirstChild("Talk") and npc.Talk:FindFirstChild("typ") and npc:FindFirstChild("Head") and npc.Head:FindFirstChild(KH_CONSTANT("givemission")) and npc.Head.givemission.Enabled and npc:FindFirstChild(KH_CONSTANT("CLIENTTALK")) then
			if quests.boss and npc.Talk.typ.Value == "defeat" and npc.Talk:FindFirstChild("mobname") and IsBoss(npc.Talk.mobname.Value) and (ignoreLevel or CheckLevel(npc)) then
				return true
			elseif quests[npc.Talk.typ.Value] then
				if npc.Talk:FindFirstChild("mobname") and IsBoss(npc.Talk.mobname.Value) then --only count bosses if specifically enabled
					--if quests.boss then
						--return true
					--else
						return false
					--end

					--quest.boss would never be true here because of the elseif
				else
					return true
				end
			end
		end
		return false
	end

	--Functionality funcs--
	local function NoCooldown()
		if not plr.Character:FindFirstChild("beserk") and not plr.Character:FindFirstChild("beserkk") then
			FireChattedBypass("!spirit")
			plr.Character:WaitForChild("beserk")
		end
		plr.Character.combat.KG.currentmode.Value = ""
		plr.Character.beserk.Name = "beserkk"
	end

	local UiTbl = {}
	UiTbl[KH_CONSTANT("questsG")] = NewUI:Tab("Quests")
	UiTbl.questsGroup = UiTbl.questsG:Group("Quests", {
		Collumn = 1
	})
	UiTbl.dailyQuestsGroup = UiTbl.questsG:Group("Daily Quests", {
		Collumn = 1
	})
	UiTbl.questFiltersGroup = UiTbl.questsG:Group("Quests Filters", {
		Collumn = 2
	})

	UiTbl.autofarmCb = UiTbl.questsGroup:CheckBox("Autofarm", function(bool)
		Settings.Autofarm = bool

		local ignore = {}
		local retries = 0
		local lastQuest = tick()
		local lastChange = tick()
		local CurrentMission = plr:WaitForChild(KH_CONSTANT("currentmission"))

		if bool then
			local hum = plr.Character:WaitForChild("Humanoid")
			local pos = plr.Character:WaitForChild("HumanoidRootPart").CFrame
			while Settings.Autofarm do
				local dontWait = false
				game.RunService.Heartbeat:Wait()
				if CurrentMission.Value then
					lastQuest = tick()
					if CurrentMission.Value.text.Value == "Complete the mission!" and (not target or not target:FindFirstChild("TouchInterest")) then
						FireChattedBypass("!cancel") --glitched missions
					else
						local target = CurrentMission.Value.target.Value
						if target then
							retries = 0
							local cd = target:FindFirstChild("ClickDetector")
							if cd then
								fireclickdetector(cd)
							end
							local ti = target:FindFirstChild("TouchInterest")
							if ti then
								target.CFrame = plr.Character.HumanoidRootPart.CFrame
							end
							local point = CurrentMission.Value.text.Value:lower():find("point") and CurrentMission.Value:FindFirstChild("point")
							if point then
								plr.Character:SetPrimaryPartCFrame(point.Value)
							elseif not cd and not ti and (#target:GetChildren() <= 1 or CurrentMission.Value.text.Value:find("Defeat")) then --delivery/mobs
								debugprint("tping to mobs")
								local target = target.CFrame
								if CurrentMission.Value.text.Value:find("Defeat") then
									if Settings.AutofarmTpBelow then
										target = target * CFrame.new(0,-12,0)
									else
										target = target * CFrame.new(0,12,0)
									end
								end
								if not Settings.DontTp then
									plr.Character:SetPrimaryPartCFrame(target)
								end
								dontWait = true

								if tick() - lastChange >= 60 then
									FireChattedBypass("!cancel") --mob kill timeout
								end
							else
								if not safeSpot then
									safeSpot = Instance.new("Model", workspace)
									local part = Instance.new("Part", safeSpot)
									part.Anchored = true
									part.Size = Vector3.new(7,1,7)
									part.CFrame = CFrame.new(0,0,0)
									part.Material = "Concrete"
									safeSpot.PrimaryPart = part
									local wall1 = Instance.new("Part", safeSpot)
									wall1.Anchored = true
									wall1.Size = Vector3.new(7,10,1)
									wall1.CFrame = part.CFrame * CFrame.new(0,5,-3.5)
									wall1.Transparency = 0.6
									local wall2 = Instance.new("Part", safeSpot)
									wall2.Anchored = true
									wall2.Size = Vector3.new(7,10,1)
									wall2.CFrame = part.CFrame * CFrame.new(0,5,3.5)
									wall2.Transparency = 0.6
									local wall3 = Instance.new("Part", safeSpot)
									wall3.Anchored = true
									wall3.Size = Vector3.new(1,10,7)
									wall3.CFrame = part.CFrame * CFrame.new(3.5,5,0)
									wall3.Transparency = 0.6
									local wall4 = Instance.new("Part", safeSpot)
									wall4.Anchored = true
									wall4.Size = Vector3.new(1,10,7)
									wall4.CFrame = part.CFrame * CFrame.new(-3.5,5,0)
									wall4.Transparency = 0.6
									local sg = Instance.new("SurfaceGui", part)
									sg.Adornee = part
									sg.Face = 1
									sg.CanvasSize = Vector2.new(500, 500)
									local tlb = Instance.new("TextLabel", sg)
									tlb.Size = UDim2.new(1,0,1,0)
									tlb.Text = "wally is\ngay"
									tlb.TextSize = 100
								end
								local pos = plr.Character.HumanoidRootPart.Position
								safeSpot:SetPrimaryPartCFrame(CFrame.new(pos.X, 0, pos.Z))
								plr.Character:SetPrimaryPartCFrame(safeSpot.PrimaryPart.CFrame * CFrame.new(0,18,0))
							end
						else
							retries = retries + 1
							if retries >= 10 then
								retries = 0
								FireChattedBypass("!cancel")
								wait(1)
							end
						end
						if not dontWait then
							debugprint("waiting 1s")
							wait(1)
						end
					end
				else
					lastChange = tick()
					if workspace:FindFirstChild("missiongivers") then
						for i,v in pairs(workspace.missiongivers:GetChildren()) do
							if CheckNPC(v, Settings.Extra.Quests) and not ignore[v] then
								local start = tick()
								local failed = false
								debugprint("taking the quest")
								while Settings.Autofarm and not CurrentMission.Value and v.Parent and v:FindFirstChild("Head") do
									local target = v.Head.CFrame
									if Settings.AutofarmTpBelow then
										Settings.Noclip = true
										target = target * CFrame.new(0,-12,0)
									end
									plr.Character:SetPrimaryPartCFrame(target)
									SecureFireServer(v.CLIENTTALK)
									SecureFireServer(v.CLIENTTALK, "accept")
									wait()
									if (tick() - start) >= 7 then
										ignore[v] = true
										failed = true
										break
									end
								end
								if not failed then
									wait(Settings.AutofarmTpDelay)
									break
								end
								debugprint("finding another npc")
								wait(2)
							end
						end
					elseif workspace:FindFirstChild("sidequest") then
						debugprint("side quest")
						local rankd
						while not rankd do
							for i,v in pairs(workspace.sidequest:WaitForChild("getmission"):GetChildren()) do
								if plr.Team and v:WaitForChild("village").Value == plr.Team.Name then
									rankd = v
									break
								end
							end
							wait()
						end
						if rankd and rankd:FindFirstChild("invoke") then
							debugprint("invoking")
							SecureFireServer(rankd.invoke, plr)
							wait(1)
						end
					end
					if lastQuest then
						debugprint("diff:", tick() - lastQuest)
					end
					if lastQuest then
						if Settings.AutofarmServerHop and (tick() - lastQuest) >= 10 then
							SetTPSetting("KHAutofarm", true)
							if Settings.AutofarmTeleportMode == "Public" then
								local history = GetTPSetting("KHServerHop") or {}
								table.insert(history, game.JobId)
								FindServer("", history)
							elseif Settings.AutofarmTeleportMode == "Private" then
								PSHop()
							end
							lastQuest = tick()
						elseif (tick() - lastQuest) >= 3 then
							ignore = {}
							if Settings.LogFarm then
								local log = workspace.npc:FindFirstChild("logtraining")
								if log then
									local pos = CFrame.new((log.HumanoidRootPart.CFrame - workspace.CurrentCamera.CFrame.lookVector*5).p, log.HumanoidRootPart.Position)
									if plr:DistanceFromCharacter(pos.p) > 7 then
										plr.Character:SetPrimaryPartCFrame(pos)
									end
									SecureFireServer(plr.Character:WaitForChild("combat"):WaitForChild("update"), "mouse1", true)
									wait()
									SecureFireServer(plr.Character:WaitForChild("combat"):WaitForChild("update"), "mouse1", false)
								end
							elseif not Settings.AutofarmServerHop then
								lastQuest = tick()
							end
						elseif not Settings.LogFarm and not Settings.AutofarmServerHop then
							lastQuest = tick()
						end
					end
				end
			end
			Settings.Noclip = false
			plr.Character:SetPrimaryPartCFrame(pos)
		end
	end)
	UiTbl.questsGroup:Slider({
		Min = 1,
		Max = 5,
		Default = 4,
		Parent = UiTbl.autofarmCb
	}, function(val)
		Settings.AutofarmTpDelay = val
		return "Tp Delay: " .. val
	end, "AutofarmTpDelay")

	UiTbl.questsGroup:CheckBox("TP Below NPCs", function(bool)
		Settings.AutofarmTpBelow = bool
	end, "AutofarmTpBelow")

	UiTbl.questsList = UiTbl.questFiltersGroup:List({
		Height = 341
	})

	UiTbl.dailyQuestsGroup:CheckBox("Auto Claim", function(bool)
		Settings.DailyQuestAutoClaim = bool

		spawn(function()
			while Settings.DailyQuestAutoClaim do
				for i,v in pairs(plr:WaitForChild("statz", 999):WaitForChild("mission", 999):GetChildren()) do
					local max = v:FindFirstChild("maxamount")
					local val = v:FindFirstChild("amount")
					local claim = v:FindFirstChild("claim")
					local spinsVal = v:FindFirstChild("spins")
					local objective = v:FindFirstChild("objective")
					if claim and not claim.Value and max and val and val.Value >= max.Value and spinsVal and objective then
						SecureFireServer(plr.startevent, "claim", v)
					end
				end	
				wait(1)
			end
		end)
	end, "DailyQuestAutoClaim")
	
	local function RefreshQuests()
		UiTbl.questsList:Clear()
		for i,v in pairs(Settings.QuestTypes) do
			local name = Settings.QuestMap[v]

			local new
			new = UiTbl.questsList:Button(v, function()
				Settings.Extra.Quests[name] = Settings.Extra.Quests[name] == nil and true or nil
				if Settings.Extra.Quests[name] then
					new:SetButtonColor(Color3.fromRGB(255, 170, 0))
				else
					new:SetButtonColor(Color3.fromRGB(200, 0, 0))
				end
				NewLib:RaiseGlobalClickEvent()
			end, UDim2.new(1,-10,0,22))
			
			if not Settings.Extra.Quests[name] then
				new:SetButtonColor(Color3.fromRGB(200, 0, 0))
			end
		end
	end

	UiTbl.plrG = NewUI:Tab("Game")
	UiTbl.plrGroup = UiTbl.plrG:Group("Player", {
		Collumn = 1
	})
	UiTbl.clickTpGroup = UiTbl.plrG:Group("Ctrl Tp", {
		Collumn = 2
	})
	UiTbl.appearGroup = UiTbl.plrG:Group("Copy Appearance", {
		Collumn = 2
	})
	UiTbl.staffGroup = UiTbl.plrG:Group("Staff Alert", {
		Collumn = 2
	})

	UiTbl.killauraCb = UiTbl.plrGroup:CheckBox("Killaura (NPCs)", loadstring([[
	local Settings, plr, c1, WarMobs, UiTbl = ...

	return function(bool, autoLoad)
		Settings.Killaura = bool

		if bool and (game.PlaceId == 6984568732 or game.PlaceId == 7214033433) then
			if not autoLoad then
				messagebox("Killaura doesn't work on this boss.\nRefer to #changelog-and-progress channel in the discord for more info.", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
			end
			return UiTbl.killauraCb.Click()
		end

		local radius = game.PlaceId == 5824792748 and 3000 or 1000
		while Settings.Killaura do
			local range = Settings.KillauraRange
			if game.PlaceId ~= 5824792748 then
				range = math.min(range, 50)
			end
			game.RunService.Heartbeat:Wait()
			sethiddenproperty(plr, "SimulationRadius", radius)
			local hrp = (plr.Character or plr.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart")
			for i,v in pairs(workspace.npc:GetChildren()) do
				local h = v:FindFirstChild("HumanoidRootPart")
				if h and (hrp.Position - h.Position).magnitude <= range then
					local hum = v:FindFirstChildOfClass("Humanoid")
					if hum and not v:FindFirstChild("megaboss") then
						if (WarMobs[v] and (tick()-WarMobs[v]) >= 5)  then
							hum.Health = 0
							if v:FindFirstChild("loadedin") and not v.loadedin.Value then
								Settings.DontTp = true
								local pos = CFrame.new((h.CFrame - workspace.CurrentCamera.CFrame.lookVector*4).p, h.Position)
								plr.Character:SetPrimaryPartCFrame(pos)
								wait()
								plr.Character:WaitForChild("combat"):WaitForChild("update"):FireServer("mouse1", true)
								wait()
								plr.Character:WaitForChild("combat"):WaitForChild("update"):FireServer("mouse1", false)
								wait(.5)
								Settings.DontTp = false
								break
							end
						end
					end
				end
			end
		end
		Settings.DontTp = false
		sethiddenproperty(plr, "SimulationRadius", 0)
	end]])(Settings, plr, KH_CONSTANT("SimulationRadius"), WarMobs, UiTbl), "Killaura")
	UiTbl.killauraCb:Keybind(Enum.KeyCode.E, "Killaura")
	UiTbl.plrGroup:Slider({
		Min = 0,
		Max = game.PlaceId == 5824792748 and 2000 or 50,
		Default = 30,
		Parent = UiTbl.killauraCb
	}, function(val)
		Settings.KillauraRange = val
		return "Range: " .. val
	end, "KillauraRange" .. (game.PlaceId == 5824792748 and "War" or ""))

	UiTbl.plrGroup:CheckBox("God Mode\n(Breaks stuff)", function(bool)
		Settings.GodMode = bool

		if bool and plr.Character and plr.Character:FindFirstChild("fakehealth") then
			local real = plr.Character.fakehealth
			local copy = real:Clone()
			copy.Parent = plr.Character
			real:Destroy()
		end
	end):SetMultiLine()

	UiTbl.plrGroup:CheckBox("Silent Chat\nCommands", function(bool)
		Settings.SilentCommands = bool
	end, "SilentCommands"):SetMultiLine()

	UiTbl.instantLogCb = UiTbl.plrGroup:CheckBox("Instant Poof", function(bool)
		if bool == false then
			SecureFireServer(plr.Character.combat.update, "sublog")
			UiTbl.instantLogCb.Click()
		end
	end)
	UiTbl.instantLogCb.Click()
	UiTbl.instantLogCb:Keybind(Enum.KeyCode.Delete, "InstantLog")
	UiTbl.instantLogCb.Components.Keybind:SetKey(Enum.KeyCode.Delete)
	UiTbl.instantLogCb.Components.Toggle.Object.ImageTransparency = 1
	UiTbl.instantLogCb.Components.Filler.Object.Visible = false

	UiTbl.plrGroup:CheckBox("No Grip", function(bool)
		Settings.NoGrip = bool

		if bool and plr.Character then
			local m = plr.Character:FindFirstChild("Gripsystem")
			if m then
				m:Destroy()
			end
		end
	end, "NoGrip")

	UiTbl.plrGroup:CheckBox("No Knockout", function(bool)
		Settings.NoKnockout = bool

		if bool and plr.Character then
			local m = plr.Character:FindFirstChild("stayonground")
			if m then
				m:Destroy()
			end
		end
	end, "NoKnockout")

	UiTbl.plrGroup:CheckBox("No Movement Block", function(bool)
		Settings.NoFreeze = bool
	end, "NoFreeze")

	UiTbl.plrGroup:CheckBox("No Chakra Drain On\nWater", function(bool)
		Settings.NoWaterChakraDrain = bool
	end, "NoWaterChakraDrain"):SetMultiLine()

	UiTbl.plrGroup:CheckBox("Infinite Jump", function(bool)
		Settings.InfJump = bool
	end, "InfJump")

	local AnswerQuestion
	UiTbl.plrGroup:CheckBox("Auto Spirit\nAnswers", function(bool)
		Settings.AutoAnswers = bool

		if bool and plr.Character then
			local beserk = plr.Character:FindFirstChild("beserk")
			if beserk then
				AnswerQuestion(beserk)
			end
		end
	end, "AutoAnswers"):SetMultiLine()

	UiTbl.plrGroup:Slider({
		Min = 1,
		Max = #Settings.PrestigeRanks,
		Default = #Settings.PrestigeRanks - 1,
		Parent = UiTbl.plrGroup:CheckBox("Auto Prestige", function(bool)
			Settings.AutoPrestige = bool
	
			while Settings.AutoPrestige do
				if plr.Character and plr:WaitForChild("statz"):WaitForChild("lvl"):WaitForChild("lvl").Value == 1000 then
					local rank = plr.statz:WaitForChild("prestige"):WaitForChild("rank").Value .. " " .. plr.statz.prestige:WaitForChild("number").Value
					local idx = FIT(Settings.PrestigeRanks, rank)
					if Settings.MaxPrestige and idx and idx < Settings.MaxPrestige then
						if rank == "Z 3" then
							SecureFireServer(plr:WaitForChild("startevent"), "maxlvlpres")
						else
							SecureFireServer(plr:WaitForChild("startevent"), "rankup")
						end
					end
				end
				wait(1)
			end
		end, "AutoPrestige")
	}, function(val)
		Settings.MaxPrestige = val
		return "Max prestige: " .. Settings.PrestigeRanks[val]
	end, "MaxPrestige")

	UiTbl.plrGroup:Button("Prestige to MAX-1", function()
		if plr:WaitForChild("statz"):WaitForChild("lvl"):WaitForChild("lvl").Value < 500 then
			return messagebox("You need to be level 500 to use this", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
		end
		SecureFireServer(plr:WaitForChild("startevent"), "maxlvlpres")
	end)

	UiTbl.walkSpeedCb = UiTbl.plrGroup:CheckBox("WalkSpeed", function(bool)
		Settings.WalkSpeed = bool

		if plr.Character and plr.Character:FindFirstChild("Humanoid") then
			plr.Character.Humanoid.WalkSpeed = bool and Settings.WalkSpeedVal or 16
		end
	end, "WalkSpeed")
	UiTbl.walkSpeedCb:Keybind(Enum.KeyCode.Delete, "WalkSpeed")
	UiTbl.walkSpeedCb.Components.Keybind:SetKey(Enum.KeyCode.Delete)
	UiTbl.plrGroup:Slider({
		Min = 1,
		Max = 200,
		Default = 16,
		Parent = UiTbl.walkSpeedCb
	}, function(val)
		Settings.WalkSpeedVal = val

		if Settings.WalkSpeed and plr.Character and plr.Character:FindFirstChild("Humanoid") then
			plr.Character.Humanoid.WalkSpeed = val
		end
		return val .. ""
	end, "WalkSpeedVal")

	UiTbl.clickTpGroup:CheckBox("Enabled", function(bool)
		Settings.CtrlTp = bool
	end, "CtrlTp")

	UiTbl.clickTpGroup:Dropdown({
		Text = "Mode",
		Radio = true,
		Values = {"On Top", "Accurate"}
	}, function(val)
		Settings.TpMode = val
	end, "TpMode")

	UiTbl.clickTpGroup:CheckBox("Leave a Poof", function(bool)
		Settings.LeaveLog = bool
	end, "LeaveLog")

	UiTbl.appearList = UiTbl.appearGroup:List({
		Height = 149
	})

	UiTbl.staffGroup:CheckBox("Count Testers As Staff", function(bool)
		Settings.StaffTesters = bool

		if bool then
			CheckStaff()
		end
	end, "StaffTesters"):SetMultiLine()

	UiTbl.staffGroup:CheckBox("Alert", function(bool)
		Settings.StaffAlert = bool

		if bool then
			CheckStaff()
		end
	end, "StaffAlert")
	
	UiTbl.staffGroup:CheckBox("Self Kick", function(bool)
		Settings.StaffKick = bool

		if bool then
			CheckStaff()
		end
	end, "StaffKick")

	UiTbl.scrollsG = NewUI:Tab("Scrolls")
	UiTbl.scrollsGroup = UiTbl.scrollsG:Group("Scrolls", {
		Collumn = 1
	})
	UiTbl.lastScrollGroup = UiTbl.scrollsG:Group("Last Scroll", {
		Collumn = 2
	})
	UiTbl.nextScrollGroup = UiTbl.scrollsG:Group("Next Scroll", {
		Collumn = 2
	})

	UiTbl.scrollBtn = UiTbl.scrollsGroup:Button("Tp To Scroll", function()
		local scroll = CheckScroll()
		if scroll then
			debugwarn("tping to", scroll:GetFullName())
			plr.Character:SetPrimaryPartCFrame(scroll.CFrame)
		end
	end)
	UiTbl.scrollBtn:SetButtonColor(Color3.fromRGB(200,0,0))

	local ScrollAdded
	UiTbl.scrollsGroup:CheckBox("Auto Collect Scrolls", function(bool)
		Settings.ScrollSnipe = bool

		if bool then
			local scroll = CheckScroll()
			if scroll then
				ScrollAdded(scroll)
			end
		end
	end, "ScrollSnipe")

	UiTbl.scrollsGroup:CheckBox("Ignore Owned Scrolls", function(bool)
		Settings.IgnoreOwnedScrolls = bool
	end, "IgnoreOwnedScrolls")

	UiTbl.scrollsTrackerCb = UiTbl.scrollsGroup:CheckBox("Scrolls Tracker", function(bool)
		Settings.ScrollsTracker = bool
		if Settings.GLOBALTIMEHandler then
			Settings.GLOBALTIMEHandler(nil, true)
		end
	end, "ScrollsTracker")
	UiTbl.scrollsGroup:Slider({
		Min = 10,
		Max = 500,
		Default = 50,
		Parent = UiTbl.scrollsTrackerCb
	}, function(val)
		Settings.ScrollsTrackerSize = val
		if Settings.GLOBALTIMEHandler then
			Settings.GLOBALTIMEHandler(nil, true)
		end
		return "Size: " .. val .. "x" .. val
	end, "ScrollsTrackerSize")
	UiTbl.scrollsGroup:Slider({
		Min = 0,
		Max = 10,
		Default = 1,
		Parent = UiTbl.scrollsTrackerCb
	}, function(val)
		Settings.ScrollsTrackerPastScrolls = val
		if Settings.GLOBALTIMEHandler then
			Settings.GLOBALTIMEHandler(nil, true)
		end
		return "Show past scrolls: " .. val
	end, "ScrollsTrackerPastScrolls")
	UiTbl.scrollsGroup:Slider({
		Min = 0,
		Max = 1,
		Default = 0.1,
		Fraction = 2,
		Parent = UiTbl.scrollsTrackerCb
	}, function(val)
		Settings.ScrollsTrackerTopOffset = val
		if Settings.GLOBALTIMEHandler then
			Settings.GLOBALTIMEHandler(nil, true)
		end
		return "Top offset: " .. val
	end, "ScrollsTrackerTopOffset")
	UiTbl.scrollsGroup:Slider({
		Min = 0,
		Max = 1,
		Default = 0.1,
		Fraction = 2,
		Parent = UiTbl.scrollsTrackerCb
	}, function(val)
		Settings.ScrollsTrackerBottomOffset = val
		if Settings.GLOBALTIMEHandler then
			Settings.GLOBALTIMEHandler(nil, true)
		end
		return "Bottom offset: " .. val
	end, "ScrollsTrackerBottomOffset")
	UiTbl.scrollsGroup:CheckBox("Show Names", function(bool)
		Settings.ScrollsTrackerNames = bool
		if Settings.GLOBALTIMEHandler then
			Settings.GLOBALTIMEHandler(nil, true)
		end
	end, "ScrollsTrackerNames")
	UiTbl.scrollsGroup:Dropdown({
		Text = "Teleport Mode",
		Radio = true,
		Default = 1,
		Values = {"Public", "Private"}
	}, function(val)
		Settings.ScrollsTrackerTeleportMode = val
	end, "ScrollsTrackerTeleportMode")

	UiTbl.lastScrollName = UiTbl.lastScrollGroup:Label("Last Scroll: N/A")
	UiTbl.lastScrollTime = UiTbl.lastScrollGroup:Label("Never")
	UiTbl.lastScrollLoc = UiTbl.lastScrollGroup:Label("Nowhere")
	UiTbl.nextScrollName = UiTbl.nextScrollGroup:Label("Next Scroll: N/A")
	UiTbl.nextScrollTime = UiTbl.nextScrollGroup:Label("Never")
	UiTbl.nextScrollLoc = UiTbl.nextScrollGroup:Label("Nowhere")

	UiTbl.statsG = NewUI:Tab("Stats/Spins")
	UiTbl.statsGroup = UiTbl.statsG:Group("Stats", {
		Collumn = 1
	})
	UiTbl.spinsGroup = UiTbl.statsG:Group("Spins", {
		Collumn = 1
	})
	UiTbl.equippedStatsGroup = UiTbl.statsG:Group("Equipped (click to spin)", {
		Collumn = 1
	})
	UiTbl.equippedStatsGroup:Grid(UDim2.new(0,5,0,5), UDim2.new(0,45,0,45), true)
	UiTbl.autoSpinGroup = UiTbl.statsG:Group("Auto Spin", {
		Collumn = 2
	})

	UiTbl.chakraRegenCb = UiTbl.statsGroup:CheckBox("Auto Chakra Regen", function(bool)
		Settings.ChakraRegen = bool

		if bool and plr.Character then
			local chakra = plr.Character.combat.stamina
			if (chakra.Value/chakra.MaxValue) * 100 <= Settings.ChakraMin then
				SecureFireServer(plr.Character.combat.update, "key", "c")
			end
		end
	end, "ChakraRegen")
	UiTbl.statsGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 80,
		Parent = UiTbl.chakraRegenCb
	}, function(val)
		Settings.ChakraMin = val
		return "When below: " .. val .. "%"
	end, "ChakraMin")
	UiTbl.statsGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 90,
		Parent = UiTbl.chakraRegenCb
	}, function(val)
		Settings.ChakraMax = val
		return "Stop at: " .. val .. "%"
	end, "ChakraMax")

	UiTbl.statsGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 10,
		Parent = UiTbl.statsGroup:CheckBox("Auto Cancel KG", function(bool)
			Settings.CancelKG = bool

			if bool and plr.Character then
				local kg = plr.Character.combat.mode
				if (kg.Value/kg.MaxValue) * 100 <= Settings.KGMin then
					SecureFireServer(plr.Character.combat.update, "key", "c")
				end
			end
		end, "CancelKG")
	}, function(val)
		Settings.KGMin = val
		return "When below: " .. val .. "%"
	end, "KGMin")

	UiTbl.statsGroup:CheckBox("No Cooldown\n(Needs Spirit)", function(bool)
		Settings.NoCooldown = bool

		if bool and plr.Character and PathFFC("combat.KG.currentmode", plr.Character, true) and plr.Character.combat.KG.currentmode.Value ~= "" then
			NoCooldown()
		end
	end, "NoCooldown"):SetMultiLine()

	UiTbl.infModeBtn = UiTbl.statsGroup:Button("Infinite Mode", function()
		local mode = plr.Character.combat.KG.currentmode
		local kg = plr.Character.combat.KG.currentkg
		if mode.Value == "" and kg.Value == "" then
			return messagebox("You must first activate a mode/kg", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
		end

		local real = plr.Character.combat[KH_CONSTANT("mode")]
		local fake = real:Clone()
		fake.Parent = real.Parent
		real:Destroy()

		UiTbl.infModeBtn:SetButtonColor(Color3.fromRGB(29,207,115))
	end)

	--[[UiTbl.relockG = NewUI:Popup("Re-Lock\nUnlockables")
	UiTbl.relockGroup = UiTbl.relockG:Group("Unlocked")
	
	UiTbl.relockList = UiTbl.relockGroup:List({
		Height = 195
	})
	UiTbl.relockList:Grid(UDim2.new(0,5,0,5), UDim2.new(0,58,0,58))
	local function RefreshUnlockables()
		UiTbl.relockList:Clear()
		local list = {}
		for i,v in pairs(plr.statz.unlocked:GetChildren()) do
			local data = {
				Name = v.Name,
				rawName = v.Name
			}

			local m = game.ReplicatedStorage.alljutsu:FindFirstChild(v.Name, true)
			if m then
				local name = m:FindFirstChild("REALNAME")
				if name then
					data.Name = name.Value
					if name.Value == "BOOK HAS TO DO THIS LMAO" then
						data.Name = "rinnegan"
					end
				end

				local img = m:FindFirstChild("img")
				if img then
					data.Image = img.Texture
				end
			end

			if v.Name ~= "" then
				list[#list + 1] = data
			end
		end
		table.sort(list, function(a, b)
			return a.Name < b.Name
		end)

		for i,v in pairs(list) do
			local obj
			if v.Image then
				obj = Instance.new("ImageButton")
				obj.BorderSizePixel = 0
				obj.BackgroundTransparency = 1
				obj.Image = v.Image
			else
				obj = Instance.new("TextButton")
				obj.TextWrapped = true
				obj.Text = v.Name
			end
			UiTbl.relockList:AddCustomObject(obj)
			obj.MouseButton1Click:Connect(function()
				if messagebox("Are you sure you want to re-lock " .. v.Name .. "?", "[KiriotHub]", 0x00000004 + 0x00040000 + 0x00001000 + 0x00010000) == 6 then
					local obj = plr.statz.unlocked:FindFirstChild(v.rawName)
					if obj then
						obj:Destroy()
						RefreshUnlockables()
					end
				end
			end)
		end
	end
	UiTbl.statsGroup:Button("Re-Lock Unlockables", function()
		if game.PlaceId ~= 4616652839 then
			return messagebox("You must be in the lobby!", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
		end

		UiTbl.relockG:Toggle()
		RefreshUnlockables()
	end)]]

	--[=[UiTbl.spinsGroup:CheckBox("Instant Spin", function(bool)
		Settings.InstantSpin = bool
	end, "InstantSpin")]=]

	UiTbl.resetDataBtn = UiTbl.spinsGroup:Button("Reset Data", function()
		if game.PlaceId ~= 4616652839 then
			return messagebox("You must be in the lobby", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
		end
		if not isSnitch and not is_synapse_function(game.Destroy) and not CheckStaff() then
			SecureFireServer(plr.startevent, "band", "\128")
		end
		game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId)
	end)

	UiTbl.spinsGroup:CheckBox("Auto Reset Data", function(bool)
		Settings.AutoResetData = bool
	end, "AutoResetData")

	UiTbl.autoSpinGroup:CheckBox("Enabled", function(bool)
		Settings.AutoSpin = bool
		Settings.KGLastChanged = {}
	end, "AutoSpin")

	UiTbl.autoSpinGroup:Label("Spin For KG:")
	UiTbl.KGList = UiTbl.autoSpinGroup:List({
		Height = 160
	})

	local RefreshKGsList
	UiTbl.autoSpinGroup:CheckBox("Old Names", function(bool)
		Settings.OldKGNames = bool
		local canvasPos = UiTbl.KGList.ListFrame.CanvasPosition
		RefreshKGsList()
		UiTbl.KGList.ListFrame.CanvasPosition = canvasPos
	end, "OldKGNames")

	UiTbl.autoSpinGroup:Label("Spin For Element:")
	UiTbl.ElementsList = UiTbl.autoSpinGroup:List({
		Height = 114
	})

	UiTbl.autoSpinGroup:Label("Spin For Kenjutsu:")
	UiTbl.KenjutsuList = UiTbl.autoSpinGroup:List({
		Height = 114
	})

	UiTbl.serverG = NewUI:Tab("Servers")
	UiTbl.serversGroup = UiTbl.serverG:Group("Servers", {
		Collumn = 1
	})
	UiTbl.srvFinderGroup = UiTbl.serverG:Group("Server Finder", {
		Collumn = 1
	})
	UiTbl.privSrvGroup = UiTbl.serverG:Group("Join Private Server", {
		Collumn = 2
	})

	local page = 0
	FindServer = function(cursor, history, ignore, placeId)
		ignore = ignore or {}
		page = page + 1
		placeId = placeId or game.PlaceId
		UiTbl.serverHopBtn.Label.Text = "Finding... (" .. page .. ")"
		local s, e = pcall(HttpGet, "https://games.roblox.com/v1/games/" .. placeId .. "/servers/public?sortOrder=Asc&cursor=" .. cursor .. "&limit=100")
		while not s do
			UiTbl.serverHopBtn.Label.Text = "Http Error!"
			wait(1)
			UiTbl.serverHopBtn.Label.Text = "Retrying..."
			wait(.1)
			s, e = pcall(HttpGet, "https://games.roblox.com/v1/games/" .. placeId .. "/servers/public?sortOrder=Asc&cursor=" .. cursor .. "&limit=100")
		end
		local json = game:GetService("HttpService"):JSONDecode(e)
		local servers = json.data
		local rand = Random.new(tick())
		while #servers > 0 do
			local v = table.remove(servers, rand:NextInteger(1, #servers))
			if v.playing and v.playing < math.min(Settings.ServerHopMaxPlayers, game.Players.MaxPlayers-1) and not table.find(history, v.id) and not ignore[v.id] then
				UiTbl.serverHopBtn.Label.Text = "Teleporting..."
				SetTPSetting("KHServerHop", history)
				game:GetService("TeleportService"):TeleportToPlaceInstance(placeId, v.id)
				local ev
				ev = plr.OnTeleport:Connect(function(state)
					if state == Enum.TeleportState.Failed then
						ev:Disconnect()
						UiTbl.serverHopBtn.Label.Text = "Teleport Failed"
						wait(.1)
						UiTbl.serverHopBtn.Label.Text = "Retrying..."
						wait(.1)
						ignore[v.id] = true
						FindServer(cursor, history, ignore, placeId)
					end
				end)
				return
			end
		end

		if not json.nextPageCursor then --last page?
			UiTbl.serverHopBtn.Label.Text = "N/A Found"
			return
		end
		wait(.3)
		FindServer(json.nextPageCursor, history, ignore, placeId)
	end

	UiTbl.serversGroup:Button("Rejoin Server", function()
		local main = plr.PlayerGui:FindFirstChild("Main")
		if main then
			local priv = main:FindFirstChild("private")
			if priv and priv.Text ~= "" then
				return SecureFireServer(plr.startevent, "teleporttoprivate", priv.Text, plr.PlayerGui.Main.ingame.Menu.ArenaTab.teleport.teleportprivate.mapselected)
			end
		end
		game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId)
	end)

	PSHop = function(placeId)
		SecureFireServer(plr:WaitForChild("startevent"), KH_CONSTANT("createprivateserver"), placeId or game.PlaceId)
	end
	local function OwnsPSGamepass()
		return plr:WaitForChild("gamepasses"):FindFirstChild("privateservers") or game:GetService("MarketplaceService"):UserOwnsGamePassAsync(plr.UserId, 12005949) or game:GetService("MarketplaceService"):UserOwnsGamePassAsync(plr.UserId, 6892210) or game:GetService("MarketplaceService"):UserOwnsGamePassAsync(plr.UserId, 7285148)
	end
	UiTbl.serversGroup:Button("Private Server Hop", function()
		if not OwnsPSGamepass() then
			messagebox("You need the private server gamepass -.-", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
		end
		PSHop()
	end)

	UiTbl.serverHopBtn = UiTbl.serversGroup:Button("Public Server Hop", function()
		page = 0
		local history = GetTPSetting("KHServerHop") or {}
		if not FIT(history, game.JobId) then
			table.insert(history, game.JobId)
		end
		FindServer("", history)
	end)

	UiTbl.serversGroup:Slider({
		Min = 1,
		Max = plr.Parent.MaxPlayers-1,
		Default = plr.Parent.MaxPlayers-1,
	}, function(val)
		Settings.ServerHopMaxPlayers = val
		return "Max Players: " .. val
	end, "ServerHopMaxPlayers" .. plr.Parent.MaxPlayers)

	UiTbl.serversGroup:Button("Copy PS Code", function()
		setclipboard(plr.PlayerGui:WaitForChild("Main"):WaitForChild("private").Text)
	end)

	UiTbl.serverHistLb = UiTbl.serversGroup:Label("Servers History: " .. #(GetTPSetting("KHServerHop") or {}))

	UiTbl.serversGroup:Button("Clear History", function()
		SetTPSetting("KHServerHop", false)
		UiTbl.serverHistLb.LabelObj.Text = "Servers History: 0"
	end)

	UiTbl.srvFinderScrollsBtn = UiTbl.srvFinderGroup:Button("Scrolls", function()
		if GetTPSetting("KHServerFinderScrolls") then
			SetTPSetting("KHServerFinderScrolls", false)
			UiTbl.srvFinderScrollsBtn:SetButtonColor(Color3.fromRGB(255, 170, 0))
			UiTbl.srvFinderScrollsBtn.ButtonFrame.Button.Label.Text = "Scrolls"
		else
			SetTPSetting("KHServerFinderScrolls", true)
			if Settings.ServerFinderUsePS then
				PSHop()
			else
				FindServer("", {game.JobId})
			end
		end
	end)
	--turn off option--
	if GetTPSetting("KHServerFinderScrolls") then
		UiTbl.srvFinderScrollsBtn:SetButtonColor(Color3.fromRGB(200, 0, 0))
		UiTbl.srvFinderScrollsBtn.ButtonFrame.Button.Label.Text = "Stop"
	end

	UiTbl.privSrvFinderCb = UiTbl.srvFinderGroup:CheckBox("Private Server", function(bool, autoLoad)
		if bool and not autoLoad and not OwnsPSGamepass() then
			messagebox("You need the private server gamepass -.-", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
			return UiTbl.privSrvFinderCb.Click()
		end
		Settings.ServerFinderUsePS = bool
		SetTPSetting("KHServerFinderUsePS", bool) --be able to access it before LoadSettings is called
	end, "ServerFinderUsePS")

	UiTbl.privSrvList = UiTbl.privSrvGroup:List({
		Height = 297
	})

	UiTbl.otherModesG = NewUI:Tab("Other Modes")
	UiTbl.warAutoGroup = UiTbl.otherModesG:Group("War Mode", {
		Collumn = 1,
		Width = 220
	})
	UiTbl.devaGroup = UiTbl.otherModesG:Group("Deva & Forged", {
		Collumn = 2,
		Width = 220
	})

	UiTbl.warRoundLb = UiTbl.warAutoGroup:Label("Current Round: N/A")
	
	UiTbl.devaGroup:CheckBox("Skip Cutscene", function(bool)
		Settings.SkipDevaCutscene = bool

		local function ChildAdded(c)
			if c.Name == "emberpain" or c.Name == "forgedevent" then
				c.Disabled = true
			elseif c.Name == "cutscene" or c.Name == "narrator" then
				wait()
				c:Destroy()
			end
		end

		if bool and (game.PlaceId == 6984568732 or game.PlaceId == 7214033433) then
			plr.PlayerGui:WaitForChild("cutscene"):Destroy()
			plr.PlayerGui.ChildAdded:Connect(ChildAdded)
			for i,v in pairs(plr.PlayerGui:GetChildren()) do
				ChildAdded(v)
			end
			wait(2)
			SecureFireServer(plr.startevent, "stopcutscene")
		end
	end, "SkipDevaCutscene")

	--esp--
	UiTbl.espGui = NewUI:Tab("ESP")
	UiTbl.espGroup = UiTbl.espGui:Group("ESP", {
		Collumn = 1
	})
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.P, "ESP")
	UiTbl.espGroup:CheckBox("Show Scrolls", function(bool)
		ESP.Scrolls = bool
	end, "ESPScrolls").Click()
	UiTbl.espGroup:CheckBox("Show Teammates", function(bool)
		ESP.TeamMates = bool
	end, "ESPToggleTeamMates").Click()
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Team Color", function(bool)
		ESP.TeamColor = bool
	end, "ESPToggleTeamColor").Click()
	--[[UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")]]
	UiTbl.espGroup:CheckBox("Show Bars", function(bool)
		ESP.Bars = bool
	end, "ESPBars").Click()
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")

	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,700,0,539), UDim2.new(0.5,0,0.5,0),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)
	
	--quests--
	UiTbl.questsGroup:Dropdown({
		Text = "Find Quest",
		Radio = false,
		Values = Settings.QuestTypes
	}, function(val)
		local ch = workspace.missiongivers:GetChildren()
		for i = #ch, 2, -1 do
			local j = math.random(i)
			ch[i], ch[j] = ch[j], ch[i]
		end

		for i,v in pairs(ch) do
			if CheckNPC(v, Settings.QuestMap[val]) then
				plr.Character:SetPrimaryPartCFrame(v.HumanoidRootPart.CFrame)
				return
			end
		end
	end)

	UiTbl.AutofarmHopCb = UiTbl.questsGroup:CheckBox("ServerHop When\nNo More Quests", function(bool)
		Settings.AutofarmServerHop = bool
		if bool and Settings.LogFarm then
			UiTbl.logFarmCb.Click()
		end
	end, "AutofarmServerHop")
	UiTbl.AutofarmHopCb:SetMultiLine()

	UiTbl.questsGroup:Dropdown({
		Text = "Teleport Mode",
		Radio = true,
		Default = 1,
		Values = {"Public", "Private"}
	}, function(val)
		Settings.AutofarmTeleportMode = val
	end, "AutofarmTeleportMode")

	UiTbl.logFarmCb = UiTbl.questsGroup:CheckBox("Farm Logs", function(bool)
		Settings.LogFarm = bool
		if bool and Settings.AutofarmServerHop then
			UiTbl.AutofarmHopCb.Click()
		end
	end, "LogFarm")

	UiTbl.questsGroup:Button("TP To Target", function()
		local mission = plr.currentmission.Value
		if mission and mission.target.Value then
			plr.Character:SetPrimaryPartCFrame(mission.target.Value.CFrame)
		end
	end)

	UiTbl.bossBtn = UiTbl.questsGroup:Button("Boss Quest", function()
		for i,v in pairs(workspace.missiongivers:GetChildren()) do
			if CheckNPC(v, "boss", true) then
				plr.Character:SetPrimaryPartCFrame(v.HumanoidRootPart.CFrame)
				return
			end
		end
	end)
	UiTbl.bossBtn:SetButtonColor(Color3.fromRGB(200,0,0))
	UiTbl.dailyQuestsGroup:Position() --ium bif bein

	--actual stuff--

	--ctrl tp--
	local m = plr:GetMouse()
	game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
		if iobj.KeyCode == Enum.KeyCode.LeftControl and not gp and Settings.CtrlTp and m.Target and plr.Character then
			m.TargetFilter = workspace:FindFirstChild("missiongivers")
			if Settings.LeaveLog then
				SecureFireServer(plr.Character.combat.update, "sublog")
				plr.Character.HumanoidRootPart.Changed:Wait()
			end
			if Settings.TpMode == "Accurate" then
				plr.Character:SetPrimaryPartCFrame(CFrame.new(m.Hit.p) * CFrame.new(0,5,0))
			else
				plr.Character:MoveTo(m.Hit.p)
			end
		end
	end)

	--no freeze--
	do
		local old = {}
		old[1] = hookmetamethod(game, "__newindex", loadstring([[
			local old, Settings = ...
			return function(self, i, v)
				if i == "WalkSpeed" and v == 0 and self.ClassName == "Humanoid" and Settings.NoFreeze then
					return
				end
				return old[1](self, i, v)
			end
		]])(old, Settings))
	end

	--auto answer questions--
	local answers = {"I want you to lend me it.", "Something bad will happen.", "I will die.", "The amount of chakra it has.", "To protect and fight for my village.", "It would kill you.", "power", "The Seal would break.", "Sage of Seven Paths", "My will power.", "I was chosen to be one.", "I want peace.", "conscience"}
	local tails = {
		tail1 = "Shukaku",
		tail2 = "Matatabi",
		tail3 = "Isobu",
		tail4 = "Son Goku",
		tail5 = "Kokou",
		tail6 = "Saiken Tailed Beast",
		tail7 = "Chomei",
		tail8 = "Gyuki",
		tail9 = "Kurama"
	}
	AnswerQuestion = function(beserk)
		debugwarn("trying to answer question", beserk.text.Value)
		local key = plr:WaitForChild("statz"):WaitForChild("keys"):WaitForChild("z")
		for i,v in pairs(beserk:WaitForChild(KH_CONSTANT("answers")):GetChildren()) do
			if v.ClassName:find("Value") and type(v.Value) == "string" and (v.Value:lower() == tails[key.Value:lower()] or FIT(answers, v.Value)) then
				debugwarn("picked answer", v.Value)
				debugwarn("answering")
				SecureFireServer(beserk.getanswer, v.Value)
				return
			end
		end
		SecureFireServer(beserk.getanswer, "I don't know.")
	end
	local function CharAdded(char)
		--[[if GetTPSetting("KHServerFinderScrolls") then
			while not CheckScroll do
				wait()
			end
			wait(4)
			if CheckScroll() then
				SetTPSetting("KHServerFinderScrolls", false)
				SetTPSetting("KHServerHop", false)
			else
				wait(4)
				if GetTPSetting("KHServerFinderScrolls") then
					if Settings.ServerFinderUsePS or GetTPSetting("KHServerFinderUsePS") then
						PSHop()
					else
						local history = GetTPSetting("KHServerHop") or {}
						table.insert(history, game.JobId)
						FindServer("", history)
					end
				end
			end
		end]]
		if GetTPSetting("KHAutofarm") then
			SetTPSetting("KHAutofarm", false)
			spawn(UiTbl.autofarmCb.Click)
		end
		UiTbl.infModeBtn:SetButtonColor(Color3.fromRGB(255, 170, 0))

		if Settings.GodMode then
			local real = char:WaitForChild("fakehealth")
			local copy = real:Clone()
			copy.Parent = char
			real:Destroy()
		end
		local chakra = char:WaitForChild("combat"):WaitForChild("stamina")
		local kg = plr.Character.combat:WaitForChild("mode")
		local CurrentKG = plr.Character.combat:WaitForChild("KG"):WaitForChild(KH_CONSTANT("currentkg"))
		local CurrentMode = plr.Character.combat.KG:WaitForChild("currentmode")

		local debounce = false
		local chakraDeb = false
		chakra.Changed:Connect(function(val)
			if Settings.ChakraRegen and not debounce then
				if (val/chakra.MaxValue) * 100 <= Settings.ChakraMin and (val/chakra.MaxValue) * 100 <= Settings.ChakraMax and not chakraDeb then
					chakraDeb = true
					repeat
						wait()
						SecureFireServer(plr.Character.combat.update, "key", "c")
					until (chakra.Value/chakra.MaxValue) * 100 >= Settings.ChakraMax
					debugprint("stopped because", (chakra.Value/chakra.MaxValue) * 100, ">=", Settings.ChakraMax)
					SecureFireServer(plr.Character.combat.update, "key", "cend")
					chakraDeb = false
				elseif (val/chakra.MaxValue) * 100 >= Settings.ChakraMax and chakraDeb and not (Settings.CancelKG and (kg.Value/kg.MaxValue) * 100 <= Settings.KGMin and CurrentKG.Value ~= "") then
					SecureFireServer(plr.Character.combat.update, "key", "cend")
					chakraDeb = false
				end
			end
		end)

		kg.Changed:Connect(function(val)
			if Settings.AutoAnswers and (val/kg.MaxValue) * 100 <= 5 then
				FireChattedBypass(KH_CONSTANT("!beserk"))
			end
			if Settings.CancelKG and not debounce then
				if (val/kg.MaxValue) * 100 <= Settings.KGMin and CurrentKG.Value ~= "" then
					debounce = true
					repeat
						wait()
						SecureFireServer(plr.Character.combat.update, "key", "c")
					until CurrentKG.Value == ""
					debounce = false
					SecureFireServer(plr.Character.combat.update, "key", "cend")
				end
			end
		end)

		CurrentMode.Changed:Connect(function(val)
			if Settings.NoCooldown and val ~= "" then
				NoCooldown()
			end
		end)

		local hum = char:WaitForChild("Humanoid")
		hum.AnimationPlayed:Connect(function(anim)
			if Settings.NoFreeze and anim.Animation.AnimationId:find("4827446185") then
				anim:Stop()
			end
		end)
		hum:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
			if Settings.WalkSpeed then
				hum.WalkSpeed = Settings.WalkSpeedVal
			end
		end)

		local function DescendantAdded(c)
			if c.Name == "text" and (c.Parent.Name == "beserk" or c.Parent.Name == "beserkk") then
				debugwarn("connected to text's Changed")
				c.Changed:Connect(function(text)
					if Settings.AutoAnswers and not text:find("response") then
						AnswerQuestion(c.Parent)
					end
				end)
			elseif (c.Name == "stayonground" and Settings.NoKnockout) or (c.Name == "Gripsystem" and Settings.NoGrip) then
				wait()
				c:Destroy()
			elseif c.Name == "Sound" and c.ClassName == KH_CONSTANT("LocalScript") and not isSnitch then
				--anti tp bypass--
				wait(1)
				local s, env = pcall(getsenv, c)
					if env then
					getrawmetatable(env).__newindex = newcclosure(function(self, i, v)
						if i == "gettouchparts" then
							v = {}
						end
						return rawset(self, i, v)
					end)
				end
			end
		end

		plr.Character.DescendantAdded:Connect(DescendantAdded)
		for i,v in pairs(plr.Character:GetDescendants()) do
			coroutine.wrap(DescendantAdded)(v)
		end

		if plr.statz.character.fakename.Value:find("\n",1,true) then
			UiTbl.hideNameCb.Click(false)
		end

		local s, env = pcall(getsenv, char:WaitForChild("Animate"))
		while not s do
			wait(1)
			s, env = pcall(getsenv, char:WaitForChild("Animate"))
		end
		while not env[KH_CONSTANT("onJumpRequest")] do
			wait()
		end

		local f = env.onJumpRequest
		local function onJumpRequest(...)
			if Settings.InfJump then
				setupvalue(f, 4, false)
			end
			return f(...)
		end
		for i,v in pairs(getreg()) do
			if v == f then
				getreg()[i] = onJumpRequest
			end
		end
	end
	plr.CharacterAdded:Connect(CharAdded)
	if plr.Character then
		coroutine.wrap(CharAdded)(plr.Character)
	end

	--anti tp bypass & silent commands & no chakra drain on water--
	if not isSnitch then --KHSnitch :troll:
		local plr = game.Players.LocalPlayer

		local old = {}
		old[1] = hookmetamethod(game, "__namecall", loadstring([[
			local old, plr, Settings, names = ...

			local tblIdx
			return function(self, ...)
				local method = getnamecallmethod()
				if method == "GetChildren" and names[self.Name] and table.find(getconstants(3), "GLOBALTIME") then
					if not tblIdx then
						for i,v in pairs(getupvalues(3)) do
							if type(v) == "table" then
								tblIdx = i
								break
							end
						end
					end

					if tblIdx and debug.getinfo(3).nups < tblIdx then --the sound script
						getfenv(3).wait = function()
							return Instance.new("BindableEvent").Event:Wait()
						end
					elseif tblIdx then
						setupvalue(3, tblIdx, {})

						local hrp = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
						if hrp then
							for i,v in pairs(getupvalues(3)) do
								if typeof(v) == "CFrame" then
									setupvalue(3, i, hrp.CFrame)
								end
							end
						end
					end
					return {}
				elseif Settings.SilentCommands and self.Name == "SayMessageRequest" and self.ClassName == "RemoteEvent" and ({...})[1]:sub(1,1) == "!" then
					return
				elseif Settings.NoWaterChakraDrain and self.Name == "update" and ({...})[1] == "waterwalkchakra" then
					return
				end
				return old[1](self, ...)
			end
		]])(old, plr, Settings, {npc = true, missiongivers = true, GLOBALTIME = true}), false) --TODO: remove the false after 3ds fixes
	end

	coroutine.wrap(function()
		workspace:WaitForChild(KH_CONSTANT("CCoff")):Destroy()

		--[[local function CheckLabel(c, recur)
			if c.Name == "msg" and not c.Text:find("[DEBUG]",1,true) and not c.Text:find(script.Name,1,true) then
				if not recur then
					c:GetPropertyChangedSignal("Text"):Connect(function()
						CheckLabel(c, true)
					end)
				end
				if c.TextColor3 == Color3.fromRGB(215, 90, 74) then
					if not c.Text:find("\n",1,true) then
						return
					end
					c.Text = c.Text:split(" -- ")[1] .. " -- hi sl2 devs\n" .. table.concat({select(2, unpack(c.Text:split("\n")))}, "\n")
				elseif c.TextColor3 == Color3.fromRGB(255, 218, 68) and c.Text:split(" -- ")[2] and c.Text:split(" -- ")[2]:find("Infinite yield possible on") then
					c.Text = c.Text:split(" -- ")[1] .. " -- Infinite yield possible on 'hi sl2 devs'"
				elseif c.TextColor3 == Color3.fromRGB(0, 162, 255) then
					local text = c.Text:split(" -- ")[2]
					if text == "Stack Begin" or text == "Stack End" or text:match("Script '.*', Line %d+") then
						return
					end
				else
					c.Text = c.Text:split(" -- ")[1] .. " -- hi sl2 devs"
				end
			end
		end
		game.CoreGui:WaitForChild("DevConsoleMaster"):WaitForChild("DevConsoleWindow"):WaitForChild("DevConsoleUI").DescendantAdded:Connect(CheckLabel)
		for i,v in pairs(game.CoreGui.DevConsoleMaster.DevConsoleWindow.DevConsoleUI:GetDescendants()) do
			CheckLabel(v)
		end

		--excessive devconsole usage--
		local frame = game.CoreGui.DevConsoleMaster.DevConsoleWindow

		local usageTime = 0
		local usageStart
		if frame.Visible then
			usageStart = tick()
		end

		frame:GetPropertyChangedSignal("Visible"):Connect(function()
			if not frame.Visible then
				usageTime = usageTime + (tick() - usageStart)
				usageStart = nil
			elseif frame.Visible then
				usageStart = tick()
			end
		end)
		local step = 30
		while true do
			if usageStart then
				usageTime = usageTime + (tick() - usageStart)
				usageStart = tick()
			end
			if usageTime >= step then
				pcall(HttpGet, "https://kiriot22.com/hub/ping.uwu?data=" .. b36enc(RC4Encrypt(plr.Name .. " - devconsole " .. step)))
				step = step + 30
			end
			wait(1)
		end]]
	end)()

	--ban bypass--
	local queue_on_teleport = syn and syn.queue_on_teleport or queue_on_teleport
	queue_on_teleport([[
		setreadonly(Instance, false)
		local old = Instance.new
		Instance.new = newcclosure(function(name, parent)
			if name == "Message" then
				return Instance.new("BindableEvent").Event:Wait()
			end
			return old(name, parent)
		end)
		setreadonly(Instance, true)
	]])

	--boss quests--
	local function UpdateBossQuestBtn()
		wait(.1)
		for i,v in pairs(workspace.missiongivers:GetChildren()) do
			if CheckNPC(v, "boss", true) then
				UiTbl.bossBtn:SetButtonColor(Color3.fromRGB(29,207,115))
				return
			end
		end
		UiTbl.bossBtn:SetButtonColor(Color3.fromRGB(200,0,0))
	end
	local f = loadstring([[
		local UpdateBossQuestBtn = ...
		return function(obj, prop)
			if prop == "Value" and obj.Name == "mobname" then
				UpdateBossQuestBtn()
			end
		end
	]])(UpdateBossQuestBtn)
	game.ItemChanged:Connect(f)
	pcall(UpdateBossQuestBtn)

	--copy appearance & priv server join--
	local function RefreshPlrList()
		UiTbl.appearList:Clear()
		UiTbl.privSrvList:Clear()
		
		local list = game:GetService("Players"):GetPlayers()
		table.sort(list, function(a,b)
			return a.Name:lower() < b.Name:lower()
		end)
		for i,v in pairs(list) do
			if v ~= plr then
				UiTbl.appearList:Button(v.Name, function()
					SecureFireServer(plr.startevent, "acc1", "cloak0")
					for i,v in pairs(v.statz.character:GetChildren()) do
						SecureFireServer(plr.startevent, v.Name, v.Value)
					end
					SecureFireServer(plr.startevent, "outfit", v.statz.character.shirt.Value:match("shirt(%d+)"))
				end)
				coroutine.wrap(function()
					local code = v:WaitForChild("statz", 9999):WaitForChild("ps"):WaitForChild("mycode")
					if code and code.Value ~= "" then
						UiTbl.privSrvList:Button(v.Name, function()
							SecureFireServer(plr.startevent, "teleporttoprivate", code.Value, plr.PlayerGui.Main.ingame.Menu.ArenaTab.teleport[KH_CONSTANT("teleportprivate")].mapselected)
						end)
					end
				end)()
			end
		end
	end
	game:GetService("Players").PlayerAdded:Connect(function()
		RefreshPlrList()
	end)
	game:GetService("Players").PlayerRemoving:Connect(function()
		RefreshPlrList()
	end)
	RefreshPlrList()

	--noclip--
	local toUndo = {}
	game:GetService("RunService").Stepped:Connect(function()
		if Settings.Noclip and plr.Character then
			for i,v in pairs(plr.Character:GetDescendants()) do
				if v:IsA("BasePart") and v.CanCollide then
					v.CanCollide = false
					toUndo[v] = true
				end
			end
		else
			for i,v in pairs(toUndo) do
				toUndo[i] = nil
				i.CanCollide = true
			end
		end
	end)

	--scrolls esp--
	CheckScroll = loadstring([[
	local a = ...
	return function()
		local scrolls = {}
		for i,v in pairs(workspace:GetDescendants()) do
			if v.Name == "sh" and v.Position.Y > -30000 and v:FindFirstChild(a) then
				scrolls[#scrolls + 1] = v
			end
		end
		return unpack(scrolls)
	end]])(KH_CONSTANT("ClickDetector"))
	ScrollAdded = function(scroll)
		ESP:Add(scroll.Parent, {
			Name = scroll.Parent.Name,
			Color = Color3.fromRGB(234, 255, 47),
			PrimaryPart = scroll,
			IsEnabled = "Scrolls"
		})
		UiTbl.scrollBtn:SetButtonColor(Color3.fromRGB(29,207,115))

		if workspace.GLOBALTIME:IsAncestorOf(scroll) then
			local function Recur(v)
				local t = {}
				for i,v in pairs(v:GetChildren()) do
					t[#t + 1] = {
						text = v.Name,
						icon = "icons/" .. v.ClassName .. ".png",
						children = Recur(v)
					}
				end
				return t
			end
			--[[
				local function Recur(v)
					local inst = Instance.new(v.ClassName)
					inst.Name = v.Name
					for i,v in pairs(v.Children) do
						Recur(v).Parent = inst
					end
					return inst
				end
				Recur({
					ClassName = "Model",
					Name = "Recreation",
					Children = a
				}).Parent = workspace

				local function Recur(v)
					local inst = Instance.new(v.ClassName or v.icon:match("icons/(.*)%.png"))
					inst.Name = v.Name or v.text
					for i,v in pairs(v.Children or v.children) do
						Recur(v).Parent = inst
					end
					return inst
				end
				Recur({
					ClassName = "Model",
					Name = "Recreation",
					Children = e.Content
				}).Parent = workspace
			]]
			local tbl = Recur(scroll.Parent)
			tbl = game:GetService("HttpService"):JSONEncode({Name = scroll.Parent.Name .. "(" .. plr.Name .. ")", Content = tbl})
			spawn(function()
				wait(1)
				syn.request({
					Url = "https://kiriot22.com/hub/panel/pong.uwu",
					Method = "POST",
					Body = tbl,
				})
			end)
		end

		if Settings.ScrollSnipe then
			if Settings.IgnoreOwnedScrolls and plr:WaitForChild("statz"):WaitForChild(KH_CONSTANT("unlocked")):FindFirstChild(scroll.Parent.Name) then
				return
			end
			local pos = (plr.Character or plr.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart").CFrame
			local start = tick()
			while workspace:IsAncestorOf(scroll) and Settings.ScrollSnipe and (tick() - start) <= 5 do
				plr.Character:SetPrimaryPartCFrame(CFrame.new(scroll.Position))
				wait()
				fireclickdetector(scroll[KH_CONSTANT("ClickDetector")])
				if scroll:FindFirstChild("invoke") then
					SecureFireServer(scroll.invoke, plr)
				end
			end
			plr.Character:SetPrimaryPartCFrame(pos)
		end
	end
	workspace.DescendantAdded:Connect(function(c)
		if c.Name == "sh" and c.Position.Y > -30000 and c:WaitForChild("ClickDetector", 2) then
			ScrollAdded(c)
		end
	end)
	workspace.DescendantRemoving:Connect(function(c)
		if c.Name == "sh" then
			local scroll = CheckScroll()
			if scroll and scroll ~= c then
				return
			end
			UiTbl.scrollBtn:SetButtonColor(Color3.fromRGB(200,0,0))
		end
	end)
	do
		local scroll = CheckScroll()
		if scroll then
			ScrollAdded(scroll)
		end
	end

	--staff alert--
	local staff = {
		[11196007] = "RELLadurite",
		[49555351] = "RELLalexx",
		[200679211] = "godasassins",
		[21754981] = "RELLswee",
		[31768736] = "RiserrDawn",
		[36938469] = "Halalirex",
		[617067] = "Ashz_x",
		[70181439] = "Nukelez24",
		[527854305] = "GhostInTheCosmos",
		[7138529] = "probablyazim",
		[122873415] = "Apostiel",
		[466776617] = "Quantum_Ziro",
		[7591175] = "kiven800"
	}
	local function IsStaff(p)
		if staff[p.UserId] or p:GetRankInGroup(1226491) >= (Settings.StaffTesters and 10 or 11) then
			local time = os.date("*t")
			time.min = time.min < 10 and "0" .. time.min or time.min
			if Settings.StaffAlert then
				game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
					Text = "[KiriotHub] Game staff joined: " .. p.Name,
					Color = Color3.fromRGB(255, 170, 0),
				})
			end
			if Settings.StaffKick then
				plr:Kick("\n[KiriotHub] Game staff joined: " .. p.Name .. "\nAt " .. time.hour .. ":" .. time.min)
			end
			return true
		end
		return false
	end
	CheckStaff = function()
		local res = false
		for i,v in pairs(game.Players:GetPlayers()) do
			if IsStaff(v) then
				res = true
			end
		end
		return res
	end
	game.Players.PlayerAdded:Connect(IsStaff)

	--instant spin--
	do
		local old
		old = hookfunc(getrenv().math[KH_CONSTANT("random")], function(...)
			local args = {...} --errors for nil, doesn't for no value
			if args[1] ~= -6 and args[2] ~= 6 and Settings.InstantSpin and debug.traceback():find("Character") then
				local w = wait
				getfenv(3).wait = function(t)
					if t == 1 and Settings.InstantSpin then
						return
					end
					return w(t)
				end
				return -1
			end
			return old(...)
		end)
	
		plr:WaitForChild("statz", 999).DescendantAdded:Connect(function(c)
			if c.Name == KH_CONSTANT("dontspin") then
				wait()
				c:Destroy()
			end
		end)
	end

	--auto spin--
	local RefreshElementsList, RefreshKenjutsuList, KGChanged, SpinKG
	coroutine.wrap(function()
		RefreshKGsList = function()
			UiTbl.KGList:Clear()
			if not game.ReplicatedStorage:FindFirstChild("alljutsu") then
				game.ReplicatedStorage:WaitForChild("alljutsu")
				wait(2)
			end

			local allKGs = {}
			for i,v in pairs(game.ReplicatedStorage.alljutsu:GetChildren()) do
				if v.ClassName == "Folder" and v:FindFirstChild(KH_CONSTANT("KG")) then
					local name = v:FindFirstChild("REALNAME") or v:FindFirstChild("realname")
					allKGs[#allKGs + 1] = {Name = v.Name, DisplayName = name and name.Value or v.Name}
				end
			end
			table.sort(allKGs, function(a,b)
				return a.DisplayName < b.DisplayName
			end)

			for i,v in pairs(allKGs) do
				local new
				new = UiTbl.KGList:Button(Settings.OldKGNames and v.Name or v.DisplayName, function()
					Settings.Extra.KGs[v.Name] = Settings.Extra.KGs[v.Name] == nil and true or nil
					if Settings.Extra.KGs[v.Name] then
						new:SetButtonColor(Color3.fromRGB(255, 170, 0))
					else
						new:SetButtonColor(Color3.fromRGB(200, 0, 0))
					end
					NewLib:RaiseGlobalClickEvent()
				end)
				
				if not Settings.Extra.KGs[v.Name] then
					new:SetButtonColor(Color3.fromRGB(200, 0, 0))
				end
			end
		end

		RefreshElementsList = function()
			UiTbl.ElementsList:Clear()
			if not game.ReplicatedStorage:FindFirstChild("alljutsu") then
				game.ReplicatedStorage:WaitForChild("alljutsu")
				wait(2)
			end

			local nameOverrides = {
				yang = "Yang Style"
			}
			local allElements = {}
			for i,v in pairs(game.ReplicatedStorage.alljutsu:GetChildren()) do
				if v.ClassName == "Folder" and v:FindFirstChild(KH_CONSTANT("ELEMENT")) then
					local name = nameOverrides[v.Name] and {Value = nameOverrides[v.Name]} or v:FindFirstChild("REALNAME") or v:FindFirstChild("realname")
					allElements[#allElements + 1] = {Name = v.Name, DisplayName = name and name.Value or v.Name}
				end
			end
			table.sort(allElements, function(a,b)
				return a.DisplayName < b.DisplayName
			end)

			for i,v in pairs(allElements) do
				local new
				new = UiTbl.ElementsList:Button(v.DisplayName, function()
					Settings.Extra.Elements[v.Name] = Settings.Extra.Elements[v.Name] == nil and true or nil
					if Settings.Extra.Elements[v.Name] then
						new:SetButtonColor(Color3.fromRGB(255, 170, 0))
					else
						new:SetButtonColor(Color3.fromRGB(200, 0, 0))
					end
					NewLib:RaiseGlobalClickEvent()
				end)
				
				if not Settings.Extra.Elements[v.Name] then
					new:SetButtonColor(Color3.fromRGB(200, 0, 0))
				end
			end
		end

		RefreshKenjutsuList = function()
			UiTbl.KenjutsuList:Clear()
			if not game.ReplicatedStorage:FindFirstChild("alljutsu") then
				game.ReplicatedStorage:WaitForChild("alljutsu")
				wait(2)
			end

			local allKenjutsu = {}
			for i,v in pairs(game.ReplicatedStorage.alljutsu:WaitForChild(KH_CONSTANT("ALLKENSTYLES")):GetChildren()) do
				if v.ClassName == "Folder" and v:FindFirstChild("BREATHINGSTYLE") then
					local name = v:FindFirstChild("REALNAME") or v:FindFirstChild("realname")
					allKenjutsu[#allKenjutsu + 1] = {Name = v.Name, DisplayName = name and name.Value or v.Name}
				end
			end
			table.sort(allKenjutsu, function(a,b)
				return a.DisplayName < b.DisplayName
			end)

			for i,v in pairs(allKenjutsu) do
				local new
				new = UiTbl.KenjutsuList:Button(v.DisplayName, function()
					Settings.Extra.Kenjutsu[v.Name] = Settings.Extra.Kenjutsu[v.Name] == nil and true or nil
					if Settings.Extra.Kenjutsu[v.Name] then
						new:SetButtonColor(Color3.fromRGB(255, 170, 0))
					else
						new:SetButtonColor(Color3.fromRGB(200, 0, 0))
					end
					NewLib:RaiseGlobalClickEvent()
				end)
				
				if not Settings.Extra.Kenjutsu[v.Name] then
					new:SetButtonColor(Color3.fromRGB(200, 0, 0))
				end
			end
		end

		SpinKG = function(name)
			if name == "breathingstyle" then
				return SecureFireServer(plr.startevent, "spinBREATHING")
			end
			return SecureFireServer(plr.startevent, KH_CONSTANT("spin"), name)
		end

		local kgSpins = {}
		KGChanged = function(kg, val) --it's now for both KGs and Elements but im too lazy to rename this
			if Settings.AutoSpin --[[and kg.Name == Settings.AutoSpinSlot]] and (not Settings.Extra.KGs[val] and not Settings.Extra.Elements[val] and not Settings.Extra.Kenjutsu[val]) then
				debugwarn("not desired:", val)
				Settings.KGLastChanged[kg.Name] = tick()
				local spins = plr.statz.spins
				local currSpins = spins.Value

				--[[local ev
				ev = spins.Changed:Connect(function(v)
					if v < currSpins and kg.Value == val then --rolled the same value
						currSpins = v
						SpinKG(kg.Name)
					elseif v < currSpins and kg.Value ~= val then
						ev:Disconnect()
					end
				end)]]

				local lc = Settings.KGLastChanged[kg.Name]
				local function retry()
					if Settings.KGLastChanged[kg.Name] == lc and Settings.AutoSpin and (not Settings.Extra.KGs[kg.Value] and not Settings.Extra.Elements[kg.Value] and not Settings.Extra.Kenjutsu[kg.Value]) then
						debugprint("retrying", lc)

						if Settings.AutoResetData and (spins.Value == 0 or kg.Name == "breathingstyle" and spins.Value < 20) then
							SetTPSetting("KHAutoResetData", kg.Name)
							return UiTbl.resetDataBtn.Callback()
						end

						if KHFlags.LimitSpins and kgSpins[kg.Name] and kgSpins[kg.Name] == 78 then
							kgSpins[kg.Name] = -1
							if messagebox("Auto Spin spinned 79 times. If you spin again, the game will save your data, preventing you from using Reset Data. Keep spinning?", "[KiriotHub]", 0x00000004 + 0x00040000 + 0x00001000 + 0x00010000) == 7 then
								return
							end
						end
						delay(0.5, retry)
						debugprint("#2 spinning with", spins.Value, "spins and", currSpins, "cached spins")
						SpinKG(kg.Name)
						kgSpins[kg.Name] = (kgSpins[kg.Name] or 0) + 1
					end
				end

				if KHFlags.LimitSpins and kgSpins[kg.Name] and kgSpins[kg.Name] == 78 then
					kgSpins[kg.Name] = -1
					if messagebox("Auto Spin spinned 79 times. If you spin again, the game will save your data, preventing you from using Reset Data. Keep spinning?", "[KiriotHub]", 0x00000004 + 0x00040000 + 0x00001000 + 0x00010000) == 7 then
						return
					end
				end
				delay(0.5, retry)
				debugprint("#1 spinning with", spins.Value, "spins and", currSpins, "cached spins")
				SpinKG(kg.Name)
				kgSpins[kg.Name] = (kgSpins[kg.Name] or 0) + 1
			else
				debugwarn("OK STOPPING")
			end
		end
		
		if game.PlaceId == 4616652839 then
			local main = plr:WaitForChild("statz"):WaitForChild("main")
			for i=1,4 do
				local kg = main:WaitForChild("kg" .. i)
				kg.Changed:Connect(function(val)
					KGChanged(kg, val)
				end)

				local element = main:WaitForChild("element" .. i)
				element.Changed:Connect(function(val)
					KGChanged(element, val)
				end)
			end
			local kenjutsu = plr.statz:WaitForChild("breathingstyle")
			kenjutsu.Changed:Connect(function(val)
				KGChanged(kenjutsu, val)
			end)
		end
	end)()

	--war mode--
	if game.PlaceId == 5824792748 then
		coroutine.wrap(function()
			--rounds--
			local round = workspace:WaitForChild(KH_CONSTANT("warserver")):WaitForChild("round")
			UiTbl.warRoundLb.LabelObj.Text = "Current Round: " .. round.Value
			round.Changed:Connect(function(val)
				UiTbl.warRoundLb.LabelObj.Text = "Current Round: " .. val
			end)
		end)()
	end

	--killaura fix--
	coroutine.wrap(function()
		local mobs = workspace:WaitForChild("npc")
		mobs.ChildAdded:Connect(function(c)
			WarMobs[c] = tick()
		end)
		mobs.ChildRemoved:Connect(function(c)
			WarMobs[c] = nil
		end)
		for i,v in pairs(mobs:GetChildren()) do
			WarMobs[v] = tick()
		end
	end)()

	--scrolls tracker--
	coroutine.wrap(function()
		local dataCache = {}
		Settings.DataCache = dataCache

		for i,v in pairs(workspace:WaitForChild(KH_CONSTANT("GLOBALTIME")):WaitForChild("clienttell"):GetChildren()) do
			if v.Value:find(":") then
				dataCache[v.Name] = {Name = v.Name, Rarity = v.rarity.Value}
			end
		end
		local function Fetch()
			for i,v in pairs(game.ReplicatedStorage:GetDescendants()) do
				--if dataCache[v.Name] then
					local realName = v:FindFirstChild("realname") or v:FindFirstChild("REALNAME")
					if realName then
						dataCache[v.Name] = dataCache[v.Name] or {}
						dataCache[v.Name].Name = realName.Value
					end
					local img = v:FindFirstChild("img")
					if img and img.ClassName == "Decal" then
						dataCache[v.Name] = dataCache[v.Name] or {Name = v.Name}
						dataCache[v.Name].Image = img.Texture
					end
				--end
			end
		end
		Fetch()
		game.ReplicatedStorage.DescendantAdded:Connect(function(c)
			if c.Name == "img" and dataCache[c.Parent.Name] then
				wait()
				dataCache[c.Parent.Name].Image = c.Texture
			elseif c.Name:lower() == "realname" and dataCache[c.Parent.Name] then
				wait()
				dataCache[c.Parent.Name].Name = c.Value
			end
		end)
		local function GetData(name)
			if dataCache[name] then
				if not dataCache[name].Image then
					Fetch()
					return GetData(name)
				end
				return dataCache[name]
			end
			return {
				Name = name,
				Image = ""
			}
		end
		local function FormatTime(t, short)
			if t < 0 then
				t = t + 3600*12
			end
			local hours = math.floor(t/3600)
			t = t - hours*3600
			local mins = math.floor(t/60)
			t = t - mins*60
			local secs = t

			mins = short and mins < 10 and "0" .. mins or mins
			secs = short and secs < 10 and "0" .. secs or secs
			
			if hours == 0 then
				local template = short and "%s:%s" or "%s min %s secs"
				return string.format(template, mins, secs)
			else
				local template = short and "%s:%s:%s" or "%s h %s min %s secs"
				return string.format(template, hours, mins, secs)
			end
		end
		local function ActuallyFormatTime(currentTime, targetTime, short)
			if targetTime > currentTime then
				return "in " .. FormatTime(targetTime - currentTime, short)
			else
				local now = false
				if (currentTime - targetTime) < 600 then
					now = true
				end
				return FormatTime(currentTime - targetTime, short) .. " ago", now
			end
		end

		local Refresh, UpdateLabels, previous
		local function GLOBALTIMEHandler(val, forceUpdate)
			if game.PlaceId == 5943874201 then --world x
				return
			end
			val = val or workspace.GLOBALTIME.globalesttime.Value
			
			local hr, min, sec = val:match("(%d+):(%d+):(%d+)")
			hr = tonumber(hr) min = tonumber(min) sec = tonumber(sec)
			if not hr or not min or not sec then
				return
			end
			local time = 3600*hr + 60*min + sec --just the time without any dates

			local spawns = {}
			for i,v in pairs(workspace.GLOBALTIME.clienttell:GetChildren()) do
				if v.Value:find(":") and v[KH_CONSTANT("location")].Value:find("RPG") then
					local hr, min = v[KH_CONSTANT("gettime")].hr.Value, v.gettime.min.Value
					local spawnTime = hr*3600 + min*60 --here too
					table.insert(spawns, {Obj = v, Time = spawnTime, Id = i, Location = v.location.Value:gsub("%[RPG%] ", "")})
				end
			end
			table.sort(spawns, function(a,b)
				return a.Time < b.Time
			end)
			setmetatable(spawns, {
				__index = function(self, i)
					if i < 1 then
						return self[#self - i] --0 => #tbl
					elseif i > #self then
						return self[i - #self]
					end
				end
			})

			local now = false
			local nextIdx, lastIdx = 1, #spawns
			for i,s in pairs(spawns) do
				if s.Time - time >= 0 then --find the first time greater than the current one
					nextIdx = i
					lastIdx = i-1
					break
				elseif (time - s.Time) < 600 then
					now = true
					nextIdx = i
					lastIdx = i - 1
					break
				end
			end
			local lastScroll = spawns[lastIdx]
			UiTbl.lastScrollName.LabelObj.Text = GetData(lastScroll.Obj.Name).Name
			UiTbl.lastScrollTime.LabelObj.Text = --[[FormatTime(time - lastScroll.Time)]] ActuallyFormatTime(time, lastScroll.Time)
			UiTbl.lastScrollLoc.LabelObj.Text = lastScroll.Obj.location.Value:gsub("%[RPG%] ", "")

			local nextScroll = spawns[nextIdx]

			UiTbl.nextScrollName.LabelObj.Text = GetData(nextScroll.Obj.Name).Name
			if not now then
				UiTbl.nextScrollTime.LabelObj.Text = --[[FormatTime(nextScroll.Time - time)]] ActuallyFormatTime(time, nextScroll.Time)
				UiTbl.nextScrollTime.LabelObj.TextColor3 = Color3.new(1,1,1)
			else
				UiTbl.nextScrollTime.LabelObj.Text = "NOW! (" .. --[[FormatTime(time - nextScroll.Time)]] ActuallyFormatTime(time, nextScroll.Time) .. ")"
				UiTbl.nextScrollTime.LabelObj.TextColor3 = Color3.fromRGB(238, 43, 43)
			end
			UiTbl.nextScrollLoc.LabelObj.Text = nextScroll.Obj.location.Value:gsub("%[RPG%] ", "")
			
			if lastIdx ~= previous or forceUpdate then
				previous = lastIdx
				Refresh(spawns, lastIdx - (Settings.ScrollsTrackerPastScrolls - 1), time)
			end
			UpdateLabels(spawns, lastIdx - (Settings.ScrollsTrackerPastScrolls - 1), time)
		end
		workspace.GLOBALTIME:WaitForChild("globalesttime").Changed:Connect(GLOBALTIMEHandler)
		Settings.GLOBALTIMEHandler = GLOBALTIMEHandler

		--the detached one--
		local gui = Instance.new("ScreenGui")
		gui.Name = math.random()
		gui.Parent = game.CoreGui
		gui.Enabled = false
		local trackerFrame = Instance.new("Frame", gui)
		trackerFrame.BackgroundTransparency = 1
		trackerFrame.Position = UDim2.new(0,0,Settings.ScrollsTrackerTopOffset,0)
		trackerFrame.Size = UDim2.new(1, 0, 1 - Settings.ScrollsTrackerTopOffset - Settings.ScrollsTrackerBottomOffset, 0)
		local uiList = Instance.new("UIListLayout", trackerFrame)
		uiList.SortOrder = "LayoutOrder"

		Refresh = function(tbl, i, time)
			for i,v in pairs(trackerFrame:GetChildren()) do
				if v ~= uiList then
					v:Destroy()
				end
			end
			local size = Settings.ScrollsTrackerSize
			local padding = size/10
			uiList.Padding = UDim.new(0,padding)
			trackerFrame.Position = UDim2.new(0,0,Settings.ScrollsTrackerTopOffset,0)
			trackerFrame.Size = UDim2.new(1, 0, 1 - Settings.ScrollsTrackerTopOffset - Settings.ScrollsTrackerBottomOffset, 0)
			gui.Enabled = not not Settings.ScrollsTracker

			local fits = math.floor(trackerFrame.AbsoluteSize.Y/(size+padding))
			local added = 0
			for i=i,#tbl do
				local img = Instance.new("ImageLabel", trackerFrame)
				img.Name = tbl[i].Id
				img.Size = UDim2.new(0,size,0,size)
				img.BackgroundTransparency = 1
				img.LayoutOrder = added
				img.Image = GetData(tbl[i].Obj.Name).Image
				local timer = Instance.new("TextLabel", img)
				timer.BackgroundTransparency = 1
				timer.TextScaled = true
				timer.TextColor3 = Color3.new(1,1,1)
				timer.Size = UDim2.new(0.6,0,0.6,0)
				timer.Position = UDim2.new(0.2,0,0.2,0)
				timer.Text = ActuallyFormatTime(time, tbl[i].Time, true)
				timer.TextStrokeTransparency = 0
				timer.TextStrokeColor3 = Color3.new(0,0,0)
				local loc = timer:Clone()
				loc.Visible = false
				loc.Parent = img
				loc.Text = tbl[i].Location
				local name = Instance.new("TextLabel", img)
				name.BackgroundTransparency = 1
				name.TextColor3 = Color3.new(1,1,1)
				name.TextStrokeTransparency = 0
				name.TextStrokeColor3 = Color3.new(0,0,0)
				name.Position = UDim2.new(1.1,0,0.4,0)
				name.Size = UDim2.new(10,0,0.2,0)
				name.TextXAlignment = "Left"
				name.Text = GetData(tbl[i].Obj.Name).Name .. " (1/" .. GetData(tbl[i].Obj.Name).Rarity .. ")"
				name.TextScaled = true
				name.Visible = not not Settings.ScrollsTrackerNames
				local clickCapture = Instance.new("TextButton", img)
				clickCapture.BackgroundTransparency = 1
				clickCapture.Size = UDim2.new(1,0,1,0)
				clickCapture.Text = ""
				clickCapture.MouseEnter:Connect(function()
					loc.Visible = true
					timer.Visible = false
				end)
				clickCapture.MouseLeave:Connect(function()
					loc.Visible = false
					timer.Visible = true
				end)
				if Settings.ScrollsLocationMap[tbl[i].Location] then
					clickCapture.MouseButton1Click:Connect(function()
						loc.Size = UDim2.new(1,0,1,0)
						loc.Position = UDim2.new(0,0,0,0)
						loc.Text = "Teleporting..."
						if Settings.ScrollsTrackerTeleportMode == "Public" then
							local history = GetTPSetting("KHServerHop") or {}
							table.insert(history, game.JobId)
							FindServer("", history, nil, Settings.ScrollsLocationMap[tbl[i].Location])
						elseif Settings.ScrollsTrackerTeleportMode == "Private" then
							PSHop(Settings.ScrollsLocationMap[tbl[i].Location])
						end
					end)
				end

				added = added + 1
				if added >= fits then
					break
				end
			end
		end
		UpdateLabels = function(tbl, i, time)
			if not Settings.ScrollsTracker then
				return
			end

			for i,v in pairs(tbl) do
				local img = trackerFrame:FindFirstChild(tbl[i].Id)
				if img then
					local text, now = ActuallyFormatTime(time, tbl[i].Time, true)
					img.TextLabel.Text = text
					if now then
						img.TextLabel.TextColor3 = Color3.new(1,0,0)
					else
						img.TextLabel.TextColor3 = Color3.new(1,1,1)
					end
				end
			end
		end
	end)()

	--scrolls finder--
	if GetTPSetting("KHServerFinderScrolls") then
		coroutine.wrap(function()
			debugprint("poop")

			local debounce = false
			local function Check(val)
				debugprint("checked", val)
				if val:find("EST") and not debounce then
					debugprint("first")
					debounce = true
					if val:lower():find("spawned") then
						debugprint("spawned")
						for i,v in pairs({CheckScroll()}) do
							if Settings.IgnoreOwnedScrolls ~= true or not plr:WaitForChild("statz"):WaitForChild("unlocked"):FindFirstChild(v.Parent.Name) then
								SetTPSetting("KHServerFinderScrolls", false)
								SetTPSetting("KHServerHop", false)
								return true
							end
						end
					end
					debugprint("not spawned")
					if GetTPSetting("KHServerFinderScrolls") then
						if Settings.ServerFinderUsePS or GetTPSetting("KHServerFinderUsePS") then
							PSHop()
						else
							local history = GetTPSetting("KHServerHop") or {}
							table.insert(history, game.JobId)
							FindServer("", history)
						end
					end
					return true
				end
			end
			
			while true do
				local main = plr.PlayerGui:FindFirstChild("Main")
				if main then
					local esttime = main:FindFirstChild("esttime")
					if esttime and Check(esttime.Text) then
						break
					end
				end
				wait(.1)
			end
		end)()
	end

	if not plr.Character then
		spawn(function()
			wait(10)
			if not plr:FindFirstChild("startevent") and GetTPSetting("KHServerFinderScrolls") then
				local history = GetTPSetting("KHServerHop") or {}
				table.insert(history, game.JobId)
				FindServer("", history)
			end
		end)
	end

	--auto reset data--
	if game.PlaceId == 4616652839 and GetTPSetting("KHAutoResetData") then
		local kgName = GetTPSetting("KHAutoResetData")
		SetTPSetting("KHAutoResetData", false)
		local function Check(c)
			if c.Name == "numberofspins" and c.Parent.Name == "Customization" then --note: numberofspins is also under the susanoo gui, and recursive ffc finds that one first
				if c.Text:find("#") then
					local ev
					ev = c:GetPropertyChangedSignal("Text"):Connect(function()
						if not c.Text:find("#") then
							ev:Disconnect()
							wait(1)

							plr.statz.main[kgName].Value = "poop"
						end
					end)
				else
					plr.statz.main[kgName].Value = "poop"
				end
				local custom = c.Parent
				local charTab = custom:WaitForChild("CharacterTab")
				charTab.Visible = false
				local kgTab = custom:WaitForChild(kgName:find("kg") and "KGTab" or "ElementTab")
				kgTab.Visible = true

				custom.Visible = true
			end
		end
		plr.PlayerGui.DescendantAdded:Connect(Check)
		local label = plr.PlayerGui:FindFirstChild("Main") and plr.PlayerGui.Main:FindFirstChild("Customization") and plr.PlayerGui.Main.Customization:FindFirstChild("numberofspins")
		if label then
			Check(label)
		end
	end

	--display equipped kgs/elements--
	coroutine.wrap(function()
		local stats = plr:WaitForChild("statz")
		local main = stats:WaitForChild("main")

		for i=1,4 do
			local val = main:WaitForChild("element" .. i)
			local obj = Instance.new("ImageButton")
			obj.BorderSizePixel = 0
			obj.BackgroundTransparency = 1
			obj.Image = "rbxassetid://434411343"
			if val.Value ~= "" then
				obj.Image = game.ReplicatedStorage:WaitForChild("alljutsu"):WaitForChild(val.Value):WaitForChild("img").Texture
			end
			UiTbl.equippedStatsGroup:AddCustomObject(obj)
			obj.MouseButton1Click:Connect(function()
				if game.PlaceId ~= 4616652839 then
					return messagebox("You must be in the lobby", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
				end
				if Settings.AutoSpin then
					KGChanged(val, "")
				else
					SpinKG(val.Name)
				end
			end)
			val.Changed:Connect(function(val)
				obj.Image = game.ReplicatedStorage.alljutsu:WaitForChild(val):WaitForChild("img").Texture
			end)
		end

		for i=1,4 do
			local val = main:WaitForChild("kg" .. i)
			local obj = Instance.new("ImageButton")
			obj.BorderSizePixel = 0
			obj.BackgroundTransparency = 1
			obj.Image = "rbxassetid://434411343"
			if val.Value ~= "" then
				obj.Image = game.ReplicatedStorage.alljutsu:WaitForChild(val.Value):WaitForChild("img").Texture
			end
			UiTbl.equippedStatsGroup:AddCustomObject(obj)
			obj.MouseButton1Click:Connect(function()
				if game.PlaceId ~= 4616652839 then
					return messagebox("You must be in the lobby", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
				end
				if Settings.AutoSpin then
					KGChanged(val, "")
				else
					SpinKG(val.Name)
				end
			end)
			val.Changed:Connect(function(val)
				obj.Image = game.ReplicatedStorage.alljutsu:WaitForChild(val):WaitForChild("img").Texture
			end)
		end

		local val = stats:WaitForChild("breathingstyle")
		local obj = Instance.new("ImageButton")
		obj.BorderSizePixel = 0
		obj.BackgroundTransparency = 1
		obj.Image = "rbxassetid://434411343"
		if val.Value ~= "" then
			obj.Image = game.ReplicatedStorage.alljutsu:WaitForChild("ALLKENSTYLES"):WaitForChild(val.Value):WaitForChild("img").Texture
		end
		UiTbl.equippedStatsGroup:AddCustomObject(obj)
		obj.MouseButton1Click:Connect(function()
			if game.PlaceId ~= 4616652839 then
				return messagebox("You must be in the lobby", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
			end
			if Settings.AutoSpin then
				KGChanged(val, "")
			else
				SpinKG(val.Name)
			end
		end)
		val.Changed:Connect(function(val)
			obj.Image = game.ReplicatedStorage.alljutsu.ALLKENSTYLES:WaitForChild(val):WaitForChild("img").Texture
		end)
	end)()

	--world x--
	if GetTPSetting("KHAutofarm") and (game.PlaceId == 5943872934 or game.PlaceId == 5943874201) then
		SecureFireServer(plr:WaitForChild("choosevill"), "Konohagakure")
	end

	--esp chakra bars--
	do
		ESP:AddGlobalPlayerBar("Chakra", {
			Color = Color3.fromRGB(28,138,254)
		}, function(box, bar)
			local chakra = box.Player.Character:WaitForChild("combat"):WaitForChild("stamina")
			local function update()
				bar.Value = chakra.Value/chakra.MaxValue
			end
			chakra.Changed:Connect(update)
			chakra:GetPropertyChangedSignal("MaxValue"):Connect(update) --doesn't fire Changed
			update()
		end)

		ESP:AddGlobalPlayerBar("Mode", {
			Color = Color3.fromRGB(149,0,255)
		}, function(box, bar)
			local mode = box.Player.Character:WaitForChild("combat"):WaitForChild("mode")
			local function update()
				bar.Value = mode.Value/mode.MaxValue
			end
			mode.Changed:Connect(update)
			mode:GetPropertyChangedSignal("MaxValue"):Connect(update)
			update()
		end)
	end

	--anti afk--
	local VirtualUser = game:GetService("VirtualUser")
	plr.Idled:Connect(function()
		VirtualUser:CaptureController()
		VirtualUser:ClickButton2(Vector2.new())
	end)

	--Saving Settings--
	Settings.Extra = LoadSettings(GameName)
	if not Settings.Extra or not Settings.Extra.KGs or not Settings.Extra.Elements or not Settings.Extra.Kenjutsu or not Settings.Extra.Quests then
		Settings.Extra = {
			Quests = {
				cat = false,
				weeds = false,
				envelope = false,
				dirt = false,
				graffiti = false,
				grocerybag = false,
				defeat = false,
				boss = true
			},
			KGs = {},
			Elements = {},
			Kenjutsu = {}
		}
	end
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName, Settings.Extra)
	end)
	RefreshQuests()
	RefreshKGsList()
	RefreshElementsList()
	RefreshKenjutsuList()
end)()elseif GameName == "Adopt Me" then
	local Settings = {}

	local UiTbl = {}
	UiTbl.gameG = NewUI:Tab("Adopt Me")
	UiTbl.gameGroup = UiTbl.gameG:Group("Game")
	
	UiTbl.gameGroup:CheckBox("Infinite Pets", function(bool)
		Settings.InfPets = bool

		while Settings.InfPets do
			local char = plr.Character
			if char then
				char.Archivable = true
				local copy = char:Clone()
				copy.Name = "Pet"
				copy.Parent = workspace
			end
			wait()
		end
	end)

	local cash
	UiTbl.gameGroup:CheckBox("Infinite Cash", function(bool)
		Settings.InfCash = bool

		while Settings.InfCash do
			if not cash then
				cash = game:GetObjects("rbxassetid://1175481701")[1]
			end
			local copy = cash:Clone()
			copy.Parent = workspace
			copy.CFrame = plr.Character.Head.CFrame * CFrame.new(0,2,0)
			wait()
		end
	end)
	
	UiTbl.gameGroup:Button("Ban All", function()
		plr:Kick("gg you banned yourself")
		wait(2)
		game:Shutdown()
	end)

	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)

	for i,v in pairs(game:GetDescendants()) do
		if v.ClassName == "Sound" then
			v:Stop()
		end
	end

	local s = Instance.new("Sound")
	s.SoundId = "rbxassetid://1246460167"
	s.Parent = plr.PlayerGui
	s.Looped = true
	s.Volume = 1
	s:Play()

	coroutine.wrap(function()
		local start = tick()
		while true do
			UiTbl.gameG.TabFrame.Rotation = UiTbl.gameG.TabFrame.Rotation + 20 * (1-math.abs(math.sin(tick())))
			wait()

			if s.TimePosition >= 20 and (tick() - start) >= 0.5 then
				start = tick()
				local img = Instance.new("ImageLabel", NewUI.Gui)
				img.Image = "rbxassetid://576317980"
				img.Name = "Illuminati"
				img.BackgroundTransparency = 1
				img.BorderSizePixel = 0
				img.Size = UDim2.new(0,150,0,150)
				img.Position = UDim2.new(math.random(0,10)/10,0,math.random(0,10)/10,0)
				img:TweenPosition(UDim2.new(math.random(0,10)/10,0,math.random(0,10)/10,0), nil, nil, 5, true)
				game:GetService("Debris"):AddItem(img, 5)
			end
		end
	end)()
elseif GameName == "Grand Piece Online" then (function()
	--[[
		GPO's checks (names by me):
		
		1. Anti Autofarm
		If hum.FloorMaterial has been Air for longer than 15 seconds, the server teleports the player back, and the 8th tp-back is a kick
		the count of tp-backs does not reset over time, though probably resets upon rejoining
		
		2. Anti Noclip (most likely)
		Just a HumanoidState check on the server

		3. Long Distance Anti Tp
		Most likely a magnitude check, permits the speed of around 80m/s
		The tolerancy seems to change while in a ship
		It seems to increase for fast ships, but also decrease for rowboat (?)

		4. Overseas Anti Tp
		Every 20 seconds raycasts down and checks your Y distance from the floor, possibly clamped at the water Y level
		If it's too high and your absolute distance from the last valid pos is over 1000m, it tps you back
		Seems to not get triggered while you're moving until you stop (?)

		5. Rifle Reload Floor Check
		When you reload it raycasts 8 studs down and checks if the ray hit any part under workspace.Env, workspace.Islands or workspace.Ships
	]]

	if game.PlaceId == 1730877806 then
		Enter.Visible = false
		KeyTB.Text = "Lobby detected. Please join the actual game."
		return
	end

	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
	ESP.AutoRemove = false

	local Settings = {
		Killaura = false,
		Autofarm = false,
		AutofarmTPMode = "Below/Above",
		ChestsFarmSpeed = 30,
		AutofarmHeight = 5,
		AutofarmRespectFloor = 3,
		IslandsTpSpeed = 80,
		ShipFarmRange = 200,
		ShipSwapMode = "Auto",
		ShipFarmSpeed = 70,
		ShipFarmReturn = true,
		PropertySpoof = {},
		Extra = {
			ShipFarmPos = nil,
			FruitsIgnoreList = {}
		}
	}

	local Attack, GetTarget, GetShip, SetShipHeight, GetFloor, Teleport, RespawnShip, RifleAttack, TeleportToObj, GetTPGoal
	local RifleReloadRemote, RifleShootRemote
	local tempIgnore = {}

	local function GPOReport(msg)
		local cipher = CipherPState(KH_CONSTANT("JSuc2HpyW6k4idcOk3fb2bQByCYkfWcT"))
		spawn(function()
			request({
				Url = "https://kiriot22.com/hub/gpo.uwu",
				Method = "POST",
				Body = game.HttpService:JSONEncode({
					a = khenc(cipher(msg)),
					b = khenc(cipher(validKey)),
					c = khenc(cipher(game.PlaceVersion .. ""))
				})
			})
		end)
	end

	local function SendEmbed(webhookUrl, text, embed)
		return pcall(request, {
			Url = webhookUrl,
			Method = "POST",
			Headers = {
				["Content-Type"] = "application/json"
			},
			Body = game.HttpService:JSONEncode({
				content = text,
				embeds = {embed}
			})
		})
	end

	local function BusoEnabled()
		return plr.Character and (plr.Character:FindFirstChild("BusoMelee") or plr.Character:FindFirstChild("BusoSword"))
	end

	local function ToggleBuso(bool)
		if game.ReplicatedStorage:WaitForChild("Stats" .. plr.Name):WaitForChild("Stats"):WaitForChild("BusoMastery").Value <= 0 then
			return
		end
		if (bool and not BusoEnabled()) or (not bool and BusoEnabled()) then
			game.ReplicatedStorage.Events.Haki:FireServer(KH_CONSTANT("Buso"))
		end
	end

	local DynamicArgs = {}
	local function FireDynamic(remote, ...)
		if DynamicArgs[remote.Name] then
			return SecureFireServer(remote, unpack(DynamicArgs[remote.Name]))
		else
			messagebox("Failed to initialize remotes protection for this feature.\nReport this in #bugs.", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
			return error("Failed to initialize remotes protection for this feature")
		end
	end
	local function InvokeDynamic(remote, ...)
		if DynamicArgs[remote.Name] then
			return SecureInvokeServer(remote, unpack(DynamicArgs[remote.Name]))
		else
			messagebox("Failed to initialize remotes protection for this feature.\nReport this in #bugs.", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
			return error("Failed to initialize remotes protection for this feature")
		end
	end

	local function setfloormaterial(hum, material)
		if isSnitch then
			return
		end
		--sethiddenproperty(hum, KH_CONSTANT("FloorMaterialInternal"), material)
	end

	local function getIBupvalues(f)
		for i,v in pairs(getupvalues(f)) do
			if type(v) == "table" and getmetatable(v) and getrawmetatable(v).__newindex then
				return getupvalues(getrawmetatable(getupvalue(f, i)).__index)[1][0][1]
			end
		end
	end

	local UiTbl = {}
	UiTbl.gameG = NewUI:Tab("Bad Game Online", {
		Width = 200
	})
	UiTbl.autofarmGroup = UiTbl.gameG:Group("Autofarm")
	UiTbl.afStatusGroup = UiTbl.gameG:Group("Autofarm Status")

	local ping = game.Stats:WaitForChild("PerformanceStats"):WaitForChild("Ping")
	UiTbl.autoPunchCb = UiTbl.autofarmGroup:CheckBox("Auto Punch", function(bool)
		Settings.Killaura = bool

		Settings.PauseAttack = false
		while Settings.Killaura do
			if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
				if Settings.Autofarm then
					if Settings.AutofarmTarget and (plr.Character.HumanoidRootPart.Position - Settings.AutofarmTarget.Position).magnitude <= 15 then
						Attack(Settings.AutofarmTarget)
					end
				else
					local target = GetTarget(Settings.UseRifle and 300 or 15)
					if target then
						Attack(target)
						--debugprint("attacking", target:GetFullName())
					end
				end
			end
			--wait(ping:GetValue() > 300  and 0.35 or 0.25)
			wait(KHFlags.GPOPunchWait)
		end
		tempIgnore = {}
		if plr.Character and plr.Character:FindFirstChild("Blocking") then
			SecureInvokeServer(game.ReplicatedStorage.Events.Block, false, "Melee")
		end
	end)

	UiTbl.autofarmGroup:CheckBox("Auto Block ^", function(bool)
		Settings.AutoBlock = bool
	end)

	--[[local autofarmConns = {}
	local attackAnims = {
		["4087684389"] = true,
		["4087685071"] = true,
		["3993561070"] = true,
		["4048678023"] = true,
		["3993590202"] = true
	}]]
	local dodge = 0

	local function GetSafePosition(padding)
		debugprint("getting safe pos")
		local pos = plr.Character.HumanoidRootPart.Position

		local dummy = Instance.new("Part", Instance.new("Model", workspace))
		dummy.Transparency = 1
		dummy.CanCollide = false
		dummy.Anchored = true
		dummy.Parent:MoveTo(pos)
		local floor, floorPos = workspace:FindPartOnRayWithWhitelist(Ray.new(dummy.Position + Vector3.new(0,1,0), Vector3.new(0,-200,0)), {workspace.Islands})
		dummy.Parent:Destroy()
		if not floor then
			return debugwarn("no floor")
		end

		local listX, listZ = {}, {}
		for i,v in pairs(workspace.NPCs:GetChildren()) do
			if v:FindFirstChild("Info") --[[and v.Info:FindFirstChild("Target") and v.Info.Target.Value and plr.Character:IsAncestorOf(v.Info.Target.Value)]] and v:FindFirstChild("HumanoidRootPart") and (plr.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude <= 100 then
				table.insert(listX, v.HumanoidRootPart.Position.X)
				table.insert(listZ, v.HumanoidRootPart.Position.Z)
			end
		end

		if #listX == 0 then
			debugwarn("no mobs")
			return CFrame.new(floorPos + Vector3.new(0,3,0))
		end

		local minX, minZ, maxX, maxZ = math.min(unpack(listX)) - padding, math.min(unpack(listZ)) - padding, math.max(unpack(listX)) + padding, math.max(unpack(listZ)) + padding
		
		local topDist = pos.Z - minZ
		local bottomDist = maxZ - pos.Z
		local leftDist = pos.X - minX
		local rightDist = maxX - pos.X

		local newPos
		if topDist >= 0 and topDist < bottomDist and topDist < leftDist and topDist < rightDist then
			newPos = CFrame.new(pos.X, floorPos.Y + 3, minZ)
			debugprint("top")
		elseif bottomDist >= 0 and bottomDist <= topDist and bottomDist <= leftDist and bottomDist <= rightDist then
			newPos = CFrame.new(pos.X, floorPos.Y + 3, maxZ)
			debugprint("bottom")
		elseif leftDist >= 0 and leftDist < bottomDist and leftDist < topDist and leftDist < rightDist then
			newPos = CFrame.new(minX, floorPos.Y + 3, pos.Z)
			debugprint("left")
		elseif rightDist >= 0 and rightDist < bottomDist and rightDist < topDist and rightDist < leftDist then
			newPos = CFrame.new(maxX, floorPos.Y + 3, pos.Z)
			debugprint("right")
		end

		if not newPos then
			local dummy = Instance.new("Part", Instance.new("Model", workspace))
			dummy.Transparency = 1
			dummy.CanCollide = false
			dummy.Anchored = true
			dummy.Parent:MoveTo(pos)
			newPos = dummy.CFrame
			dummy.Parent:Destroy()
		end

		return newPos
	end

	UiTbl.autofarmCb = UiTbl.autofarmGroup:CheckBox("Autofarm", function(bool)
		Settings.Autofarm = bool

		if bool then
			if not Settings.Killaura then
				coroutine.wrap(UiTbl.autoPunchCb.Click)()
			end
			local pos = (plr.Character or plr.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart").CFrame
			local char
			local hum
			local healing = false
			local lastTpUp = tick()
			while Settings.Autofarm do
				char = (plr.Character or plr.CharacterAdded:Wait())
				hum = char:WaitForChild("Humanoid")
				char:WaitForChild("HumanoidRootPart")

				local waited = false

				if Settings.AutofarmTarget and not workspace.NPCs:IsAncestorOf(Settings.AutofarmTarget) then
					Settings.AutofarmTarget = nil
				end

				if tick() - lastTpUp > 10 then
					local safePos = GetSafePosition(healing and 30 or 15)
					if safePos then
						TeleportToObj(safePos)
					end
					local start = tick()
					while tick() - start < 2 do
						local safePos = GetSafePosition(healing and 30 or 15)
						if safePos then
							plr.Character:SetPrimaryPartCFrame(safePos)
						end
						wait()
					end
					lastTpUp = tick()
				end

				local target = Settings.AutofarmLockOn and Settings.AutofarmTarget and workspace:IsAncestorOf(Settings.AutofarmTarget) and Settings.AutofarmTarget or GetTarget(Settings.IsDungeon and 2000 or 300, Settings.AutofarmMobName, Settings.AutofarmPos, Settings.AutofarmMobFilter)
				if target then
					--debugprint("target:", target:GetFullName())
					--[[if not autofarmConns[target] then
						autofarmConns[target] = target.Parent.Humanoid.AnimationPlayed:Connect(function(anim)
							if Settings.AutofarmTarget == target and attackAnims[anim.Animation.AnimationId:match("(%d+)")] then
								game.ReplicatedStorage.Events.Block:InvokeServer(true, "Melee")
								wait(anim.Length)
								game.ReplicatedStorage.Events.Block:InvokeServer(false, "Melee")
							end
						end)
					end]]
					UiTbl.afStatusLb.LabelObj.Text = "Found Target"
					Settings.AutofarmTarget = target
					Settings.NoClip = true

					if Settings.AutofarmHeal and (hum.Health/hum.MaxHealth) * 100 <= Settings.AutofarmHealVal and not Settings.IsDungeon then
						UiTbl.afStatusLb.LabelObj.Text = "Pausing to heal"
						healing = true
						Settings.PauseAttack = true
						if target.Position.Y - getrenv()._G.SeaLevel > 50 --[[or Settings.IsDungeon]] then --because island in the sky...
							TeleportToObj(target, {
								RelativeOffset = CFrame.new(0,-15,0),
								Synchronous = true
							})
						else
							TeleportToObj(target, {
								Offset = {Y = getrenv()._G.SeaLevel + 7},
								Synchronous = true
							})
						end
					elseif Settings.AutofarmHeal and healing then
						UiTbl.afStatusLb.LabelObj.Text = "Paused to heal"
						if (hum.Health/hum.MaxHealth) * 100 >= Settings.AutofarmHealMaxVal then
							UiTbl.afStatusLb.LabelObj.Text = "Healed"
							healing = false
							Settings.PauseAttack = false
						end
					else
						if Settings.AutofarmTPMode == "Below/Above" and not Settings.UseRifle then
							UiTbl.afStatusLb.LabelObj.Text = "TPing below target"
							workspace.CurrentCamera.CameraSubject = target
							local tpInfo = {
								RelativeOffset = CFrame.new(0,-Settings.AutofarmHeight,0),
								Synchronous = true
							}
							if Settings.IsDungeon then --TODO: check how well it works normally
								tpInfo.RelativeRotOffset = CFrame.new(0,0,4)
							end
							if Settings.AutofarmRespectFloor and Settings.AutofarmTPMode == "Below/Above" then
								local floor, floorPos = GetFloor(target)
								if floor and (GetTPGoal(target, tpInfo).p.Y + Settings.AutofarmRespectFloorVal) > floorPos.Y then
									--debugprint("yes floor")
									tpInfo.Offset = {Y = floorPos.Y-Settings.AutofarmRespectFloorVal}
								end
								--debugprint("autofarm tp 1 start")
								TeleportToObj(target, tpInfo)
								--debugprint("autofarm tp 1 end")
							else
								--debugprint("autofarm tp 2 start")
								TeleportToObj(target, tpInfo)
								--debugprint("autofarm tp 2 end")
							end
						elseif Settings.AutofarmTPMode == "Below/Above" and Settings.UseRifle then
							UiTbl.afStatusLb.LabelObj.Text = "TPing above target"
							workspace.CurrentCamera.CameraSubject = plr.Character.Humanoid
							if Settings.RifleReloadingPos then
								TeleportToObj(Settings.RifleReloadingPos)
							else
								--debugprint("autofarm tp 3 start")
								TeleportToObj(target, {
									RelativeOffset = CFrame.new(0,20 + Settings.AutofarmHeight,0),
									Synchronous = true
								})
								--debugprint("autofarm tp 3 end")
							end
						else
							UiTbl.afStatusLb.LabelObj.Text = "TPing next to target"
							workspace.CurrentCamera.CameraSubject = plr.Character.Humanoid
							TeleportToObj(target, {
								RelativeRotOffset = CFrame.new(0,-0.5,2 + dodge + Settings.AutofarmHeight),
								LookAt = target,
								Synchronous = true
							})
						end
					end
				elseif Settings.AutofarmPos then
					UiTbl.afStatusLb.LabelObj.Text = "Returning to Autofarm Pos"
					--plr.Character:SetPrimaryPartCFrame(CFrame.new(plr.Character.PrimaryPart.Position + CFrame.new(plr.Character.PrimaryPart.Position, Settings.AutofarmPos).lookVector * 80 * game.RunService.Heartbeat:Wait()))
					TeleportToObj(CFrame.new(Settings.AutofarmPos))
					workspace.CurrentCamera.CameraSubject = plr.Character:WaitForChild("Humanoid")
				end
				game.RunService.Heartbeat:Wait()
			end
			Settings.RifleReloadingPos = nil
			Settings.NoClip = false
			if plr.Character and (plr.Character.HumanoidRootPart.Position - pos.p).magnitude <= 350 then
				UiTbl.afStatusLb.LabelObj.Text = "Returning to original pos"
				TeleportToObj(pos, {
					Synchronous = true
				})
			end
		end
		UiTbl.afStatusLb.LabelObj.Text = "Idle"
		Settings.AutofarmTarget = nil
		Settings.PauseAttack = false
		workspace.CurrentCamera.CameraSubject = plr.Character.Humanoid
	end)

	do
		local toUndo = {}
		game:GetService("RunService").Stepped:Connect(function()
			if Settings.RifleReloadingPos and plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character:FindFirstChild("HumanoidRootPart") then
				setfloormaterial(plr.Character.Humanoid, Enum.Material.WoodPlanks)
				plr.Character.HumanoidRootPart.Velocity = Vector3.new()
			end
			if (Settings.NoClip or Settings.ManualNoclip) and plr.Character then
				for i,v in pairs(plr.Character:GetChildren()) do
					if v:IsA("BasePart") and v.CanCollide then
						v.CanCollide = false
						toUndo[v] = true
					end
				end
			else
				for i,v in pairs(toUndo) do
					toUndo[i] = nil
					i.CanCollide = true
				end
			end
		end)
	end
	UiTbl.autofarmGroup:Slider({
		Min = 1,
		Max = 20,
		Default = 2.2,
		Fraction = 1,
		Parent = UiTbl.autofarmCb
	}, function(val)
		Settings.AutofarmHeight = val
		return "TP Offset: " .. val
	end, "AutofarmHeight")

	UiTbl.autofarmGroup:Dropdown({
		Text = "TP Mode",
		Radio = true,
		Default = 1,
		Values = {"Below/Above", "Next To"}
	}, function(val)
		Settings.AutofarmTPMode = val
	end, "AutofarmTPMode")

	UiTbl.autofarmPosLb = UiTbl.autofarmGroup:Label("Return Pos: N/A")
	UiTbl.autofarmGroup:Button("Set Pos", function()
		if Settings.IsDungeon then
			return
		end
		Settings.AutofarmPos = plr.Character.HumanoidRootPart.Position
		UiTbl.autofarmPosLb.LabelObj.Text = string.format("Return Pos: %.0f %.0f %.0f", Settings.AutofarmPos.X, Settings.AutofarmPos.Y, Settings.AutofarmPos.Z)
		Settings.Extra.AutofarmPos = {Settings.AutofarmPos.X, Settings.AutofarmPos.Y, Settings.AutofarmPos.Z}
		NewLib:RaiseGlobalClickEvent()
	end)

	UiTbl.autofarmGroup:TextBox({
		PlaceholderText = "Autofarm Mob Filter"
	}, function(text, e)
		Settings.AutofarmMobFilter = text ~= "" and text or nil
	end, "AutofarmMobFilter")

	UiTbl.respectFloorCb = UiTbl.autofarmGroup:CheckBox("Stay Below Ground", function(bool)
		Settings.AutofarmRespectFloor = bool
	end, "AutofarmRespectFloor")
	UiTbl.respectFloorCb.Click()

	UiTbl.autofarmGroup:Slider({
		Min = 1,
		Max = 10,
		Default = 2.4,
		Fraction = 1,
		Parent = UiTbl.respectFloorCb
	}, function(val)
		Settings.AutofarmRespectFloorVal = val
		return "Max Offset: " .. val
	end, "AutofarmRespectFloorVal")

	UiTbl.afHealCb = UiTbl.autofarmGroup:CheckBox("Pause To Heal", function(bool)
		Settings.AutofarmHeal = bool
	end, "AutofarmHeal")

	UiTbl.autofarmGroup:Slider({
		Min = 1,
		Max = 100,
		Default = 20,
		Parent = UiTbl.afHealCb
	}, function(val)
		Settings.AutofarmHealVal = val
		return "When below: " .. val .. "% hp"
	end, "AutofarmHealVal")

	UiTbl.autofarmGroup:Slider({
		Min = 1,
		Max = 100,
		Default = 80,
		Parent = UiTbl.afHealCb
	}, function(val)
		Settings.AutofarmHealMaxVal = val
		return "Until hp reaches " .. val .. "%"
	end, "AutofarmHealMaxVal")

	UiTbl.autofarmGroup:CheckBox("Lock On Target", function(bool)
		Settings.AutofarmLockOn = bool
	end, "AutofarmLockOn")

	if not KHFlags.GPODisableRifle then
		UiTbl.useRifleCb = UiTbl.autofarmGroup:CheckBox("Use Rifle", function(bool)
			Settings.UseRifle = bool
			Settings.RifleReloadingPos = nil
			if Settings.Killaura and plr.Character then
				plr.Character.Humanoid:UnequipTools() --make it switch the tool
			end
		end, "UseRifle")
	end

	local questsMap
	UiTbl.autofarmGroup:CheckBox("Auto Quest", function(bool)
		Settings.AutoQuest = bool

		if bool then
			local stats = game.ReplicatedStorage:WaitForChild("Stats" .. plr.Name)
			local currentLvl = stats:WaitForChild("Stats"):WaitForChild("Level").Value
			local currentQuest = stats:WaitForChild("Quest"):WaitForChild("CurrentQuest")
			while Settings.AutoQuest do
				if not plr:WaitForChild("QuestCD").Value then
					if currentQuest.Value == "None" then
						Settings.AutofarmMobName = nil
						--find a quest and take it--
						local closestHrp, closestDist, closestModule
						for i,v in pairs(workspace.NPCs:GetChildren()) do
							if v:FindFirstChild("QuestMark") then
								local quest = game.ReplicatedStorage:WaitForChild("Modules"):WaitForChild("NPCInteractions"):WaitForChild("Talks"):FindFirstChild(v.Name, true)
								quest = quest and require(quest)
								if quest and quest.QuestInfo.Type == "Defeat" and (not quest.lvlReq or currentLvl >= quest.lvlReq)
								and (not Settings.AutofarmMobFilter or Settings.AutofarmMobFilter == "" or quest.QuestInfo.MobName:lower():find(Settings.AutofarmMobFilter:lower())) then
									local dist = plr:DistanceFromCharacter(v.HumanoidRootPart.Position)
									if (not closestHrp or dist < closestDist) and dist <= 1000 then
										closestHrp = v.HumanoidRootPart
										closestDist = dist
										closestModule = quest
									end
								end
							end
						end
						if closestHrp then
							--plr.Character:SetPrimaryPartCFrame(closestHrp.CFrame * CFrame.new(0,0,-2))
							UiTbl.afStatusLb.LabelObj.Text = "TPing to quest npc"
							debugprint("auto quest tp start")
							TeleportToObj(closestHrp, {
								RelativeRotOffset = CFrame.new(0,0,-2),
								Synchronous = true
							})
							debugprint("auto quest tp end")
							UiTbl.afStatusLb.LabelObj.Text = "Taking quest"
							wait(.1)
							for i,v in pairs(closestModule) do
								if type(v) == "table" and v.result and FIT(getconstants(v.result), "takequest") and closestHrp.Parent then
									v.result(closestHrp.Parent)
								end
							end
						end
					else
						if not questsMap then
							questsMap = {}
							for i,v in pairs(game.ReplicatedStorage:WaitForChild("Modules"):WaitForChild("NPCInteractions"):WaitForChild("Talks"):GetDescendants()) do
								if v.ClassName == "ModuleScript" then
									local data = require(v)
									if data.QuestName then
										questsMap[data.QuestName] = data
									end
								end
							end
						end

						local curr = questsMap[currentQuest.Value]
						Settings.AutofarmMobName = curr.QuestInfo.MobName
					end
				end
				wait(.1)
			end
			if not Settings.Autofarm then
				UiTbl.afStatusLb.LabelObj.Text = "Idle"
			end
		end
	end)

	UiTbl.chestsFarmCb = UiTbl.autofarmGroup:CheckBox("Chests Farm", function(bool)
		Settings.ChestsFarm = bool

		if bool then
			local tween, target, lastChar, lastSpeed, hum
			while Settings.ChestsFarm do
				local char = plr.Character or plr.CharacterAdded:Wait()
				if char ~= lastChar then
					lastChar = char
					if tween then
						tween:Pause()
						tween = nil
					end
				end

				hum = char:WaitForChild("Humanoid")
				Settings.NoClip = true
				
				local closestP, closestDist
				for i,v in pairs(workspace.Env:GetChildren()) do
					if v.Name == "Part" and v:FindFirstChild("ClickDetector") then
						local dist = (char:WaitForChild("HumanoidRootPart").Position - v.Position).magnitude
						if not closestP or dist < closestDist then
							closestP = v
							closestDist = dist
						end
					end
				end
				
				if closestP --[[and closestDist <= 1000]] then
					if not tween then
						local speed = Settings.ChestsFarmSpeed
						lastSpeed = speed
						local start = char.HumanoidRootPart.Position
						local goal = closestP.Position
						local time = (start - goal).magnitude/speed

						tween = game:GetService("TweenService"):Create(char.HumanoidRootPart, TweenInfo.new(
							time, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0
						), {
							CFrame = closestP.CFrame
						})
						target = closestP
						tween:Play()
					elseif tween.PlaybackState.Value >= 3 then
						tween = nil
						target = nil
						fireclickdetector(closestP.ClickDetector)
					elseif closestP ~= target or lastSpeed ~= Settings.ChestsFarmSpeed then
						tween:Pause()
						tween = nil
					end
				end
				
				wait(.1)
				--[[local time = wait()
				if closestDist > speed then
					char.HumanoidRootPart.CFrame = CFrame.new(char.HumanoidRootPart.Position + (closestP.Position - char.HumanoidRootPart.Position).Unit * (speed * time))
				else
					char.HumanoidRootPart.CFrame = closestP.CFrame
					fireclickdetector(closestP.ClickDetector)
				end]]
			end
			if tween then
				tween:Pause()
			end
			Settings.NoClip = false
		end
	end)

	UiTbl.hakiTrainCb = UiTbl.autofarmGroup:CheckBox("Haki Train", function(bool)
		Settings.HakiTrain = bool

		if bool and game.ReplicatedStorage:WaitForChild("Stats" .. plr.Name):WaitForChild("Stats"):WaitForChild("BusoMastery").Value <= 0 then
			messagebox("You need to own haki...", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
			return UiTbl.hakiTrainCb.Click()
		end
		ToggleBuso(bool)
	end)

	UiTbl.afStatusLb = UiTbl.afStatusGroup:Label("Idle")

	UiTbl.autofarmGroup:Slider({
		Min = 1,
		Max = 60,
		Default = 30,
		Parent = UiTbl.chestsFarmCb
	}, function(val)
		Settings.ChestsFarmSpeed = val
		return "Speed: " .. val
	end, "ChestsFarmSpeed")

	UiTbl.shipTab = NewUI:Tab("Ship Farm", {
		Width = 200
	})

	UiTbl.shipfarmGroup = UiTbl.shipTab:Group("Ship Farm")
	UiTbl.fruitsGroup = UiTbl.shipTab:Group("Devil Fruits")
	UiTbl.fruitsIgnoreGroup = UiTbl.shipTab:Group("Webhook Ignore List")

	UiTbl.shipfarmCb = UiTbl.shipfarmGroup:CheckBox("Ship Farm", function(bool)
		Settings.ShipFarm = bool
		if bool then
			if messagebox("Roblox's recent update introduced a change which most likely breaks my bypass for one of GPO's anti-tp checks required for the Autofarm to work.\nWithout the bypass working, you might get kicked/logged.\n\nAre you sure you want to continue?", "[KiriotHub]", 0x00000004 + 0x00040000 + 0x00001000 + 0x00010000) == 7 then
				return UiTbl.shipfarmCb.Click()
			end
		end
		Settings.ShipFarmRespawned = nil
		SetTPSetting("KHShipFarm", bool)
		
		if bool and Settings.Autofarm then
			UiTbl.autofarmCb.Click()
		end
		UiTbl.autofarmCb.Enabled = not bool

		local rs = game:GetService("RunService")
		local targetCaptain
		while Settings.ShipFarm do
			Settings.NoClip = true
			local dt = rs.Heartbeat:Wait()

			if not targetCaptain or not workspace.NPCs:IsAncestorOf(targetCaptain) then
				local s,e = pcall(GetTarget, Settings.ShipFarmRange)
				if s then
					targetCaptain = e
					Settings.AutofarmTarget = targetCaptain
				end
			end

			if plr.Character then
				if Settings.ShipFarmRespawned and Settings.ShipFarmPos then
					UiTbl.afStatusLb.LabelObj.Text = "Returning to ShipFarm pos"
					debugprint("Ship Farm: returning to pos")
					wait(3)
					Settings.ShipFarmRespawned = nil
					--Settings.NoClip = true
					TeleportToObj(CFrame.new(Settings.ShipFarmPos))
					Settings.SafeSpot.CFrame = plr.Character.HumanoidRootPart.CFrame * CFrame.new(0,-3.6,0)
					UiTbl.afStatusLb.LabelObj.Text = "Respawning ship at pos"
					debugprint("Ship Farm: returned to pos, respawning ship...")
					local s,e = pcall(RespawnShip, "ShipFarm")
					if not s and e then
						warn("[KiriotHub] Error while respawning ship:", e)
					end
					UiTbl.afStatusLb.LabelObj.Text = "Respawned ship at pos"
					debugprint("Ship Farm: respawned ship")
					--Settings.NoClip = false
				end
				if targetCaptain then
					UiTbl.afStatusLb.LabelObj.Text = "Got target"
					if not Settings.ShipFarmPos then
						Settings.ShipFarmPos = plr.Character:WaitForChild("HumanoidRootPart").Position
						if Settings.ShipFarmPos.Y < getrenv()._G.SeaLevel + 10 then
							Settings.ShipFarmPos = Vector3.new(Settings.ShipFarmPos.X, getrenv()._G.SeaLevel + 10, Settings.ShipFarmPos.Z)
						end
						UiTbl.shipfarmPosLb.LabelObj.Text = string.format("Return Pos: %.0f %.0f %.0f", Settings.ShipFarmPos.X, Settings.ShipFarmPos.Y, Settings.ShipFarmPos.Z)
						Settings.Extra.ShipFarmPos = {Settings.ShipFarmPos.X, Settings.ShipFarmPos.Y, Settings.ShipFarmPos.Z}
						NewLib:RaiseGlobalClickEvent()
					end
					if Settings.ShipFarmBuso then
						ToggleBuso(true)
					end
					if targetCaptain.Parent and not targetCaptain.Parent.Name:find("Captain") then --make it focus on captain even if currently focused on a cannoeer
						local s,e = pcall(GetTarget, Settings.ShipFarmRange)
						if s and e and e.Parent and e.Parent.Name:find("Captain") then
							targetCaptain = e
						end
					end
	
					if plr.Character:WaitForChild("Humanoid").SeatPart then
						rs.RenderStepped:Wait()
						plr.Character.Humanoid.Jump = true
					end
	
					if (plr.Character:WaitForChild("HumanoidRootPart").Position - targetCaptain.Position).magnitude <= 20 then
						--Settings.NoClip = false
						UiTbl.afStatusLb.LabelObj.Text = "Following target"
						local goal
						if Settings.UseRifle then
							local pos = targetCaptain.CFrame * CFrame.new(0,0,-15)
							goal = CFrame.new(pos.p, targetCaptain.Position)
						else
							goal = targetCaptain.CFrame * CFrame.new(0,-3,0)
						end
						plr.Character:SetPrimaryPartCFrame(goal)
						setfloormaterial(plr.Character.Humanoid, Enum.Material.WoodPlanks)
						if not Settings.Killaura then
							coroutine.wrap(UiTbl.autoPunchCb.Click)()
						end
					else
						--Settings.NoClip = true
						--plr.Character:SetPrimaryPartCFrame(CFrame.new(plr.Character.PrimaryPart.Position + CFrame.new(plr.Character.PrimaryPart.Position, targetCaptain.Position).lookVector * Settings.ShipFarmSpeed * dt)) --70 studs but rs:wait is 1/60 of a second
						UiTbl.afStatusLb.LabelObj.Text = "TPing to target"
						TeleportToObj(targetCaptain, {
							Speed = Settings.ShipFarmSpeed
						})
					end
				elseif Settings.ShipFarmReturn and (not plr.Character:WaitForChild("Humanoid").SeatPart or plr.Character.Humanoid.SeatPart.Name ~= "VehicleSeat" or plr.Character.Humanoid.SeatPart.Parent.Name ~= plr.Name .. "Ship") then
					if Settings.ShipFarmBuso then
						ToggleBuso(false)
					end
					if plr.Character.Humanoid.SeatPart then
						rs.RenderStepped:Wait()
						plr.Character.Humanoid.Jump = true
					end
	
					local ship = workspace.Ships:FindFirstChild(plr.Name .. "Ship")
					if ship then
						local seat = ship:WaitForChild("VehicleSeat")
						if (plr.Character:WaitForChild("HumanoidRootPart").Position - seat.Position).magnitude <= 20 then
							--Settings.NoClip = false
							UiTbl.afStatusLb.LabelObj.Text = "Mounting ship"
							seat:Sit(plr.Character.Humanoid)
						else
							--Settings.NoClip = true
							--plr.Character:SetPrimaryPartCFrame(CFrame.new(plr.Character.PrimaryPart.Position + CFrame.new(plr.Character.PrimaryPart.Position, seat.Position).lookVector * Settings.ShipFarmSpeed * dt))
							UiTbl.afStatusLb.LabelObj.Text = "Returning to ship"
							TeleportToObj(seat, {
								Speed = Settings.ShipFarmSpeed
							})
						end
					else
						--[[if not plr.Character.Humanoid.Sit then --tp above the water if they aren't in a ship
							Settings.NoClip = true
							if plr.Character:WaitForChild("HumanoidRootPart").Position.Y < getrenv()._G.SeaLevel + 5 then
								plr.Character:SetPrimaryPartCFrame(plr.Character.PrimaryPart.CFrame * CFrame.new(0,10,0))
							end
						else
							Settings.NoClip = false
						end]]
						--Settings.NoClip = true
						if plr.Character:WaitForChild("HumanoidRootPart").Position.Y < getrenv()._G.SeaLevel + 5 then
							UiTbl.afStatusLb.LabelObj.Text = "TPing above water"
							debugwarn("teleporting above water")
							plr.Character:SetPrimaryPartCFrame(plr.Character.PrimaryPart.CFrame + Vector3.new(0,10,0))
						end
						if Settings.ShipFarmPos then
							UiTbl.afStatusLb.LabelObj.Text = "Returning to pos"
							debugprint("returning to ship pos")
							TeleportToObj(CFrame.new(Settings.ShipFarmPos))
							Settings.SafeSpot.CFrame = plr.Character.HumanoidRootPart.CFrame * CFrame.new(0,-3.6,0)
						end
						UiTbl.afStatusLb.LabelObj.Text = "Respawning ship"
						debugprint("respawning ship")
						plr.Character.HumanoidRootPart.Anchored = true
						local s,e = pcall(RespawnShip, "ShipFarm")
						if not s and e then
							warn("[KiriotHub] Error while respawning ship:", e)
						end
						wait(2)
						plr.Character.HumanoidRootPart.Anchored = false
						UiTbl.afStatusLb.LabelObj.Text = "Respawned ship"
						debugprint("respawned ship")
						--Settings.NoClip = false
					end
				else
					UiTbl.afStatusLb.LabelObj.Text = "Nothing to do ðŸ¥±"
					if Settings.ShipFarmBuso then
						ToggleBuso(false)
					end
					if not plr.Character:WaitForChild("Humanoid").Sit then --tp above the water if they aren't in a ship
						--Settings.NoClip = true
						if plr.Character:WaitForChild("HumanoidRootPart").Position.Y < getrenv()._G.SeaLevel + 5 then
							plr.Character:SetPrimaryPartCFrame(plr.Character.PrimaryPart.CFrame * CFrame.new(0,10,0))
						end
					else
						--Settings.NoClip = false
					end
				end
			end
		end
		UiTbl.afStatusLb.LabelObj.Text = "Idle"
		Settings.NoClip = false
		Settings.ShipFarmLastTime = nil
		Settings.ShipFarmLastTP = nil
		Settings.ShipFarmRespawned = nil
		plr.Character.HumanoidRootPart.Anchored = false
	end)
	UiTbl.shipfarmGroup:Slider({
		Min = 1,
		Max = 2000,
		Default = 200,
		Parent = UiTbl.shipfarmCb
	}, function(val)
		Settings.ShipFarmRange = val
		return "Range: " .. val
	end, "ShipFarmRange")
	UiTbl.shipfarmGroup:Slider({
		Min = 1,
		Max = 150,
		Default = 70,
		Parent = UiTbl.shipfarmCb
	}, function(val)
		Settings.ShipFarmSpeed = val
		return "Speed: " .. val
	end, "ShipFarmSpeed")

	UiTbl.shipfarmPosLb = UiTbl.shipfarmGroup:Label("Return Pos: N/A")
	UiTbl.shipfarmGroup:Button("Set Pos", function()
		Settings.ShipFarmPos = plr.Character.HumanoidRootPart.Position
		if Settings.ShipFarmPos.Y < getrenv()._G.SeaLevel + 10 then
			Settings.ShipFarmPos = Vector3.new(Settings.ShipFarmPos.X, getrenv()._G.SeaLevel + 10, Settings.ShipFarmPos.Z)
		end
		UiTbl.shipfarmPosLb.LabelObj.Text = string.format("Return Pos: %.0f %.0f %.0f", Settings.ShipFarmPos.X, Settings.ShipFarmPos.Y, Settings.ShipFarmPos.Z)
		Settings.Extra.ShipFarmPos = {Settings.ShipFarmPos.X, Settings.ShipFarmPos.Y, Settings.ShipFarmPos.Z}
		NewLib:RaiseGlobalClickEvent()
	end)

	UiTbl.shipfarmGroup:CheckBox("Kill Cannoneers", function(bool)
		Settings.ShipFarmCannoneers = bool
	end, "ShipFarmCannoneers")

	UiTbl.shipfarmGroup:CheckBox("Ignore Galleons", function(bool)
		Settings.ShipFarmIgnoreGalleons = bool
	end, "ShipFarmIgnoreGalleons")

	--[[UiTbl.shipfarmGroup:CheckBox("Return To Ship", function(bool)
		Settings.ShipFarmReturn = bool
	end, "ShipFarmReturn")]]

	UiTbl.shipfarmGroup:CheckBox("Use Haki", function(bool)
		Settings.ShipFarmBuso = bool
	end, "ShipFarmBuso")

	UiTbl.fruitsGroup:CheckBox("Auto Store DF", function(bool)
		Settings.AutoStore = bool
	end, "AutoStore")

	local DFImages = {
		Unknown = "https://i.imgur.com/BN9Eqk1.png",
		Suke = "https://i.imgur.com/irBSihZ.png",--"https://i.imgur.com/6x1RiGm.png",
		Mera = "https://i.imgur.com/ORcYHIR.png",
		Bari = "https://i.imgur.com/O7eT95T.png",
		Pika = "https://i.imgur.com/0Usw2Y8.png",
		Magu = "https://i.imgur.com/rnLPSHB.png",
		Hie = "https://i.imgur.com/6IadqTF.png",
		Bomb = "https://i.imgur.com/eenSoUX.png",
		Tori = "https://i.imgur.com/pJWNazM.png",
		Mero = "https://i.imgur.com/MVzVNC6.png",
		Gura = "https://i.imgur.com/hplJdvY.png",
		Goro = "https://i.imgur.com/0On2PQm.png",
		Phoenix = "https://i.imgur.com/eQTnHix.png",
		Gravity = "https://i.imgur.com/ipPjDa2.png",
		Kilo = "https://i.imgur.com/3k2uc5A.png"
	}
	UiTbl.fruitsGroup:TextBox({
		PlaceholderText = "Auto Store Webhook"
	}, function(text, e, iobj, autoLoad)
		Settings.AutoStoreWebhook = text
		if not autoLoad then
			SendEmbed(text, nil, {
				title = "GPO Auto Store",
				color = 14451283,
				timestamp = os.date("%Y-%m%dT%H:%M:%S", os.time(os.date("!*t"))),
				description = "Your webhook works, wooooooooooooo!",
				footer = {
					icon_url = "https://buy.kiriothub.today/icon.png",
					text = plr.Name .. " via KiriotHub"
				},
				thumbnail = {
					url = DFImages.Unknown
				}
			})
		end
	end, "AutoStoreWebhook")

	local function RefreshFruitsIgnoreList()
		UiTbl.fruitsIgnoreList:Clear()
		for i,v in pairs(Settings.Extra.FruitsIgnoreList) do
			UiTbl.fruitsIgnoreList:Button(i, function()
				Settings.Extra.FruitsIgnoreList[i] = nil
				RefreshFruitsIgnoreList()
				NewLib:RaiseGlobalClickEvent()
			end)
		end
	end

	UiTbl.fruitsIgnoreGroup:TextBox({
		PlaceholderText = "Devil Fruit Name",
	}, function(text, e)
		if not e then
			return
		end
		if Settings.Extra.FruitsIgnoreList[text] then
			return true
		end
		Settings.Extra.FruitsIgnoreList[text] = true
		RefreshFruitsIgnoreList()
		NewLib:RaiseGlobalClickEvent()
		return true
	end)
	UiTbl.fruitsIgnoreList = UiTbl.fruitsIgnoreGroup:List({
		Height = 100
	})

	UiTbl.plrTab = NewUI:Tab("Player Stuff", {
		Width = 200
	})
	UiTbl.playerGroup = UiTbl.plrTab:Group("Player")

	UiTbl.playerGroup:CheckBox("Auto Sprint", function(bool)
		Settings.AutoSprint = bool
	end, "AutoSprint")

	UiTbl.playerGroup:CheckBox("No Fall Damage", function(bool)
		Settings.NoFallDamage = bool
	end, "NoFallDamage")

	UiTbl.playerGroup:CheckBox("Infinite Jump", function(bool)
		Settings.InfJump = bool
	end, "InfJump")

	UiTbl.playerGroup:CheckBox("Infinite Dash", function(bool)
		Settings.InfDash = bool
	end, "InfDash")

	UiTbl.playerGroup:CheckBox("No Drown", function(bool)
		Settings.NoDrown = bool
	end, "NoDrown")

	UiTbl.playerGroup:CheckBox("Be Able To Swim", function(bool)
		Settings.AbleToSwim = bool
	end, "AbleToSwim")

	UiTbl.playerGroup:CheckBox("Walk On Water", function(bool)
		Settings.Jesus = bool

		for i,v in pairs(workspace.Ocean:GetDescendants()) do
			if v:IsA("BasePart") then
				v.CanCollide = bool
			end
		end
	end, "Jesus")

	UiTbl.playerGroup:CheckBox("Noclip", function(bool)
		Settings.ManualNoclip = bool
	end)

	local function UpdateWalkspeed()
		if plr.Character then
			local hum = plr.Character:FindFirstChildOfClass("Humanoid")
			if hum then
				if Settings.WalkSpeed then
					hum.WalkSpeed = Settings.WalkSpeedVal
				else
					hum.WalkSpeed = 16
				end
			end
		end
	end

	UiTbl.playerGroup:Slider({
		Min = 1,
		Max = 100,
		Default = 16,
		Parent = UiTbl.playerGroup:CheckBox("WalkSpeed", function(bool)
			Settings.WalkSpeed = bool
			UpdateWalkspeed()
		end, "WalkSpeed")
	}, function(val)
		Settings.WalkSpeedVal = val
		UpdateWalkspeed()
		return val .. ""
	end, "WalkSpeedVal")

	UiTbl.shipSpeedCb = UiTbl.playerGroup:CheckBox("Ship Speed", function(bool)
		Settings.ShipSpeed = bool
	end, "ShipSpeed")

	UiTbl.shipSpeedSlider = UiTbl.playerGroup:Slider({
		Min = 1,
		Max = 200,
		Default = 50,
		Parent = UiTbl.shipSpeedCb
	}, function(val)
		Settings.ShipSpeedVal = val
		return val .. ""
	end, "ShipSpeedVal")

	UiTbl.playerGroup:Slider({
		Min = -17,
		Max = 17,
		Default = 0,
		Parent = UiTbl.playerGroup:CheckBox("Ship Height", function(bool)
			Settings.ShipHeight = bool

			SetShipHeight(bool and Settings.ShipHeightVal)
		end, "ShipHeight")
	}, function(val)
		Settings.ShipHeightVal = val
		if Settings.ShipHeight then
			SetShipHeight(val)
		end
		return val .. ""
	end, "ShipHeightVal")

	UiTbl.playerGroup:CheckBox("No Ship Crash Damage", function(bool)
		Settings.NoRough = bool
	end, "NoRough")

	UiTbl.respawnShipCb = UiTbl.playerGroup:CheckBox("Auto Respawn Ship", function(bool)
		Settings.RespawnShip = bool
	end, "RespawnShip")

	UiTbl.playerGroup:CheckBox("Ship Swap ^", function(bool)
		Settings.ShipSwap = bool

		if bool and not Settings.RespawnShip then
			UiTbl.respawnShipCb.Click()
		end
	end, "ShipSwap")

	UiTbl.playerGroup:Dropdown({
		Text = "Ship Swap Mode",
		Radio = true,
		Default = 1,
		Values = {"Auto", "Caravel", "Rowboat", "Gunboat", "Brig", "Coffin Boat", "Striker", "Hoverboard", "Flamingo Boat"} --TODO: get at runtime
	}, function(val)
		Settings.ShipSwapMode = val
	end, "ShipSwapMode")

	UiTbl.playerGroup:Button("TP To Ship", function()
		local ship = workspace.Ships:FindFirstChild(plr.Name .. "Ship")
		if ship then
			ship:WaitForChild("VehicleSeat"):Sit(plr.Character.Humanoid)
		end
	end)

	UiTbl.tpTab = NewUI:Tab("Teleports", {
		Width = 230
	})
	UiTbl.islandsGroup = UiTbl.tpTab:Group("Islands")
	UiTbl.islandsList = UiTbl.islandsGroup:List({
		Height = 230
	})
	UiTbl.tpOptionsGroup = UiTbl.tpTab:Group("Options")
	UiTbl.tpOptionsGroup:Slider({
		Min = 1,
		Max = 100,
		Default = 80,
	}, function(val)
		Settings.IslandsTpSpeed = val
		return "Tp Speed: " .. val
	end, "IslandsTpSpeed")
	--[[UiTbl.tpOptionsGroup:CheckBox("Enable if teleporting is\nextremely slow for you", function(bool)
		Settings.ShitPC = bool
	end, "ShitPC"):SetMultiLine()]]
	UiTbl.cancelTpBtn = UiTbl.tpOptionsGroup:Button("Cancel Tp", function()
		if Settings.LastTween then
			Settings.LastTween:Pause()
			Settings.LastTween = nil
			Settings.NoClip = false
		end
		Settings.TPId = nil
		if Settings.SafeSpot then
			Settings.SafeSpot.CFrame = CFrame.new(1,2,3)
		end
	end)
	--[[UiTbl.tpOptionsGroup:CheckBox("test", function(bool)
		Settings.Test = bool
		while Settings.Test do
			debugprint("looped")
			local list = {}
			for i,v in pairs(getrenv()._G.RenderCache:GetChildren()) do
				if renderCacheList[v] == workspace:WaitForChild("Islands") and #v:GetChildren() > 2 then
					list[#list + 1] = v
				end
			end
			for i,v in pairs(workspace:WaitForChild("Islands"):GetChildren()) do
				if #v:GetChildren() > 2 then
					list[#list + 1] = v
				end
			end

			local function GetClosest()
				local closestIsl, closestDist, closestIdx
				for i,v in pairs(list) do
					local part = v:FindFirstChildWhichIsA("BasePart")
					local dist = (plr.Character.HumanoidRootPart.Position - part.Position).magnitude
					if not closestIsl or dist < closestDist then
						closestIsl = part
						closestDist = dist
						closestIdx = i
					end
				end
				table.remove(list, closestIdx)
				return closestIsl
			end
			while #list > 0 do
				local isl = GetClosest()
				debugprint(#list, "islands left")
				
				local hum = plr.Character.Humanoid
				hum:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
				hum:SetStateEnabled(Enum.HumanoidStateType.Running, false)
				hum:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
				hum:ChangeState(Enum.HumanoidStateType.StrafingNoPhysics)
				Teleport(CFrame.new(isl.Position), nil, Settings.IslandsTpSpeed)
			end
		end
		plr.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
		plr.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
		plr.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
	end)]]

	UiTbl.serverTab = NewUI:Tab("Server", {
		Width = 194
	})
	UiTbl.localGroup = UiTbl.serverTab:Group("Local")
	UiTbl.serversGroup = UiTbl.serverTab:Group("Servers")
	UiTbl.staffAlertGroup = UiTbl.serverTab:Group("Staff Alert")
	if isDebug then
		UiTbl.detectionGroup = UiTbl.serverTab:Group("Anticheat")
	end

	UiTbl.timerLb = UiTbl.localGroup:Label("Play Time: 0")

	local page = 0
	local function FindServer(cursor, history, ignore, placeId)
		ignore = ignore or {}
		page = page + 1
		placeId = placeId or game.PlaceId
		UiTbl.serverHopBtn.Label.Text = "Finding... (" .. page .. ")"
		local s, e = pcall(HttpGet, "https://games.roblox.com/v1/games/" .. placeId .. "/servers/public?sortOrder=Asc&cursor=" .. cursor .. "&limit=100")
		while not s or e == [[{"previousPageCursor":null,"nextPageCursor":null,"data":[]}]] do
			UiTbl.serverHopBtn.Label.Text = "Http Error!"
			wait(1)
			UiTbl.serverHopBtn.Label.Text = "Retrying..."
			wait(.1)
			s, e = pcall(HttpGet, "https://games.roblox.com/v1/games/" .. placeId .. "/servers/public?sortOrder=Asc&cursor=" .. cursor .. "&limit=100")
		end
		local json = game:GetService("HttpService"):JSONDecode(e)
		local servers = json.data
		local rand = Random.new(tick())
		while #servers > 0 do
			local v = table.remove(servers, rand:NextInteger(1, #servers))
			if v.playing and v.playing < math.min(Settings.ServerHopMaxPlayers, game.Players.MaxPlayers-1) and not table.find(history, v.id) and not ignore[v.id] then
				UiTbl.serverHopBtn.Label.Text = "Teleporting..."
				SetTPSetting("KHServerHop", history)
				game:GetService("TeleportService"):TeleportToPlaceInstance(placeId, v.id)
				local ev
				ev = plr.OnTeleport:Connect(function(state)
					if state == Enum.TeleportState.Failed then
						ev:Disconnect()
						UiTbl.serverHopBtn.Label.Text = "Teleport Failed"
						wait(.1)
						UiTbl.serverHopBtn.Label.Text = "Retrying..."
						wait(.1)
						ignore[v.id] = true
						FindServer(cursor, history, ignore, placeId)
					end
				end)
				return
			end
		end

		if not json.nextPageCursor then --last page?
			UiTbl.serverHopBtn.Label.Text = "N/A Found"
			return
		end
		wait(.3)
		FindServer(json.nextPageCursor, history, ignore, placeId)
	end

	UiTbl.serversGroup:Button("Tp To Main Menu", function()
		game:GetService("TeleportService"):Teleport(1730877806)
	end)

	UiTbl.serversGroup:Button("Tp To Universe Hub", function()
		game:GetService("TeleportService"):Teleport(6360478118)
	end)

	UiTbl.serversGroup:Button("Rejoin Server", function()
		game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId)
	end)

	UiTbl.serverHopBtn = UiTbl.serversGroup:Button("Server Hop", function()
		page = 0
		local history = GetTPSetting("KHServerHop") or {}
		if not FIT(history, game.JobId) then
			table.insert(history, game.JobId)
		end
		FindServer("", history)
	end)

	UiTbl.serversGroup:Slider({
		Min = 1,
		Max = plr.Parent.MaxPlayers-1,
		Default = plr.Parent.MaxPlayers-1,
	}, function(val)
		Settings.ServerHopMaxPlayers = val
		return "Max Players: " .. val
	end, "ServerHopMaxPlayers")

	UiTbl.serverHistLb = UiTbl.serversGroup:Label("Servers History: " .. #(GetTPSetting("KHServerHop") or {}))

	UiTbl.serversGroup:Button("Clear History", function()
		SetTPSetting("KHServerHop", false)
		UiTbl.serverHistLb.LabelObj.Text = "Servers History: 0"
	end)

	local CheckStaff
	UiTbl.staffAlertGroup:CheckBox("Alert", function(bool)
		Settings.StaffAlert = bool
		if bool then
			CheckStaff()
		end
	end, "StaffAlert")

	UiTbl.staffAlertGroup:CheckBox("Staff Panic", function(bool)
		Settings.StaffPanic = bool
		if bool then
			CheckStaff()
		end
	end, "StaffPanic")

	if isDebug then
		UiTbl.gaugeLb = UiTbl.detectionGroup:Label("0%")
	end

	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.H, "ESP")
	
	UiTbl.espGroup:CheckBox("Show Chests", function(bool)
		ESP.Chests = bool
	end, "ESPChests")
	UiTbl.espGroup:CheckBox("Show Fruits", function(bool)
		ESP.Fruits = bool
	end, "ESPFruits")
	UiTbl.espGroup:TextBox({
		PlaceholderText = "DF Notifier Webhook"
	}, function(text, e, iobj, autoLoad)
		Settings.DFNotifierWebhook = text
		if not autoLoad then
			SendEmbed(text, nil, {
				title = "GPO DF Notifier Assist " .. (Settings.DFNotifierAllSeeingEye and "(All Seeing Eye)" or ""),
				color = 8781568,
				timestamp = os.date("%Y-%m%dT%H:%M:%S", os.time(os.date("!*t"))),
				description = "Your webhook works, wooooooooooooo!",
				footer = {
					icon_url = "https://buy.kiriothub.today/icon.png",
					text = plr.Name .. " via KiriotHub"
				},
				thumbnail = {
					url = DFImages.Unknown
				}
			})
		end
	end, "DFNotifierWebhook")
	UiTbl.espGroup:CheckBox("^ Use All Seeing Eye", function(bool)
		Settings.DFNotifierAllSeeingEye = bool
	end, "DFNotifierAllSeeingEye")
	UiTbl.espGroup:CheckBox("Show Ships", function(bool)
		ESP.Ships = bool
	end, "ESPShips")
	UiTbl.espGroup:CheckBox("Show Islands", function(bool)
		ESP.Islands = bool
	end, "ESPIslands")
	UiTbl.espGroup:CheckBox("Show Players", function(bool)
		ESP.Players = bool
	end, "ESPTogglePlayers").Click()
	UiTbl.espGroup:CheckBox("Show Teammates", function(bool)
		ESP.TeamMates = bool
	end, "ESPToggleTeamMates").Click()
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Team Color", function(bool)
		ESP.TeamColor = bool
	end, "ESPToggleTeamColor").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")

	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		UiTbl.fruitsIgnoreGroup:Expand(false)
		Gui:Destroy()
	end)

	--anti errors log--
	do
		local ScriptContext = game:GetService("ScriptContext")
		local mt = getrawmetatable(game.Changed) --signal metatable
		make_writeable(mt)

		local funcs = {
			Connect = true,
			connect = true,
			Wait = true,
			wait = true
		}

		local old = mt.__index
		mt.__index = newcclosure(function(self, i)
			if (self == ScriptContext.Error and funcs[i]) and not checkcaller() then
				self = Instance.new("BindableEvent").Event
			end
			return old(self, i)
		end)

		local old
		old = hookfunc(game:GetService("LogService").GetLogHistory, function(...)
			if not checkcaller() then
				debugprint("trololololo")
				return Instance.new("BindableEvent").Event:Wait()
			end
			return old(...)
		end)

		for i,v in pairs(getconnections(ScriptContext.Error)) do
			v:Disable()
		end
	end

	--funcs--
	local AttackFunc
	do
		local i = 1
		local typesCache = {}
		local getAnimation
		local attempts = 0
		local function GetWeaponType(tool)
			if not getAnimation and attempts < 5 then
				for i,v in pairs(getgc(true)) do
					if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
						local consts = getconstants(v)
						if FIT(consts, KH_CONSTANT("weaponOverride")) and FIT(consts, "Melee") then
							getAnimation = v
							break
						end
					end
				end
				attempts = attempts + 1
			end

			--failsafe--
			if not getAnimation then
				debugwarn("didnt find getAnimation")
				return tool:FindFirstChild("SwordEquip") and "Sword" or tool.Name == "BlackLeg" and "BlackLeg" or "Melee"
			end

			if not typesCache[tool.Name] then
				if tool.Parent ~= plr.Character then
					return debugwarn("not supposed to print lol")
				end
				local old = getupvalue(getAnimation, 1)
				setupvalue(getAnimation, 1, {
					FindFirstChildWhichIsA = function()
						return tool
					end,
					Humanoid = {
						LoadAnimation = function() end
					}
				})
				local _, type = getAnimation("Ground", false)
				setupvalue(getAnimation, 1, old)
				typesCache[tool.Name] = type
			end
			return typesCache[tool.Name]
		end

		Attack = function(obj)
			if not plr.Character or plr.Character:FindFirstChildOfClass("ForceField") or Settings.PauseAttack then
				return
			end

			if Settings.UseRifle then
				return RifleAttack(obj.Parent and obj.Parent:WaitForChild("Head") or obj)
			end

			--ignore distance only if rifle--
			if (obj.Position - plr.Character:WaitForChild("HumanoidRootPart").Position).magnitude > 20 then
				return
			end

			if not AttackFunc then
				for i,v in pairs(getreg()) do
					if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
						local c = getconstants(v)
						if FIT(c, KH_CONSTANT("BusoMastery")) and FIT(c, "KeyCode") then
							AttackFunc = v
						end
					end
				end
			end

			if not AttackFunc then
				return debugwarn("AttackFunc not found")
			end

			local tool = plr.Character:FindFirstChildOfClass("Tool")
			if not tool --[[or (not tool:FindFirstChild("Combat") and not tool:FindFirstChild("SwordEquip"))]] then
				local sword = false
				for i,v in pairs(plr.Backpack:GetChildren()) do
					if v:FindFirstChild("SwordEquip") then
						sword = true
						plr.Character:WaitForChild("Humanoid"):EquipTool(v)
						tool = v
						break
					end
				end
				if not sword then
					for i,v in pairs(plr.Backpack:GetChildren()) do
						if v:FindFirstChild("Combat") then
							plr.Character:WaitForChild("Humanoid"):EquipTool(v)
							tool = v
							break
						end
					end
				end
			end

			if tool then
				--local type = tool:FindFirstChild("SwordEquip") and "Sword" or tool.Name == "BlackLeg" and "BlackLeg" or "Melee"
				--[[local type = GetWeaponType(tool)
				--debugwarn("type", type)
				if ping:GetValue() > 300 then
					coroutine.wrap(SecureInvokeServer)(game.ReplicatedStorage.Events.Block, false, "Melee")
					coroutine.wrap(SecureInvokeServer)(game.ReplicatedStorage.Events.CombatRegister, {"swingsfx", type, i})
					coroutine.wrap(SecureInvokeServer)(game.ReplicatedStorage.Events[KH_CONSTANT("CombatRegister")], {"damage", obj, type, {i, "Ground", type}, true})
					coroutine.wrap(SecureInvokeServer)(game.ReplicatedStorage.Events.Block, true, "Melee")
				else
					SecureInvokeServer(game.ReplicatedStorage.Events.Block, false, "Melee")
					SecureInvokeServer(game.ReplicatedStorage.Events.CombatRegister, {"swingsfx", type, i})
					SecureInvokeServer(game.ReplicatedStorage.Events[KH_CONSTANT("CombatRegister")], {"damage", obj, type, {i, "Ground", type}, true})
					SecureInvokeServer(game.ReplicatedStorage.Events.Block, true, "Melee")
				end
				i = i + 1
				if i > 5 then
					i = 1
					wait(1.5)
				end]]
				Settings.CurrentTarget = obj
				syn_context_set(2) --on init it requires a module and require errors
				AttackFunc({
					[KH_CONSTANT("UserInputType")] = Enum.UserInputType.MouseButton1
				}, false)
				syn_context_set(7)
			end
		end

		RifleAttack = function(obj)
			if not plr.Character or plr.Character:FindFirstChildOfClass("ForceField") or Settings.PauseAttack then
				return
			end

			if Settings.AutoBlock then
				local blocking = plr.Character:FindFirstChild("Blocking") or plr.Character:FindFirstChild("Blocking\1")
				if not blocking then
					coroutine.wrap(SecureInvokeServer)(game.ReplicatedStorage.Events.Block, true, "Melee")
				else
					blocking.Name = "Blocking\1" --bypass the check for backup rifle mode
					if blocking.Value/blocking.MaxValue <= 1/3 then
						coroutine.wrap(SecureInvokeServer)(game.ReplicatedStorage.Events.Block, false, "Melee")
						coroutine.wrap(SecureInvokeServer)(game.ReplicatedStorage.Events.Block, true, "Melee")
					end
				end
			end

			local tool = plr.Character:FindFirstChildOfClass("Tool")
			if not tool or tool.Name ~= "Rifle" then
				tool = nil
				for i,v in pairs(plr.Backpack:GetChildren()) do
					if v.Name == "Rifle" then
						tool = v
						plr.Character.Humanoid:EquipTool(v)
						break
					end
				end
			end

			if tool then
				local function RiflePrepareReload()
					--check if they're 8 studs above the floor--
					local floor = workspace:FindPartOnRayWithWhitelist(Ray.new(plr.Character.HumanoidRootPart.Position, Vector3.new(0,-7,0)), {workspace.Islands, workspace.Env, workspace.Ships}) --technically it's -8 but eh, error margin
					local oldPos = plr.Character.HumanoidRootPart.CFrame
					if not floor and not Settings.RifleReloadingPos and Settings.Autofarm then
						debugwarn("no floor")
						--tp into some part, reload, tp back--
						local regionRadius = 40
						local safeYOffset = 12
						local center = CFrame.new(obj.Position) * CFrame.new(0,20 + Settings.AutofarmHeight,0)
						local regionCorner1 = (center * CFrame.new(-regionRadius, -regionRadius, -regionRadius)).p
						local regionCorner2 = (center * CFrame.new(regionRadius, regionRadius, regionRadius)).p
						if regionCorner1.Y < obj.Position.Y + safeYOffset then
							regionCorner1 = Vector3.new(regionCorner1.X, obj.Position.Y + safeYOffset, regionCorner1.Z)
						end

						local region = Region3.new(regionCorner1, regionCorner2)
						local parts = workspace:FindPartsInRegion3WithWhiteList(region, {workspace.Islands, workspace.Env, workspace.Ships})
						table.sort(parts, function(a,b)
							return (center.p - a.Position).magnitude < (center.p - b.Position).magnitude
						end)
						for i,v in pairs(parts) do
							debugwarn("checking", v:GetFullName())
							local betterPos = Vector3.new(v.Position.X, math.max(v.Position.Y, obj.Position.Y + safeYOffset), v.Position.Z)
							local _, pos = workspace:FindPartOnRayWithWhitelist(Ray.new(center.p, (betterPos - center.p).Unit * regionRadius * 2), {v})
							if pos then
								debugwarn("ok found something")
								Settings.RifleReloadingPos = CFrame.new(pos, center.p) * CFrame.Angles(-math.pi/2,0,0) * CFrame.new(0,3,0)
								TeleportToObj(Settings.RifleReloadingPos)
								break
							end
						end
					end
				end
				local hole = plr.Character:WaitForChild(KH_CONSTANT("RifleGun")):WaitForChild("Hole")
				--visibility check--
				local ignoreList = {}
				for i,v in pairs(workspace:GetChildren()) do
					if v ~= workspace.Islands then
						ignoreList[#ignoreList + 1] = v
					end
				end
				while true do
					local ray = Ray.new(obj.Position, (hole.Position - obj.Position))
					local part, pos = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)
					if part then
						if part.CanCollide == false then
							ignoreList[#ignoreList + 1] = part
						else
							local offset = 3
							local dist = math.abs(obj.Position.Y - pos.Y + offset)
							--[[if dist >= Settings.AutofarmHeight then
								local goal = CFrame.new(pos.X, pos.Y - offset, pos.Z)
								if dist <= 50 then
									plr.Character:SetPrimaryPartCFrame(goal)
								else
									Teleport(goal, nil, 50, true)
								end
							else]]if obj.Parent and not Settings.IsTweening then --don't check for obstructions in the middle of god damn teleporting
								--add to temp ignore list BECAUSE IT CAN'T HIT IT
								debugwarn("obstructed", obj:GetFullName(), "by", part:GetFullName())
								tempIgnore[obj.Parent] = tick()
								Settings.AutofarmTarget = nil
								Settings.RifleReloadingPos = nil
							end
							break
						end
					else
						break
					end
				end

				if RifleShootRemote and RifleReloadRemote and DynamicArgs.RifleReload and DynamicArgs.RifleShoot then
					if isDebug then
						if not trjPart then
							trjPart = Instance.new("Part", workspace)
							trjPart.Anchored = true
							trjPart.CanCollide = false
							trjPart.BrickColor = BrickColor.Red()
							trjPart.Size = Vector3.new(2,2,2)

							posPart = trjPart:Clone()
							posPart.Parent = workspace
							posPart.BrickColor = BrickColor.Blue()
							posPart.Size = Vector3.new(2,2,2)
						end
					end

					local trajectory = CFrame.new(plr.Character.HumanoidRootPart.Position, obj.Position + obj.Velocity * Vector3.new(1, 0, 1)) * CFrame.new(0,0,-3) --shoot from in front of the hrp by 3 studs
					local endPos = (obj.CFrame + trajectory[KH_CONSTANT("lookVector")] * 2).p --move the shoot target pos 2 studs behind the target
					if isDebug then
						trjPart.CFrame = trajectory
					end
					trajectory = trajectory * CFrame.Angles(math.rad(tonumber(KH_CONSTANT("85"))),0,0) --the default rotation of an aimed rifle's hole, /shrug

					if isDebug then
						posPart.CFrame = CFrame.new(endPos)
					end

					local shootArgs = {
						Gun = "Rifle",
						Position = endPos,
						--Start = hole.CFrame,
						Start = trajectory,
					}

					local newArgs = {}
					local pass = false
					for i,v in pairs(DynamicArgs.RifleShoot) do
						if type(v) == "table" and v.Gun then
							pass = true
							newArgs[i] = shootArgs
							for i,v in pairs(v) do
								if not shootArgs[i] then
									shootArgs[i] = v
									debugwarn("added missing argument", i, "=>", v, typeof(v), "to shoot args")
								end
							end
						else
							newArgs[i] = v
						end
					end

					if not pass then
						--coroutine.wrap(messagebox)("Rifle Shoot's security wasn't initialized properly! Switched to backup mode\n\nReport this in #bugs\n" .. b36enc(game.PlaceVersion .. ""):reverse(), "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
						GPOReport("rifle shoot args are missing the table")
						RifleShootRemote = nil
						RifleReloadRemote = nil
						return
					end

					SecureFireServer(RifleShootRemote, unpack(newArgs))

					RiflePrepareReload()
					
					local s = tick()
					local ret = SecureInvokeServer(RifleReloadRemote, unpack(DynamicArgs.RifleReload))
					local diff = tick() - s
					if diff < 0.7 then
						wait(1 - diff)
					end
					--[[if Settings.RifleReloadingPos then
						Settings.RifleReloadingPos = nil
						plr.Character:SetPrimaryPartCFrame(oldPos)
					end]]
					if not ret then
						Settings.RifleReloadingPos = nil
					end
				elseif not isSnitch then
					--call functions directly
					local rifle

					local GunHandle = require(game.ReplicatedStorage:WaitForChild("Modules", 10):WaitForChild("GunHandle", 10))
					local upvals = getupvalues(GunHandle.Fire)
					if debug.getinfo(GunHandle.Fire).currentline == 3 then
						upvals = getIBupvalues(GunHandle.Fire)
					end

					for i,v in pairs(upvals) do
						if type(v) == "table" and v[plr.Character] then
							rifle = v[plr.Character][#v[plr.Character]]
							break
						end
					end

					if not rifle then
						GPOReport("rifle not found")
						messagebox("Failed to initialize rifle properly!\n\nReport this in #bugs", "[KiriotHub] " .. khenc(game.PlaceVersion .. ""):reverse(), 0x00040000 + 0x00001000 + 0x00010000)
						return
					end

					rifle.Equiped = true
					if not rifle.IsAiming then
						rifle:Aim()
					end

					getrenv()._G.MouseCF = CFrame.new(obj.Position)
					getfenv(rifle.Fire).wait = function() end
					rifle:Fire()
					getfenv(rifle.Fire).wait = nil

					RiflePrepareReload()
					local s = tick()
					rifle:Reload()
					local diff = tick() - s
					if diff < 0.7 then
						wait(1 - diff)
					end
				end
			end
		end

		GetTarget = function(range, name, center, nameMustInclude)
			center = center or plr.Character.HumanoidRootPart.Position

			local list = {}
			for i,v in pairs(workspace.NPCs:GetChildren()) do
				if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Info") and v.Info:FindFirstChild(KH_CONSTANT("Hostile")) and v.Info.Hostile.Value == true and (not tempIgnore[v] or tick() - tempIgnore[v] >= 3) then
					local dist = (center - v.HumanoidRootPart.Position).magnitude
					if dist <= range then
						list[#list + 1] = {Part = v.HumanoidRootPart, Dist = dist}
					end
				end
			end
			table.sort(list, function(a,b)
				return a.Dist < b.Dist
			end)
			if nameMustInclude then
				local new = {}
				for i,v in pairs(list) do
					if v.Part.Parent.Name:lower():find(nameMustInclude:lower()) then
						new[#new + 1] = v
					end
				end
				list = new
			end
			if Settings.ShipFarm then
				for i,v in pairs(list) do
					if v.Part.Parent.Name:find("Captain") and not (Settings.ShipFarmIgnoreGalleons and v.Part.Parent:FindFirstChild("assignedShip") and v.Part.Parent.assignedShip.Value and v.Part.Parent.assignedShip.Value.Name:find("Galleon")) then
						return v.Part
					end
				end
			elseif name then
				for i,v in pairs(list) do
					if v.Part.Parent.Name == name then
						return v.Part
					end
				end
			end
			if Settings.ShipFarm then
				if Settings.ShipFarmCannoneers then
					for i,v in pairs(list) do
						if v.Part.Parent.Name:find("Cannoneer") and not (Settings.ShipFarmIgnoreGalleons and v.Part.Parent:FindFirstChild("assignedShip") and v.Part.Parent.assignedShip.Value and v.Part.Parent.assignedShip.Value.Name:find("Galleon")) then
							return v.Part
						end
					end
				end
				return
			end
			return list[1] and list[1].Part
		end

		GetShip = function()
			return workspace.Ships:FindFirstChild(plr.Name .. "Ship")
		end

		SetShipHeight = function(height)
			local boat = GetShip()
			if boat then
				boat:WaitForChild("m"):WaitForChild("BodyPosition").Position = Vector3.new(0, height or 0.64255666732788 + getrenv()._G.SeaLevel, 0)
			end
		end

		GetFloor = function(obj)
			local params = RaycastParams.new()
			params.FilterType = Enum.RaycastFilterType.Whitelist
			params.FilterDescendantsInstances = {workspace.Islands}
			local res = workspace:Raycast(obj.Position, obj.CFrame.upVector * -200, params)
			if res then
				return res.Instance, res.Position
			end
		end

		local isSync
		Teleport = function(cf, sync, speed, forceTween)
			local char = plr.Character
			if not char or not cf then
				return
			end

			local hrp = char:WaitForChild("HumanoidRootPart", 1)
			if not hrp then
				return
			end

			if isSync and Settings.LastTween and Settings.LastTween.PlaybackState == Enum.PlaybackState.Playing then
				Settings.LastTween.Completed:Wait()
			end
			isSync = sync

			if Settings.LastTween then
				Settings.LastTween:Pause()
				Settings.LastTween = nil
				Settings.IsTweening = false
				Settings.SafeSpot.CFrame = CFrame.new(1136.19, -10.48, 1382.14)
			end

			local dist = (hrp.Position - cf.p).magnitude
			if dist > 50 or forceTween then
				local time = dist/(speed or 50)
				
				local tween = game:GetService("TweenService"):Create(hrp, TweenInfo.new(
					time, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0
				), {
					CFrame = cf
				})
				Settings.LastTween = tween
				
				tween:Play()
				Settings.IsTweening = true
				tween.Completed:Wait()
				if Settings.LastTween == tween then
					Settings.IsTweening = false
				end
				Settings.SafeSpot.CFrame = CFrame.new(1136.19, -10.48, 1382.14)
			else
				char:SetPrimaryPartCFrame(cf)
			end
			isSync = false
		end

		GetTPGoal = function(obj, data)
			local goal = typeof(obj) == "Instance" and obj.CFrame or obj
			if data.RelativeRotOffset then
				goal = goal * data.RelativeRotOffset
			end
			if data.RelativeOffset then
				goal = CFrame.new(goal.p) * data.RelativeOffset
			end
			if data.Offset or data.OffsetOverride then
				local xOffset = data.OffsetOverride and data.OffsetOverride.X or data.Offset and data.Offset.X
				if xOffset then
					goal = goal - Vector3.new(goal.p.X, 0, 0) + Vector3.new(xOffset, 0, 0)
				end
				local yOffset = data.OffsetOverride and data.OffsetOverride.Y or data.Offset and data.Offset.Y
				if yOffset then
					goal = goal - Vector3.new(0, goal.p.Y, 0) + Vector3.new(0, yOffset, 0)
				end
				local zOffset = data.OffsetOverride and data.OffsetOverride.Z or data.Offset and data.Offset.Z
				if zOffset then
					goal = goal - Vector3.new(0, 0, goal.p.Z) + Vector3.new(0, 0, zOffset)
				end
			end
			if data.LookAt then
				goal = CFrame.new(goal.p, data.LookAt.Position)
			end

			local realGoal
			if data.OffsetOverride then
				local old = data.OffsetOverride
				data.OffsetOverride = nil
				realGoal = GetTPGoal(obj, data)
				data.OffsetOverride = old
			end
			return goal, realGoal
		end
		TeleportToObj = function(obj, data)
			data = data or {}
			data.Speed = data.Speed or 70
			
			local char = plr.Character
			if not char or not obj then
				return
			end

			local hrp = char:WaitForChild("HumanoidRootPart", 1)
			if not hrp then
				return
			end

			if data.Synchronous and Settings.TPId then
				debugprint("waiting for previous tp to finish", Settings.TPId)
				Settings.TPId.Event:Wait()
			end

			local tpId = Instance.new("BindableEvent")
			tpId.Name = game.HttpService:GenerateGUID(true)
			Settings.TPId = tpId
			Settings.IsTweening = true
			local lastMaterialSpoof = tick()
			local lastMaterial = Enum.Material.WoodPlanks
			local fakeChar, toHide

			local function finish()
				Settings.IsTweening = false
				tpId:Fire()
				if Settings.TPId == tpId then --im dumb
					Settings.TPId = nil
				end
				if fakeChar then
					if workspace.CurrentCamera.CameraSubject == fakeChar.Humanoid then
						workspace.CurrentCamera.CameraSubject = char:FindFirstChild("Humanoid")
					end
					fakeChar:Destroy()
					for i,v in pairs(toHide) do
						i[v[1]] = v[3]
					end
				end
			end

			--debugprint("started new tp", tpId)
			while true do
				if Settings.TPId ~= tpId or (typeof(obj) == "Instance" and not workspace:IsAncestorOf(obj)) or char ~= plr.Character then
					debugwarn("cancelling because", Settings.TPId ~= tpId, typeof(obj) == "Instance" and not workspace:IsAncestorOf(obj), char ~= plr.Character)
					finish()
					return
				end

				--stupid floor check--
				local tempOffset = Vector3.new()
				if tick() - lastMaterialSpoof >= 1 and not isSnitch then --raycast down every second and change FloorMaterial to the part below
					local ray = Ray.new(Settings.SafeSpot and (Settings.SafeSpot.Position - Vector3.new(0,1,0)) or hrp.Position, Vector3.new(0,-2000,0))
					local hitPart = workspace:FindPartOnRayWithWhitelist(ray, {workspace.Ocean, workspace.Env, workspace.Islands})
					if hitPart then
						debugwarn("hit", hitPart:GetFullName(), "set to", hitPart.Material)
						lastMaterial = hitPart.Material

						if hitPart.Parent == workspace.Ocean or hitPart.Name == "InvisSandd" then --stay in the water if its the part below
							local XZDist = ((hrp.Position * Vector3.new(1,0,1)) - (GetTPGoal(obj, data).p * Vector3.new(1,0,1))).magnitude

							if XZDist > 10 then
								data.OffsetOverride = {Y = getrenv()._G.SeaLevel + 3}

								local waterYDist = hrp.Position.Y - (getrenv()._G.SeaLevel + 3)
								if waterYDist > 20 then
									tempOffset = Vector3.new(0,-20,0)
								elseif waterYDist > 2 then
									tempOffset = Vector3.new(0,-waterYDist,0)
								end
							else
								data.OffsetOverride = nil
							end
						else
							data.OffsetOverride = nil
						end
					else
						debugwarn("didn't hit anything, set to planks")
						lastMaterial = Enum.Material.WoodPlanks
						data.OffsetOverride = nil
					end
					lastMaterialSpoof = tick()
				end
				setfloormaterial(char:WaitForChild("Humanoid"), lastMaterial)

				local goal, realGoal = GetTPGoal(obj, data)
				if realGoal and not fakeChar and not isSnitch then
					char.Archivable = true
					fakeChar = char:Clone()
					char.Archivable = false

					for i,v in pairs(fakeChar:GetDescendants()) do
						if v:IsA("LuaSourceContainer") or v.ClassName == "BillboardGui" or v:IsA("JointInstance") then
							v:Destroy()
						elseif v:IsA("BasePart") then
							v.Anchored = true
							v.CanCollide = false
						end
					end
					fakeChar:BreakJoints()

					toHide = {}
					local ev
					local function HideObj(v)
						if Settings.TPId ~= tpId then
							if ev then
								return ev:Disconnect()
							end
						end

						if toHide[v] then
							return
						end
						if v:IsA("BasePart") then
							v.LocalTransparencyModifier = 1
							toHide[v] = {"LocalTransparencyModifier", 1, 0}
						elseif v:IsA("Decal") then
							toHide[v] = {"Transparency", 1, v.Transparency}
							v.Transparency = 1
						elseif v.ClassName == "BillboardGui" then
							toHide[v] = {"Enabled", false, v.Enabled}
							v.Enabled = false
						elseif v:IsA("JointInstance") then
							if v.Part0 and not char:IsAncestorOf(v.Part0) and not v.Part0:IsAncestorOf(v) then
								--debugprint("hiding part0 of", v:GetFullName(), "-", v.Part0:GetFullName())
								HideObj(v.Part0)
								for i,v in pairs(v.Part0:GetDescendants()) do
									if not v:IsA("JointInstance") then
										HideObj(v)
									end
								end
							end
							if v.Part1 and not char:IsAncestorOf(v.Part1) and not v.Part1:IsAncestorOf(v) then
								--debugprint("hiding part1 of", v:GetFullName(), "-", v.Part1:GetFullName())
								HideObj(v.Part1)
								for i,v in pairs(v.Part1:GetDescendants()) do
									if not v:IsA("JointInstance") then
										HideObj(v)
									end
								end
							end
						end
					end
					for i,v in pairs(char:GetDescendants()) do
						HideObj(v)
					end
					ev = char.DescendantAdded:Connect(HideObj)

					Settings.PropertySpoof[fakeChar] = true

					fakeChar.Parent = workspace.Env
				end
				if (goal.p - char.PrimaryPart.Position).magnitude < 20 then
					if data.OffsetOverride then --remove it because the fake tp pos isn't the goal
						data.OffsetOverride = nil
					else
						break
					end
				end

				--jump out of seats--
				if plr.Character.Humanoid.SeatPart then
					game.RunService.RenderStepped:Wait()
					plr.Character.Humanoid.Jump = true
				end
				
				char:SetPrimaryPartCFrame(char.PrimaryPart.CFrame + tempOffset + CFrame.new(char.PrimaryPart.Position, goal.p).lookVector * data.Speed * (Settings.ShitPC and wait() and 1/15 or game.RunService.Heartbeat:Wait()))
				if fakeChar then
					local dist = ((char.PrimaryPart.Position * Vector3.new(1,0,1)) - (fakeChar.PrimaryPart.Position * Vector3.new(1,0,1))).magnitude
					fakeChar:SetPrimaryPartCFrame(fakeChar.PrimaryPart.CFrame + CFrame.new(fakeChar.PrimaryPart.Position, (realGoal or goal).p).lookVector * dist)
					if workspace.CurrentCamera.CameraSubject == char.Humanoid then
						workspace.CurrentCamera.CameraSubject = fakeChar.Humanoid
					end
					for i,v in pairs(toHide) do
						i[v[1]] = v[2]
					end
				end
			end
			--debugprint("finished tping", tpId)
			char:SetPrimaryPartCFrame(GetTPGoal(obj, data))
			finish()
		end

		local function IsStaff(p)
			local time = os.date("*t")
			time.min = time.min < 10 and "0" .. time.min or time.min

			if p:GetRankInGroup(3229308) > 0 then
				if Settings.StaffAlert then
					if getrenv()._G.displayMessage then
						coroutine.wrap(getrenv()._G.displayMessage)("[KiriotHub] Game staff joined: " .. p.Name .. " (do NOT leave now, they ban for it)", true)
					end
					game:GetService("StarterGui"):SetCore("SendNotification", {
						Title = "KiriotHub",
						Text = "Game staff joined: " .. p.Name,
						Icon = "rbxassetid://4698324000",
						Duration = 86400,
						Button1 = "oh shit"
					})
				end
				if Settings.StaffPanic then
					Settings.Killaura = false
					Settings.AutoQuest = false
					Settings.Autofarm = false
					workspace:WaitForChild("Effects"):WaitForChild("Water").CanCollide = false
					Settings.NoDrown = false
					Settings.AbleToSwim = false
					Settings.ChestsFarm = false
					Settings.NoFallDamage = false
					Settings.ShipSpeed = false
					Settings.NoRough = false
					Settings.RespawnShip = false
					Settings.HakiTrain = false
					if Settings.ShipFarm then
						Settings.ShipFarm = false
						if workspace.Ships:FindFirstChild(plr.Name .. "Ship") then
							InvokeDynamic(game.ReplicatedStorage.Events.ShipEvents.Spawn)
						end
					end
					UiTbl.cancelTpBtn.Callback()
					plr.Character.Humanoid:UnequipTools()
					plr.Character:MoveTo(plr.Character.HumanoidRootPart.Position)
					ToggleBuso(false)
				end
				return true
			end
			return false
		end
		CheckStaff = function()
			local res = false
			for i,v in pairs(game.Players:GetPlayers()) do
				if IsStaff(v) then
					res = true
				end
			end
			return res
		end
		game.Players.PlayerAdded:Connect(IsStaff)
	end
	
	--auto punch compatibility mode--
	do
		repeat wait() until getrenv()._G.hitbox and getrenv()._G.hitbox.start
		local old = getrenv()._G.hitbox.start
		getrenv()._G.hitbox[KH_CONSTANT("start")] = function(self, char, range, t, offset, callback1, callback2, ...)
			local consts = getconstants(callback1)
			if Settings.Killaura and Settings.CurrentTarget and FIT(consts, KH_CONSTANT("CombatRegister")) and FIT(consts, "damage") and not isSnitch then
				local i = getupvalues(callback1)[5] --sometimes it's out of range???
				if i == 1 and ((Settings.AutoBlock and not Settings.ShipFarm) or plr.Character:FindFirstChild("Blocking")) then
					debugwarn("unblocking")
					SecureInvokeServer(game.ReplicatedStorage.Events.Block, false, KH_CONSTANT("Melee"))
				end
				callback1(Settings.CurrentTarget)
				Settings.CurrentTarget = nil
				if i == 5 and Settings.AutoBlock and not Settings.ShipFarm then
					debugwarn("blocking")
					coroutine.wrap(SecureInvokeServer)(game.ReplicatedStorage.Events.Block, true, KH_CONSTANT("Melee"))
				end
				return
			end
			return old(self, char, range, t, offset, callback1, callback2, ...)
		end
	end

	--ship speed & no fall damage & normal swim & walk on water--
	do
		local old = {}
		local real = {16}
		old[1] = hookmetamethod(game, "__newindex", loadstring([[
			local old, Settings, plr, real = ...

			return function(self, i, v)
				if i == "Velocity" and Settings.ShipSpeed and self.Name == "BodyVelocity" and self.Parent and self.Parent.Name == "m" and debug.getinfo(4).name ~= "Idle" then
					local name = debug.getinfo(4).name
					if name == "Foward" then
						v = self:FindFirstAncestorOfClass("Model"):FindFirstChildOfClass("VehicleSeat").CFrame.lookVector * Settings.ShipSpeedVal
					elseif name == "Backward" then
						v = self:FindFirstAncestorOfClass("Model"):FindFirstChildOfClass("VehicleSeat").CFrame.lookVector * -Settings.ShipSpeedVal
					end
				elseif i == "cframe" and Settings.ShipSpeed and self.Name == "BodyGyro" and self.Parent and self.Parent.Name == "m" then
					local name = debug.getinfo(3).name
					if name == "LeftTurn" then
						v = self.CFrame * CFrame.Angles(0, math.pi * math.min(55, Settings.ShipSpeedVal)/60/60, 0)
					elseif name == "RightTurn" then
						v = self.CFrame * CFrame.Angles(0, -math.pi * math.min(55, Settings.ShipSpeedVal)/60/60, 0)
					end
				elseif i == "CanCollide" and v == false and self.Name == "Water" and self.Parent == workspace:FindFirstChild("Effects") and not checkcaller() then
					return
				elseif i == "WalkSpeed" and self.ClassName == "Humanoid" and self.Parent == plr.Character and Settings.WalkSpeed and not checkcaller() then
					real[1] = v
					v = Settings.WalkSpeedVal
				end
				return old[1](self, i, v)
			end
		]])(old, Settings, plr, real))

		old[2] = hookmetamethod(game, "__namecall", loadstring([[
			local old, Settings, plr, debugwarn = ...

			return function(self, ...)
				local method = getnamecallmethod()
				if method == "FireServer" then
					if self.Name == "Rough" and Settings.NoRough or self.Name == "swim" and Settings.NoDrown or self.Name == "FallDmg" and Settings.NoFallDamage then
						return
					elseif self.Name == "takestam" and Settings.InfDash then
						return
					end
				elseif method == "InvokeServer" then
					if self.Name == "Skill" and ({...})[1] == "Blocking " then
						return debugwarn("uh oh", ...)
					end
				elseif method == "SetPrimaryPartCFrame" and self == plr.Character and checkcaller() then
					if Settings.ShipFarm and Settings.ShipFarmLastTP and (tick() - Settings.ShipFarmLastTime) < 1 then
						local dist = (Settings.ShipFarmLastTP.p - plr.Character.PrimaryPart.Position).magnitude
						if dist > 200 then
							debugwarn("bruh race condition", dist)
							Settings.ShipFarmRespawned = true
						end
					end
					Settings.ShipFarmLastTP = ...
					Settings.ShipFarmLastTime = tick()
				end
				return old[2](self, ...)
			end
		]])(old, Settings, plr, debugwarn))

		old[3] = hookmetamethod(game, "__index", loadstring([[
			local old, Settings, plr, a, b, c, real = ...

			return function(self, i)
				if i == "Value" and Settings.AbleToSwim and old[3](self, "Name") == "DF" and self:FindFirstAncestor("Stats" .. plr.Name) and debug.getinfo(3).name == "renderFunction" then
					return ""
				elseif i == "CanCollide" and old[3](self, "Name") == "Water" and old[3](self, "Parent") == workspace:FindFirstChild("Effects") and not checkcaller() then
					return false
				--elseif i == "FloorMaterial" and old[3](self, "ClassName") == "Humanoid" and checkcaller() then
					--return Enum.Material.Air
				elseif self == Settings[a] and i ~= b and checkcaller() then
					return Instance.new("Part")[i]
				elseif i == "Parent" and Settings[c][self] and checkcaller() then
					return Instance.new("BindableEvent").Event:Wait()
				elseif i == "WalkSpeed" and Settings.WalkSpeed and old[3](self, "ClassName") == "Humanoid" and old[3](self, "Parent") == old[3](plr, "Character") then
					return real[1]
				end
				return old[3](self, i)
			end
		]])(old, Settings, plr, "SafeSpot", "Position", "PropertySpoof", real))

		local old
		old = hookfunc(Instance.new("RemoteEvent").FireServer, function(self, ...)
			if self.Name == "FallDmg" and Settings.NoFallDamage then
				return
			elseif self.Name == "swim" and Settings.NoDrown then --plr.Backpack.Swim, 2nd arg is "drown"
				return
			end
			return old(self, ...)
		end)
		UpdateFSHookFuncs(old)
	end

	do
		local realValues = {
			swimming = getrenv()._G.swimming
		}
		setmetatable(getrenv()._G, {
			__index = function(self, i)
				if i == "swimming" then
					if Settings.NoDrown and debug.getinfo(2).name == "renderFunction" then --plr.Backpack.Swim, u14 (upval 26)
						setupvalue(2, 26, 0) --if it breaks then I can possibly do table.find(upvals, game.ReplicatedStorage) + 1
					end
				end
				return realValues[i]
			end,
			__newindex = function(self, i, v)
				if i == "swimming" then
					realValues.swimming = v
					return
				end
				rawset(self, i, v)
			end
		})
		getrenv()._G.swimming = nil
	end

	--ship height & respawn & speed warning--
	do
		local RecommendedSpeeds = {
			Rowboat = 60,
			Caravel = 130
		}
		
		--[[local function AttemptSpawnShip() --because the stupid invokeserver sometimes yields indefinitely
			local c = coroutine.running()
			local ship = workspace.Ships:FindFirstChild(plr.Name .. "Ship")
			local success = false
			delay(5, function()
				if not success then
					debugwarn("resuming after a timeout")
					coroutine.resume(c, workspace.Ships:FindFirstChild(plr.Name .. "Ship") ~= ship)
					debugwarn("resumed")
				end
			end)
			local res = game.ReplicatedStorage.Events.ShipEvents.Spawn:InvokeServer(true)
			success = true
			return res
		end]]

		local function AttemptSpawnShip()
			local ev = Instance.new("BindableEvent")
			local ship = workspace.Ships:FindFirstChild(plr.Name .. "Ship")
			local success = false
			delay(5, function()
				if not success then
					debugwarn("resuming after a timeout")
					ev:Fire(workspace.Ships:FindFirstChild(plr.Name .. "Ship") ~= ship)
					debugwarn("resumed")
				end
			end)

			coroutine.wrap(function()
				ev:Fire(InvokeDynamic(game.ReplicatedStorage.Events.ShipEvents.Spawn))
				success = true
			end)()

			return ev.Event:Wait()
		end

		RespawnShip = function(checkSetting)
			if isSnitch then
				return Instance.new("BindableEvent").Event:Wait()
			end
			--if a ship is already spawned, remove it first
			debugprint("ship respawning stage 1")
			if workspace.Ships:FindFirstChild(plr.Name .. "Ship") then
				debugprint("ship already spawned")
				if not AttemptSpawnShip() then
					debugprint("can't despawn")
					return
				end
			end
			if Settings.ShipSwap then
				debugprint("ship respawning stage 2")
				local currShip = game.ReplicatedStorage:FindFirstChild("Stats" .. plr.Name).Inventory.EquipedShip.Value
				local inv = game.HttpService:JSONDecode(game.ReplicatedStorage:FindFirstChild("Stats" .. plr.Name).Inventory.Inventory.Value)
				local ships = game.ReplicatedStorage.ShipModules.ShipManager[KH_CONSTANT("ShipSpecs")]:GetChildren()

				local newShip
				if Settings.ShipSwapMode ~= "Auto" and inv[Settings.ShipSwapMode] and Settings.ShipSwapMode ~= currShip then
					newShip = Settings.ShipSwapMode
				else
					for i=#ships,1,-1 do
						local v = ships[i].Name
						if currShip ~= v and inv[v] then
							newShip = v
							break
						end
					end
				end

				if newShip then
					debugprint("equipping ship", newShip)
					SecureInvokeServer(game.ReplicatedStorage.Events.Tools, "equip", newShip)
					debugprint("equipped")
				else
					debugprint("no ship to equip, falling back to waiting")
					if AttemptSpawnShip() then
						debugprint("ship respawning stage 3")
						return
					end
					wait(30)
					if checkSetting and not Settings[checkSetting] then
						debugprint("ship respawning stage 4")
						return
					end
				end
			else
				debugprint("ship respawning stage 5")
				if AttemptSpawnShip() then
					debugprint("ship respawning stage 6")
					return
				end
				wait(30)
				if checkSetting and not Settings[checkSetting] then
					debugprint("ship respawning stage 7")
					return
				end
			end
			debugprint("ship respawning stage 8")
			local attempts = 0
			local start = tick()
			while not AttemptSpawnShip() do
				debugprint("ship respawning stage 9:", attempts)
				wait(1)
				attempts = attempts + 1
				if attempts >= 10 or (tick() - start) > 15 then
					break
				end
			end
			debugprint("ship respawning stage 10")
		end

		local function ShipAdded(c)
			if c.Name == plr.Name .. "Ship" then
				if Settings.ShipHeight then
					SetShipHeight(Settings.ShipHeightVal)
				end
				c:WaitForChild(KH_CONSTANT("shipHP")).Changed:Connect(function(hp)
					if hp == 0 and Settings.RespawnShip and not Settings.ShipFarm then
						RespawnShip("RespawnShip")
					end
				end)
	
				--warning about too big ship speed--
				local mainPart = c.PrimaryPart or c:WaitForChild("m", 1) or c:FindFirstChildWhichIsA("BasePart") or c:WaitForChild("m")
				mainPart:GetPropertyChangedSignal("CFrame"):Connect(function()
					local hum = plr.Character:FindFirstChild("Humanoid")
					if not Settings.ShipSpeedWarnShown and hum and hum.Sit and hum.SeatPart and hum.SeatPart.Parent == c and Settings.ShipSpeed and not Settings.IsTweening and not isSnitch then
						--Settings.ShipSpeedWarnShown = true

						local note = ""

						local data = c:FindFirstChild("Info") and c.Info:FindFirstChild(KH_CONSTANT("Settings")) and require(c.Info.Settings)
						if data then
							local type = data:Get().Type
							if type and RecommendedSpeeds[type] then
								local oldSpeed = Settings.ShipSpeedVal
								if RecommendedSpeeds[type] >= oldSpeed then
									debugwarn("wtf")
									return
								end

								UiTbl.shipSpeedSlider:SetValue(RecommendedSpeeds[type])
								note = "\n\nYour speed has been automatically lowered from " .. oldSpeed .. " to " .. RecommendedSpeeds[type]
							else
								UiTbl.shipSpeedCb.Click()
							end
						end
						messagebox("Your Ship Speed might be too great and the game is tping you back. Lower it to avoid kicks/bans" .. note, "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
					end	
				end)
			end
		end
		workspace.Ships.ChildAdded:Connect(ShipAdded)
		for i,v in pairs(workspace.Ships:GetChildren()) do
			coroutine.wrap(ShipAdded)(v)
		end
	end

	--server timer--
	coroutine.wrap(function()
		while true do
			UiTbl.timerLb.LabelObj.Text = string.format("Play Time: %s", os.date("!%X", workspace.DistributedGameTime))
			wait(0.5)
		end	
	end)()

	--tp tab--
	local function GetIslands()
		local list = {}
		for i,v in pairs(workspace:WaitForChild("Islands"):GetChildren()) do
			if #v:GetChildren() > 2 then
				list[#list + 1] = v
			end
		end
		return list
	end
	local function GetIslandPos(island)
		return island:GetAttribute("islandPosition") or island.WorldPivot.p
	end
	local function RefreshIslands()
		UiTbl.islandsList:Clear()

		local list = GetIslands()
		table.sort(list, function(a, b)
			return a.Name < b.Name
		end)
		for i,v in pairs(list) do
			UiTbl.islandsList:Button(v.Name, function()
				local pos = GetIslandPos(v)
				if pos and isSnitch then
					pos = Vector3.new(pos.X, -10, pos.Z)
				end
				Settings.NoClip = true
				TeleportToObj(CFrame.new(pos) * CFrame.new(0,2,0), {
					Speed = Settings.IslandsTpSpeed
				})
				Settings.NoClip = false
				Settings.SafeSpot.CFrame = CFrame.new(-550.27, -12.75, -4449.41)
			end)
		end
	end
	if not Settings.IsDungeon then
		workspace:WaitForChild("Islands").ChildAdded:Connect(function(c)
			wait(1)
			if #c:GetChildren() > 2 then
				RefreshIslands()
			end
		end)
		RefreshIslands()
	end

	--auto sprint--
	coroutine.wrap(function()
		local t = tick()
		while not getrenv()._G.check or not getrenv()._G.check.inspect do
			wait(1)
			if (tick()-t) > 30 then
				debugwarn("_G.check.inspect not found")
				return
			end
		end

		local old = getrenv()._G.check.inspect
		getrenv()._G.check.inspect = function(...)
			if Settings.AutoSprint then
				local consts = getconstants(2)
				if FIT(consts, "ragcarry") and FIT(consts, "run") then
					setupvalue(2, 1, "run")
				end
			end
			return old(...)
		end
	end)()

	--inf jump
	game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
		if Settings.InfJump and not gp and iobj.KeyCode == Enum.KeyCode.Space then
			local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
			if hrp then
				local vel = hrp.Velocity
				hrp.Velocity = Vector3.new(vel.X, 50, vel.Z)
			end
		end
	end)

	--anti tp bypass--
	do
		local lastFMChange
		Settings.ShipSpeedWarnShown = false
		local function CharAdded(char)
			if isSnitch then
				return
			end

			if Settings.ShipFarm then
				Settings.ShipFarm = false
				coroutine.wrap(messagebox)("You died so the Ship Farm has disabled itself to avoid flinging you everywhere and getting you banned.", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
			end

			if Settings.IsDungeon then
				Settings.Autofarm = false
				UiTbl.cancelTpBtn.Callback()
			end

			AttackFunc = nil
			
			local hrp = char:WaitForChild("HumanoidRootPart")
			local hum = char:WaitForChild("Humanoid")

			hrp:GetPropertyChangedSignal(KH_CONSTANT("CFrame")):Connect(function()
				if hum:GetState() == Enum.HumanoidStateType.StrafingNoPhysics or Settings.NoClip or Settings.IsTweening then
					if not Settings.SafeSpot or not workspace:IsAncestorOf(Settings.SafeSpot) then
						local p = Instance.new("Part")
						p.Anchored = true
						p.Material = "Air"
						p.Size = Vector3.new(5,1,5)
						p.Transparency = 1
						local bait = Instance.new("ClickDetector") --:troll:
						bait.MaxActivationDistance = 0
						bait.Name = "ClickDetector\1"
						p.Parent = workspace:WaitForChild("Effects")
						Settings.SafeSpot = p
					end
					Settings.SafeSpot.CFrame = hrp.CFrame * CFrame.new(0,-3.6,0)
				end
			end)

			hum:GetPropertyChangedSignal("Sit"):Connect(function()
				Settings.ShipSpeedWarnShown = false
			end)

			hum:GetPropertyChangedSignal("FloorMaterial"):Connect(function()
				if hum.FloorMaterial == Enum.Material.Air then
					lastFMChange = tick()
				else
					lastFMChange = nil
				end
			end)
		end
		plr.CharacterAdded:Connect(CharAdded)
		if plr.Character then
			coroutine.wrap(CharAdded)(plr.Character)
		end

		if isDebug then
			coroutine.wrap(function()
				while true do
					if lastFMChange then
						UiTbl.gaugeLb.LabelObj.Text = math.min(100, math.floor((tick() - lastFMChange)/15 * 100)) .. "%"
					else
						UiTbl.gaugeLb.LabelObj.Text = "0%"
					end
					wait()
				end
			end)()
		end
	end

	--haki train--
	do
		local busoBar = game.ReplicatedStorage:WaitForChild("Stats" .. plr.Name):WaitForChild(KH_CONSTANT("BusoBar"))
		busoBar.Changed:Connect(function(val)
			if Settings.HakiTrain and val == busoBar.MaxValue then
				ToggleBuso(true)
			end
		end)
	end

	--auto store--
	do
		local function HasFruitBag()
			return game:GetService("MarketplaceService"):UserOwnsGamePassAsync(plr.UserId, 12776768)
			or game.ReplicatedStorage:WaitForChild("Stats" .. plr.Name):WaitForChild("Gamepasses"):WaitForChild("FruitBag").Value
			or getrenv()._G.HasItem(plr, "Fruit Bag")
		end

		local fruitDebounce = {}
		local function ChildAdded(c)
			if Settings.AutoStore and c:WaitForChild("FruitEater", 5) and not fruitDebounce[c] then
				local inv = PathFFC("ReplicatedStorage.Stats" .. plr.Name .. ".Inventory.Inventory").Value
				if not inv then
					return debugwarn("inventory not found")
				end

				fruitDebounce[c] = true
				
				local data = game.HttpService:JSONDecode(inv)
				if data[c.Name] then
					if Settings.AutoStoreWebhook and Settings.AutoStoreWebhook ~= "" and not Settings.Extra.FruitsIgnoreList[c.Name] then
						SendEmbed(Settings.AutoStoreWebhook, "@everyone", {
							title = "GPO Auto Store",
							color = 12922690,
							timestamp = os.date("%Y-%m%dT%H:%M:%S", os.time(os.date("!*t"))),
							description = "You've got a **" .. c.Name .. "**, but you already have one in your inventory so can't store it!",
							footer = {
								icon_url = "https://buy.kiriothub.today/icon.png",
								text = plr.Name .. " via KiriotHub"
							},
							thumbnail = {
								url = DFImages[c.Name] or DFImages.Unknown
							}
						})
					end
					return --can only store 1 fruit of each type
				end

				if HasFruitBag() then
					Settings.PauseAttack = true
					wait(.1)
					local currentTool = plr.Character and plr.Character:FindFirstChildOfClass("Tool"); --aMbIgUoUs sYnTaX (fUnCtiOn cAlL x nEW sTAtEmENt) nEaR '(' 
					(plr.Character or plr.CharacterAdded:Wait()):WaitForChild("Humanoid"):EquipTool(c)
					wait(.3)
					coroutine.wrap(InvokeDynamic)(game.ReplicatedStorage:WaitForChild("Events"):WaitForChild(KH_CONSTANT("FruitStorage")))
					c:GetPropertyChangedSignal("Parent"):Wait()
					if currentTool then
						plr.Character.Humanoid:EquipTool(currentTool)
					end
					if Settings.AutoStoreWebhook and Settings.AutoStoreWebhook ~= "" and not Settings.Extra.FruitsIgnoreList[c.Name] then
						SendEmbed(Settings.AutoStoreWebhook, "@everyone", {
							title = "GPO Auto Store",
							color = 14451283,
							timestamp = os.date("%Y-%m%dT%H:%M:%S", os.time(os.date("!*t"))),
							description = "You've got a **" .. c.Name .. "**! Congrats!",
							footer = {
								icon_url = "https://buy.kiriothub.today/icon.png",
								text = plr.Name .. " via KiriotHub"
							},
							thumbnail = {
								url = DFImages[c.Name] or DFImages.Unknown
							}
						})
					end
					Settings.PauseAttack = false
				else
					if Settings.AutoStoreWebhook and Settings.AutoStoreWebhook ~= "" and not Settings.Extra.FruitsIgnoreList[c.Name] then
						SendEmbed(Settings.AutoStoreWebhook, "@everyone", {
							title = "GPO Auto Store",
							color = 12922690,
							timestamp = os.date("%Y-%m%dT%H:%M:%S", os.time(os.date("!*t"))),
							description = "You've got a **" .. c.Name .. "**, but you don't own the storage gamepass so can't store it!",
							footer = {
								icon_url = "https://buy.kiriothub.today/icon.png",
								text = plr.Name .. " via KiriotHub"
							},
							thumbnail = {
								url = DFImages[c.Name] or DFImages.Unknown
							}
						})
					end
				end
			end
		end
		plr:WaitForChild("Backpack").ChildAdded:Connect(ChildAdded)
		plr.ChildAdded:Connect(function(c)
			if c.Name == "Backpack" then
				c.ChildAdded:Connect(ChildAdded)
			end
		end)
	end

	--fixing galleons flings--
	coroutine.wrap(function()
		local function NoCollide(c)
			if c:IsA("BasePart") then
				c.CanCollide = false
			end
		end
		workspace.Ships:WaitForChild("NPC").ChildAdded:Connect(function(ship)
			if Settings.ShipFarm and ship.Name:find("Galleon") then
				ship.DescendantAdded:Connect(NoCollide)
				for i,v in pairs(ship:GetDescendants()) do
					NoCollide(v)
				end
			end
		end)
	end)()

	--esp--
	ESP:AddObjectListener(workspace:WaitForChild("Env"), {
		Name = "Part",
		Type = "Part",
		CustomName = "Chest",
		Color = Color3.fromRGB(255, 238, 0),
		Validator = function(obj)
			return obj:WaitForChild("ClickDetector", 1)
		end,
		IsEnabled = "Chests"
	})

	ESP:AddObjectListener(workspace:WaitForChild("Islands"), {
		Color = Color3.fromRGB(51, 255, 0),
		IsEnabled = "Islands",
		RenderInNil = true,
		PrimaryPart = function(obj)
			local pos = obj:GetAttribute("islandPosition") or obj.WorldPivot.p
			local p = Instance.new("Part")
			p.CFrame = CFrame.new(pos)
			return p
		end
	})

	ESP:AddObjectListener(workspace:WaitForChild("Ships"):WaitForChild("NPC"), {
		Type = "Model",
		Color = Color3.fromRGB(94, 79, 58),
		IsEnabled = "Ships",
	})

	ESP:AddObjectListener(workspace, {
		Name = "Handle",
		CustomName = function(obj)
			return obj.Parent.Name
		end,
		Color = Color3.fromRGB(153, 0, 255),
		Validator = function(obj)
			return obj.Parent:WaitForChild("FruitEater", 3)
		end,
		IsEnabled = function(box)
			local parent = box.PrimaryPart and box.PrimaryPart.Parent and box.PrimaryPart.Parent.Parent or box.PrimaryPart:FindFirstChildWhichIsA("BasePart")
			return ESP.Fruits and parent and not (parent.ClassName == "Model" and game.Players:GetPlayerFromCharacter(parent))
		end,
		Recursive = true
	})

	local FruitsIds = {
		Suke = {"5584903532", "5584903954", "5584903754"},
		Mera = {"1999466372", "1999467724", "1999464848", "1999469085", "1999463789", "1996585720"},
		Bari = {"5274469883", "5274406228", "5274409257", "5274411843", "5274414238", "5274416632"},
		Pika = {"5294049533", "5294047933"},
		Magu = {"5586478179", "5586477947"},
		Hie = {"5731586753", "5731586549"},
		Zushi = {"6155736771", "6154151906", "6153951686", "6132313150"}, --and 6132313010
		Bomb = {"5937451240", "5937451326", "5937451417", "5937451504"},
		Tori = {"6324072228", "6324072227", "6324072230", "6324072234", "6324072302", "6324072239", "6324072221"},
		Mero = {"6386101956", "6386102206", "6386102108"},
		Gura = {"6674333859", "6674333729", "6674333598", "6674333481", "6674333083"},
		Goro = {"6061994239", "6061994478", "6061994601"},
		Kilo = {"6928635372", "6928635951", "6928636052", "6928636160"}
	}

	ESP:AddObjectListener(workspace:WaitForChild("Env"), {
		Name = "Model",
		Type = "Model",
		CustomName = function(obj)
			for i,v in pairs(obj:GetDescendants()) do
				if v.ClassName == KH_CONSTANT("MeshPart") then
					local id = v.MeshId:match("(%d%d+)")
					if id then
						for i,v in pairs(FruitsIds) do
							if table.find(v, id) then
								return i
							end
						end
					end
				end
			end
			return "Unknown Fruit"
		end,
		Color = Color3.fromRGB(153, 0, 255),
		Validator = function(obj)
			--Meshes/suke suke no mi_SphereWeld
			local cd = obj:FindFirstChild("ProximityPrompt", true)
			if not cd then
				wait(2)
				cd = obj:FindFirstChild("ProximityPrompt", true)
			end
			if cd and #getconnections(cd[KH_CONSTANT("Triggered")]) == 0 and obj:FindFirstChildOfClass("MeshPart") then
				return true
			end
			return false
		end,
		IsEnabled = function(box)
			return ESP.Fruits and workspace.Env:IsAncestorOf(box.PrimaryPart)
		end,
		Recursive = true,
		--[[OnAdded = function(box)
			debugprint("added df")
			if Settings.Test then
				repeat
					Teleport(box.PrimaryPart.CFrame, nil, Settings.IslandsTpSpeed)
				until workspace:IsAncestorOf(box.PrimaryPart)
				if game:GetService("MarketplaceService"):UserOwnsGamePassAsync(plr.UserId, 12776768) then
					wait(1)
					game.ReplicatedStorage.Events.FruitStorage:InvokeServer(true)
				end
			end
		end]]
	})

	--df notifier--
	coroutine.wrap(function()
		game.ReplicatedStorage:WaitForChild("Events"):WaitForChild(KH_CONSTANT("fruitspawn"), 900).OnClientEvent:Connect(function(cf, obj)
			local p = Instance.new("Part")
			p.Anchored = true
			p.CFrame = cf
			ESP:Add(p, {
				Temporary = true,
				Name = "DF Notifier",
				Color = Color3.fromRGB(255, 123, 0),
				RenderInNil = true,
				IsEnabled = "Fruits"
			})
			if Settings.DFNotifierWebhook and Settings.DFNotifierWebhook ~= "" and not Settings.DFNotifierAllSeeingEye then
				local closestIsland, closestDist = "unknown"
				for i,v in pairs(GetIslands()) do
					local pos = v:FindFirstChildWhichIsA("BasePart", true).Position
					local dist = (cf.p - pos).magnitude
					if not closestDist or dist < closestDist then
						closestIsland = v.Name
						closestDist = dist
					end
				end
				SendEmbed(Settings.DFNotifierWebhook, "@everyone", {
					title = "GPO DF Notifier Assist",
					color = 8781568,
					timestamp = os.date("%Y-%m%dT%H:%M:%S", os.time(os.date("!*t"))),
					description = "A fruit has spawned near **" .. closestIsland .. "**!",
					footer = {
						icon_url = "https://buy.kiriothub.today/icon.png",
						text = plr.Name .. " via KiriotHub"
					},
					thumbnail = {
						url = DFImages.Unknown
					}
				})
			end
		end)
	end)()

	--ship farm pos save--
	game.ReplicatedStorage:WaitForChild("Events"):WaitForChild("note").OnClientEvent:Connect(function(msg, tween)
		if Settings.ShipFarm and not Settings.ShipFarmPos and msg:find("A marine ship has been dispatched towards your ship", 1, true) then
			Settings.ShipFarmPos = plr.Character.HumanoidRootPart.Position
			if Settings.ShipFarmPos.Y < getrenv()._G.SeaLevel + 10 then
				Settings.ShipFarmPos = Vector3.new(Settings.ShipFarmPos.X, getrenv()._G.SeaLevel + 10, Settings.ShipFarmPos.Z)
			end
			UiTbl.shipfarmPosLb.LabelObj.Text = string.format("Return Pos: %.0f %.0f %.0f", Settings.ShipFarmPos.X, Settings.ShipFarmPos.Y, Settings.ShipFarmPos.Z)
			Settings.Extra.ShipFarmPos = {Settings.ShipFarmPos.X, Settings.ShipFarmPos.Y, Settings.ShipFarmPos.Z}
			NewLib:RaiseGlobalClickEvent()
		end
	end)

	coroutine.wrap(function()
		while not getrenv()._G.displayMessage do
			wait()
		end

		local old = getrenv()._G.displayMessage
		getrenv()._G.displayMessage = function(msg, ...)
			if msg:find("You need to be touching the ground to reload", 1, true) then
				Settings.RifleReloadingPos = nil
			elseif msg:match("<AnimateStyle=%w+>A <Color=%w+>(%w+)<Color=/> HAS SPAWNED AT <Color=%w+>([%w%s]+)") and Settings.DFNotifierAllSeeingEye and Settings.DFNotifierWebhook and Settings.DFNotifierWebhook ~= "" then
				local fruit, location = msg:match("<AnimateStyle=%w+>A <Color=%w+>(%w+)<Color=/> HAS SPAWNED AT <Color=%w+>([%w%s]+)")
				SendEmbed(Settings.DFNotifierWebhook, "@everyone", {
					title = "GPO DF Notifier Assist (All Seeing Eye)",
					color = 8781568,
					timestamp = os.date("%Y-%m%dT%H:%M:%S", os.time(os.date("!*t"))),
					description = "A **" .. fruit .. "** has spawned at **" .. location .. "**!",
					footer = {
						icon_url = "https://buy.kiriothub.today/icon.png",
						text = plr.Name .. " via KiriotHub"
					},
					thumbnail = {
						url = DFImages.Unknown
					}
				})
			end
			return old(msg, ...)
		end
	end)()

	--grab the stupid args dynamically--
	spawn(function()
		if isSnitch or KHFlags.GPONoDynamicArgs then
			return
		end

		local old
		old = hookfunc(workspace.FindPartOnRayWithWhitelist, function(...) --rifle reload floor check
			if checkcaller() and ({...})[2].Direction.magnitude == 8 then --this was supposed to bypass the rifle:Shoot() function too, but I realized the upVector can be rotated, and also that check is kinda helpful for automation so I won't fix it
				debugwarn("called FindPartOnRayWithWhitelist")
				table.foreach(({...})[3], debugprint)
				return Instance.new("Part"), Vector3.new()
			end
			return old(...)
		end)

		--UiTbl.useRifleCb.Enabled = false

		local function GetPath(obj)
			local path = {obj.Name}
			while obj.Parent do
				table.insert(path, 1, obj.Parent.Name)
				obj = obj.Parent
			end
			return path
		end

		local errors = {}

		--ship spawn--
		local s,e
		s,e = pcall(function()
			local shipBtn = plr:WaitForChild("PlayerGui", 10):WaitForChild("Main", 10):WaitForChild("Buttons", 10):WaitForChild("Frame", 10):WaitForChild("boat", 10)
			local conns = getconnections(shipBtn.MouseButton1Click)
			while #conns == 0 do
				wait(1)
				conns = getconnections(shipBtn.MouseButton1Click)
			end

			local f = conns[1].Function
			local old = getfenv(f)
			setfenv(f, {
				game = setmetatable({}, {
					__index = function(self, i)
						if i == "InvokeServer" then
							return newcclosure(function(self, ...)
								DynamicArgs.Spawn = {...}
								debugprint("grabbed ship spawn args:", ...)
								setfenv(f, old)
							end)
						else
							return self
						end
					end
				})
			})
			f()
			if not DynamicArgs.Spawn then
				s = false
				e = "Unknown error"
				error(e)
			end
		end)
		if not s then
			errors["Ship Spawn"] = e
		end

		--auto store--
		local s,e
		s,e = pcall(function()
			local storeBtn = plr:WaitForChild("PlayerGui", 10):WaitForChild("storefruit", 10):WaitForChild("TextButton", 10)
			local conns = getconnections(storeBtn.MouseButton1Click)
			while #conns == 0 do
				wait(1)
				conns = getconnections(storeBtn.MouseButton1Click)
			end

			local f = conns[1].Function
			local old = getfenv(f)
			setfenv(f, {
				game = setmetatable({}, {
					__index = function(self, i)
						if i == "InvokeServer" then
							return newcclosure(function(self, ...)
								DynamicArgs.FruitStorage = {...}
								debugprint("grabbed fruit storage args:", ...)
								setfenv(f, old)
							end)
						else
							return self
						end
					end,
					__call = function() end
				}),
				script = setmetatable({}, {
					__index = function(self, i)
						return self
					end
				})
			})
			f()
			if not DynamicArgs.FruitStorage then
				setfenv(f, old)
				s = false
				e = "Unknown error"
				error(e)
			end
		end)
		if not s then
			errors["Auto Store DF"] = e
		end

		--rifle reload--
		if not KHFlags.GPODisableRifle then
			for rep=1,2 do
				local s,e
				s,e = pcall(function()
					local GunHandle = require(game.ReplicatedStorage:WaitForChild("Modules", 10):WaitForChild("GunHandle", 10))
					local f = GunHandle.Reload
					local old = getfenv(f)

					local toRevert = {}
					local upvals = getupvalues(f)
					if debug.getinfo(f).currentline == 3 then
						upvals = getIBupvalues(f)
					end
					local function revert()
						for i,v in pairs(toRevert) do
							upvals[i] = v
						end
						setfenv(f, old)
					end

					local dummy = setmetatable({}, {
						__index = function(self, i)
							if i == "InvokeServer" then
								return newcclosure(function(self, ...)
									if not rawget(self, "Path") then
										revert()
										s = false
										e = "Failed to grab path #1"
										return error(e)
									end

									if rep == 2 then --check if any of the arguments changes every call
										local function deepcheck(t1, t2)
											for i,v in pairs(t1) do
												if type(v) == "table" then
													deepcheck(v, t1[i])
												else
													if v ~= t2[i] then
														revert()
														s = false
														e = "Dynamic argument detected under " .. i
														return error(e)
													end
												end
											end
										end
										deepcheck({...}, DynamicArgs.RifleReload)
										revert()
										return
									end
									DynamicArgs.RifleReload = {...}
									debugprint("grabbed rifle reload args:", ...)
									
									table.remove(self.Path, 1)
									local obj = game
									while self.Path[1] do
										obj = obj:FindFirstChild(table.remove(self.Path, 1))
										if not obj then
											revert()
											s = false
											e = "Failed to grab path #2"
											return error(e)
										end
									end
									RifleReloadRemote = obj
									debugwarn("also grabbed its path:", RifleReloadRemote:GetFullName())
									revert()
								end)
							elseif i == "p" or i == "Position" then --upVector raycast check for anti air reloading, it grabs workspace and Ray from nowhere and bypasses my setfenv??
								return Vector3.new()
							else
								if rawget(self, "Path") then --track the remote path
									table.insert(self.Path, i)
								end
								return self
							end
						end,
						__call = function(self, _, arg)
							if arg == "Rifle" then
								return self
							end
						end,
						__mul = function(self, a)
							return Vector3.new(0,-8,0)
						end
					})

					for i,v in pairs(upvals) do
						if typeof(v) == "Instance" then
							toRevert[i] = v
							upvals[i] = setmetatable({Path = GetPath(v)}, getmetatable(dummy))
						end
					end
					setfenv(f, {game = setmetatable({Path = {"Game"}}, getmetatable(dummy)), script = dummy, warn = function() end, error = error})
					f({
						Equiped = true,
						Reved = false,
						Reloaded = false,
						IsAiming = false,
						Ready = true,
						Name = "Rifle",
						Anims = dummy,
						term = newcclosure(function() end)
					})
					if not DynamicArgs.RifleReload or not RifleReloadRemote then
						revert()
						s = false
						e = "Unknown error"
						error(e)
					end
				end)
				if not s then
					DynamicArgs.RifleReload = nil
					RifleReloadRemote = nil
					errors["Rifle Reload"] = e
				end
			end

			--rifle shoot--
			for rep=1,2 do
				local s,e
				s,e = pcall(function()
					local GunHandle = require(game.ReplicatedStorage:WaitForChild("Modules", 10):WaitForChild("GunHandle", 10))
					local f = GunHandle.Fire
					local old = getfenv(f)
					
					local toRevert = {}
					local upvals = getupvalues(f)
					if debug.getinfo(f).currentline == 3 then
						upvals = getIBupvalues(f)
					end
					local function revert()
						for i,v in pairs(toRevert) do
							upvals[i] = v
						end
						setfenv(f, old)
					end

					local dummy = setmetatable({}, {
						__index = function(self, i)
							if i == "FireServer" then
								return function(self, ...)
									if not rawget(self, "Path") then
										revert()
										s = false
										e = "Failed to grab path #1"
										return error(e)
									end

									if rep == 2 then
										local function deepcheck(t1, t2)
											for i,v in pairs(t1) do
												if type(v) == "table" then
													deepcheck(v, t1[i])
												else
													if v ~= t2[i] then
														revert()
														s = false
														e = "Dynamic argument detected under " .. i
														return error(e)
													end
												end
											end
										end
										deepcheck({...}, DynamicArgs.RifleShoot)
										revert()
										return
									end
									DynamicArgs.RifleShoot = {...}

									local foundTable = false
									for i,v in pairs(DynamicArgs.RifleShoot) do
										if type(v) == "table" and rawget(v, "Gun") then
											foundTable = true
											break
										end
									end

									if not foundTable then
										DynamicArgs.RifleShoot = nil
										errors["Rifle Shoot"] = "drastic arguments change"
										return
									end

									debugprint("grabbed rifle shoot args:", ...)
									revert()

									table.remove(self.Path, 1)
									local obj = game
									while self.Path[1] do
										obj = obj:FindFirstChild(table.remove(self.Path, 1))
										if not obj then
											revert()
											s = false
											e = "Failed to grab path #2"
											return error(e)
										end
									end
									RifleShootRemote = obj
									debugwarn("also grabbed its path:", RifleShootRemote:GetFullName())
								end
							else
								if rawget(self, "Path") then
									table.insert(self.Path, i)
								end
								return self
							end
						end,
						__call = function(self, _, arg)
							if arg == "Blocking" then --they don't let you fire if you're blocking lol
								return nil
							end
							return self
						end
					})

					for i,v in pairs(upvals) do
						if typeof(v) == "Instance" then
							toRevert[i] = v
							upvals[i] = setmetatable({Path = GetPath(v)}, getmetatable(dummy))
						end
					end
					setfenv(f, {game = setmetatable({Path = {"Game"}}, getmetatable(dummy)), wait = wait, warn = function() end, error = error, _G = {
						MouseCF = {p = Vector3.new()}
					}})

					f({
						Equiped = true,
						IsAiming = true,
						Reloaded = true,
						Ready = true,
						Reved = false,
						Name = "Rifle",
						Anims = dummy,
						term = newcclosure(function() end)
					})

					if not DynamicArgs.RifleShoot then
						revert()
						s = false
						e = "Unknown error"
						error(e)
					end
				end)
				if not s then
					DynamicArgs.RifleShoot = nil
					RifleShootRemote = nil
					errors["Rifle Shoot"] = e
				end
			end
		end

		--[[if DynamicArgs.RifleShoot and DynamicArgs.RifleReload and RifleShootRemote and RifleReloadRemote then
			UiTbl.useRifleCb.Enabled = true
		else
			UiTbl.useRifleCb:SetLabelColor(Color3.new(1,0,0))
		end]]

		if next(errors) then
			--[[local str = "Failed to initialize automatic protection for the following:\n\n"
			for i,v in pairs(errors) do
				str = str .. i .. " - " .. v .. "\n"
			end
			str = str .. "\nReference: " .. game.PlaceVersion
			messagebox(str, "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)]]
			local str = ""
			for i,v in pairs(errors) do
				str = str .. i .. " - " .. v .. "\n"
			end
			GPOReport(str)
		end
	end)

	--report kicks--
	Settings.KickEvent = game:GetService("GuiService").ErrorMessageChanged:Connect(function(msg)
		if game.GuiService:GetErrorCode() == Enum.ConnectionError.DisconnectLuaKick then
			Settings.KickEvent:Disconnect()

			plr:Kick("\n[KiriotHub] Looks like the game has kicked you. Sorry about that.\nOriginal kick message: " .. msg)
			local list = {}
			local vals = {}

			for i,v in pairs({"ShipFarm", "Autofarm", "Killaura", "AutoQuest", "Rifle", "ChestsFarm"}) do
				if Settings[v] == true then
					table.insert(list, v)
				end
			end

			for i,v in pairs({"ShipFarmSpeed", "IslandsTpSpeed"}) do
				if Settings[v] then
					table.insert(vals, v .. " = " .. tostring(Settings[v]))
				end
			end

			local plrs = {}
			for i,v in pairs(game.Players:GetPlayers()) do
				if v ~= plr then
					plrs[#plrs + 1] = v.Name
				end
			end

			local str = "Kicked for: " .. msg .. "\n\nUsing: " .. table.concat(list, ", ") .. "\nSettings: " .. table.concat(vals, ", ")
			.. "\nAutofarm Status: " .. UiTbl.afStatusLb.LabelObj.Text
			.. "\nPos: " .. (plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and tostring(plr.Character.HumanoidRootPart.Position) or "N/A")
			.. "\nVelocity: " .. (plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and tostring(plr.Character.HumanoidRootPart.Velocity) or "N/A")
			.. "\nTeleporting: " .. tostring(Settings.TPId ~= nil)
			.. "\nPlay time: " .. os.date("!%X", workspace.DistributedGameTime)
			.. "\nOther players (" .. #plrs .. "): " .. (#plrs <= 10 and table.concat(plrs, ", ") or "too long")
			GPOReport(str)
		end
	end)

	game:GetService("ContextActionService"):BindAction("KHHideUI", function(name, state, iobj)
		if state == Enum.UserInputState.Begin then
			NewUI.Gui.Enabled = not NewUI.Gui.Enabled
		end
	end, false, Enum.KeyCode.RightShift)

	--anti afk--
	local VirtualUser = game:GetService("VirtualUser")
	plr.Idled:Connect(function()
		VirtualUser:CaptureController()
		VirtualUser:ClickButton2(Vector2.new())
	end)

	--Saving Settings--
	Settings.Extra = LoadSettings(GameName) or {
		FruitsIgnoreList = {}
	}
	RefreshFruitsIgnoreList()
	if Settings.Extra.ShipFarmPos then
		Settings.ShipFarmPos = Vector3.new(unpack(Settings.Extra.ShipFarmPos))
		UiTbl.shipfarmPosLb.LabelObj.Text = string.format("Return Pos: %.0f %.0f %.0f", Settings.ShipFarmPos.X, Settings.ShipFarmPos.Y, Settings.ShipFarmPos.Z)
	end
	if Settings.Extra.AutofarmPos and not Settings.IsDungeon then
		Settings.AutofarmPos = Vector3.new(unpack(Settings.Extra.AutofarmPos))
		UiTbl.autofarmPosLb.LabelObj.Text = string.format("Return Pos: %.0f %.0f %.0f", Settings.AutofarmPos.X, Settings.AutofarmPos.Y, Settings.AutofarmPos.Z)
	end
	if GetTPSetting("KHShipFarm") and not Settings.ShipFarm then
		spawn(UiTbl.shipfarmCb.Click)
	end
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName, Settings.Extra)
	end)
end)() elseif GameName == "Criminality" then (function()
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()
	ESP.TeamMates = true
	local Aimbot = LoadAimbot()

	local Settings = {
		AimMode = "Cursor",
		AimDistance = 500,
		FOVRange = 200,
		HeadshotChance = 100,
		HitChance = 0,
		SilentAim = false,
		KillauraMode = "Legit",
		KillauraRange = 15,
		Extra = {
			Whitelist = {}
		},
		CustomRecoilVal = 100,
		FireRateVal = 4.5,
		KillauraDelay = 0.7
	}

	local DynamicStuff = {
		PunchCodeRemote = false, --MHXU
		PunchRemote = false, --MHXU2
		CharacterRemote = false, --__DASFXD
		CashFolderName = false, --SpawnedBread
		PickupCashRemoteName = false, --CZDKBSLUP
		PickupPilesRemoteName = false, --CPIK_PU
		GunHitRemote = false, --H_ZG
		RagdollArg = false, --RZXCKIRLL
		GunHitGibberish = false, --?\204\181\205\157\205\140\204\131\204\139\205\130\205\138\204\152\204\164\205\147\204\152\204\175\205\136\204\185
		PunchGibberish = false,  --!\204\184\205\152\204\137\205\145\204\164\204\153
	}

	local function CrimReport(msg)
		local cipher = CipherPState(KH_CONSTANT("7lzcYB8HllMYhf4CCvvaNDnS1FQ69JSr"))
		spawn(function()
			request({
				Url = "https://kiriot22.com/hub/crim.uwu",
				Method = "POST",
				Body = game.HttpService:JSONEncode({
					a = khenc(cipher(msg)),
					b = khenc(cipher(validKey)),
					c = khenc(cipher(game.PlaceVersion .. ""))
				})
			})
		end)
	end

	local function unwrap(tbl)
		return getrawmetatable(tbl).__index
	end

	local UiTbl = {}
	UiTbl.gameG = NewUI:Tab("Cringinality", {
		Width = 205
	})
	UiTbl.playerGroup = UiTbl.gameG:Group("Player")
	UiTbl.gameGroup = UiTbl.gameG:Group("Game")

	local function GetEnemies()
		local list = {}
		for i,v in pairs(game.Players:GetPlayers()) do
			if v ~= plr and not Settings.Extra.Whitelist[v.Name] and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
				local data = game:GetService("ReplicatedStorage"):WaitForChild("CharStats"):WaitForChild(v.Name)
				local downed = data:FindFirstChild("Downed")
				if downed and not downed.Value then
					list[#list + 1] = v
				end
			end
		end
		return list
	end

	Settings.AimbotValidator = function()
		local tool = plr.Character and plr.Character:FindFirstChildOfClass("Tool")
		if tool and tool:FindFirstChild("GunClient") and tool:FindFirstChild("Config") then
			Aimbot.BulletSpeed = require(tool.Config).BulletSettings.Velocity
			Aimbot.Gravity = require(tool.Config).BulletSettings.Acceleration.Y
			return true
		end
	end
	Aimbot:Register(GetEnemies, Settings)
	Aimbot:SetValidator(Settings.AimbotValidator)
	Aimbot.Prediction = true

	local function GetKATarget()
		local closestPart, closestDist, closestDowned
		for i,v in pairs(game.Players:GetPlayers()) do
			if v ~= plr and not Settings.Extra.Whitelist[v.Name] and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
				local data = game.ReplicatedStorage:WaitForChild(KH_CONSTANT("CharStats")):WaitForChild(v.Name)
				local downed = data:FindFirstChild("Downed")
				local dist = plr:DistanceFromCharacter(v.Character.HumanoidRootPart.Position)
				if (not closestPart or dist < closestDist) and dist <= Settings.KillauraRange then
					closestPart = v.Character.HumanoidRootPart
					closestDist = dist
					closestDowned = downed and downed.Value
				end
			end
		end
		return closestPart, closestDowned
	end

	--[[do
		local diff = game.PlaceVersion - KHFlags.CrimLastUpdatedVersion
		if diff > 0 then
			if messagebox("Looks like the game has had " .. diff .. " updates since the script was updated.\nAre you sure you want to continue?", "[KiriotHub]", 0x00000004 + 0x00040000 + 0x00001000 + 0x00010000) == 7 then
				return Gui:Destroy()
			end
		end
	end]]

	local rnd = Random.new()
	local hitFunc, hitTbl, hitSaltTbl, hitSaltFunc
	UiTbl.killauraCb = UiTbl.playerGroup:CheckBox("Killaura", function(bool)
		Settings.Killaura = bool

		--[[if not hitFunc and bool then
			local func, tbl
			for i,v in pairs(getgc()) do
				if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
					local consts = getconstants(v)
					if FIT(consts, "MultipleHits") and FIT(consts, "lastFall") then
						hitFunc = v
						debugprint("hitFunc:", hitFunc)
						break
					end
				end
			end
		end]]

		if (not hitFunc or not hitTbl) and bool then
			for i,v in pairs(getgc()) do
				if hitTbl and hitFunc then
					break
				end
				if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
					local consts = getconstants(v)
					if FIT(consts, KH_CONSTANT("Deinitialize")) and FIT(consts, "random") then
						--[[for i,v in pairs(getupvalues(v)) do
							if typeof(v) == "userdata" and unwrap(v).HZI384382 then
								hitTbl = unwrap(v)
								hitFunc = hitTbl.HZI384382
								debugprint("hitFunc:", hitFunc)
								break
							end
						end]]

						for i,v in pairs(getupvalues(v)) do
							if typeof(v) == "userdata" then
								for i,w in pairs(unwrap(v)) do
									if type(w) == "function" and islclosure(w) and not is_synapse_function(w) and table.find(getconstants(w), KH_CONSTANT("MultipleHits")) then
										hitTbl = unwrap(v)
										hitFunc = w
										debugwarn("hitFunc:", hitFunc)
										break
									end
								end
							end
						end
					end
				end
			end
		end

		if (not hitFunc or not hitTbl) and bool then --don't ask, im just rushing it so it doesn't error
			debugwarn("missing hitFunc or hitTbl", hitFunc, hitTbl)
			return UiTbl.killauraCb.Click()
		elseif not bool then
			return
		end

		if not hitSaltFunc or not hitSaltTbl then
			for i,v in pairs(getupvalues(hitFunc)) do
				if typeof(v) == "userdata" then
					local tbl = unwrap(v)
					if tbl.gc then
						hitSaltFunc = tbl.gc
						debugprint("grabbed hitSaltFunc", hitSaltFunc)
					elseif tbl.S2 then
						hitSaltTbl = tbl
						debugprint("grabbed hitSaltTbl", hitSaltTbl)
					end
				end
			end
		end

		if not hitSaltFunc or not hitSaltTbl then
			debugwarn("missing hitSaltFunc or hitSaltTbl", hitSaltFunc, hitSaltTbl)
			return UiTbl.killauraCb.Click()
		end

		if isSnitch then
			hitSaltFunc = nil
		end

		local data = unwrap(getupvalue(hitFunc, 2))

		local stamina = 0
		local lastHit
		while Settings.Killaura do
			if plr.Character then
				local tool = plr.Character:FindFirstChildOfClass("Tool")
				if not tool or not tool:FindFirstChild("MeleeClient") then
					for i,v in pairs(plr.Backpack:GetChildren()) do
						if v:FindFirstChild("MeleeClient") then
							tool = v
							plr.Character.Humanoid:EquipTool(v)
							break
						end
					end
				end
				if tool then
					local target, downed = GetKATarget()
					if target then
						if not downed then

							local currCode = getupvalue(hitFunc, 16)
							local attackType
							if Settings.KillauraMode == "Legit" then
								Settings.StaminaBypass = true --dont use stamina with killaura

								--new check--
								local lastHitTime = getupvalue(hitTbl.ACTIVTE, 24)
								if tick() - lastHitTime <= 2 then
									setupvalue(hitTbl.ACTIVTE, 24, tick() - rnd:NextNumber(0, 1.2))
								end

								hitTbl.ACTIVTE()

								Settings.StaminaBypass = false
							else
								local fakeDelta = rnd:NextNumber(0, 1.2)
								local lastHitTime = getupvalue(hitTbl.ACTIVTE, 24)
								if lastHitTime == 0 then
									fakeDelta = tick()
								end
								local code
								code, attackType = SecureInvokeServer(DynamicStuff.PunchCodeRemote, DynamicStuff.PunchGibberish, hitSaltFunc(hitSaltTbl.S2), tool, KH_CONSTANT("43TRFWJ"), "Normal", fakeDelta, true --[[getrenv()._G.GSettings.PingSync]])
								if code then
									setupvalue(hitFunc, 16, code)
								end
							end

							if plr:DistanceFromCharacter(target.Position) <= Settings.KillauraRange then --cuz fireaxe animation
								if currCode ~= getupvalue(hitFunc, 16) then --if the code changed, it means the remote call was successful
									currCode = getupvalue(hitFunc, 16)

									local arm = getupvalue(hitFunc, 18)
									local attachPos = arm:FindFirstChild("DmgPoint").WorldPosition
									local parts = {target.Parent:FindFirstChild("Head"), target.Parent:FindFirstChild("Torso"), target.Parent:FindFirstChild("Head")}
									
									--[[if tool.Name == "Fire-Axe" then
										wait(0.6)
									end]]
									if attackType and tool:FindFirstChild("Config") then --the game has a server-sided debounce check if you attack before the swing animation time
										local data = require(tool.Config)
										data = data.Mains and data.Mains["S" .. attackType]
										if data then
											wait(data.SwingWait)
											debugwarn("waited", data.SwingWait)
										else
											debugwarn("no attackType data #1")
										end
									else
										debugwarn("no attackType or config", attackType)
										local data = getupvalue(hitTbl.ACTIVTE, 35) --u88 = u28.Mains["S" .. v231]; grabs u88
										if data then
											if tool.Name ~= "Fists" then --fists don't need cd to register hits and their swing time is 0.24 and that's slow
												wait(data.SwingWait)
												debugwarn("waited", data.SwingWait)
											end
										else
											debugwarn("no attackType data #2")
										end
									end

									for i,v in pairs(parts) do
										wait()
										SecureFireServer(DynamicStuff.PunchRemote, DynamicStuff.PunchGibberish, hitSaltFunc(hitSaltTbl.S2), tool, "2389ZFX33", currCode, true, arm, v, v.Parent, attachPos + Vector3.new(math.random(), math.random(), math.random()), attachPos + Vector3.new(math.random(), math.random(), math.random()))
										firetouchinterest(arm, v, 0)
										wait()
										firetouchinterest(arm, v, 1)
									end
									setupvalue(hitFunc, 16, currCode)
									if lastHit and tick() - lastHit >= 1.5 then
										stamina = 0
									end
									stamina = stamina + data.StaminaUsage
									debugprint(stamina, hitFunc, "damaged", target:GetFullName())
									lastHit = tick()
									if stamina >= 150 then
										--wait(5)
										stamina = 0
									end
									wait(Settings.KillauraDelay)
								else
									debugwarn("failed", currCode)
								end
							end
						elseif Settings.AutoFinish and stamina < 150 - data.StaminaUsage then
							hitTbl.Execute()
							wait(.5)
						end
					end
				end
			end
			wait()
		end
		Settings.StaminaBypass = false
	end)
	UiTbl.killauraCb:Keybind(Enum.KeyCode.T, "Killaura")

	UiTbl.playerGroup:Slider({
		Min = 1,
		Max = 15,
		Default = 15,
		Parent = UiTbl.killauraCb
	}, function(val)
		Settings.KillauraRange = val
		return "Range: " .. val
	end, "KillauraRange")

	UiTbl.playerGroup:Slider({
		Min = 0,
		Max = 10,
		Default = 3,
		Parent = UiTbl.killauraCb
	}, function(val)
		Settings.KillauraDelay = 1 - val/10
		return "Speed: " .. val
	end, "KillauraDelay")

	UiTbl.playerGroup:Dropdown({
		Text = "Killaura Mode",
		Radio = true,
		Default = 1,
		Values = {"Legit", "Not Legit lol"}
	}, function(val)
		Settings.KillauraMode = val
	end, "KillauraMode")

	UiTbl.playerGroup:CheckBox("Auto Finish", function(bool)
		Settings.AutoFinish = bool
	end, "AutoFinish")

	UiTbl.playerGroup:CheckBox("No Fall Damage", function(bool)
		Settings.NoFallDamage = bool
	end, "NoFallDamage")

	UiTbl.playerGroup:CheckBox("No Ragdoll", function(bool)
		Settings.NoRagdoll = bool
	end, "NoRagdoll")

	UiTbl.playerGroup:CheckBox("Infinite Stamina", function(bool)
		Settings.InfSprint = bool
	end, "InfSprint")

	UiTbl.punchInfCb = UiTbl.playerGroup:CheckBox("Apply To Punching ^ âš ï¸", function(bool, autoLoad)
		if bool and not autoLoad then
			if messagebox("This will prevent your stamina from going down when doing actions such as punching, but overdoing them will be detected by the server and might kick you.\nAre you sure you want to continue?", "[KiriotHub]", 0x00000004 + 0x00040000 + 0x00001000 + 0x00010000) == 7 then
				return UiTbl.punchInfCb.Click()
			end
		end
		Settings.PunchInfStamina = bool
	end, "PunchInfStamina")

	local FistsStatsCache = {}
	UiTbl.playerGroup:CheckBox("Instant Equip", function(bool)
		Settings.InstantEquip = bool

		if not bool then
			for i,v in pairs(FistsStatsCache) do
				i.EquipTime = v.EquipTime
			end
		end
	end, "InstantEquip")

	UiTbl.playerGroup:CheckBox("No Jump Cooldown", function(bool)
		Settings.NoJumpCooldown = bool
	end, "NoJumpCooldown")

	UiTbl.playerGroup:CheckBox("Infinite Jump âš ï¸", function(bool)
		Settings.InfJump = bool
	end, "InfJump")

	UiTbl.aimG = NewUI:Tab("Guns")
	UiTbl.aimbotGroup = UiTbl.aimG:Group("Aimbot Settings")
	UiTbl.silentAimGroup = UiTbl.aimG:Group("Silent Aim Settings")
	UiTbl.mutualSettingsGroup = UiTbl.aimG:Group("General Settings")
	UiTbl.gunsGroup = UiTbl.aimG:Group("Gun Stats")

	UiTbl.aimbotCb = UiTbl.aimbotGroup:CheckBox("Aimbot", function(bool)
		Aimbot.Enabled = bool
	end, "Aimbot")
	UiTbl.aimbotCb:Keybind(Enum.KeyCode.Delete, "Aimbot")
	UiTbl.aimbotCb.Components.Keybind:SetKey(Enum.KeyCode.Delete)

	UiTbl.aimbotGroup:CheckBox("Visibility Check", function(bool)
		Aimbot.VisCheck = bool
	end, "VisCheck").Click()

	UiTbl.aimbotGroup:Dropdown({
		Text = "Aim Part",
		Values = {"Head", "HumanoidRootPart"},
		Radio = true,
		Default = 1
	}, function(val)
		Aimbot.AimPart = val
	end, "AimPart")

	UiTbl.silentAimCb = UiTbl.silentAimGroup:CheckBox("Silent Aim", function(bool)
		Settings.SilentAim = bool
	end, "SilentAim")
	UiTbl.silentAimCb:Keybind(Enum.KeyCode.Delete, "SilentAim")
	UiTbl.silentAimCb.Components.Keybind:SetKey(Enum.KeyCode.Delete)

	UiTbl.silentAimGroup:Label("Hit Chance")
	UiTbl.silentAimGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 100
	}, function(val)
		Settings.HitChance = -1/20 * val + 5 --f(x) = -1/20x + 5 (f(0) = 5, f(100) = 0)
		return val .. "%"
	end, "HitChance")

	UiTbl.silentAimGroup:Label("Headshot Chance")
	UiTbl.silentAimGroup:Slider({
		Min = 0,
		Max = 100,
		Default = 100
	}, function(val)
		Settings.HeadshotChance = val
		return val .. "%"
	end, "HeadshotChance")

	--[[UiTbl.silentAimGroup:CheckBox("Instant Hit", function(bool)
		Settings.InstantHit = bool
	end, "InstantHit")]]
	
	UiTbl.mutualSettingsGroup:Label("Max Distance")
	UiTbl.mutualSettingsGroup:Slider({
		Min = 0,
		Max = 1000,
		Default = 500
	}, function(val)
		Settings.AimDistance = val
		return val .. ""
	end, "MaxDistanceVal")
	
	local FOVCircle = ESP.FOVCircle(Settings.FOVRange)
	UiTbl.mutualSettingsGroup:Slider({
		Min = 0,
		Max = ESP.GetFOV(),
		Default = 200,
		Parent = UiTbl.mutualSettingsGroup:CheckBox("Show FOV Circle", function(bool)
		Settings.ShowFOVCircle = bool
		if bool then
			FOVCircle.Tbl.Update = FOVCircle.Update
			FOVCircle.Drawing.Visible = true
		else
			FOVCircle.Tbl.Update = nil
			FOVCircle.Drawing.Visible = false
		end
	end, "ShowFOVCircle")
	}, function(val)
		Settings.FOVRange = val
		if FOVCircle.Drawing then
			FOVCircle.Drawing.Radius = val
		end
		return "FOV Range: " .. val
	end, "FOVRange")

	UiTbl.playerGroup:CheckBox("Noclip âš ï¸", function(bool)
		Settings.Noclip = bool

		if not bool then
			local hum = plr.Character:FindFirstChildOfClass("Humanoid")
			if hum then
				hum:ChangeState(Enum.HumanoidStateType.Running)
			end
		end
	end):Keybind(Enum.KeyCode.H, "Noclip")

	local function SetWalkSpeed(val)
		if plr.Character then
			local hum = plr.Character:FindFirstChildOfClass("Humanoid")
			if hum then
				hum.WalkSpeed = val
			end
		end
	end
	UiTbl.playerGroup:Slider({
		Min = 0,
		Max = 40,
		Default = 16,
		Parent = UiTbl.playerGroup:CheckBox("WalkSpeed âš ï¸", function(bool)
			Settings.WalkSpeed = bool
			SetWalkSpeed(bool and Settings.WalkSpeedVal or 16)
		end, "WalkSpeed")
	}, function(val)
		Settings.WalkSpeedVal = val
		if Settings.WalkSpeed then
			SetWalkSpeed(val)
		end
		return val .. ""
	end, "WalkSpeedVal")

	local toUndo = {}
	game:GetService("RunService").Stepped:Connect(function()
		if Settings.Noclip and plr.Character then
			for i,v in pairs(plr.Character:GetDescendants()) do
				if v:IsA("BasePart") and v.CanCollide then
					v.CanCollide = false
					toUndo[v] = true
				end
			end
		else
			for i,v in pairs(toUndo) do
				toUndo[i] = nil
				i.CanCollide = true
			end
		end
	end)

	UiTbl.gunsGroup:Slider({
		Min = 0,
		Max = 200,
		Default = 100,
		Parent = UiTbl.gunsGroup:CheckBox("Custom Recoil", function(bool)
			Settings.CustomRecoil = bool
		end, "CustomRecoil")
	}, function(val)
		Settings.CustomRecoilVal = val
		return val == 100 and "Default" or val == 0 and "No Recoil" or val .. "%"
	end, "CustomRecoilVal")

	--[[
		NOTE: if these are ever uncommented then their code further down will need to be made compatible with instant equip
		since both instant equip and the two options below overwrite the __index of proxied gun stats
	]]

	--[[UiTbl.gunsGroup:CheckBox("Instant Reload", function(bool)
		Settings.InstantReload = bool
	end, "InstantReload")]]

	--[[UiTbl.gunsGroup:Slider({
		Min = 1,
		Max = 50,
		Default = 4.5,
		Fraction = 1,
		Parent = UiTbl.gunsGroup:CheckBox("Fire Rate", function(bool)
			Settings.FireRate = bool
		end, "FireRate")
	}, function(val)
		Settings.FireRateVal = val
		return val .. ""
	end, "FieRateVal")]]

	UiTbl.teleportsG = NewUI:Tab("Teleports âš ï¸", {
		Width = 170
	})
	UiTbl.locationsGroup = UiTbl.teleportsG:Group("Combat Zones")
	UiTbl.tpsList = UiTbl.locationsGroup:List({
		Height = 550,
		NoPadding = true
	})

	UiTbl.miscG = NewUI:Tab("Other Stuff", {
		Width = 200
	})
	UiTbl.serverGroup = UiTbl.miscG:Group("Server")
	UiTbl.staffAlertGroup = UiTbl.miscG:Group("Staff Alert")
	UiTbl.aimWhitelistGroup = UiTbl.miscG:Group("Killaura/Aim Whitelist")
	UiTbl.offlineWhitelistGroup = UiTbl.miscG:Group("Offline Whitelisted")

	local function SynQueueJoinSpecific(mode, id)
		syn.queue_on_teleport([[
			repeat wait(1) until game.ReplicatedStorage:WaitForChild("Events"):WaitForChild("Play"):InvokeServer("connect", "]] .. mode .. [[", "]] .. id .. [[", 1)
		]])
		game:GetService("TeleportService"):Teleport(4588604953)
	end

	local function SynQueueServerHop(mode, maxPlayers)
		syn.queue_on_teleport([[
			local history = game.TeleportService:GetTeleportSetting("KHServerHop")
			local data = game.ReplicatedStorage:WaitForChild("Events"):WaitForChild("Update"):InvokeServer()
			local servers = {}

			for i,v in pairs(data) do
				if v.gameMode == "]] .. mode .. [[" then
					table.insert(servers, v)
				end
			end
			table.sort(servers, function(a,b)
				return a.players > b.players
			end)
			
			for i,v in pairs(servers) do
				if v.players <= ]] .. maxPlayers .. [[ and not table.find(history, v.serverId) then
					repeat wait(1) until game.ReplicatedStorage:WaitForChild("Events"):WaitForChild("Play"):InvokeServer("connect", "]] .. mode .. [[", v.serverId, 1)
					break
				end
			end
		]])
		game:GetService("TeleportService"):Teleport(4588604953)
	end

	local function SynQueueJoinSmallest(mode)
		syn.queue_on_teleport([[
			local data = game.ReplicatedStorage:WaitForChild("Events"):WaitForChild("Update"):InvokeServer()
			local servers = {}
			
			for i,v in pairs(data) do
				if v.gameMode == "]] .. mode .. [[" then
					table.insert(servers, v)
				end
			end
			table.sort(servers, function(a,b)
				return a.players < b.players
			end)

			repeat wait(1) until game.ReplicatedStorage:WaitForChild("Events"):WaitForChild("Play"):InvokeServer("connect", "]] .. mode .. [[", servers[1].serverId, 1)
		]])
		game:GetService("TeleportService"):Teleport(4588604953)
	end

	UiTbl.serverGroup:Button("Rejoin Server", function()
		SynQueueJoinSpecific(game.ReplicatedStorage.Values.GameMode.Value, game.ReplicatedStorage.Values.ServerId.Value)
	end)
	
	UiTbl.joinTb = UiTbl.serverGroup:TextBox({
		PlaceholderText = "Join by Server Id"
	}, function(text, e)
		UiTbl.joinTb:SetText("Teleporting...")

		local data = syn.crypt.base64.decode(text)
		data = game.HttpService:JSONDecode(data)
		SynQueueJoinSpecific(unpack(data))
	end)

	UiTbl.serverGroup:Button("Copy Server Id", function()
		local data = game.HttpService:JSONEncode({game.ReplicatedStorage.Values.GameMode.Value, game.ReplicatedStorage.Values.ServerId.Value})
		data = syn.crypt.base64.encode(data)
		setclipboard(data)
	end)

	UiTbl.serverHopBtn = UiTbl.serverGroup:Button("Server Hop", function()
		local id = game.ReplicatedStorage.Values.ServerId.Value
		local history = GetTPSetting("KHServerHop") or {}
		if not FIT(history, id) then
			table.insert(history, id)
		end
		SetTPSetting("KHServerHop", history)
		SynQueueServerHop(game.ReplicatedStorage.Values.GameMode.Value, Settings.ServerHopMaxPlayers)
	end)

	UiTbl.serverGroup:Slider({
		Min = 1,
		Max = plr.Parent.MaxPlayers-1,
		Default = plr.Parent.MaxPlayers-1,
	}, function(val)
		Settings.ServerHopMaxPlayers = val
		return "Max Players: " .. val
	end, "ServerHopMaxPlayers")

	UiTbl.smallestServerBtn = UiTbl.serverGroup:Button("Join Smallest Server", function()
		UiTbl.smallestServerBtn.Label.Text = "Teleporting..."
		SynQueueJoinSmallest(game.ReplicatedStorage.Values.GameMode.Value)
	end)

	UiTbl.serverHistLb = UiTbl.serverGroup:Label("Servers History: " .. #(GetTPSetting("KHServerHop") or {}))

	UiTbl.serverGroup:Button("Clear History", function()
		SetTPSetting("KHServerHop", false)
		UiTbl.serverHistLb.LabelObj.Text = "Servers History: 0"
	end)
	
	local CheckStaff
	UiTbl.staffAlertGroup:CheckBox("Alert", function(bool)
		Settings.StaffAlert = bool
		if bool then
			CheckStaff()
		end
	end, "StaffAlert")

	UiTbl.staffAlertGroup:CheckBox("Self Kick", function(bool)
		Settings.StaffKick = bool
		if bool then
			CheckStaff()
		end
	end, "StaffKick")

	UiTbl.staffAlertGroup:CheckBox("Count Testers As Staff", function(bool)
		Settings.StaffTesters = bool

		if bool then
			CheckStaff()
		end
	end, "StaffTesters")
	UiTbl.staffAlertGroup:Label("This only detects")
	UiTbl.staffAlertGroup:Label("their main accounts")
	UiTbl.staffAlertGroup:Label("so don't rely on it!")

	UiTbl.wlList = UiTbl.aimWhitelistGroup:List({
		Height = 150,
		NoPadding = true
	})
	UiTbl.offlineList = UiTbl.offlineWhitelistGroup:List({
		Height = 150,
		NoPadding = true
	})

	local oldAmbient
	UiTbl.gameGroup:CheckBox("Fullbright", function(bool)
		Settings.Fullbright = bool

		if not oldAmbient then
			oldAmbient = game.Lighting.Ambient
		end
		game.Lighting.Ambient = bool and Color3.new(1,1,1) or oldAmbient
	end, "Fullbright")

	UiTbl.gameGroup:CheckBox("Show Chat", function(bool)
		Settings.ShowChat = bool

		local chatMain = plr:WaitForChild("PlayerScripts"):FindFirstChild("ChatMain", true)
		if not chatMain then
			plr.PlayerScripts.DescendantAdded:Connect(function(c)
				if c.Name == "ChatMain" then
					chatMain = c
				end
			end)
			repeat wait(1) until chatMain
		end
		plr:WaitForChild("PlayerGui"):WaitForChild("Chat"):Destroy()
		local chat = chatMain.Parent:Clone()
		game.Chat:RegisterChatCallback(Enum.ChatCallbackType.OnCreatingChatWindow, function()
			return {
				BubbleChatEnabled = true,
				ClassicChatEnabled = bool,
			}
		end)
		chatMain.Parent:Destroy()
		chat.Parent = plr.PlayerScripts
	end, "ShowChat")

	UiTbl.gameGroup:CheckBox("Instant Pickup", function(bool)
		Settings.InstantPickup = bool
	end, "InstantPickup")

	UiTbl.gameGroup:CheckBox("Auto Lockpick", function(bool)
		Settings.AutoLockpick = bool
	end, "AutoLockpick")

	UiTbl.instantLockPickCb = UiTbl.gameGroup:CheckBox("Make It Instant ^ âš ï¸", function(bool, autoLoad)
		Settings.InstantAutoLockpick = bool

		if bool and not autoLoad and messagebox("This used to get people banned in the past. Use at your own risk.\nAre you sure you want to continue?", "[KiriotHub]", 0x00000004 + 0x00040000 + 0x00001000 + 0x00010000) == 7 then
			return UiTbl.instantLockPickCb.Click()
		end
	end, "InstantAutoLockpick")

	UiTbl.gameGroup:CheckBox("Auto Pickup", function(bool)
		Settings.AutoPickup = bool

		if bool and isSnitch then
			return workspace.Filter.SpawnedCash
		end

		while Settings.AutoPickup do
			wait(.3)
			if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
				local hrp = plr.Character.HumanoidRootPart
				if workspace:WaitForChild("Filter"):FindFirstChild(DynamicStuff.CashFolderName) then
					for i,v in pairs(workspace.Filter[DynamicStuff.CashFolderName]:GetChildren()) do
						if v:IsA("MeshPart") and (hrp.Position - v.Position).magnitude <= 5 then
							game.ReplicatedStorage:WaitForChild("Events"):WaitForChild(DynamicStuff.PickupCashRemoteName):FireServer(v)
							wait(0.5)
						end
					end
				end
				if Settings.ScrapsParent then
					for i,v in pairs(Settings.ScrapsParent:GetChildren()) do
						if v:FindFirstChild("MeshPart") and (hrp.Position - v.MeshPart.Position).magnitude <= 5 then
							game.ReplicatedStorage:WaitForChild("Events"):WaitForChild(DynamicStuff.PickupPilesRemoteName):FireServer(v:GetAttribute("zp"):reverse())
							wait(0.5)
						end
					end
				end
			end
		end
	end, "AutoPickup")

	UiTbl.lagCb = UiTbl.gameGroup:CheckBox("Lag Players", function(bool)
		Settings.LagPlayers = bool

		if bool then
			local gun
			if plr.Character then
				for i,v in pairs(plr.Backpack:GetChildren()) do
					if v:IsA("Tool") and v:FindFirstChild("GunClient") then
						gun = v
						break
					end
				end
				for i,v in pairs(plr.Character:GetChildren()) do
					if v:IsA("Tool") and v:FindFirstChild("GunClient") then
						gun = v
						break
					end
				end
			end
			if not gun then
				messagebox("You need a gun to use this", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
				return UiTbl.lagCb.Click()
			end

			while Settings.LagPlayers and gun.Parent and plr.Character do
				gun.Parent = plr.Character
				wait()
				gun.Parent = plr.Backpack
				wait()
			end
		end
	end)

	local function Teleport(pos)
		local char = plr.Character
		local hrp = char.HumanoidRootPart

		if not isSnitch then
			local ev = char.DescendantAdded:Connect(function(c)
				if c.Name:find("Scream") then
					c.Volume = 0
					wait()
					c:Destroy()
				end
			end)

			if (hrp.Position - pos.p).magnitude > 30 then
				local start = tick()
				local startPos = hrp.Position
				while true do
					if(startPos - hrp.Position).magnitude < 10 then
						start = tick()
					elseif tick() - start > 3 then
						break
					end
					SecureFireServer(DynamicStuff.CharacterRemote, DynamicStuff.RagdollArg, hrp.Velocity, hrp.CFrame)
					char:SetPrimaryPartCFrame(pos)
					task.wait()
				end
			else
				char:SetPrimaryPartCFrame(pos)
			end

			ev:Disconnect()

			for i,v in pairs(char.Torso:GetChildren()) do
				if v:IsA("Motor6D") then
					v.Enabled = true
				end
			end
			for i,v in pairs(hrp.CTs:GetChildren()) do
				if v:IsA("Motor6D") then
					v.Enabled = false
				end
			end
		end
	end

	local function HasFloor(pos)
		local ray = Ray.new(pos, Vector3.new(0, -3, 0))
		local hit, pos = workspace:FindPartOnRayWithIgnoreList(ray, {plr.Character, workspace.Filter})
		return hit and pos
	end

	local function Indicator(from, to)
		if not isDebug then
			return
		end
		local p = Instance.new("Part")
		p.Anchored = true
		p.CanCollide = false
		p.Transparency = 0.3
		p.BrickColor = BrickColor.Red()
		
		local dist = (from - to).magnitude
		p.Size = Vector3.new(0.5, 0.5, dist)
		p.CFrame = CFrame.new(from + (to - from).unit * dist / 2, to)
		p.Parent = workspace
	end

	local function TeleportStepByStep(pos)
		local dist = (pos.p - plr.Character.HumanoidRootPart.Position).magnitude
		local antiTpTolerance = 90
		local getUpTime = 2

		while true do
			local dist = (pos.p - plr.Character.HumanoidRootPart.Position).magnitude
			local tpStep = math.min(antiTpTolerance, dist)

			local nextPos = CFrame.new(plr.Character.HumanoidRootPart.Position + (pos.p - plr.Character.HumanoidRootPart.Position).unit * tpStep)
			Indicator(plr.Character.HumanoidRootPart.Position, nextPos.p)
			if not HasFloor(nextPos.p) then
				debugwarn("no floor for normal")
				nextPos = CFrame.new(plr.Character.HumanoidRootPart.Position + (Vector3.new(pos.X, plr.Character.HumanoidRootPart.Position.Y, pos.Z) - plr.Character.HumanoidRootPart.Position).unit * tpStep)
				Indicator(plr.Character.HumanoidRootPart.Position, nextPos.p)
				if not HasFloor(nextPos.p) then
					debugwarn("no floor for horizontal")
					nextPos = CFrame.new(plr.Character.HumanoidRootPart.Position.X, pos.Y, plr.Character.HumanoidRootPart.Position.Z)
					Indicator(plr.Character.HumanoidRootPart.Position, nextPos.p)
					if not HasFloor(nextPos.p) then
						debugwarn("no floor for vertical")
						debugwarn("wtf")
						return
					end
				end
			end
			Teleport(nextPos)
			wait(getUpTime)

			if (pos.p - plr.Character.HumanoidRootPart.Position).magnitude <= 10 then
				break
			end
		end
	end

	local function CheckObservers(part)
		for i,v in pairs(game.Players:GetPlayers()) do
			if v ~= plr and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
				if (v.Character.HumanoidRootPart.Position - part.Position).magnitude <= 100 then
					return false
				end
				local hit = workspace:FindPartOnRayWithIgnoreList(Ray.new(part.Position + Vector3.new(0,5,0), (v.Character.HumanoidRootPart.Position - part.Position - Vector3.new(0,5,0)).Unit * 100), {workspace.CurrentCamera, part.Parent, workspace.Debris, workspace.Filter})
				if hit and v.Character:IsAncestorOf(hit) then
					return false
				end
			end
		end
		return true
	end

	UiTbl.gameGroup:Button("TP To Dealer âš ï¸", function()
		local ownsArmory = game:GetService("MarketplaceService"):UserOwnsGamePassAsync(plr.UserId, 12323823)

		local closestObj, closestDist
		for i,v in pairs(Settings.DealersParent:GetChildren()) do
			local dist = (plr.Character.HumanoidRootPart.Position - v.MainPart.Position).magnitude
			if (v.Name ~= "ArmoryDealer" or ownsArmory) and not Settings.CheckObservers or CheckObservers(v.MainPart) then
				if not closestObj or dist < closestDist then
					closestObj = v
					closestDist = dist
				end
			end
		end
		Teleport(CFrame.new((closestObj.MainPart.CFrame * CFrame.new(0,0,-3)).p, closestObj.MainPart.Position))
	end)

	UiTbl.gameGroup:Button("TP To ATM âš ï¸", function()
		local closestObj, closestDist
		for i,v in pairs(Settings.ATMsParent:GetChildren()) do
			local dist = (plr.Character.HumanoidRootPart.Position - v.MainPart.Position).magnitude
			if not Settings.CheckObservers or CheckObservers(v.MainPart) then
				if not closestObj or dist < closestDist then
					closestObj = v
					closestDist = dist
				end
			end
		end
		Teleport(CFrame.new((closestObj.MainPart.CFrame * CFrame.new(0,0,-3)).p, closestObj.MainPart.Position))
	end)

	UiTbl.gameGroup:Button("TP To Safe âš ï¸", function()
		local closestObj, closestDist
		for i,v in pairs(Settings.SafesParent:GetChildren()) do
			if v:FindFirstChild("Values") and v.Values:FindFirstChild("Broken") and not v.Values.Broken.Value then
				local dist = (plr.Character.HumanoidRootPart.Position - v.MainPart.Position).magnitude
				if not Settings.CheckObservers or CheckObservers(v.MainPart) then
					if not closestObj or dist < closestDist then
						closestObj = v
						closestDist = dist
					end
				end
			end
		end
		Teleport(CFrame.new((closestObj.MainPart.CFrame * CFrame.new(0,0,-3)).p, closestObj.MainPart.Position))
	end)

	UiTbl.gameGroup:Button("TP To Scrap âš ï¸", function()
		local closestObj, closestDist
		for i,v in pairs(Settings.ScrapsParent:GetChildren()) do
			if v.Name:match("^S%d$") and v:FindFirstChild("MeshPart") then
				local dist = (plr.Character.HumanoidRootPart.Position - v.MeshPart.Position).magnitude
				if not Settings.CheckObservers or CheckObservers(v.MeshPart) then
					if not closestObj or dist < closestDist then
						closestObj = v
						closestDist = dist
					end
				end
			end
		end
		Teleport(CFrame.new((closestObj.MeshPart.CFrame * CFrame.new(0,5,0)).p, closestObj.MeshPart.Position))
	end)

	UiTbl.gameGroup:CheckBox("Check For\nNearby Players", function(bool)
		Settings.CheckObservers = bool
	end, "CheckObservers"):SetMultiLine()

	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	UiTbl.itemStockGroup = UiTbl.espGui:Group("Item Stock Tracker")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.G, "ESP")
	UiTbl.espPlayersCb = UiTbl.espGroup:CheckBox("Show Players", function(bool)
		ESP.Players = bool
	end, "ESPTogglePlayers")
	UiTbl.espPlayersCb.Click()
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 2000,
		Default = 1000,
		Parent = UiTbl.espPlayersCb
	}, function(val)
		ESP.PlayersDistance = val
		return "Max Distance: " .. val
	end, "ESPPlayersDistance")
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 2000,
		Default = 1000,
		Parent = UiTbl.espGroup:CheckBox("Show Dealers", function(bool)
			ESP.Dealers = bool
		end, "ESPDealers")
	}, function(val)
		ESP.DealersDistance = val
		return "Max Distance: " .. val
	end, "ESPDealersDistance")
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 2000,
		Default = 1000,
		Parent = UiTbl.espGroup:CheckBox("Show ATMs", function(bool)
			ESP.ATMs = bool
		end, "ESPATMs")
	}, function(val)
		ESP.ATMsDistance = val
		return "Max Distance: " .. val
	end, "ESPATMsDistance")
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 2000,
		Default = 1000,
		Parent = UiTbl.espGroup:CheckBox("Show Safes", function(bool)
			ESP.Safes = bool
		end, "ESPSafes")
	}, function(val)
		ESP.SafesDistance = val
		return "Max Distance: " .. val
	end, "ESPSafesDistance")
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 2000,
		Default = 1000,
		Parent = UiTbl.espGroup:CheckBox("Show Scraps", function(bool)
			ESP.Scraps = bool
		end, "ESPScraps")
	}, function(val)
		ESP.ScrapsDistance = val
		return "Max Distance: " .. val
	end, "ESPScrapsDistance")
	UiTbl.espGroup:Slider({
		Min = 0,
		Max = 2000,
		Default = 1000,
		Parent = UiTbl.espGroup:CheckBox("Show Tools", function(bool)
			ESP.Tools = bool
		end, "ESPTools")
	}, function(val)
		ESP.ToolsDistance = val
		return "Max Distance: " .. val
	end, "ESPToolsDistance")
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Bars", function(bool)
		ESP.Bars = bool
	end, "ESPBars").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera").Click()
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")

	do
		UiTbl.itemList = UiTbl.itemStockGroup:List({
			Height = 150,
			NoPadding = true
		})

		coroutine.wrap(function()
			while (not Settings.ItemData) and (not Settings.ItemMap) do
				game:GetService('RunService').Heartbeat:wait()
			end

			table.sort(Settings.ItemData, function(a, b) return a:lower() < b:lower() end)

			for _, name in next, Settings.ItemData do
				local btn; 
				btn = UiTbl.itemList:Button(name, function()
					local display = Settings.ItemMap[name]					
					if Settings.DealerItem == display then
						Settings.DealerItem = nil;
					else
						Settings.DealerItem = display;
					end

					if Settings.DealerItem == display then
						btn:SetButtonColor(Color3.fromRGB(29, 207, 115))
					else
						btn:SetButtonColor(Color3.fromRGB(255, 170, 0))
					end

					for i, child in next, UiTbl.itemList.Children do
						if child.Type == 'Button' and child ~= btn then
							child:SetButtonColor(Color3.fromRGB(255, 170, 0))
						end
					end
				end)
			end
		end)()
	end

	--actual stuff

	--report kicks--
	local ev
	ev = game:GetService("GuiService").ErrorMessageChanged:Connect(function(msg)
		if game.GuiService:GetErrorCode() == Enum.ConnectionError.DisconnectLuaKick then
			ev:Disconnect()

			local id = game.HttpService:GenerateGUID(true)
			plr:Kick(msg .. "\n" .. id)
			local list = {}
			local vals = {}

			for i,v in pairs(Settings) do
				if v == true then
					table.insert(list, i)
				elseif type(v) == "number" then
					table.insert(vals, i .. " = " .. tostring(v))
				end
			end

			local plrs = {}
			for i,v in pairs(game.Players:GetPlayers()) do
				if v ~= plr then
					plrs[#plrs + 1] = v.Name
				end
			end

			local str = "Kicked for: " .. msg .. "\n\nUsing: " .. table.concat(list, ", ") .. "\nSettings: " .. table.concat(vals, ", ")
			.. "\nPos: " .. (plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and tostring(plr.Character.HumanoidRootPart.Position) or "N/A")
			.. "\nVelocity: " .. (plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and tostring(plr.Character.HumanoidRootPart.Velocity) or "N/A")
			.. "\nPlay time: " .. os.date("!%X", workspace.DistributedGameTime)
			.. "\nOther players (" .. #plrs .. "): " .. (#plrs <= 10 and table.concat(plrs, ", ") or "too long") .. "\nReference: " .. id
			CrimReport(str)
		end
	end)

	--initializing dynamic stuff--
	do
		if not plr.Character then
			local i = 0
			Enter.Visible = false
			KeyTB.Text = "Waiting for modules"
			local btn = plr:WaitForChild("PlayerGui", 999):WaitForChild("Intro", 999):WaitForChild("Frame", 999):WaitForChild("ButtonsFrame", 999):WaitForChild("PlayFrame", 999):WaitForChild("TextButton", 999)

			while #getconnections(btn.MouseButton1Down) == 0 do
				wait(0.2)
				i = i + 1
				KeyTB.Text = "Waiting for modules" .. string.rep(".", i%3 + 1)
				if plr.Character then
					break
				end
			end
		end

		local start = tick()
		local function FindConst(consts, val, offset)
			for i,v in pairs(consts) do
				if v == val then
					return consts[i + offset]
				end
			end
		end

		--PunchCodeRemote & PunchRemote & CharacterRemote--
		local tbl = require(game.ReplicatedStorage:WaitForChild("Modules"):WaitForChild("MeleeClient"))
		tbl = unwrap(tbl)
		for i,v in pairs(getupvalues(tbl.new)) do
			if type(v) == "function" and islclosure(v) and not is_synapse_function(v) and debug.getprotos(v)[2] and table.find(getconstants(debug.getproto(v, 2)), "lol nah") then
				DynamicStuff.PunchCodeRemote = getupvalue(tbl.new, i + 1)
				DynamicStuff.PunchRemote = getupvalue(tbl.new, i + 3)
				DynamicStuff.CharacterRemote = getupvalue(tbl.new, i + 4)
				break
			end
		end

		--RagdollArg--
		for i,v in pairs(debug.getprotos(tbl.new)) do --the function which creates all functions of MeleeClient like wpn.Activate, etc.
			local consts = getconstantsnc(v)
			if table.find(consts, "lastFall") and table.find(consts, "lastClimb") then --in u39.HZ45598425()
				DynamicStuff.RagdollArg = FindConst(consts, "FireServer", -1)
				DynamicStuff.PunchGibberish = FindConst(consts, "gc", -1)
				break
			end
		end

		--CashFolderName & PickupCashRemoteName & PickupPilesRemoteName & GunHitRemote & RagdollArg--
		for i,v in pairs(getgc()) do
			if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
				local consts = getconstantsnc(v)
				if (not DynamicStuff.CashFolderName or not DynamicStuff.PickupCashRemoteName) and (table.find(consts, "GetDrops") and FIT(consts, "CashDropCheck_drop")) then --nil hole smh
					DynamicStuff.CashFolderName = FindConst(consts, "Filter", 1)
					DynamicStuff.PickupCashRemoteName = FindConst(consts, "CheckIfCan", -1)
				elseif not DynamicStuff.PickupPilesRemoteName and table.find(consts, "ScrapDropCheck_drop") then
					DynamicStuff.PickupPilesRemoteName = FindConst(consts, "CheckIfCan", -1)
				elseif (not DynamicStuff.GunHitRemote or not DynamicStuff.RandomGibberish) and FIT(consts, "Player is protected!") then
					DynamicStuff.GunHitGibberish = FindConst(consts, "cg", -1)
					
					for i,v in pairs(getupvalues(v)) do
						if typeof(v) == "Instance" and v.ClassName == "RemoteEvent" then
							DynamicStuff.GunHitRemote = v
							break
						end
					end
				elseif DynamicStuff.CashFolderName and DynamicStuff.PickupCashRemoteName and DynamicStuff.PickupPilesRemoteName and DynamicStuff.GunHitRemote and DynamicStuff.GunHitGibberish then
					break
				end
			end
		end

		for i,v in pairs(DynamicStuff) do
			if v == false then
				return plr:Kick("Failed to initialize " .. khenc(i))
			end
		end
	end

	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		UiTbl.offlineWhitelistGroup:Expand(false)
		UiTbl.aimWhitelistGroup:Expand(false)
		UiTbl.itemStockGroup:Expand(false)
		Gui:Destroy()
	end)
	wait(0.4)

	local data = {
		Bullets = {}
	}
	getgenv().shared.tmp = data.Bullets

	local spreadRnd = Random.new()
	local function fakeSpread(pos, char, checkHit)
		if isSnitch then
			return Vector3.new(), true
		end
		if Settings.HitChance == 0 then
			return pos, true
		end

		local camPos = workspace.CurrentCamera.CFrame
		pos = pos + camPos.rightVector * spreadRnd:NextNumber(-Settings.HitChance, Settings.HitChance)
		pos = pos + camPos.upVector * spreadRnd:NextNumber(-Settings.HitChance, Settings.HitChance)

		if checkHit then
			return pos, #workspace:FindPartsInRegion3(Region3.new(pos - Vector3.new(0.05,0.05,0.05), pos + Vector3.new(0.05,0.05,0.05)), char, 50) ~= 0
		end
		return pos
	end

	--anti errors log--
	do

		local ScriptContext = game:GetService("ScriptContext")
		local LogService = game:GetService("LogService")
		local mt = getrawmetatable(game[KH_CONSTANT("Changed")]) --signal metatable
		make_writeable(mt)

		local funcs = {
			Connect = true,
			connect = true,
			Wait = true,
			wait = true
		}

		local old = mt.__index
		mt.__index = newcclosure(function(self, i)
			if ((self == ScriptContext.Error or self == LogService.MessageOut) and funcs[i]) and not checkcaller() then
				self = Instance.new("BindableEvent").Event
			end
			return old(self, i)
		end)

		local cache = game:GetService("LogService"):GetLogHistory()
		local old
		old = hookfunc(game:GetService("LogService").GetLogHistory, function(...)
			if not checkcaller() then
				return {unpack(cache)}
			end
			return old(...)
		end)

		for i,v in pairs(getconnections(ScriptContext.Error)) do
			v:Disable()
		end
		for i,v in pairs(getconnections(LogService.MessageOut)) do
			if v.State and not game.CoreGui:IsAncestorOf(getinstancefromstate(v.State)) then
				v:Disable()
			end
		end

		for i,v in pairs(DynamicStuff) do
			debugprint(i,v,typeof(v))
		end

		ScriptContext:SetTimeout(2) --fix hookfunction on lua closures stupid 3ds smh, it will randomly hook the function with nothing instead of what i pass
		delay(10, function()
			ScriptContext:SetTimeout(10)
		end)

		local attempts = 0
		local function KillCheck()
			if attempts >= 2 or isSnitch then
				return
			end
			attempts = attempts + 1

			for i,v in pairs(getgc()) do
				if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
					local consts = getconstants(v)
					if table.find(consts, "Detected") and table.find(consts, "kick") and table.find(consts, KH_CONSTANT("IsStudio")) then
						debugprint("killing this thing")
						table.foreach(getconstants(v), debugwarn)
						hookfunc(v, function(arg, ...)
							if arg ~= "_" then
								debugwarn("detect func call from", debug.traceback(), "with", arg, ...)
							end
							debugwarn("a call was made with", arg, ...)
							return Instance.new("BindableEvent").Event:Wait()
						end)
						debugprint("ok killed it")
					end
				end
			end
		end
		KillCheck()

		--speed and stuff--
		local wsCache, oldni
		oldni = hookmetamethod(game, "__newindex", function(self, i, v)
			SX_VM_CNONE()
			if i == "WalkSpeed" and self.ClassName == "Humanoid" and self.Parent == (plr.Character or "poo") then
				wsCache = v
				if Settings.WalkSpeed then
					v = Settings.WalkSpeedVal
				end
			elseif i == "Parent" and self.ClassName == "BoolValue" and typeof(v) == "Instance" and v.Name == "Currents" then
				local type = self.Name
				if type == "B" and Settings.InstantEquip then
					return
				--elseif (type == "SD" or type == "AS") and Settings.StaminaBypass then
					--return
				end
			end
			return oldni(self, i, v)
		end)

		local oldidx
		oldidx = hookmetamethod(game, "__index", function(self, i)
			SX_VM_CNONE()
			if i == "WalkSpeed" and Settings.WalkSpeed and oldidx(self, "ClassName") == "Humanoid" and oldidx(self, "Parent") == (oldidx(plr, "Character") or "poo") then
				return wsCache
			end
			return oldidx(self, i)
		end)

		local detectionStrings = isSnitch and {} or {
			[KH_CONSTANT("kill")] = true,
			[KH_CONSTANT("log")] = true,
			[KH_CONSTANT("crash")] = true,
			[KH_CONSTANT("kick")] = true,
			[KH_CONSTANT("BadMemes")] = true
		}

		local oldnc
		oldnc = hookmetamethod(game, "__namecall", function(self, ...)
			SX_VM_CNONE()
			local args = {...}
			local method = getnamecallmethod()

			if self == LogService and method == "GetLogHistory" and not checkcaller() then
				return {unpack(cache)}
			elseif self.ClassName == "RemoteEvent" and method == "FireServer" then
				if self == DynamicStuff.CharacterRemote and (Settings.NoFallDamage and (args[1] == "FlllD" or args[1] == "FllH") or Settings.NoRagdoll and args[1] == DynamicStuff.RagdollArg) then
					return
				elseif self.Name == "leechesstayleechesHBE" then
					return
				elseif self.Name == "GZ_S" and Settings.SilentAim and Settings.InstantHit and getmetatable(args[6]) and data.gunHitSalt then
					local shotData = getmetatable(args[6])
					if shotData.canHit and data.Bullets[ args[2] ] and DynamicStuff.GunHitRemote then
						debugwarn("instant hit go brrr")
						setnamecallmethod(method)
						oldnc(self, ...)
						SecureFireServer(DynamicStuff.GunHitRemote, DynamicStuff.GunHitGibberish, data.gunHitSalt(), args[3], args[2], data.Bullets[ args[2] ], shotData.target, shotData.pos, Vector3.new())
						--data.Bullets[args[2]] = nil --TODO: reimplement in a way which won't break Gun_Hit hook below
						return
					else
						debugwarn("sry no instant hit cuz", args[1], data.Bullets[ args[2] ])
						data.Bullets[ args[2] ] = nil
					end
				elseif self == DynamicStuff.GunHitRemote and Settings.SilentAim and Settings.InstantHit then --block the normal hit
					if data.Bullets[ args[4] ] then
						return
					end
				elseif self.Parent == game.JointsService and detectionStrings[ args[3] ] then
					debugwarn("nc detection report from", debug.traceback(), select(3, ...))
					KillCheck()
					return Instance.new("BindableEvent").Event:Wait()
				end
			elseif self == plr and method == "Kick" and not checkcaller() then
				debugwarn("nc kick from", debug.traceback())
				game:GetService("ScriptContext"):SetTimeout(1)
				return Instance.new("BindableEvent").Event:Wait()
			elseif method == "GetState" and Settings.InstantPickup and data.PickupRemote then
				local funcsNames = {"ToolDropCheck", "CashDropCheck", "ScrapDropCheck"}
				if table.find(funcsNames, debug.getinfo(3).name) then
					local pickup
					for i,v in pairs(getupvalues(3)) do
						if type(v) == "table" and v.ToolDropCheck then
							for _,name in pairs(funcsNames) do
								if not is_synapse_function(v[name]) then
									local old = v[name]
									v[name] = function(...)
										if Settings.InstantPickup then
											local ret = {old(...)}
											if type(ret[1]) == "table" then
												for i,v in pairs(ret[1]) do
													v[1] = true
													v[2] = 0
													--v[6] = data.PickupRemote
													--v[7] = {v[3]}
													--v[8] = pickup
												end
											end
											return unpack(ret)
										end
										return old(...)
									end
								end
							end
						elseif type(v) == "table" and v.pickup then
							pickup = v.pickup
						end
					end
					return Enum.HumanoidStateType.Climbing
				end
			elseif method == "BulkMoveTo" and self == workspace and not isSnitch then
				return --gg
			end
			setnamecallmethod(method)
			return oldnc(self, ...)
		end)

		local old
		old = hookfunc(Instance.new("RemoteEvent").FireServer, function(self, ...)
			local args = {...}
			if detectionStrings[args[3]] then
				debugwarn("hk detection report from", debug.traceback(), select(3, ...))
				return Instance.new("BindableEvent").Event:Wait()
			end
			return old(self, ...)
		end)
		UpdateFSHookFuncs(old)
	end

	local GetTarget = ESP.GetTarget(Settings, GetEnemies)
	Settings.GetTarget = GetTarget
	Settings.IgnoreList = {workspace:FindFirstChild("Filter"), workspace:FindFirstChild("Debris")}

	--no ragdoll, inf stamina--
	do
		local _G = getrenv()._G
		local realIdx
		local function ApplyMods()
			if _G.RagdollChar and not is_synapse_function(_G.RagdollChar) then
				local old = _G.RagdollChar
				_G.RagdollChar = function(...)
					if Settings.NoRagdoll then
						return debugwarn("haha poop")
					end
					return old(...)
				end
			end

			if _G.S_Get then
				--stupid anti exploit bypass--
				local tbl = unwrap(getupvalue(getupvalue(_G.S_Take, 1), 6)) --_G.S_Take calls a function (u28) which calls the detect function (u22) at the bottom
				if not is_synapse_function(tbl.B) and not isSnitch then --they changed it to a proxied table with B field
					hookfunc(tbl.B, function() --:feelsbad:
						debugwarn("kick from", debug.traceback())
						return Instance.new("BindableEvent").Event:Wait()
					end)
				end

				--inf stamina--
				local f = getupvalue(_G.S_Get, 1) --u24, returns the S fields of two tables
				local tbl = getupvalue(f, 1)
				if not getmetatable(tbl) then
					local real = tbl.S or 100
					setmetatable(tbl, {
						__index = function(self, i)
							if i == "S" then
								return real
							end
							return nil
						end,
						__newindex = function(self, i, v)
							if i == "S" then
								if (Settings.InfSprint or Settings.StaminaBypass) --[[and v < real]] then
									--only punching and regenerating should take stamina
									local consts = getconstants(3)
									if FIT(consts, "CrouchWalkSpeed") then
										return
									end
									local moreConsts = debug.validlevel(4) and getconstants(4) or {} --this line errors when called from crouch caller (line 3876 in XIIX) for some reason? and the game pcalls it so i can't find out why, that's why there's the if statement above
									local punchCaller = (consts[1] == "type" and consts[3] == "number" and not table.find(moreConsts, "doorKickCode"))
									local regenCaller = debug.getinfo(3).name == "RSF" --[[table.find(consts, "CharF") and table.find(consts, "NRG") and table.find(consts, "NRG") and table.find(consts, "Grabbing")]] --note to self: if stamina regen breaks again then this likely changed (func u233 in XIIX)
									local validCaller = punchCaller or regenCaller
									--[[
										if not called from punch or regen handler then dont subtract, aka the constants are of the functions which should subtract, also don't subtract if it's from punch
										also don't subtract if the user explicitly enabled it to work with everything (Settings.PunchInfStamina)
									]]
									if Settings.InfSprint and not validCaller or Settings.StaminaBypass and validCaller or (Settings.InfSprint and Settings.PunchInfStamina and not regenCaller) then
										--[[
										Sprinting tries to subtract the stamina, and I only hook the table's __newindex and not the function itself (because setupvalue)
										and there's a dummy NumberValue which's Changed starts stamina regen in 1.25 seconds unless called again
										so it kept getting invoked because I only hooked the table field
										Solution: change u26 to a dummy table, then reset it when it tries to change the value]]

										--also note to self: the level 2 caller of this is supposed to be S_Take located in XIIX (the xxxCaller variables check lvl 3 or 4)

										local func = debug.getinfo(2).func --needed cuz can't use lvl 2 in __newindex below since it's a different caller
										for i,v in pairs(getupvalues(func)) do
											if typeof(v) == "Instance" and v.ClassName == "NumberValue" then
												setupvalue(func, i, setmetatable({}, {
													__newindex = function()
														if not isSnitch then
															setupvalue(func, i, v)
														end
													end
												}))
												break
											end
										end
										return
									end
								end
								real = v
							else
								rawset(self, i, v)
							end
						end
					})
					rawset(tbl, "S", nil)
				end
			end

			--[[if realIdx and realIdx.gTag and not is_synapse_function(realIdx.gTag) then
				local old
				old = hookfunc(realIdx.gTag, function(part, arg, ...)
					if arg == "CTP" or arg == "AA_SP" then --noclip check bypass
						return Instance.new("BindableEvent").Event:Wait()
					end
					return old(part, arg, ...)
				end)
				debugprint("hooked gTag")
			end]]
		end
		realIdx = {
			DoorOpenCheck = _G.DoorOpenCheck,
			VM = _G.VM,
			gTag = _G.gTag,
			_fd9ufds90wjaidjf = _G._fd9ufds90wjaidjf,
			TTT = _G.TTT,
			CheckIfCan = _G.CheckIfCan
		}
		setmetatable(getrenv()._G, {
			__newindex = function(self, i, v)
				if i == KH_CONSTANT("DoorOpenCheck") then
					realIdx.DoorOpenCheck = v
					
					for i,v in pairs(getupvalues(2)) do
						if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
							--[[local tbl = LuauFind(getupvalues(v), "HZI384382", true)
							for i,v in pairs(getupvalues(v)) do
								if typeof(v) == "userdata" and unwrap(v).HZI384382 then
									hitTbl = unwrap(v)
									hitFunc = hitTbl.HZI384382
									debugwarn("grabbed new", hitFunc)
									return
								end
							end]]

							for i,v in pairs(getupvalues(v)) do
								if typeof(v) == "userdata" and type(unwrap(v)) == "table" then
									for i,w in pairs(unwrap(v)) do
										if type(w) == "function" and islclosure(w) and not is_synapse_function(w) and table.find(getconstants(w), KH_CONSTANT("MultipleHits")) then
											hitTbl = unwrap(v)
											hitFunc = w
											debugwarn("grabbed new", hitFunc)
											return
										end
									end
								end
							end
						end
					end
				elseif i == "VM" then
					realIdx.VM = v
				elseif i == "gTag" then
					realIdx.gTag = v
				elseif i == "_fd9ufds90wjaidjf" then --for instant hit
					realIdx._fd9ufds90wjaidjf = v
				elseif i == "TTT" then --fire rate, the _G.TTT is set right at the top of GunClient's Activate() function
					realIdx.TTT = v

					if Settings.FireRate or Settings.InstantReload then
						local caller = debug.getinfo(2).func
						local fireRateIdx
						local gunSettings = getupvalue(2, 12)
						if gunSettings and typeof(gunSettings) == "userdata" then --it's the proxied table remember
							local mt = getrawmetatable(gunSettings)
							local real = mt.__index

							if type(real) == "table" or (type(real) == "function" and not is_synapse_function(real)) then
								local realFireRate = gunSettings.FireRate
								local realReloadTime = gunSettings.ReloadTime
								mt.__index = function(self, i)
									if i == "FireRate" then
										return Settings.FireRate and Settings.FireRateVal or realFireRate
									elseif i == "ReloadTime" then
										return Settings.InstantReload and 0 or realReloadTime
									elseif i == "MinigunEnabled" and debug.getinfo(2).func == caller then --for Auto guns because they use the cached upvalue
										if not fireRateIdx then
											fireRateIdx = FIT(getupvalues(2), realFireRate) --42
										end

										if fireRateIdx then
											setupvalue(2, fireRateIdx, Settings.FireRate and Settings.FireRateVal or realFireRate)
										end
									end
									return real[i]
								end

								if real.FireModeSettings and not getmetatable(real.FireModeSettings) then
									local realSemiRate, realBurstRate = real.FireModeSettings.SemiRate, real.FireModeSettings.BurstRate
									setmetatable(real.FireModeSettings, {
										__index = function(self, i)
											if i == "SemiRate" then
												return Settings.FireRate and Settings.FireRateVal or realSemiRate
											elseif i == "BurstRate" then
												return Settings.FireRate and Settings.FireRateVal or realBurstRate
											end
											return nil
										end
									})
									real.FireModeSettings.SemiRate = nil
									real.FireModeSettings.BurstRate = nil
								end
							end
						end
					end
				elseif i == "CheckIfCan" then
					realIdx.CheckIfCan = v
				else
					rawset(self, i, v)
				end
				ApplyMods()
			end,
			__index = function(self, i)
				if i == "VM" and debug.getinfo(2).name == "Shoot" then
					debugprint("indexed VM from shoot")
					for i,v in pairs(getupvalues(2)) do
						if type(v) == "function" and islclosure(v) and debug.getprotos(v)[2] and table.find(getconstants(debug.getproto(v, 2)), "AngleZ_Max") and not is_synapse_function(v) then
							--[[setupvalue(2, i, function(...)
								if Settings.NoRecoil then
									return
								end
								return v(...)
							end)]]
							debugwarn("spoofed")
							for i,v in pairs(getupvalues(v)) do
								if type(v) == "table" and v.accelerate and not is_synapse_function(v.accelerate) then
									local old = v.accelerate
									v.accelerate = function(self, v3)
										local mul = Settings.CustomRecoil and Settings.CustomRecoilVal or 100
										mul = mul / 100

										if isSnitch then
											mul = 3
										end
										return old(self, Vector3.new(mul * v3.X, mul * v3.Y, mul * v3.Z))
									end
								end
							end
							break
						end
					end
				elseif i == "_fd9ufds90wjaidjf" and not data.gunHitSalt then
					for i,v in pairs(getupvalues(2)) do
						if typeof(v) == "userdata" and unwrap(v).cg then
							debugprint("got gunhit cg")
							data.gunHitSalt = unwrap(v).cg
							break
						end
					end
				elseif i == KH_CONSTANT("CheckIfCan") then
					if Settings.InstantEquip then
						local info = debug.getinfo(2)
						if info.name == "Equip" and (info.short_src:find("MeleeClient") or info.short_src:find("GunClient")) then
							local found = true
							for i,v in pairs(getupvalues(2)) do
								if typeof(v) == "userdata" then
									local real = unwrap(v)
									if real and type(real) == "table" and real.EquipTime then
										found = true
										
										--cache original stat--
										if not FistsStatsCache[real] then
											FistsStatsCache[real] = {}
										end
										if not FistsStatsCache[real].EquipTime then
											FistsStatsCache[real].EquipTime = real.EquipTime
										end

										--now replace it--
										real.EquipTime = 0
										break
									end
								end
							end
							if not found then
								debugwarn("[ERROR]: didn't find equip tool data of", info.short_src)
							end
						end
					end
				end
				return realIdx[i]
			end
		})
		rawset(_G, "DoorOpenCheck", nil)
		rawset(_G, "VM", nil)
		rawset(_G, "gTag", nil)
		rawset(_G, "_fd9ufds90wjaidjf", nil)
		rawset(_G, "TTT", nil)
		rawset(_G, "CheckIfCan", nil)
		ApplyMods()

		coroutine.wrap(function()
			game.ReplicatedStorage:WaitForChild("Events2"):WaitForChild("StaminaChange").Event:Connect(ApplyMods)
		end)()
	end

	--no jump cooldown--
	do
		local old
		old = hookfunc(getrenv().time, function()
			if Settings.NoJumpCooldown and not checkcaller() then
				local consts = getconstants(3)
				if FIT(consts, "SetStateEnabled") and consts[1] == "Jump" and FIT(consts, "Crouching") then
					setupvalue(3, 4, 0) --or v377 < u161 + 1
					return 1
				end
			end
			return old()
		end)
	end

	--remotes--
	coroutine.wrap(function()
		data.PickupRemote = not isSnitch and game.ReplicatedStorage.Events:WaitForChild(DynamicStuff.PickupPilesRemoteName)
	end)()

	--inf jump--
	game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
		if Settings.InfJump and not gp and iobj.KeyCode == Enum.KeyCode.Space then
			local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
			if hrp then
				local vel = hrp.Velocity
				hrp.Velocity = Vector3.new(vel.X, 50, vel.Z)
			end
		end
	end)

	--silent aim & instant reload--
	coroutine.wrap(function()
		--[[local temp
		for i,v in pairs(getgc(true)) do
			if type(v) == "table" and rawget(v, "ONRH_S4") then
				temp = v
				break
			end
		end]]

		local effects = require(game.ReplicatedStorage:WaitForChild("Modules"):WaitForChild(KH_CONSTANT("Effects")))
		local old = effects.Effect
		effects.Effect = function(self, type, ...)
			local args = {...}
			if type == "Shoot" and Settings.SilentAim and plr.Character and plr.Character:IsAncestorOf(args[4]) then
				local target, char = GetTarget(true)
				if target then
					debugprint("validator:", Settings.AimbotValidator())

					local trj, t = Aimbot:_solveTime(args[5], Aimbot.BulletSpeed, target.Position, -Aimbot.Gravity)
					debugprint("trj", trj)
					debugprint("time", t)
					local predictedPos = target.Position + target.AssemblyLinearVelocity * t
					local pos = fakeSpread(predictedPos, char, false)
					for i,v in pairs(args[6]) do
						args[6][i] = CFrame.new(args[5], pos).lookVector--CFrame.new(args[5], pos).lookVector
					end

					--[[char.Archivable = true
					local shadow = char:Clone()
					char.Archivable = false
					shadow.Humanoid:Destroy()
					for i,v in pairs(shadow:GetDescendants()) do
						if v:IsA("LuaSourceContainer") then
							v:Destroy()
						elseif v:IsA("BasePart") then
							v.Anchored = true
							v.BrickColor = BrickColor.Blue()
							v.CanCollide = false
						end
					end
					shadow.Parent = workspace.CurrentCamera
					game.Debris:AddItem(shadow, 5)

					local old = temp.ONRH_S4
					temp.ONRH_S4 = function(...)
						local args2 = {...}

						local p = Instance.new("Part")
						p.Anchored = true
						p.CanCollide = false
						p.Transparency = 0.5
						p.BrickColor = BrickColor.Red()
						p.Size = Vector3.new(0.5, 0.5, (args[5] - args2[5]).magnitude)
						p.CFrame = CFrame.new(args[5], args2[5]) * CFrame.new(0,0,-(args[5] - args2[5]).magnitude/2)
						p.Parent = workspace
						game.Debris:AddItem(p, 5)

						char.Archivable = true
						local shadow = char:Clone()
						char.Archivable = false
						shadow.Humanoid:Destroy()
						for i,v in pairs(shadow:GetDescendants()) do
							if v:IsA("LuaSourceContainer") then
								v:Destroy()
							elseif v:IsA("BasePart") then
								v.Anchored = true
								v.BrickColor = BrickColor.Green()
								v.CanCollide = false
							end
						end
						shadow.Parent = workspace.CurrentCamera
						game.Debris:AddItem(shadow, 5)
						temp.ONRH_S4 = old
						return old(...)
					end]]
				end
			end
			return old(self, type, ...)
		end

		local fastCast = require(game.ReplicatedStorage:WaitForChild("Modules"):WaitForChild(KH_CONSTANT("FastCastRedux")))
		local old = fastCast[KH_CONSTANT("FireWithBlacklist")]
		fastCast.FireWithBlacklist = function(self, ...)
			local args = {...}
			if args[1].fc[1] then
				debugprint("fired", args[1].fc[1], args[1].fc[2])
				if Settings.InstantHit then
					data.Bullets[args[1].fc[1]] = args[1].fc[2]
				end
				if Settings.Wallbang then
					table.insert(args[5], workspace.Map)
				end
			end
			return old(self, ...)
		end
	end)()

	--fullbright--
	do
		local old = {}
		old[1] = hookmetamethod(game, "__newindex", loadstring([[
			local old, Settings, lighting = ...

			return function(self, i, v)
				if self == lighting and i == "Ambient" and Settings.Fullbright and not checkcaller() then
					return
				end
				return old[1](self, i, v)
			end
		]])(old, Settings, game.Lighting))
	end

	--staff alert--
	local function IsStaff(p)
		if p:GetRankInGroup(4165692) >= (Settings.StaffTesters and 2 or 3) then
			local time = os.date("*t")
			time.min = time.min < 10 and "0" .. time.min or time.min
			if Settings.StaffAlert then
				game:GetService("StarterGui"):SetCore("SendNotification", {
					Title = "KiriotHub",
					Text = "Game staff joined: " .. p.Name,
					Icon = "rbxassetid://4698324000",
					Duration = 69,
					Button1 = "no u"
				})
			end
			if Settings.StaffKick then
				plr:Kick("\n[KiriotHub] Game staff joined: " .. p.Name .. "\nAt " .. time.hour .. ":" .. time.min)
			end
			return true
		end
		return false
	end
	CheckStaff = function()
		local res = false
		for i,v in pairs(game.Players:GetPlayers()) do
			local s,e = pcall(IsStaff, v)
			if s and e then
				res = true
			end
		end
		return res
	end
	game.Players.PlayerAdded:Connect(IsStaff)

	--auto lockpick by wally (ugly code jk)
	do
		plr.PlayerGui.ChildAdded:Connect(function(object)
			if object.Name == 'LockpickGUI' and Settings.AutoLockpick then
				game:GetService('RunService').Heartbeat:Wait()
	
				local tool = plr.Character:FindFirstChildWhichIsA('Tool');
				local uses = tool and tool:FindFirstChild('Uses')
	
				if (uses and uses.Value <= uses.MaxValue) and tool.Name == 'Lockpick' then
					wait()
	
					local client = tool:WaitForChild('LP_Client', 3)
					if (not client) then return end
	
					local env = getsenv(client);
					local fn = rawget(env, 'MainHandler')
	
					syn.set_thread_identity(2)
					for _, fn in next, getreg() do
						if type(fn) == 'function' and islclosure(fn) and getinfo(fn).source:find('LP_Client', 1, true) then
							for _, upv in next, getupvalues(fn) do
								if type(upv) == 'function' then
									if debug.info(upv, 'n') == 'DoneBar' then
										local count = getupvalues(upv)[5] 
										if type(count) ~= 'number' then count = 0 end
										
										for i = 1, count do
											task.spawn(upv, UDim2.new())
											if not Settings.InstantAutoLockpick then
												wait(5/count)
											else
												wait()
											end
										end
									end
								end
							end
						end
					end
					syn.set_thread_identity(7)
				end
			end
		end)
	end

	--Refreshing Silent Aim Whitelist--
	spawn(function()
		local function Refresh()
			UiTbl.wlList:Clear()
			UiTbl.offlineList:Clear()
			
			local list = {}
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v ~= plr then
					list[#list + 1] = v
				end
			end
			table.sort(list, function(a,b)
				return a.Name:lower() < b.Name:lower()
			end)
			
			for i,v in pairs(list) do
				local new
				new = UiTbl.wlList:Button(v.Name, function()
					Settings.Extra.Whitelist[v.Name] = Settings.Extra.Whitelist[v.Name] == nil and true or nil
					if Settings.Extra.Whitelist[v.Name] then
						new:SetButtonColor(Color3.fromRGB(29,207,115))
					else
						new:SetButtonColor(Color3.fromRGB(255, 170, 0))
					end
					NewLib:RaiseGlobalClickEvent()
				end, UDim2.new(1,-10,0,22))
				
				if Settings.Extra.Whitelist[v.Name] then
					new:SetButtonColor(Color3.fromRGB(29,207,115))
				end
			end

			local offlineList = {}
			for i,v in pairs(Settings.Extra.Whitelist) do
				if not game.Players:FindFirstChild(i) then
					offlineList[#offlineList + 1] = i
				end
			end
			table.sort(offlineList, function(a,b)
				return a:lower() < b:lower()
			end)

			for i,v in pairs(offlineList) do
				UiTbl.offlineList:Button(v, function()
					Settings.Extra.Whitelist[v] = nil
					NewLib:RaiseGlobalClickEvent()
					Refresh()
				end, UDim2.new(1,-10,0,22)):SetButtonColor(Color3.fromRGB(29,207,115))
			end
		end
		
		game:GetService("Players").PlayerAdded:Connect(Refresh)
		game:GetService("Players").PlayerRemoving:Connect(function(p)
			Settings.Extra.Whitelist[p.Name] = nil
			Refresh()
		end)
		Refresh()

		local locations = {
			{Name = "Vibe Check", Pos = Vector3.new(-4810.31640625, -192.10052490234375, -887.3013305664062)},
			{Name = "Subway", Pos = Vector3.new(-4779.81640625, -81.10052490234375, -829.8013305664062)},
			{Name = "Garage", Pos = Vector3.new(-4044.75390625, 12.285547256469727, -279.4769592285156)},
			{Name = "Hideout", Pos = Vector3.new(-4701.1650390625, 21.335548400878906, -961.7963256835938)},
			{Name = "Subway", Pos = Vector3.new(-4740.44091796875, -25.850584030151367, -731.6263427734375)},
			{Name = "CafÃ©", Pos = Vector3.new(-4646.537109375, 11.435546875, -267.8591003417969)},
			{Name = "?", Pos = Vector3.new(-4279.51220703125, -96.4444580078125, -814.1090087890625)},
			{Name = "Warehouse", Pos = Vector3.new(-4628.5810546875, 19.540014266967773, -562.5740966796875)},
			{Name = "Illegal Pizza", Pos = Vector3.new(-4408.57666015625, 22.944652557373047, -130.78907775878906)},
			{Name = "Gas station", Pos = Vector3.new(-4430.6611328125, 4.435545921325684, 194.0381317138672)},
			{Name = "Factory", Pos = Vector3.new(-4410.5087890625, 21.852352142333984, -575.6071166992188)},
			{Name = "The Pit", Pos = Vector3.new(-4065.80517578125, -172.89939880371094, -277.5714111328125)},
			{Name = "Garage-Hideout #1", Pos = Vector3.new(-4493.9775390625, 28.135547637939453, -262.5434875488281)},
			{Name = "Tower", Pos = Vector3.new(-4484.21435546875, 66.63631439208984, -833.1181030273438)},
			{Name = "Garage", Pos = Vector3.new(-4499.8369140625, 12.285547256469727, -939.8590698242188)},
			{Name = "Workshop", Pos = Vector3.new(-4260.35595703125, 27.2650146484375, -615.8740844726562)},
			{Name = "Hideout", Pos = Vector3.new(-4421.47412109375, 30.885549545288086, -43.47349166870117)},
			{Name = "Junkyard", Pos = Vector3.new(-3857.536865234375, 45.88555145263672, -543.9591064453125)},
			{Name = "Thrift Store", Pos = Vector3.new(-4659.74609375, 29.14801025390625, -152.59873962402344)},
			{Name = "?", Pos = Vector3.new(-4697.46240234375, -143.6444549560547, -869.3590087890625)},
			{Name = "Garage-Hideout #2", Pos = Vector3.new(-3814.728759765625, 28.135547637939453, -392.33807373046875)},
			{Name = "Armory", Pos = Vector3.new(-4796.78369140625, 6.402352333068848, -374.2071228027344)},
			{Name = "Armory", Pos = Vector3.new(-4770.38330078125, 6.402352333068848, -392.73211669921875)},
			{Name = "Armory", Pos = Vector3.new(-4176.86083984375, 6.4023518562316895, -186.3302459716797)},
			{Name = "Armory", Pos = Vector3.new(-4152.66064453125, 6.4023518562316895, -191.68023681640625)},
			{Name = "Dodge Kid Van", Pos = Vector3.new(-4495.63720703125, 3.5355467796325684, -293.7591247558594)}
		}
		table.sort(locations, function(a,b)
			return a.Name < b.Name
		end)
		local buttons = {}
		local offsets = {
			["Vibe Check"] = Vector3.new(40, 0, 0)
		}
		local function RefreshTPLocationsList()
			UiTbl.tpsList:Clear()
			table.clear(buttons)

			for i,v in pairs(locations) do
				v.Pos = v.Pos + (offsets[v.Name] or Vector3.new())
				local btn = UiTbl.tpsList:Button(v.Name, function()
					Teleport(CFrame.new(v.Pos))
				end)
				table.insert(buttons, {Pos = v.Pos, Button = btn})
			end
		end
		
		workspace:WaitForChild("Filter"):WaitForChild("CombatZones").ChildAdded:Connect(RefreshTPLocationsList)
		RefreshTPLocationsList()

		while true do
			for i,v in pairs(buttons) do
				if plr:DistanceFromCharacter(v.Pos) >= 100 then
					v.Button:SetButtonColor(Color3.fromRGB(73, 81, 95))
					v.Button.Label.TextColor3 = Color3.fromRGB(142, 143, 147)
				else
					v.Button:SetButtonColor(Color3.fromRGB(255, 170, 0))
					v.Button.Label.TextColor3 = Color3.new(1,1,1)
				end
			end
			wait(1)
		end
	end)

	--ESP--
	do
		local toInit = {
			Dealers = true,
			ATMs = true,
			Safes = true,
			Scraps = true,
			Tools = true
		}

		local dealers = {};
		
		local function initDealerTracker(parent)
			local displayNameMap = {}
			local items = {} do
				local itemStorage = game:GetService('ReplicatedStorage'):WaitForChild('Storage'):WaitForChild('ItemStats');
				for _, item in next, itemStorage:GetChildren() do
					for _, obj in next, item:GetChildren() do
						local realName = obj:FindFirstChild('DisplayName').Value;
						local forSale = obj:FindFirstChild('ForSale');

						local stores = obj:FindFirstChild('SellStations');
						local isSold = (stores and stores:FindFirstChild('IllegalStore'))

						if (forSale and forSale.Value) and isSold and (not table.find(items, obj.Name)) then
							displayNameMap[realName] = obj.Name;
							displayNameMap[obj.Name] = realName;

							if (not table.find(items, obj.Name)) then
								table.insert(items, realName)
							end
						end
					end
				end
			end
			
			for i, dealer in next, parent:GetChildren() do
				local stocks = dealer:FindFirstChild('CurrentStocks');
				if stocks then
					dealers[dealer] = {}

					for _, item in next, stocks:GetChildren() do
						dealers[dealer][item.Name] = item.Value;
						
						item:GetPropertyChangedSignal('Value'):connect(function()
							dealers[dealer][item.Name] = item.Value;
						end)
					end
				end
			end

			Settings.ItemData = items;
			Settings.ItemMap = displayNameMap;
		end

		local function InitObjectsESP(c)
			if c.ClassName ~= "Model" then
				return
			end

			if toInit.Dealers then
				if c.Name == "Dealer" or c.Name == "ArmoryDealer" then
					toInit.Dealers = false
					Settings.DealersParent = c.Parent
					initDealerTracker(c.Parent)
					ESP:AddObjectListener(c.Parent, {
						Type = "Model",
						Name = "Dealer",
						IsEnabled = function(box)
							if ESP.Dealers then
								local dealer = box.Object
								if Settings.DealerItem and dealer and dealers[dealer] then									
									local stock = dealers[dealer][Settings.DealerItem]
									if (stock or 0) > 0 then
										box.Name = 'Dealer [' .. Settings.ItemMap[Settings.DealerItem] .. ' (' .. stock  .. ')]'
									else
										box.Name = 'Dealer'
									end
									return (stock or 0) > 0
								end
								box.Name = 'Dealer'
								return (box.Distance or (workspace.CurrentCamera.CFrame.p - box.PrimaryPart.Position).magnitude) <= ESP.DealersDistance
							end
						end,
						ColorDynamic = function()
							if Settings.DealerItem then
								return Color3.fromRGB(255, 61, 61)
							end
							return Color3.fromRGB(14, 232, 54)
						end
					})
				end
			end

			if toInit.ATMs then
				if c.Name == "ATM" then
					toInit.ATMs = false
					Settings.ATMsParent = c.Parent
					ESP:AddObjectListener(c.Parent, {
						Type = "Model",
						CustomName = "ATM",
						IsEnabled = function(box)
							return ESP.ATMs and (box.Distance or (workspace.CurrentCamera.CFrame.p - box.PrimaryPart.Position).magnitude) <= ESP.ATMsDistance
						end,
						Color = Color3.fromRGB(0, 200, 255)
					})
				end
			end

			if toInit.Safes then
				if c.Name:find("SmallSafe") or c.Name:find("Register") then
					toInit.Safes = false
					Settings.SafesParent = c.Parent
					ESP:AddObjectListener(c.Parent, {
						Type = "Model",
						IsEnabled = function(box)
							if ESP.Safes then
								local obj = box.PrimaryPart.Parent
								if obj:FindFirstChild("Values") and obj.Values:FindFirstChild("Broken") and not obj.Values.Broken.Value then
									return (box.Distance or (workspace.CurrentCamera.CFrame.p - box.PrimaryPart.Position).magnitude) <= ESP.SafesDistance
								end
							end
							return false
						end,
						PrimaryPart = "MainPart",
						Color = Color3.fromRGB(214, 17, 208)
					})
				end
			end
		end
		
		workspace:WaitForChild("Map").DescendantAdded:Connect(InitObjectsESP)
		for i,v in pairs(workspace.Map:GetDescendants()) do
			InitObjectsESP(v)
		end

		local scrapsIds = {
			["6507306414"] = true,
			["6507306429"] = true
		}
		local toolsIds = { --TODO: CHECK FOR DUPLICATE IDS!!!!!!!!!!!!!!!!!!, for example all grenades are the same
			["AKM"] = {"8648471176", "8648467550", "8648480993", "8648474594", "8648473589"},
			["AKS-74U"] = {"8373296137", "8373297178", "8373294267", "8373301410"},
			["AR2"] = {"6345879210", "6345879226", "6345878847"},
			["Airstrike"] = {"9780143159"},
			["Antidote/Rage Potion"] = {"6345879402"},
			["BBaton"] = {"6906000127", "6906000009", "6905999837"},
			["BFG-1"] = {"9755222071", "9755225438", "9755226227", "9755224381", "9755223578"},
			["Balisong"] = {"6916104437", "6916105074", "6916105609", "6916107070"},
			["Bandage"] = {"6345879153"},
			["Barrett"] = {"6345880280", "6345880295", "6345879472", "6345879357", "6345887207", "6345902995", "6345878892", "6345879247", "6345887223", "6345887146", "6345879861", "6345879568", "6345879979", "6345887210", "6345887154", "6345879238", "6345880124", "6345878228"},
			["Bat"] = {"8501623650"},
			["Battery"] = {"10960376634"},
			["Bayonet"] = {"8501336810"},
			["Beretta"] = {"8311209510", "8311210731", "8311211346", "8311208397"},
			["BlackBayonet"] = {"6345879111", "6345879312"},
			["Blueprint"] = {"11063783134"},
			["C4"] = {"9029379810", "9029383755", "9029381651"},
			["Chainsaw"] = {"8975634331", "9029336021", "9029306292", "9029307828", "9029312540", "9029317256", "9029319779", "9029321729", "9029324026", "9029325762", "9029328305"},
			["Chips"] = {"10958157078", "11378903217"},
			["Chocolate Bar"] = {"10952783750"},
			["Cloth"] = {"10960799069"},
			["Cola"] = {"10950124292", "10950125652"},
			["Crowbar"] = {"8999004640"},
			["CursedDagger"] = {"7806372803"},
			["Deagle"] = {"8373277699", "8373221756", "8373279536", "8373280856"},
			["DixieGun"] = {"6345887221", "6345879124", "2472951126", "6345879636", "6345879894", "6345879925"},
			["Documents"] = {"11134386740"},
			["Dogtag"] = {"11108114936"},
			["ERADICATOR"] = {"6345878919", "6345879173", "6345879035"},
			["FNP-45"] = {--[["8004616668",]] "9170853190", "9170851624", "9170852685", "9170850029", "9170851076", "9170853588", "9170852119"},
			["FN-FAL"] = {"8686476113", "8686470141", "8686472580", "8686477616"},
			["Fire-Axe"] = {"8501360449"},
			["Fists"] = {},
			["Flamethrower"] = {"6345878143"},
			["Flashbang"] = {"9029278236", "9029279786", "9029276496"},
			["G-17/18"] = {"8302677638", "8302676520", "8302678913"},
			["G-17"] = {}, --see above
			["G-18"] = {}, --see above
			["Golfclub"] = {"6345879770", "6963260584"},
			["Grenade"] = {"9029331092", "9029333272", "9029344626", --[[other grenade types:]] "9029118683", "9029121912", "9029122945"},
			["Gunpowder"] = {"10960607861"},
			["HL-MK"] = {"7797975657", "7797966292", "7797967968", "7797977512", "7797970779"},
			["Hammer"] = {"6345879463"},
			["Ithaca-37"] = {"8359602375", "8359601953"},
			["Jerrycan"] = {"11089381587"},
			["Katana"] = {"8501367185"},
			["Keytool"] = {"11101087736"},
			["Knuckledusters"] = {"8501344937", "8501344937"},
			["Lighter"] = {"9082971560"},
			["Lockpick"] = {"6345879066", "6345879271"},
			["M1911"] = {"8969980449", "8969981592", "8969983515", "8969974903", "8969972509", "8969981592"},
			["M320"] = {"8657672869", "8657661705", "8657674701", "8657674140", "8657659120"},
			["M4A1-1"] = {"8622492611", "8622487555", "8622488370", "7193104144", "8622491702", "8622485949", "8622489339", "8622493728"},
			["MAC-10"] = {"8358094024", "8358094656", "8358093050"},
			["MGL"] = {"6507308847", "6507308858", "6507308826", "6507308834", --[["6345879224", "6345878944", "6345885349"]]},
			["MP7"] = {"8434177000", "8434177000", "8434175515", "8434174485", "8434179546", "8434176289", "8434177639"},
			["Machete"] = {"8501372422"},
			["Magnum"] = {"7193327827", "7193338088", "8379177333", "8379178521", "7193327827", "7193327827", "8379179282"},
			["Mare"] = {"8350209611", "8350210610", "7988168771", "8350211256", "8350209132"},
			["Medkit"] = {"6345879393"},
			["Metal-Bat"] = {"8501397215"},
			["Military Cable"] = {"11086711374"},
			["Molotov"] = {"9028964777", "9082970192", --[["9082971560"]]},
			["Nunchucks"] = {"8975599381", "8975599381", "8975599381", "8975599381", "8975599381", "8975599381", "8975599381", "8975600736", "8975600736", "8975599381", "8975599381"},
			["ODEN"] = {"6345880044", "6345879075", "6345880137", "6345879423", "6345879715", "6703547750", "6345880236", "6345879406", --[["6345879224",]] --[["6345885349", "6345878944",]] "6345879481", "6345879237", "6345879694", "6345879735", "6345880142", "6345880023", "6345879530", "8004616726"--[[, "8004616668"]]},
			["OLDM_ARE"] = {"7193373406", "7193372829", "7193374966", "7193372000", "7193374313"},
			["_OLD_SlayerSword"] = {"6345879835"},
			["Panzerfaust-3"] = {"6507308779", "6507308828", "6345879901"},
			["Pepper-spray"] = {"6345879366"},
			["RPG-7"] = {"8666592018", "8666591037", "8666592018"},
			["RR_Radio"] = {"6345879461"},
			["Radio"] = {},
			["Rambo"] = {"8501557617"},
			["RayGun"] = {"11601641812", "11601643329", "11601644051", "11601644614", "11601639729", "11601646959", "11586095392", "11586136073", "11586136618"},
			["RiotShield"] = {"6345880028", "6345880067", "6345880073", "6345879952"},
			["SBL-MK2"] = {"9216982216", "9216983068", "9216981098"},
			["SB-Launcher"] = {"6345879274", "6345880154", "6345880106", "6345879287", "6345879914"},
			["Sawn-Off"] = {"8329732372", "7192896442", "6345878914", "6345878914", "6345878914", "6345878914", "8329737977"},
			["Scout"] = {"6345879566", "6345887219", "431211373", "6345879579", "6345879513"},
			["Scythe"] = {"11314966782"},
			["SKS"] = {"9276258448", "9276261670", "9276261078", "9276259427", "9276260237"},
			["Shiv"] = {"8501573895"},
			["Shovel"] = {"8501593988"},
			["Skull Ring"] = {"11116486997"},
			["SlayerSword"] = {"8770127601", "8770127601", "8770127601", "8770127601"},
			["Snowball"] = {"6345879862"},
			["Splint"] = {"7370688049"},
			["Stun-Grenade"] = {"9029309094", "9029307997", "9029306256"},
			["Super-Shorty"] = {"8369737655", "8369738413", "7193503851", "8369736984"},
			["TEC-9"] = {"8389621240", "8389620604", "8389619923"},
			["Taiga"] = {"8501612347"},
			["Tommy"] = {"8586562504", "8586560101", "8586562504", "8586563934"},
			["UMP-45"] = {"8604624774", "8604623001", "8604634883", "8604622147", "8604623001"},
			["URM_Deagle"] = {"6345878065", "6345879278", "6345879141"},
			["UTS"] = {"6345879147", "6345879671", "6345887155", "6345878123", "6345879368", "6345879414", "8004616754", "8004616692", "6345880247"--[[, 8004616668]]},
			["Uzi"] = {"8417355116", "8417354151", "8417353134", "8417355116", "8417351591"},
			["Watch"] = {"11134285327"},
			["Weapon Parts"] = {"10967039555"},
			["Wires"] = {"10981462266"},
			["Wrench"] = {"8501636555"},	
			
			["M320-1"] = {},
			["M320-2"] = {},
			["GOD_UMP"] = {},
			["GOD_DEAGLE"] = {},
			["AUTO-PANZER"] = {},
			["RCU_Medkit"] = {},
			["RCU_Bandage"] = {},
			["RCU_Lockpick"] = {},
			["RCU_FNP-45"] = {},
			["RCU_RiotShield"] = {},
			["A-HL-MK3"] = {},
			["HL-MK2"] = {},
			["Antidote"] = {},
			["Rage-potion"] = {},
			["DarkRage"] = {},
			["ODEN-1"] = {},
			["ODEN-S"] = {},
			["CS-Grenade"] = {},
			["MS-Grenade"] = {},
			["Incendiary-Grenade"] = {},
			["Smoke-Grenade"] = {},
			["TheCure"] = {},
			["UTS-1"] = {},
			["UTS-S"] = {},
			["Cola_2"] = {},
			["val_Documents"] = {},
			["val_Watch"] = {},
			["Chips_1"] = {},
			["ChocBar_2"] = {},
			["val_Jerrycan"] = {},
			["val_Blueprint"] = {},
			["val_SkullRing"] = {},
			["val_MilitaryCable"] = {},
			["val_Keytool"] = {},
			["val_Cloth"] = {},
			["val_Battery"] = {},
			["val_Wires"] = {},
			["val_WeaponParts"] = {},
			["val_Dogtag"] = {},
			["val_Gunpowder"] = {},
			["val_Lighter"] = {},
			["PublicAirstrike"] = {},
			["Cola_1"] = {},
			["Chips_2"] = {},
			["ChocBar_1"] = {},
			["__Spitball"] = {},
			["PrecisionStrike"] = {}
		}
		local function InitFilterESP(c)
			if toInit.Scraps then
				if (c.ClassName == "Model" and c.Name:match("^S%d$")) or (c.ClassName == "MeshPart" and scrapsIds[c.MeshId:match("%d+")]) then
					toInit.Scraps = false
					Settings.ScrapsParent = c.ClassName == "MeshPart" and c.Parent.Parent or c.Parent
					debugwarn("found scraps", Settings.ScrapsParent:GetFullName())
					ESP:AddObjectListener(Settings.ScrapsParent, {
						Type = "Model",
						CustomName = "Scrap",
						IsEnabled = function(box)
							return ESP.Scraps and (box.Distance or (workspace.CurrentCamera.CFrame.p - box.PrimaryPart.Position).magnitude) <= ESP.ScrapsDistance
						end,
						Color = function(obj)
							return obj:FindFirstChild("MeshPart") and obj.MeshPart:FindFirstChild("Particle") and obj.MeshPart.Particle.Color.Keypoints[1].Value or Color3.fromRGB(3, 156, 16) --and obj.MeshPart.MeshId:match("%d+") == "1237207" and Color3.new(1,1,0) or Color3.fromRGB(3, 156, 16)
						end,
						PrimaryPart = function(obj)
							return obj:WaitForChild("MeshPart", 3)
						end
					})
				end
			end

			if toInit.Tools then
				if c.Name == "SpawnedTools" then
					toInit.Tools = false

					ESP:AddObjectListener(c, {
						Type = "Model",
						CustomName = function(obj)
							for i,v in pairs(obj:GetDescendants()) do
								if v.ClassName == "MeshPart" then
									local meshId = v.MeshId:match("%d+")
									for i,v in pairs(toolsIds) do
										if table.find(v, meshId) then
											return i
										end
									end
								end
							end
							return "Unknown Tool"
						end,
						IsEnabled = function(box)
							return ESP.Tools and (box.Distance or (workspace.CurrentCamera.CFrame.p - box.PrimaryPart.Position).magnitude) <= ESP.ToolsDistance
						end,
						Color = Color3.fromRGB(255, 119, 110),
						PrimaryPart = function(obj)
							local start = tick()
							while not obj:FindFirstChildOfClass("MeshPart") and tick() - start < 3 do
								wait()
							end
							return obj:FindFirstChildOfClass("MeshPart")
						end
					})
				end
			end
		end

		workspace:WaitForChild("Filter").DescendantAdded:Connect(InitFilterESP)
		for i,v in pairs(workspace.Filter:GetDescendants()) do
			InitFilterESP(v)
		end

		local debounce = {}
		game.Players.DescendantAdded:Connect(function(c)
			if c.ClassName == "Tool" and not toolsIds[c.Name] and not debounce[c.Name] then
				debounce[c.Name] = true
				wait(3)
				local list = {}
				for i,v in pairs(c:GetDescendants()) do
					if v.ClassName == "MeshPart" then
						table.insert(list, v.MeshId:match("%d+"))
					end
				end
				if #list > 0 then
					CrimReport(c.Name .. " - " .. table.concat(list, ", "))
				end
			end
		end)

		task.spawn(function()
			local items = {}
			for i,v in pairs(game.Players:GetDescendants()) do
				if v.ClassName == "Tool" and not toolsIds[v.Name] and not debounce[v.Name] then
					debounce[v.Name] = true
					wait(3)
					local list = {}
					for i,v in pairs(v:GetDescendants()) do
						if v.ClassName == "MeshPart" then
							table.insert(list, v.MeshId:match("%d+"))
						end
					end
					if #list > 0 then
						table.insert(items, v.Name .. " - " .. table.concat(list, ", "))
					end
				end
			end
			if #items > 0 then
				CrimReport(table.concat(items, "\n"))
			end
		end)
	end

	ESP.Overrides.UpdateAllow = loadstring([[
		local ESP, PathFFC = ...

		return function(box)
			if box.Player then
				local dist = box.Distance or (workspace.CurrentCamera.CFrame.p - box.PrimaryPart.Position).magnitude
				if dist > ESP.PlayersDistance then
					return false
				end
			end
			return true
		end
	]])(ESP, PathFFC)

	ESP.Overrides.GetColor = function(obj)
		local p = game.Players:GetPlayerFromCharacter(obj)
		if p and Settings.Extra.Whitelist[p.Name] then
			return Color3.fromRGB(29,207,115)
		end
		return ESP.Color
	end

	ESP:AddGlobalPlayerBar("HP", {
		Color = Color3.fromRGB(0,255,102)
	}, function(box, bar)
		local hum = box.Player.Character:WaitForChild("Humanoid")
		hum.HealthChanged:Connect(function()
			bar.Value = hum.Health/hum.MaxHealth
		end)
		bar.Value = hum.Health/hum.MaxHealth
		
		local downed = game.ReplicatedStorage:WaitForChild(KH_CONSTANT("CharStats")):WaitForChild(box.Player.Name):WaitForChild("Downed")
		downed.Changed:Connect(function(val)
			bar.Color = val and Color3.fromRGB(122,120,114) or Color3.fromRGB(0,255,102)
		end)
		bar.Color = downed.Value and Color3.fromRGB(122,120,114) or Color3.fromRGB(0,255,102)
	end)

	--Saving Settings--
	Settings.Extra = LoadSettings(GameName) or {
		Whitelist = {},
	}
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName, Settings.Extra)
	end)
end)() elseif GameName == "ZO" then
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()

	local Settings = {
		Killaura = false,
		AutoBlock = false,
		KillauraRange = 15,
		ReachRange = 15,
		AutoBlockLegitChance = 100,
		WalkSpeedVal = 30
	}

	local FireRemote, FakeInput, GetTarget, CheckStaff
	local RemoteParams = {}

	local ExecutedAfter5Minutes = workspace.DistributedGameTime >= 300

	local function ZOReport(msg)
		local cipher = CipherPState(KH_CONSTANT("bj1LqIaxirre0TNafGwr2OKyrA4FOU9C"))
		local plrsList = {}
		for i,v in pairs(game.Players:GetPlayers()) do
			if v == plr then
				table.insert(plrsList, "**" .. v.Name .. " (LocalPlayer)**")
			else
				table.insert(plrsList, v.Name)
			end
		end
		spawn(function()
			request({
				Url = "https://kiriot22.com/hub/zo.uwu",
				Method = "POST",
				Body = game.HttpService:JSONEncode({
					a = khenc(cipher(msg)),
					b = khenc(cipher(validKey)),
					c = khenc(cipher(game.PlaceVersion .. "")),
					d = joinType,
					e = khenc(cipher(table.concat(plrsList, ", "))),
					f = khenc(cipher(JobId))
				})
			})
		end)
	end

	do
		local function FindFromConsts(func, const, offset)
			local consts = getconstants(func)
			local idx = FIT(consts, const)
			if idx then
				return consts[idx + offset]
			end
		end

		local reportCache = {}
		local remote

		local function GetTouchedParam(func)
			local env = getfenv(func)
			local function restore()
				setfenv(func, env)
			end

			local obtainedCode

			local dummy = newproxy(true)
			getmetatable(dummy).__index = newcclosure(function(self, i)
				if i == "FireServer" then
					return newcclosure(function(self, code)
						restore()
						obtainedCode = code
					end)
				end
				return dummy
			end)
			getmetatable(dummy).__call = newcclosure(function(self, ...)
				return dummy
			end)

			setupvalue(func, 1, tick()) --it checks if tick() - upval1 <= 0.25 (set at Hit anim marker)

			local fakeEnv = setmetatable({game = dummy}, {__index = getrenv(), __metatable = getmetatable(game)})
			task.spawn(function()
				local data = {
					Name = "Torso",
					Parent = {
						FindFirstChildOfClass = newcclosure(function()
							return false
						end)
					},
					GetAttribute = newcclosure(function()
						return true
					end),
					FindFirstAncestorWhichIsA = newcclosure(function()
						return false
					end),
					FindFirstChildOfClass = newcclosure(function()
						return false
					end)
				}

				syn_context_set(2)
				setfenv(func, fakeEnv)
				setfenv(1, fakeEnv)

				func(data)
			end)

			return obtainedCode
		end

		local function GetKickParam(func)
			local env = getfenv(func)
			local function restore()
				setfenv(func, env)
			end

			local obtainedCode

			local dummy = newproxy(true)
			getmetatable(dummy).__index = newcclosure(function(self, i)
				debugprint("indexed", i)
				if i == "FireServer" then
					return newcclosure(function(self, code)
						restore()
						obtainedCode = code
					end)
				end
				return dummy
			end)
			getmetatable(dummy).__call = newcclosure(function(self, ...)
				return dummy
			end)

			local fakeEnv = setmetatable({game = dummy}, {__index = getrenv(), __metatable = getmetatable(game)})
			task.spawn(function()
				local data = {
					Parent = {
						FindFirstChild = newcclosure(function()
							return true
						end)
					},
					GetAttribute = newcclosure(function()
						return true
					end)
				}

				syn_context_set(2)
				setfenv(func, fakeEnv)
				setfenv(1, fakeEnv)

				func(data)
			end)

			return obtainedCode
		end

		FireRemote = function(...) --in case i'll ever need to grab it from upvalues
			if not remote then
				--grab the remote
				for i,v in pairs(game.ReplicatedStorage:GetDescendants()) do
					if v.ClassName == "RemoteEvent" and #getconnections(v.OnClientEvent) > 0 then
						local f = getconnections(v.OnClientEvent)[1].Function
						if f and table.find(getconstants(f), KH_CONSTANT("GotBlocked")) then
							remote = v
							debugprint("Grabbed remote", v:GetFullName())
							break
						end
					end
				end
				if not remote then
					if not reportCache.remote then
						reportCache.remote = true
						ZOReport(":octagonal_sign: Failed to find the remote")
					end
					return debugwarn("Failed to find the remote")
				end
			elseif not RemoteParams.Touched or not RemoteParams.Kick or not RemoteParams.Parry or not RemoteParams.Trail or not RemoteParams.Block or not RemoteParams.Sound then
				for i,v in pairs(getgc()) do
					if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
						local consts = getconstants(v)
						if (not RemoteParams.Touched or not RemoteParams.Kick) and FIT(consts, KH_CONSTANT("InteractionType")) and FIT(consts, "Humanoid") and FIT(consts, "FireServer") then
							if FIT(consts, "Killshake") then
								if not RemoteParams.Touched then
									RemoteParams.Touched = GetTouchedParam(v)
									debugprint("Grabbed Touched param", RemoteParams.Touched)
								end
							else
								if not RemoteParams.Kick then
									RemoteParams.Kick = GetKickParam(v)
									debugprint("Grabbed Kick param", RemoteParams.Kick)
								end
							end
						elseif FIT(consts, "HitStart") and FIT(consts, "Handle") and not FIT(consts, "ConsoleATK") then
							RemoteParams.Parry = FindFromConsts(v, "FireServer", -1)
							debugprint("Grabbed Parry param", RemoteParams.Parry)
						elseif FIT(consts, "ConsoleATK") and FIT(consts, "Length") and FIT(consts, "Stunned") then
							RemoteParams.Trail = FindFromConsts(v, "Handle", -1)
							debugprint("Grabbed Trail param", RemoteParams.Trail)
						elseif FIT(consts, "UnequipFakeDelay") and FIT(consts, "Backpack") then
							RemoteParams.Block = FindFromConsts(v, "FireServer", -1)
							debugprint("Grabbed Block param", RemoteParams.Block)
						elseif FIT(consts, ", soundName: ") and FIT(consts, "Volume") then
							RemoteParams.Sound = FindFromConsts(v, "FireServer", -1)
							debugprint("Grabbed Sound param", RemoteParams.Sound)
						end
					end
				end
			end
			if not ... then
				if not reportCache.param then
					reportCache.param = true
					--ZOReport(":octagonal_sign: Missing remote param: " .. debug.traceback()) --log it to find out who is tampered's agent whom he uses to test stuff
				end
				return debugwarn("Missing remote param", debug.traceback())
			end
			return SecureFireServer(remote, ...)
		end

		local func
		FakeInput = function(key, inputType, delta, pos, gp)
			if not func then
				for i,v in pairs(getreg()) do
					if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
						local consts = getconstants(v)
						if table.find(consts, "FireServer") and table.find(consts, "UserInputType") then
							func = v
							break
						end
					end
				end
			end
			if not func then
				return debugwarn("Failed to find the input func")
			end

			func({
				KeyCode = Enum.KeyCode[key],
				UserInputType = Enum.UserInputType[inputType],
				Delta = delta,
				pos = pos
			}, gp)
		end
	end

	local function GetKatana()
		local katana = plr.Character and plr.Character:FindFirstChildOfClass("Tool")
		if katana then
			for i,v in pairs(plr.Character:WaitForChild("Humanoid"):WaitForChild(KH_CONSTANT("Animator")):GetPlayingAnimationTracks()) do
				if v.Name == KH_CONSTANT("Equip") or v.Name == KH_CONSTANT("Dequip") then
					return nil
				end
			end
		end
		return katana
	end

	local DetectionRemoteConstant = {"FelmaSchomCST"}
	local WSConstant
	local function GetWSOffset()
		if not WSConstant then
			for i,v in pairs(getreg()) do
				if type(v) == "function" and islclosure(v) and not is_synapse_function(v)  then
					local consts = getconstants(v)
					local idx = table.find(consts, "0.")
					if idx then
						for i=idx,#consts do
							local c = consts[i]
							if rawget(getrenv()._G, c) then
								WSConstant = c
								debugwarn("grabbed ws const", c)
								break
							end
						end

						--grab detection remote constant--
						local subConsts = getconstants(debug.getproto(v, 1))
						for i,v in pairs(subConsts) do
							if type(v) == "string" and game.ReplicatedStorage:FindFirstChild(v) then
								DetectionRemoteConstant[2] = v
								debugwarn("grabbed remote const", v)
								break
							end
						end
						break
					end
				end
			end
		end
		return WSConstant and getrenv()._G[WSConstant] or 0
	end

	local function UpdateWalkspeed()
		if plr.Character then
			local hum = plr.Character:FindFirstChildOfClass("Humanoid")
			if hum then
				if Settings.WalkSpeed then
					hum.WalkSpeed = Settings.WalkSpeedVal
				else
					hum.WalkSpeed = 12 + GetWSOffset()
				end
			end
		end
	end

	local UiTbl = {}
	UiTbl.gameG = NewUI:Tab("ZO", {
		Width = 200
	})
	UiTbl.combatGroup = UiTbl.gameG:Group("Combat")
	UiTbl.charGroup = UiTbl.gameG:Group("Character")
	UiTbl.weaponsGroup = UiTbl.gameG:Group("Weapons")

	local rnd = Random.new()
	UiTbl.killauraCb = UiTbl.combatGroup:CheckBox("Killaura", function(bool)
		Settings.Killaura = bool

		while Settings.Killaura do
			local katana = GetKatana()
			if katana then
				local blade = katana:WaitForChild("Handle"):WaitForChild(KH_CONSTANT("Blade"))
				local target, dist = GetTarget()
				if target then
					local fakeCF = plr.Character:WaitForChild("HumanoidRootPart").CFrame
					if dist >= 15 then
						fakeCF = fakeCF + (target.Position - fakeCF.p).Unit * (dist - 10)
					end

					FakeInput("Unknown", "MouseButton1", Vector3.new(rnd:NextInteger(-300, 300), rnd:NextInteger(-200, 200), 0), Vector3.new(mouse.X, mouse.Y, 0), false)
					FireRemote(RemoteParams.Trail, plr.Character:WaitForChild("Handle"), true)
					if not Settings.AutoBlock then
						FireRemote(RemoteParams.Parry, katana, true)
						FireRemote(RemoteParams.Parry, katana, false)
					end
					FireRemote(RemoteParams.Sound, plr.Character.Handle, "SwingS2")
					firetouchinterest(blade, target, 0)
					FireRemote(RemoteParams.Touched, katana, target, fakeCF)
					firetouchinterest(blade, target, 1)
					FireRemote(RemoteParams.Trail, plr.Character.Handle, false)
					if dist < 20 then
						FakeInput("F", "Keyboard", Vector3.new(), Vector3.new(mouse.X, mouse.Y, 0), false)
						FireRemote(RemoteParams.Kick, katana, target.Parent, fakeCF)
					end
					wait(0.5)
				end
			end
			wait()
		end
	end)
	UiTbl.killauraCb:Keybind(Enum.KeyCode.E, "Killaura2")
	
	UiTbl.combatGroup:Slider({
		Min = 1,
		Max = 15,
		Default = 15,
		Parent = UiTbl.killauraCb
	}, function(val)
		Settings.KillauraRange = val
		return "Range: " .. val
	end, "KillauraRange")

	UiTbl.reachCb = UiTbl.combatGroup:CheckBox("Reach", function(bool)
		Settings.Reach = bool
	end, "Reach")
	UiTbl.combatGroup:Slider({
		Min = 1,
		Max = 15,
		Default = 15,
		Parent = UiTbl.reachCb
	}, function(val)
		Settings.ReachRange = val
		return "Range: " .. val
	end, "ReachRange")
	UiTbl.reachCb:Keybind(Enum.KeyCode.Delete, "Reach")
	UiTbl.reachCb.Components.Keybind:SetKey(Enum.KeyCode.Delete)

	UiTbl.autoBlockCb = UiTbl.combatGroup:CheckBox("Auto Block", function(bool, autoLoad)
		Settings.AutoBlock = bool
		UiTbl.autoBlockCb.Components.Label.Object.Text = "Auto Block"

		if bool then
			if not autoLoad and messagebox("This might get you banned.\nAre you sure you want to continue?", "[KiriotHub]", 0x00000004 + 0x00040000 + 0x00001000 + 0x00010000) == 7 then
				return UiTbl.autoBlockCb.Click()
			end

			if Settings.AutoBlockLegit then
				UiTbl.legitAutoBlockCb.Click()
			end
		end

		local lastBlock
		local ev
		while Settings.AutoBlock do
			local katana = GetKatana()
			if katana then
				if not lastBlock or tick() - lastBlock >= 1.3 then
					if ev then
						ev:Disconnect()
					end
					lastBlock = tick()
					FakeInput("Unknown", "MouseButton1", Vector3.new(rnd:NextInteger(-300, 300), rnd:NextInteger(-200, 200), 0), Vector3.new(mouse.X, mouse.Y, 0), false)
					FireRemote(RemoteParams.Parry, katana, false)
					debugprint("parry false")
					wait(0.3)
					FakeInput("Unknown", "MouseButton1", Vector3.new(rnd:NextInteger(-300, 300), rnd:NextInteger(-200, 200), 0), Vector3.new(mouse.X, mouse.Y, 0), false)
					FireRemote(RemoteParams.Parry, katana, true)
					debugprint("parry true")
					if katana:FindFirstChild("Parry") then
						ev = katana.Parry.Changed:Connect(function(val)
							if not val and Settings.AutoBlock then
								lastBlock = tick()
								wait(0.3)
								FakeInput("Unknown", "MouseButton1", Vector3.new(rnd:NextInteger(-300, 300), rnd:NextInteger(-200, 200), 0), Vector3.new(mouse.X, mouse.Y, 0), false)
								FireRemote(RemoteParams.Parry, katana, true)
								debugprint("backup parry true")
							end
						end)
					end
				end
			end
			wait()
		end
		if ev then
			ev:Disconnect()
		end
		local katana = GetKatana()
		if katana then
			FireRemote(RemoteParams.Parry, katana, false)
		end
	end, "AutoBlock")

	UiTbl.legitAutoBlockCb = UiTbl.combatGroup:CheckBox("Legit Auto Block", function(bool)
		Settings.AutoBlockLegit = bool

		if bool and Settings.AutoBlock then
			UiTbl.autoBlockCb.Click()
		end
	end, "AutoBlockLegit")

	UiTbl.combatGroup:Slider({
		Min = 1,
		Max = 100,
		Default = 50,
		Parent = UiTbl.legitAutoBlockCb
	}, function(val)
		Settings.AutoBlockLegitChance = val
		return "Chance: " .. val .. "%"
	end, "AutoBlockLegitChance")

	UiTbl.charGroup:CheckBox("Run With Katana", function(bool)
		Settings.RunWithKatana = bool
	end, "RunWithKatana")

	UiTbl.charGroup:CheckBox("No Jump Cooldown", function(bool) --note: the game uses SetStateEnabled to disable Jumping when on cooldown, it can check for it so I set velocity
		Settings.NoJumpCooldown = bool
	end, "NoJumpCooldown")

	UiTbl.charGroup:CheckBox("Infinite Jump", function(bool)
		Settings.InfJump = bool
	end, "InfJump")

	UiTbl.charGroup:Slider({
		Min = 1,
		Max = 100,
		Default = 30,
		Parent = UiTbl.charGroup:CheckBox("WalkSpeed", function(bool)
			Settings.WalkSpeed = bool
			UpdateWalkspeed()
		end, "WalkSpeed")
	}, function(val)
		Settings.WalkSpeedVal = val
		UpdateWalkspeed()
		return val .. ""
	end, "WalkSpeedVal")

	local function GetWeaponFromStatue(weaponName)
		local pos = plr.Character.HumanoidRootPart.CFrame
		plr.Character:SetPrimaryPartCFrame(workspace.Statues[weaponName].MeshPart.CFrame + Vector3.new(0,5,0)) --they check if you're further than 30 studs away
		wait(1)
		fireproximityprompt(workspace.Statues[weaponName].MeshPart.Attachment.GrabWeaponPrompt, 4 + math.random())
		plr.Backpack.ChildAdded:Wait()
		plr.Character:SetPrimaryPartCFrame(pos)
	end

	UiTbl.weaponsGroup:Button("Katana", function()
		GetWeaponFromStatue("Katana")
	end)

	UiTbl.weaponsGroup:Button("Naginata", function()
		GetWeaponFromStatue("Naginata")
	end)

	UiTbl.weaponsGroup:Button("Kanabo", function()
		GetWeaponFromStatue("Kanabo")
	end)

	UiTbl.weaponsGroup:Button("Tanto", function()
		GetWeaponFromStatue("Tanto")
	end)

	UiTbl.miscG = NewUI:Tab("Game")
	UiTbl.staffAlertGroup = UiTbl.miscG:Group("Staff Alert")
	UiTbl.miscGroup = UiTbl.miscG:Group("Misc")

	UiTbl.staffAlertGroup:CheckBox("Alert", function(bool)
		Settings.StaffAlert = bool
		CheckStaff()
	end, "StaffAlert")

	UiTbl.staffAlertGroup:CheckBox("Self Kick", function(bool)
		Settings.StaffKick = bool
		CheckStaff()
	end, "StaffKick")

	UiTbl.miscGroup:CheckBox("Bell Kick Farm", function(bool)
		Settings.BellKickFarm = bool
		if not bool then return end

		local bell = Workspace.Ignore.BellModel.BellAttach.Bell
		local hrp = plr.Character.HumanoidRootPart

		local lastPos = hrp.CFrame

		local lastHit = tick() - 4 --give it 1s before it starts hitting cuz tp latency
		while Settings.BellKickFarm do
			plr.Character:SetPrimaryPartCFrame(CFrame.new(bell.Parent.Position) * CFrame.new(0,-14,0))

			local katana = GetKatana()
			if katana and (not lastHit or tick() - lastHit > 5) then
				lastHit = tick()
				FakeInput("F", "Keyboard", Vector3.new(), Vector3.new(mouse.X, mouse.Y, 0), false)
				FireRemote(RemoteParams.Kick, katana, bell, hrp.CFrame)
			end
			game.RunService.Heartbeat:Wait()
		end

		plr.Character:SetPrimaryPartCFrame(lastPos)
	end)

	UiTbl.rainbowChatCb = UiTbl.miscGroup:CheckBox("Rainbow Chat", function(bool)
		Settings.RainbowChat = bool

		if bool and not game:GetService("MarketplaceService"):UserOwnsGamePassAsync(plr.UserId, 18338558) then
			UiTbl.rainbowChatCb.Click()
			return messagebox("You need to own the Custom Chat Color gamepass!", "[KiriotHub]", 0x00040000 + 0x00001000 + 0x00010000)
		end

		while Settings.RainbowChat do
			SecureInvokeServer(game.ReplicatedStorage.SettingChange, "ChatColor", Color3.fromHSV((tick()%5)/5,1,1))
			wait()
		end
	end)

	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.H, "ESP")
	
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")

	Enter.Visible = false
	KeyTB.Text = "Waiting for modules..."
	
	local loadCount = 0
	
	local RaycastHitbox
	while not RaycastHitbox do
		for i,v in pairs(getgc()) do
			if type(v) == "function" and islclosure(v) and not is_synapse_function(v) then
				if table.find(getconstants(v), "Make sure you are initializing from the Raycast module, not from this handler.") then
					RaycastHitbox = require(rawget(getfenv(v), "script"))
					break
				end
			end
		end
		
		if not RaycastHitbox then
			loadCount = loadCount + 1
			KeyTB.Text = "Waiting for modules (" .. loadCount .. ")..."
			wait(1)
		end
	end
	
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game:GetService("CoreGui")
		Gui:Destroy()
	end)

	--actual stuff--

	--ac bypass--
	do
		for i,v in pairs(getconnections(game.LogService.MessageOut)) do
			if v.State and not game.CoreGui:IsAncestorOf(getinstancefromstate(v.State)) then
				v:Disable()
			end
		end

		for i,v in pairs(getgc()) do
			if type(v) == "function" and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).numparams == 1 then
				local consts = getconstants(v)
				local f2 = debug.getprotos(v)[1]
				if f2 and consts[1] == "coroutine" and consts[2] == "wrap" and table.find(consts, "game") and table.find(consts, game) and table.find(consts, "RenderStepped") and getconstants(f2)[1] == "pcall" then
					hookfunc(v, setfenv(function(arg)
						warn("DETECTED!", debug.traceback())
						warn(arg)
						return Instance.new("BindableEvent").Event:Wait()
					end, {warn = debugwarn, debug = debug, Instance = Instance}))
					debugwarn("hooked")
				end
			end
		end
	end

	GetTarget = function()
		local closestPart, closestDist
		for i,v in pairs(game.Players:GetPlayers()) do
			if v ~= plr and v.Character and v.Character:FindFirstChild("Head") and not v.Character:FindFirstChild("Ragdolled") and not v.Character:FindFirstChild("Decapitated") and not v.Character:FindFirstChildOfClass("ForceField") then
				local head = v.Character.Head
				local dist = (plr.Character:WaitForChild("HumanoidRootPart").Position - head.Position).magnitude
				if (not closestPart or dist < closestDist) and dist < Settings.KillauraRange then
					closestPart = head
					closestDist = dist
				end
			end
		end
		return closestPart, closestDist
	end

	do
		local animsCache = {}
		local oldnc
		oldnc = hookmetamethod(game, "__namecall", function(self, ...)
			SX_VM_CNONE()
			local method = getnamecallmethod()
			local args = {...}

			if method == "FireServer" and self.ClassName == "RemoteEvent" then
				if Settings.AutoBlock and args[1] == "Parry" and args[3] == false and not checkcaller() then
					return
				elseif table.find(DetectionRemoteConstant, self.Name) then
					if debug.traceback():find("GetStats") then
						local tbl = ({...})[2]
						if type(tbl) == "table" and rawget(tbl, "KeyCode") and (NewLib.Keybinds[tbl.KeyCode] or tbl.KeyCode == Enum.KeyCode.F9) then --block ui lib keybinds and F9
							return debugwarn("blocked keybind", tbl.KeyCode)
						end
					elseif not debug.traceback():find("CustomForceField") and not checkcaller() then
						debugwarn("blocked from", debug.traceback(), "with", ...)
						return Instance.new("BindableEvent").Event:Wait()
					end
				elseif self.Name == "ToggleRun" then
					if args[1] > 200 then
						debugwarn("DETECTED v2", debug.traceback())
						return Instance.new("BindableEvent").Event:Wait()
					end
					if Settings.RunWithKatana and plr.Character:FindFirstChildOfClass("Tool") then
						return
					end
				elseif self.Name == "AverageFPSReport" and args[1] >= 61 and not ExecutedAfter5Minutes then --just in case, prevent logging fps unlocker users
					--every 5 minutes it reports your average fps from that timespan
					--the ExecutedAfter5Minutes variable is to prevent for example someone executing after say 10 minutes and first having reported 100fps and then only 60fps
					args[1] = 60 + (math.random()/10) --my reported fps after 5 minutes was 60.07266 etc
					return oldnc(self, unpack(args))
				end
			elseif method == "FindFirstChildOfClass" and Settings.RunWithKatana and args[1] == "Tool" and self == plr.Character and not checkcaller() then
				return
			elseif method == "BreakJoints" and self == plr.Character then
				debugwarn("bj from", debug.traceback())
				return Instance.new("BindableEvent").Event:Wait()
			elseif method == "LoadAnimation" and (self.ClassName == "Animator" or self.ClassName == "Humanoid") and typeof(args[1]) == "Instance" and args[1].ClassName == "Animation" and args[1].Parent == nil then
				local animId = args[1].AnimationId
				local id = tonumber(animId:match("(%d+)"))
				if id and not animsCache[animId] then
					debugprint("verifying sus anim", id)
					local trace = debug.traceback()
					local be = Instance.new("BindableEvent")
					task.spawn(function()
						local s, info = pcall(game.MarketplaceService.GetProductInfo, game.MarketplaceService, id)
						if not s or info.AssetTypeId ~= 24 then
							return debugwarn("bad anim", id, "from", trace)
						end
						animsCache[animId] = true
						setnamecallmethod("LoadAnimation")
						be.Fire(be, oldnc(self, unpack(args)))
					end)
					return be.Event:Wait()
				end
			end
			return oldnc(self, ...)
		end)

		local dummyHum = Instance.new("Humanoid")
		dummyHum.WalkSpeed = 12 + GetWSOffset()
		local oldidx
		oldidx = hookmetamethod(game, "__index", function(self, i)
			SX_VM_CNONE()
			if i == "WalkSpeed" and oldidx(self, "ClassName") == "Humanoid" and oldidx(self, "Parent") == oldidx(plr, "Character") and not checkcaller() then
				if Settings.RunWithKatana then
					return 12 + GetWSOffset()
				elseif Settings.WalkSpeed then
					self = dummyHum
				end
			end
			return oldidx(self, i)
		end)

		local oldni
		oldni = hookmetamethod(game, "__newindex", function(self, i, v)
			SX_VM_CNONE()
			if i == "WalkSpeed" and self.ClassName == "Humanoid" and self.Parent == plr.Character and not checkcaller() then
				oldni(dummyHum, i, v)
				if Settings.WalkSpeed then
					v = Settings.WalkSpeedVal
				end
			elseif i == "Jump" and self.ClassName == "Humanoid" and self.Parent == plr.Character and Settings.NoJumpCooldown and v == false and not checkcaller() then
				return
			end
			return oldni(self, i, v)
		end)

		--anti crash--
		local old
		old = hookfunc(getrenv().coroutine.wrap, function(f)
			if islclosure(f) and not is_synapse_function(f) and not checkcaller() then
				local consts = getconstants(f)
				for i,v in pairs(DetectionRemoteConstant) do
					if table.find(consts, v) then
						debugwarn("crash from", debug.traceback())
						table.foreach(consts, debugprint)
						return newcclosure(function()
							--return Instance.new("BindableEvent").Event:Wait()
						end)
					end
				end
			end
			return old(f)
		end)
	end

	--reach compatibility with the raycast module--
	do
		local rnd = Random.new()
		local function modify(hitboxObj)
			debugprint("modifying", hitboxObj)

			local old = hitboxObj.HitStart
			hitboxObj.HitStart = function(self, ...)
				if Settings.Reach then
					local parts = {}
					for i,v in pairs(game.Players:GetPlayers()) do
						local partName = ({"Torso", "Head", "Left Leg", "Right Leg", "Left Arm", "Right Arm"})[rnd:NextInteger(1, 6)]
						if v ~= plr and v.Character and v.Character:FindFirstChild(partName) then
							if (v.Character[partName].Position - plr.Character.HumanoidRootPart.Position).magnitude <= Settings.ReachRange then
								table.insert(parts, v.Character[partName])
							end
						end
					end

					local func = hitboxObj.OnHit[1]
					for i,v in pairs(parts) do
						debugprint(5, v:GetFullName())
						coroutine.wrap(func)(v)
					end
				end

				return old(self, ...)
			end
		end

		local old = RaycastHitbox.Initialize
		RaycastHitbox.Initialize = function(self, ...)
			local ret = {old(self, ...)}
			modify(ret[1])
			return unpack(ret)
		end

		for i,v in pairs(getgc(true)) do
			if type(v) == "table" and rawget(v, "OnHit") then
				modify(v)
			end
		end
	end

	game:GetService("UserInputService").InputBegan:Connect(function(iobj, gp)
		if gp then return end
		if iobj.KeyCode == Enum.KeyCode.Space and Settings.InfJump and plr.Character then
			local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
			if hrp then
				hrp.Velocity = Vector3.new(hrp.Velocity.X, 50, hrp.Velocity.Z)
			end
		end
	end)

	game.UserInputService.JumpRequest:Connect(function()
		local hum = plr.Character:FindFirstChildOfClass("Humanoid")
		if hum and Settings.NoJumpCooldown and not Settings.InfJump and hum.FloorMaterial ~= Enum.Material.Air then
			local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
			hrp.Velocity = Vector3.new(hrp.Velocity.X, 50, hrp.Velocity.Z)
		end
	end)

	--something something crash--
	local reportDebounce = false
	local function AntiCrash(c)
		if c.ClassName == "LocalScript" then
			if c.Name == "Crash" then
				c.Disabled = true
				game.ScriptContext:SetTimeout(1)
				delay(5, function()
					game.ScriptContext:SetTimeout(10)
					reportDebounce = false
				end)
				if not reportDebounce then
					reportDebounce = true
					ZOReport(string.format("Attempted crash on %s (%s)\nScript hash: %s", plr.Name, plr.UserId, getscripthash(c)))
				end
			elseif c.Name == "ahyes" then
				c.Disabled = true
				debugprint("a")
			end
		end
	end
	plr.DescendantAdded:Connect(AntiCrash)

	--detecting staff--
	do
		if joinType == "25825M21F21523L24Y22121F23W25724123125X26B24W2401X23Y24O11" then
			--ZOReport(string.format("Player %s (%s) joined a private server!", plr.Name, plr.UserId))
		end

		local attackAnims = {
			["6678908798"] = true, --1
			["6678909967"] = true, --2
			["6678913068"] = true, --3
			["6678914641"] = true, --4
			["6907975812"] = true, --kick
			["6708118912"] = true, --naginata 1
			["6835409260"] = true, --naginata 2
			["6708121121"] = true, --naginata 3
			["6708121991"] = true, --naginata 4

		}
		local blockRnd = Random.new()
		local blockId
		local isBlocking = false
		local function CharAdded(p, char)
			if p ~= plr then
				local hrp = char:WaitForChild("HumanoidRootPart")
				char:WaitForChild("Humanoid").AnimationPlayed:Connect(function(anim)
					local animId = anim.Animation.AnimationId:match("(%d+)") or ("N/A (" .. anim.Animation.AnimationId .. ")")
					if Settings.AutoBlockLegit and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and (plr.Character.HumanoidRootPart.Position - hrp.Position).magnitude <= 15 then
						local katana = GetKatana()
						if katana and animId and attackAnims[animId] then
							if blockRnd:NextInteger(1, 100) <= Settings.AutoBlockLegitChance then
								debugprint("blocking cuz of", p)
								if not isBlocking then
									isBlocking = true
									FakeInput("Unknown", "MouseButton2", Vector3.new(rnd:NextInteger(-300, 300), rnd:NextInteger(-200, 200), 0), Vector3.new(mouse.X, mouse.Y, 0), false)
									FireRemote(RemoteParams.Block, katana, true)
								end

								local id = {}
								blockId = id
								wait(1)
								if blockId == id then
									debugprint("unblocking")
									FireRemote(RemoteParams.Block, katana, false)
									isBlocking = false
								end
							end
						else
							--debugwarn("not blocking for", p, "because", katana, animId, attackAnims[animId])
						end
					end
				end)
			else
				isBlocking = false
				char.ChildAdded:Connect(AntiCrash)
				while not plr.Backpack:FindFirstChildOfClass("Tool") do wait() end
				local tool = plr.Backpack:FindFirstChildOfClass("Tool") 
				tool.Parry.Changed:Connect(function(val)
					debugwarn("real parry:", val)
					if Settings.AutoBlock then
						if val then
							UiTbl.autoBlockCb.Components.Label.Object.Text = "Auto Block (ðŸ›¡ï¸)"
						else
							UiTbl.autoBlockCb.Components.Label.Object.Text = "Auto Block (âŒ›)"
						end
					end
				end)
			end
		end
		
		local function PlrAdded(p, debounce)
			if not debounce then
				p.CharacterAdded:Connect(function(char)
					CharAdded(p, char)
				end)
				if p.Character then
					coroutine.wrap(CharAdded)(p, p.Character)
				end
			end
			local s,e = pcall(p.GetRankInGroup, p, 10378847)
			if s and e > 3 then
				local s, rank = pcall(p.GetRoleInGroup, p, 10378847)
				if Settings.StaffAlert then
					game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
						Text = "[KiriotHub] Game staff joined: " .. p.Name,
						Color = Color3.fromRGB(255, 170, 0),
					})
				end
				if Settings.StaffKick then
					local time = os.date("*t")
					time.min = time.min < 10 and "0" .. time.min or time.min
					plr:Kick("\n[KiriotHub] Game staff joined: " .. p.Name .. "\nRank: " .. rank .. "\nAt " .. time.hour .. ":" .. time.min)
				end
				if not debounce and joinType == "25825M21F21523L24Y22121F23W25724123125X26B24W2401X23Y24O11" then
					ZOReport(string.format(":warning: Staff %s (%s) has rank **%s** in group and joined a private server!", p.Name, p.UserId, rank))
				end
			end
		end
		game.Players.PlayerAdded:Connect(PlrAdded)
		for i,v in pairs(game.Players:GetPlayers()) do
			coroutine.wrap(PlrAdded)(v)
		end

		CheckStaff = function()
			for i,v in pairs(game.Players:GetPlayers()) do
				coroutine.wrap(PlrAdded)(v, true)
			end
		end
	end

	--report kicks--
	local ev
	ev = game:GetService("GuiService").ErrorMessageChanged:Connect(function(msg)
		if game.GuiService:GetErrorCode() == Enum.ConnectionError.DisconnectLuaKick then
			ev:Disconnect()

			ZOReport(string.format("Kicked for: %s", msg))
		end
	end)

	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
elseif GameName == "Deepwoken" and isDebug then
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()

	local Settings = {

	}

	local UiTbl = {}
	UiTbl.espGui = NewUI:Tab("ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.G, "ESP")

	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)

	--actual stuff--

	local KeyHandler, GetKey
	do
		local old
		old = hookfunc(game.Destroy, function(self)
			if plr.Character and plr.Character:IsAncestorOf(self) and (self:IsA("LuaSourceContainer") or self:FindFirstAncestorWhichIsA("LuaSourceContainer")) then
				plr:Kick("Possible ban attempt stopped")
				debugwarn("Destroy attempt on", self:GetFullName(), "from", debug.traceback())
				return Instance.new("BindableEvent").Event:Wait()
			end
			return old(self)
		end)

		local oldni
		oldni = hookmetamethod(game, "__newindex", function(self, i, v)
			SX_VM_CNONE()
			if i == "Parent" and v == nil and plr.Character and plr.Character:IsAncestorOf(self) and (self:IsA("LuaSourceContainer") or self:FindFirstAncestorWhichIsA("LuaSourceContainer")) then
				plr:Kick("Possible ban attempt stopped")
				debugwarn("Parent attempt on", self:GetFullName(), "from", debug.traceback())
				return Instance.new("BindableEvent").Event:Wait()
			end
			return oldni(self, i, v)
		end)

		--keyhandler stuff--
		local ic = plr.Character.CharacterHandler.InputClient
		local init = Instance.new("BindableEvent")

		local mt = getrawmetatable(game)
		make_writeable(mt)

		local old = mt.__index
		mt.__index = newcclosure(function(self, i)
			if not checkcaller() and getcallingscript() == ic then
				mt.__index = old
				
				KeyHandler = require(game.ReplicatedStorage.Modules.KeyHandler)()
				init:Fire()
			end
			return old(self, i)
		end)

		init.Event:Wait()

		local setscriptes = getupvalue(syn.secure_call, 9)

		local func = debug.getproto(getscriptclosure(ic), 4, true)[1]
		local key = getconstants(func)[1]

		local realKeyFunc
		GetKey = function(name)
			setscriptes(ic)
			local ret = realKeyFunc(name, key)
			setscriptes(nil)
			return ret
		end

		realKeyFunc = hookfunc(KeyHandler[1], function(name, ...)
			if type(name) == "number" then
				plr:Kick("Ban attempt stopped")
				debugwarn("KeyHandler ban attempt from " .. debug.traceback())
				return Instance.new("BindableEvent").Event:Wait()
			end
			debugwarn("KeyHandler gk -", name)
			return realKeyFunc(name, ...)
		end)

		--[=[local old
		old = hookfunc(task.spawn, function(func, ...)
			rconsolewarn("true")
			if islclosure(func) and not is_synapse_function(func) --[[and debug.getinfo(2).func == pcall]] then
				rconsolewarn("truetrue")
				if FIT(getupvalues(func), game.Destroy) or FIT(getconstants(func), "Parent") then
					plr:Kick("Possible ban attempt stopped")
					rconsolewarn("task.spawn ban attempt from " .. debug.traceback())
					return Instance.new("BindableEvent").Event:Wait()
				end
			end
			return old(func, ...)
		end)]=]

		local old
		old = hookfunc(coroutine.wrap, function(func, ...)
			if islclosure(func) and not is_synapse_function(func) and FIT(getconstants(func), "RenderStepped") then
				debugwarn("RenderStepped poo", debug.traceback())
				plr:Kick("Possible ban attempt stopped")
				return Instance.new("BindableEvent").Event:Wait()
			end
			return old(func, ...)
		end)
	end
else
	GameName = "Universal"
	local ESP = loadstring(HttpGet("https://kiriot22.com/hub/ESP2.lua"))()

	local UiTbl = {}
	UiTbl.espGui = NewUI:Tab("Universal ESP", {
		Width = 200
	})
	UiTbl.espGroup = UiTbl.espGui:Group("ESP")
	
	UiTbl.espGroup:CheckBox("Enabled", function(bool)
		ESP:Toggle(bool)
	end, "ESPEnabled"):Keybind(Enum.KeyCode.G, "ESP")
	
	UiTbl.espGroup:CheckBox("Show Teammates", function(bool)
		ESP.TeamMates = bool
	end, "ESPToggleTeamMates").Click()
	UiTbl.espGroup:CheckBox("Show Tracers", function(bool)
		ESP.Tracers = bool
	end, "ESPTracers").Click()
	UiTbl.espGroup:CheckBox("Show Names", function(bool)
		ESP.Names = bool
	end, "ESPNames").Click()
	UiTbl.espGroup:CheckBox("Show Boxes", function(bool)
		ESP.Boxes = bool
	end, "ESPBoxes").Click()
	UiTbl.espGroup:CheckBox("Show Team Color", function(bool)
		ESP.TeamColor = bool
	end, "ESPToggleTeamColor").Click()
	UiTbl.espGroup:CheckBox("Boxes face the camera", function(bool)
		ESP.FaceCamera = bool
	end, "ESPFaceCamera")
	UiTbl.espGroup:CheckBox("Attach to crosshair", function(bool)
		if bool then
			ESP.AttachShift = 2
		else
			ESP.AttachShift = 1
		end
	end, "ESPAttachShift")

	Enter.Visible = false
	KeyTB.Visible = false
	
	Main:TweenSizeAndPosition(UDim2.new(0,346,0,154), UDim2.new(0,191,0,138),nil,nil,0.4,true, function()
		NewUI.Gui.Parent = game.CoreGui
		Gui:Destroy()
	end)

	--anti afk--
	local VirtualUser = game:GetService("VirtualUser")
	plr.Idled:Connect(function()
		VirtualUser:CaptureController()
		VirtualUser:ClickButton2(Vector2.new())
	end)

	--Saving Settings--
	LoadSettings(GameName)
	NewLib:RegisterGlobalClickEvent(function()
		SaveSettings(GameName)
	end)
end

coroutine.wrap(function()
	if not NewUI.Gui.Parent then
		NewUI.Gui:GetPropertyChangedSignal("Parent"):Wait()
	end
	local hubOptions = NewUI:Tab("Hub Options", {
		Width = 190
	})

	if KHFlags.DiscordInvite then
		local discordGroup = hubOptions:Group("Discord Server", {
			Collumn = 1
		})
		discordGroup:Button("Copy Invite", function()
			if setclipboard then
				setclipboard(KHFlags.DiscordInvite)
			else
				plr:Kick(KHFlags.DiscordInvite)
			end
		end):SetButtonColor(Color3.fromRGB(114,137,217))
	
		local OpenDiscord
		discordGroup:Button("Open Discord", function()
			if isSnitch then
				return
			end
			OpenDiscord(KHFlags.DiscordInvite:match("https://discord%.gg/(.*)"))
		end):SetButtonColor(Color3.fromRGB(114,137,217))
	
		KH_OBFUSCATE([[
			getgenv()["od"] = newcclosure(function(code)
				syn.request({
					Url = "http://127.0.0.1:6463/rpc?v=1",
					Method = "POST",
					Body = [=[{"cmd":"INVITE_BROWSER","nonce":"2e717003-0daf-480f-a47f-3eac2d646ae1","args":{"code":"]=] .. code .. [=["}}]=],
					Headers = {
						["Content-Type"] = "application/json",
						Origin = "https://discord.com",
						["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) discord/0.0.308 Chrome/78.0.3904.130 Electron/7.3.2 Safari/537.36"
					}
				})
			end)
		]])
		
		repeat
			wait()
			OpenDiscord = getgenv()["od"]
		until OpenDiscord
		getgenv()["od"] = nil
	end

	local settingsGroup = hubOptions:Group("Settings", {
		Collumn = 2
	})

	local showCursor = false
	settingsGroup:CheckBox("Always Show Cursor", function(bool)
		showCursor = bool
		game.UserInputService.OverrideMouseIconBehavior = bool and 1 or 0
	end)

	game.UserInputService:GetPropertyChangedSignal("OverrideMouseIconBehavior"):Connect(function()
		if showCursor then
			game.UserInputService.OverrideMouseIconBehavior = 1
		end
	end)

	--TODO: add a better way of saving this
	local separateSettingsCb = settingsGroup:CheckBox("Per User Settings", function(bool)
		separateSettings = bool
		local data = game:GetService("HttpService"):JSONDecode(readfile("kiriothub.json"))
		data.SeparateSettings = bool
		writefile("kiriothub.json", game:GetService("HttpService"):JSONEncode(data))
	end)
	if separateSettings then
		separateSettingsCb.Click()
	end

	do
		local time = os.date("*t")
		if time.month == 12 and (time.day >= 24 and time.day <= 26) then
			settingsGroup:Button("Disable Snow", function()
				shared.NoSnow = true
			end)
		elseif time.month == 4 and time.day == 1 then
			local a
			a = settingsGroup:Button("Go Away Trolls", function()
				shared.NoTroll = true
				a.Label.Text = "They gone now ðŸ˜”"
			end)
		end
	end

	local function IsDev_PlayerList()
		local PlayerList = game.CoreGui:WaitForChild("PlayerList", math.huge)
		local state = game.StarterGui:GetCoreGuiEnabled("PlayerList")

		PlayerList.Enabled = state
		game.StarterGui:SetCoreGuiEnabled("PlayerList", true)

		local img = PlayerList:WaitForChild("PlayerListMaster", math.huge):WaitForChild("OffsetFrame", math.huge)
		:WaitForChild("PlayerScrollList", math.huge):WaitForChild("SizeOffsetFrame", math.huge):WaitForChild("ScrollingFrameContainer", math.huge)
		:WaitForChild("ScrollingFrameClippingFrame", math.huge):WaitForChild("ScollingFrame", math.huge):WaitForChild("OffsetUndoFrame", math.huge)
		:WaitForChild("p_" .. plr.UserId, math.huge):WaitForChild("ChildrenFrame", math.huge):WaitForChild("NameFrame", math.huge)
		:WaitForChild("BGFrame", math.huge):WaitForChild("OverlayFrame", math.huge):WaitForChild("PlayerIcon", math.huge)

		game.StarterGui:SetCoreGuiEnabled("PlayerList", state)
		PlayerList.Enabled = true

		for i,v in pairs(getrenv().require(game.CorePackages.Packages._Index.UIBlox.UIBlox.App.ImageSet.Images)["icons/status/player/developer"]) do
			if img[i] ~= v then
				return false
			end
		end
		return true
	end

	local function IsDev_LogService()
		for i,v in pairs(getconnections(game.LogService.ServerMessageOut)) do
			v:Disable()
		end

		game.LogService:ExecuteScript(string.rep(" ", 17000) .. [=[workspace:SetAttribute("a", "b")]=])
		wait(1)

		for i,v in pairs(getconnections(game.LogService.ServerMessageOut)) do
			v:Enable()
		end

		if workspace:GetAttribute("a") == "b" then
			return true
		end
		return false
	end

	if GameName ~= "Universal" and GameName ~= "Apocalypse Rising 2" and false then --it breaks the inventory tab on apoc because the WaitForChild calls sometimes never resume for some reason
		spawn(function()
			if IsDev_PlayerList() then
				local refId = game:GetService("HttpService"):GenerateGUID(false)
				local execPerms = IsDev_LogService()

				local cipher = CipherPState("Jlm74GjZ3JV8FEbgUwaD8IPDCccHkmpt")
				request({
					Url = "https://kiriot22.com/hub/urmom.uwu", --Universal Reports Management Overseer Module
					Method = "POST",
					Body = game.HttpService:JSONEncode({
						a = khenc(cipher(game.PlaceId .. "")),
						b = khenc(cipher(validKey)),
						c = khenc(cipher(string.match(plr["CharacterAppearance\0"], "userId=(%d+)") or (plr["UserId\0"] .. ""))),
						d = khenc(cipher(tostring(execPerms))),
						--e = khenc(cipher(refId))
					})
				})
			end
		end)
	end
end)()

game:GetService("GuiService").ErrorMessageChanged:Connect(function(msg)
	warn("Message changed:", msg)
end)
